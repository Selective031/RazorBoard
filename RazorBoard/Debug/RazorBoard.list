
RazorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002250  08014ce8  08014ce8  00024ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f38  08016f38  0003044c  2**0
                  CONTENTS
  4 .ARM          00000008  08016f38  08016f38  00026f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f40  08016f40  0003044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f40  08016f40  00026f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f44  08016f44  00026f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000044c  20000000  08016f48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e38  2000044c  08017394  0003044c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003284  08017394  00033284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d41a  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbc  00000000  00000000  0004d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00051558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  00052cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025560  00000000  00000000  00054420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1a9  00000000  00000000  00079980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd169  00000000  00000000  00096b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  00173c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba8  00000000  00000000  00173d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001b48  00000000  00000000  0017b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000044c 	.word	0x2000044c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014ccc 	.word	0x08014ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000450 	.word	0x20000450
 80001cc:	08014ccc 	.word	0x08014ccc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <show_error>:
#include "sram.h"
#include "string.h"
#include "stdio.h"
#include <stdlib.h>

void show_error() {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
 8001012:	af00      	add	r7, sp, #0

	sram_error errors;
	errors = read_error_log();
 8001014:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8001018:	463b      	mov	r3, r7
 800101a:	4618      	mov	r0, r3
 800101c:	f006 faa8 	bl	8007570 <read_error_log>
 8001020:	463b      	mov	r3, r7
 8001022:	4620      	mov	r0, r4
 8001024:	4619      	mov	r1, r3
 8001026:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800102a:	461a      	mov	r2, r3
 800102c:	f00e faf6 	bl	800f61c <memcpy>

	for (int i = 0; i < 20; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8001036:	e016      	b.n	8001066 <show_error+0x5a>

		sprintf(msg, "[%d] %s\r\n", i, errors.elog[i]);
 8001038:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800103c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8001040:	2132      	movs	r1, #50	; 0x32
 8001042:	fb01 f303 	mul.w	r3, r1, r3
 8001046:	4413      	add	r3, r2
 8001048:	3301      	adds	r3, #1
 800104a:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	; 0x7dc
 800104e:	490b      	ldr	r1, [pc, #44]	; (800107c <show_error+0x70>)
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <show_error+0x74>)
 8001052:	f00f f979 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <show_error+0x74>)
 8001058:	f003 f950 	bl	80042fc <Serial_Console>
	for (int i = 0; i < 20; i++) {
 800105c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8001060:	3301      	adds	r3, #1
 8001062:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8001066:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 800106a:	2b13      	cmp	r3, #19
 800106c:	dde4      	ble.n	8001038 <show_error+0x2c>

	}
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	f207 77e4 	addw	r7, r7, #2020	; 0x7e4
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	bf00      	nop
 800107c:	08014ce8 	.word	0x08014ce8
 8001080:	20000a68 	.word	0x20000a68

08001084 <show_config>:

void show_config(sram_settings settings) {
 8001084:	b084      	sub	sp, #16
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
 800108a:	f107 0c08 	add.w	ip, r7, #8
 800108e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	sprintf(msg, "Go Home Direction: %d\r\n", settings.Go_Home_Direction);
 8001092:	7a7b      	ldrb	r3, [r7, #9]
 8001094:	461a      	mov	r2, r3
 8001096:	49b2      	ldr	r1, [pc, #712]	; (8001360 <show_config+0x2dc>)
 8001098:	48b2      	ldr	r0, [pc, #712]	; (8001364 <show_config+0x2e0>)
 800109a:	f00f f955 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800109e:	48b1      	ldr	r0, [pc, #708]	; (8001364 <show_config+0x2e0>)
 80010a0:	f003 f92c 	bl	80042fc <Serial_Console>
	sprintf(msg, "Boundary_Timeout: %d\r\n", settings.Boundary_Timeout);
 80010a4:	7abb      	ldrb	r3, [r7, #10]
 80010a6:	461a      	mov	r2, r3
 80010a8:	49af      	ldr	r1, [pc, #700]	; (8001368 <show_config+0x2e4>)
 80010aa:	48ae      	ldr	r0, [pc, #696]	; (8001364 <show_config+0x2e0>)
 80010ac:	f00f f94c 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80010b0:	48ac      	ldr	r0, [pc, #688]	; (8001364 <show_config+0x2e0>)
 80010b2:	f003 f923 	bl	80042fc <Serial_Console>
	sprintf(msg, "WorkingHourStart: %d\r\n", settings.WorkingHourStart);
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	461a      	mov	r2, r3
 80010ba:	49ac      	ldr	r1, [pc, #688]	; (800136c <show_config+0x2e8>)
 80010bc:	48a9      	ldr	r0, [pc, #676]	; (8001364 <show_config+0x2e0>)
 80010be:	f00f f943 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80010c2:	48a8      	ldr	r0, [pc, #672]	; (8001364 <show_config+0x2e0>)
 80010c4:	f003 f91a 	bl	80042fc <Serial_Console>
	sprintf(msg, "WorkingHourEnd: %d\r\n", settings.WorkingHourEnd);
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	461a      	mov	r2, r3
 80010cc:	49a8      	ldr	r1, [pc, #672]	; (8001370 <show_config+0x2ec>)
 80010ce:	48a5      	ldr	r0, [pc, #660]	; (8001364 <show_config+0x2e0>)
 80010d0:	f00f f93a 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80010d4:	48a3      	ldr	r0, [pc, #652]	; (8001364 <show_config+0x2e0>)
 80010d6:	f003 f911 	bl	80042fc <Serial_Console>
	sprintf(msg, "Overturn_Limit: %d\r\n", settings.Overturn_Limit);
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	461a      	mov	r2, r3
 80010de:	49a5      	ldr	r1, [pc, #660]	; (8001374 <show_config+0x2f0>)
 80010e0:	48a0      	ldr	r0, [pc, #640]	; (8001364 <show_config+0x2e0>)
 80010e2:	f00f f931 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80010e6:	489f      	ldr	r0, [pc, #636]	; (8001364 <show_config+0x2e0>)
 80010e8:	f003 f908 	bl	80042fc <Serial_Console>
	sprintf(msg, "MotorSpeedUpdateFreq: %d\r\n", settings.MotorSpeedUpdateFreq);
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	461a      	mov	r2, r3
 80010f0:	49a1      	ldr	r1, [pc, #644]	; (8001378 <show_config+0x2f4>)
 80010f2:	489c      	ldr	r0, [pc, #624]	; (8001364 <show_config+0x2e0>)
 80010f4:	f00f f928 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80010f8:	489a      	ldr	r0, [pc, #616]	; (8001364 <show_config+0x2e0>)
 80010fa:	f003 f8ff 	bl	80042fc <Serial_Console>
	sprintf(msg, "Outside_Threshold: %d\r\n", settings.Outside_Threshold);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	461a      	mov	r2, r3
 8001102:	499e      	ldr	r1, [pc, #632]	; (800137c <show_config+0x2f8>)
 8001104:	4897      	ldr	r0, [pc, #604]	; (8001364 <show_config+0x2e0>)
 8001106:	f00f f91f 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800110a:	4896      	ldr	r0, [pc, #600]	; (8001364 <show_config+0x2e0>)
 800110c:	f003 f8f6 	bl	80042fc <Serial_Console>
	sprintf(msg, "HoldChargeDetection: %d\r\n", settings.HoldChargeDetection);
 8001110:	8a7b      	ldrh	r3, [r7, #18]
 8001112:	461a      	mov	r2, r3
 8001114:	499a      	ldr	r1, [pc, #616]	; (8001380 <show_config+0x2fc>)
 8001116:	4893      	ldr	r0, [pc, #588]	; (8001364 <show_config+0x2e0>)
 8001118:	f00f f916 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800111c:	4891      	ldr	r0, [pc, #580]	; (8001364 <show_config+0x2e0>)
 800111e:	f003 f8ed 	bl	80042fc <Serial_Console>
	sprintf(msg, "Battery High: %.2f\r\n", settings.Battery_High_Limit);
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa1f 	bl	8000568 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4995      	ldr	r1, [pc, #596]	; (8001384 <show_config+0x300>)
 8001130:	488c      	ldr	r0, [pc, #560]	; (8001364 <show_config+0x2e0>)
 8001132:	f00f f909 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001136:	488b      	ldr	r0, [pc, #556]	; (8001364 <show_config+0x2e0>)
 8001138:	f003 f8e0 	bl	80042fc <Serial_Console>
	sprintf(msg, "Battery Low: %.2f\r\n", settings.Battery_Low_Limit);
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa12 	bl	8000568 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	498f      	ldr	r1, [pc, #572]	; (8001388 <show_config+0x304>)
 800114a:	4886      	ldr	r0, [pc, #536]	; (8001364 <show_config+0x2e0>)
 800114c:	f00f f8fc 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001150:	4884      	ldr	r0, [pc, #528]	; (8001364 <show_config+0x2e0>)
 8001152:	f003 f8d3 	bl	80042fc <Serial_Console>
	sprintf(msg, "Signal IN: %.2f\r\n", settings.Signal_Integrity_IN);
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa05 	bl	8000568 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	498a      	ldr	r1, [pc, #552]	; (800138c <show_config+0x308>)
 8001164:	487f      	ldr	r0, [pc, #508]	; (8001364 <show_config+0x2e0>)
 8001166:	f00f f8ef 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800116a:	487e      	ldr	r0, [pc, #504]	; (8001364 <show_config+0x2e0>)
 800116c:	f003 f8c6 	bl	80042fc <Serial_Console>
	sprintf(msg, "Signal OUT: %.2f\r\n", settings.Signal_Integrity_OUT);
 8001170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9f8 	bl	8000568 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4984      	ldr	r1, [pc, #528]	; (8001390 <show_config+0x30c>)
 800117e:	4879      	ldr	r0, [pc, #484]	; (8001364 <show_config+0x2e0>)
 8001180:	f00f f8e2 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <show_config+0x2e0>)
 8001186:	f003 f8b9 	bl	80042fc <Serial_Console>
	sprintf(msg, "Motor Limit: %.2f\r\n", settings.Motor_Limit);
 800118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9eb 	bl	8000568 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	497f      	ldr	r1, [pc, #508]	; (8001394 <show_config+0x310>)
 8001198:	4872      	ldr	r0, [pc, #456]	; (8001364 <show_config+0x2e0>)
 800119a:	f00f f8d5 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800119e:	4871      	ldr	r0, [pc, #452]	; (8001364 <show_config+0x2e0>)
 80011a0:	f003 f8ac 	bl	80042fc <Serial_Console>
	sprintf(msg, "Cutter Limit: %.2f\r\n", settings.Cutter_Limit);
 80011a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9de 	bl	8000568 <__aeabi_f2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4979      	ldr	r1, [pc, #484]	; (8001398 <show_config+0x314>)
 80011b2:	486c      	ldr	r0, [pc, #432]	; (8001364 <show_config+0x2e0>)
 80011b4:	f00f f8c8 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80011b8:	486a      	ldr	r0, [pc, #424]	; (8001364 <show_config+0x2e0>)
 80011ba:	f003 f89f 	bl	80042fc <Serial_Console>
	sprintf(msg, "Motor Max Limit: %.2f\r\n", settings.Motor_Max_Limit);
 80011be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9d1 	bl	8000568 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4974      	ldr	r1, [pc, #464]	; (800139c <show_config+0x318>)
 80011cc:	4865      	ldr	r0, [pc, #404]	; (8001364 <show_config+0x2e0>)
 80011ce:	f00f f8bb 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80011d2:	4864      	ldr	r0, [pc, #400]	; (8001364 <show_config+0x2e0>)
 80011d4:	f003 f892 	bl	80042fc <Serial_Console>
	sprintf(msg, "Motor Min Limit: %.2f\r\n", settings.Motor_Min_Limit);
 80011d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9c4 	bl	8000568 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	496e      	ldr	r1, [pc, #440]	; (80013a0 <show_config+0x31c>)
 80011e6:	485f      	ldr	r0, [pc, #380]	; (8001364 <show_config+0x2e0>)
 80011e8:	f00f f8ae 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80011ec:	485d      	ldr	r0, [pc, #372]	; (8001364 <show_config+0x2e0>)
 80011ee:	f003 f885 	bl	80042fc <Serial_Console>
	sprintf(msg, "ADC Level: %d\r\n", settings.adcLevel);
 80011f2:	8bfb      	ldrh	r3, [r7, #30]
 80011f4:	461a      	mov	r2, r3
 80011f6:	496b      	ldr	r1, [pc, #428]	; (80013a4 <show_config+0x320>)
 80011f8:	485a      	ldr	r0, [pc, #360]	; (8001364 <show_config+0x2e0>)
 80011fa:	f00f f8a5 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80011fe:	4859      	ldr	r0, [pc, #356]	; (8001364 <show_config+0x2e0>)
 8001200:	f003 f87c 	bl	80042fc <Serial_Console>
	sprintf(msg, "KP: %.4f\r\n", settings.kp);
 8001204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9ae 	bl	8000568 <__aeabi_f2d>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4965      	ldr	r1, [pc, #404]	; (80013a8 <show_config+0x324>)
 8001212:	4854      	ldr	r0, [pc, #336]	; (8001364 <show_config+0x2e0>)
 8001214:	f00f f898 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001218:	4852      	ldr	r0, [pc, #328]	; (8001364 <show_config+0x2e0>)
 800121a:	f003 f86f 	bl	80042fc <Serial_Console>
	sprintf(msg, "KI: %.4f\r\n", settings.ki);
 800121e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f9a1 	bl	8000568 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4960      	ldr	r1, [pc, #384]	; (80013ac <show_config+0x328>)
 800122c:	484d      	ldr	r0, [pc, #308]	; (8001364 <show_config+0x2e0>)
 800122e:	f00f f88b 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001232:	484c      	ldr	r0, [pc, #304]	; (8001364 <show_config+0x2e0>)
 8001234:	f003 f862 	bl	80042fc <Serial_Console>
	sprintf(msg, "KD: %.4f\r\n", settings.kd);
 8001238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f994 	bl	8000568 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	495a      	ldr	r1, [pc, #360]	; (80013b0 <show_config+0x32c>)
 8001246:	4847      	ldr	r0, [pc, #284]	; (8001364 <show_config+0x2e0>)
 8001248:	f00f f87e 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800124c:	4845      	ldr	r0, [pc, #276]	; (8001364 <show_config+0x2e0>)
 800124e:	f003 f855 	bl	80042fc <Serial_Console>
	sprintf(msg, "Magnitude Proximity: %d\r\n", settings.magValue);
 8001252:	8abb      	ldrh	r3, [r7, #20]
 8001254:	461a      	mov	r2, r3
 8001256:	4957      	ldr	r1, [pc, #348]	; (80013b4 <show_config+0x330>)
 8001258:	4842      	ldr	r0, [pc, #264]	; (8001364 <show_config+0x2e0>)
 800125a:	f00f f875 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800125e:	4841      	ldr	r0, [pc, #260]	; (8001364 <show_config+0x2e0>)
 8001260:	f003 f84c 	bl	80042fc <Serial_Console>
	sprintf(msg, "Magnitude Min Proximity: %d\r\n", settings.magMinValue);
 8001264:	8afb      	ldrh	r3, [r7, #22]
 8001266:	461a      	mov	r2, r3
 8001268:	4953      	ldr	r1, [pc, #332]	; (80013b8 <show_config+0x334>)
 800126a:	483e      	ldr	r0, [pc, #248]	; (8001364 <show_config+0x2e0>)
 800126c:	f00f f86c 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001270:	483c      	ldr	r0, [pc, #240]	; (8001364 <show_config+0x2e0>)
 8001272:	f003 f843 	bl	80042fc <Serial_Console>
	sprintf(msg, "Voltage Multiply: %.4f\r\n", settings.voltageMultiply);
 8001276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f975 	bl	8000568 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	494e      	ldr	r1, [pc, #312]	; (80013bc <show_config+0x338>)
 8001284:	4837      	ldr	r0, [pc, #220]	; (8001364 <show_config+0x2e0>)
 8001286:	f00f f85f 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800128a:	4836      	ldr	r0, [pc, #216]	; (8001364 <show_config+0x2e0>)
 800128c:	f003 f836 	bl	80042fc <Serial_Console>
	sprintf(msg, "Proximity Speed: %.2f\r\n", settings.proximitySpeed);
 8001290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f968 	bl	8000568 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4948      	ldr	r1, [pc, #288]	; (80013c0 <show_config+0x33c>)
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <show_config+0x2e0>)
 80012a0:	f00f f852 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80012a4:	482f      	ldr	r0, [pc, #188]	; (8001364 <show_config+0x2e0>)
 80012a6:	f003 f829 	bl	80042fc <Serial_Console>
	sprintf(msg, "Movement Limit: %.2f\r\n", settings.movement);
 80012aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f95b 	bl	8000568 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4943      	ldr	r1, [pc, #268]	; (80013c4 <show_config+0x340>)
 80012b8:	482a      	ldr	r0, [pc, #168]	; (8001364 <show_config+0x2e0>)
 80012ba:	f00f f845 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80012be:	4829      	ldr	r0, [pc, #164]	; (8001364 <show_config+0x2e0>)
 80012c0:	f003 f81c 	bl	80042fc <Serial_Console>
	sprintf(msg, "Motor Max Speed: %d\r\n", settings.motorMaxSpeed);
 80012c4:	8b3b      	ldrh	r3, [r7, #24]
 80012c6:	461a      	mov	r2, r3
 80012c8:	493f      	ldr	r1, [pc, #252]	; (80013c8 <show_config+0x344>)
 80012ca:	4826      	ldr	r0, [pc, #152]	; (8001364 <show_config+0x2e0>)
 80012cc:	f00f f83c 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80012d0:	4824      	ldr	r0, [pc, #144]	; (8001364 <show_config+0x2e0>)
 80012d2:	f003 f813 	bl	80042fc <Serial_Console>
	sprintf(msg, "Motor Min Speed: %d\r\n", settings.motorMinSpeed);
 80012d6:	8b7b      	ldrh	r3, [r7, #26]
 80012d8:	461a      	mov	r2, r3
 80012da:	493c      	ldr	r1, [pc, #240]	; (80013cc <show_config+0x348>)
 80012dc:	4821      	ldr	r0, [pc, #132]	; (8001364 <show_config+0x2e0>)
 80012de:	f00f f833 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <show_config+0x2e0>)
 80012e4:	f003 f80a 	bl	80042fc <Serial_Console>
	sprintf(msg, "Cutter Speed: %d\r\n", settings.cutterSpeed);
 80012e8:	8bbb      	ldrh	r3, [r7, #28]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4938      	ldr	r1, [pc, #224]	; (80013d0 <show_config+0x34c>)
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <show_config+0x2e0>)
 80012f0:	f00f f82a 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <show_config+0x2e0>)
 80012f6:	f003 f801 	bl	80042fc <Serial_Console>
	sprintf(msg, "Movement limit: %d\r\n", settings.move_count_limit);
 80012fa:	7c3b      	ldrb	r3, [r7, #16]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4935      	ldr	r1, [pc, #212]	; (80013d4 <show_config+0x350>)
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <show_config+0x2e0>)
 8001302:	f00f f821 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <show_config+0x2e0>)
 8001308:	f002 fff8 	bl	80042fc <Serial_Console>
	sprintf(msg, "Bumber limit: %d\r\n", settings.bumber_count_limit);
 800130c:	7c7b      	ldrb	r3, [r7, #17]
 800130e:	461a      	mov	r2, r3
 8001310:	4931      	ldr	r1, [pc, #196]	; (80013d8 <show_config+0x354>)
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <show_config+0x2e0>)
 8001314:	f00f f818 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <show_config+0x2e0>)
 800131a:	f002 ffef 	bl	80042fc <Serial_Console>
	sprintf(msg, "Roll Compensation: %.2f\r\n", settings.roll_comp);
 800131e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f921 	bl	8000568 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	492c      	ldr	r1, [pc, #176]	; (80013dc <show_config+0x358>)
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <show_config+0x2e0>)
 800132e:	f00f f80b 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <show_config+0x2e0>)
 8001334:	f002 ffe2 	bl	80042fc <Serial_Console>
	sprintf(msg, "Pitch Compensation: %.2f\r\n", settings.pitch_comp);
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f914 	bl	8000568 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4926      	ldr	r1, [pc, #152]	; (80013e0 <show_config+0x35c>)
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <show_config+0x2e0>)
 8001348:	f00e fffe 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <show_config+0x2e0>)
 800134e:	f002 ffd5 	bl	80042fc <Serial_Console>

}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800135a:	b004      	add	sp, #16
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	08014cf4 	.word	0x08014cf4
 8001364:	20000a68 	.word	0x20000a68
 8001368:	08014d0c 	.word	0x08014d0c
 800136c:	08014d24 	.word	0x08014d24
 8001370:	08014d3c 	.word	0x08014d3c
 8001374:	08014d54 	.word	0x08014d54
 8001378:	08014d6c 	.word	0x08014d6c
 800137c:	08014d88 	.word	0x08014d88
 8001380:	08014da0 	.word	0x08014da0
 8001384:	08014dbc 	.word	0x08014dbc
 8001388:	08014dd4 	.word	0x08014dd4
 800138c:	08014de8 	.word	0x08014de8
 8001390:	08014dfc 	.word	0x08014dfc
 8001394:	08014e10 	.word	0x08014e10
 8001398:	08014e24 	.word	0x08014e24
 800139c:	08014e3c 	.word	0x08014e3c
 80013a0:	08014e54 	.word	0x08014e54
 80013a4:	08014e6c 	.word	0x08014e6c
 80013a8:	08014e7c 	.word	0x08014e7c
 80013ac:	08014e88 	.word	0x08014e88
 80013b0:	08014e94 	.word	0x08014e94
 80013b4:	08014ea0 	.word	0x08014ea0
 80013b8:	08014ebc 	.word	0x08014ebc
 80013bc:	08014edc 	.word	0x08014edc
 80013c0:	08014ef8 	.word	0x08014ef8
 80013c4:	08014f10 	.word	0x08014f10
 80013c8:	08014f28 	.word	0x08014f28
 80013cc:	08014f40 	.word	0x08014f40
 80013d0:	08014f58 	.word	0x08014f58
 80013d4:	08014f6c 	.word	0x08014f6c
 80013d8:	08014f84 	.word	0x08014f84
 80013dc:	08014f98 	.word	0x08014f98
 80013e0:	08014fb4 	.word	0x08014fb4

080013e4 <help>:

void help(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	sprintf(msg, "Available commands:\r\n\r\n");
 80013e8:	49b1      	ldr	r1, [pc, #708]	; (80016b0 <help+0x2cc>)
 80013ea:	48b2      	ldr	r0, [pc, #712]	; (80016b4 <help+0x2d0>)
 80013ec:	f00e ffac 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80013f0:	48b0      	ldr	r0, [pc, #704]	; (80016b4 <help+0x2d0>)
 80013f2:	f002 ff83 	bl	80042fc <Serial_Console>
	sprintf(msg, "HELLO             	- Welcome message\r\n");
 80013f6:	49b0      	ldr	r1, [pc, #704]	; (80016b8 <help+0x2d4>)
 80013f8:	48ae      	ldr	r0, [pc, #696]	; (80016b4 <help+0x2d0>)
 80013fa:	f00e ffa5 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80013fe:	48ad      	ldr	r0, [pc, #692]	; (80016b4 <help+0x2d0>)
 8001400:	f002 ff7c 	bl	80042fc <Serial_Console>
	sprintf(msg, "REBOOT                  - Reboot Razorboard\r\n");
 8001404:	49ad      	ldr	r1, [pc, #692]	; (80016bc <help+0x2d8>)
 8001406:	48ab      	ldr	r0, [pc, #684]	; (80016b4 <help+0x2d0>)
 8001408:	f00e ff9e 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800140c:	48a9      	ldr	r0, [pc, #676]	; (80016b4 <help+0x2d0>)
 800140e:	f002 ff75 	bl	80042fc <Serial_Console>
	sprintf(msg, "DISABLE                 - Disable Razorboard\r\n");
 8001412:	49ab      	ldr	r1, [pc, #684]	; (80016c0 <help+0x2dc>)
 8001414:	48a7      	ldr	r0, [pc, #668]	; (80016b4 <help+0x2d0>)
 8001416:	f00e ff97 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800141a:	48a6      	ldr	r0, [pc, #664]	; (80016b4 <help+0x2d0>)
 800141c:	f002 ff6e 	bl	80042fc <Serial_Console>
	sprintf(msg, "ENABLE                  - Enable Razorboard\r\n");
 8001420:	49a8      	ldr	r1, [pc, #672]	; (80016c4 <help+0x2e0>)
 8001422:	48a4      	ldr	r0, [pc, #656]	; (80016b4 <help+0x2d0>)
 8001424:	f00e ff90 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001428:	48a2      	ldr	r0, [pc, #648]	; (80016b4 <help+0x2d0>)
 800142a:	f002 ff67 	bl	80042fc <Serial_Console>
	sprintf(msg, "VERSION           	- Show version of board\r\n");
 800142e:	49a6      	ldr	r1, [pc, #664]	; (80016c8 <help+0x2e4>)
 8001430:	48a0      	ldr	r0, [pc, #640]	; (80016b4 <help+0x2d0>)
 8001432:	f00e ff89 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001436:	489f      	ldr	r0, [pc, #636]	; (80016b4 <help+0x2d0>)
 8001438:	f002 ff60 	bl	80042fc <Serial_Console>
	sprintf(msg, "DEBUG ON          	- Enable debug messages\r\n");
 800143c:	49a3      	ldr	r1, [pc, #652]	; (80016cc <help+0x2e8>)
 800143e:	489d      	ldr	r0, [pc, #628]	; (80016b4 <help+0x2d0>)
 8001440:	f00e ff82 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001444:	489b      	ldr	r0, [pc, #620]	; (80016b4 <help+0x2d0>)
 8001446:	f002 ff59 	bl	80042fc <Serial_Console>
	sprintf(msg, "DEBUG OFF         	- Disable debug messages\r\n");
 800144a:	49a1      	ldr	r1, [pc, #644]	; (80016d0 <help+0x2ec>)
 800144c:	4899      	ldr	r0, [pc, #612]	; (80016b4 <help+0x2d0>)
 800144e:	f00e ff7b 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001452:	4898      	ldr	r0, [pc, #608]	; (80016b4 <help+0x2d0>)
 8001454:	f002 ff52 	bl	80042fc <Serial_Console>
	sprintf(msg, "VOLTAGE           	- Show current voltage\r\n");
 8001458:	499e      	ldr	r1, [pc, #632]	; (80016d4 <help+0x2f0>)
 800145a:	4896      	ldr	r0, [pc, #600]	; (80016b4 <help+0x2d0>)
 800145c:	f00e ff74 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001460:	4894      	ldr	r0, [pc, #592]	; (80016b4 <help+0x2d0>)
 8001462:	f002 ff4b 	bl	80042fc <Serial_Console>
	sprintf(msg, "UPGRADE           	- Enter bootloader\r\n");
 8001466:	499c      	ldr	r1, [pc, #624]	; (80016d8 <help+0x2f4>)
 8001468:	4892      	ldr	r0, [pc, #584]	; (80016b4 <help+0x2d0>)
 800146a:	f00e ff6d 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800146e:	4891      	ldr	r0, [pc, #580]	; (80016b4 <help+0x2d0>)
 8001470:	f002 ff44 	bl	80042fc <Serial_Console>
	sprintf(msg, "SHOW SIG          	- Show reference BWF signature\r\n");
 8001474:	4999      	ldr	r1, [pc, #612]	; (80016dc <help+0x2f8>)
 8001476:	488f      	ldr	r0, [pc, #572]	; (80016b4 <help+0x2d0>)
 8001478:	f00e ff66 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800147c:	488d      	ldr	r0, [pc, #564]	; (80016b4 <help+0x2d0>)
 800147e:	f002 ff3d 	bl	80042fc <Serial_Console>
	sprintf(msg, "EXPORT SIG          	- Export reference BWF signature as an array\r\n");
 8001482:	4997      	ldr	r1, [pc, #604]	; (80016e0 <help+0x2fc>)
 8001484:	488b      	ldr	r0, [pc, #556]	; (80016b4 <help+0x2d0>)
 8001486:	f00e ff5f 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800148a:	488a      	ldr	r0, [pc, #552]	; (80016b4 <help+0x2d0>)
 800148c:	f002 ff36 	bl	80042fc <Serial_Console>
	sprintf(msg, "RECORD SIG              - Record a new signature\r\n");
 8001490:	4994      	ldr	r1, [pc, #592]	; (80016e4 <help+0x300>)
 8001492:	4888      	ldr	r0, [pc, #544]	; (80016b4 <help+0x2d0>)
 8001494:	f00e ff58 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001498:	4886      	ldr	r0, [pc, #536]	; (80016b4 <help+0x2d0>)
 800149a:	f002 ff2f 	bl	80042fc <Serial_Console>
	sprintf(msg, "TEST LEFT MOTOR   	- Test left motor (M1)\r\n");
 800149e:	4992      	ldr	r1, [pc, #584]	; (80016e8 <help+0x304>)
 80014a0:	4884      	ldr	r0, [pc, #528]	; (80016b4 <help+0x2d0>)
 80014a2:	f00e ff51 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014a6:	4883      	ldr	r0, [pc, #524]	; (80016b4 <help+0x2d0>)
 80014a8:	f002 ff28 	bl	80042fc <Serial_Console>
	sprintf(msg, "TEST RIGHT MOTOR  	- Test right motor (M2)\r\n");
 80014ac:	498f      	ldr	r1, [pc, #572]	; (80016ec <help+0x308>)
 80014ae:	4881      	ldr	r0, [pc, #516]	; (80016b4 <help+0x2d0>)
 80014b0:	f00e ff4a 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014b4:	487f      	ldr	r0, [pc, #508]	; (80016b4 <help+0x2d0>)
 80014b6:	f002 ff21 	bl	80042fc <Serial_Console>
	sprintf(msg, "SHOW CURRENT      	- Show current sensors M1, M2, C1\r\n");
 80014ba:	498d      	ldr	r1, [pc, #564]	; (80016f0 <help+0x30c>)
 80014bc:	487d      	ldr	r0, [pc, #500]	; (80016b4 <help+0x2d0>)
 80014be:	f00e ff43 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014c2:	487c      	ldr	r0, [pc, #496]	; (80016b4 <help+0x2d0>)
 80014c4:	f002 ff1a 	bl	80042fc <Serial_Console>
	sprintf(msg, "STOP MOTORS       	- Stop motors\r\n");
 80014c8:	498a      	ldr	r1, [pc, #552]	; (80016f4 <help+0x310>)
 80014ca:	487a      	ldr	r0, [pc, #488]	; (80016b4 <help+0x2d0>)
 80014cc:	f00e ff3c 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014d0:	4878      	ldr	r0, [pc, #480]	; (80016b4 <help+0x2d0>)
 80014d2:	f002 ff13 	bl	80042fc <Serial_Console>
	sprintf(msg, "RUN MOTORS FORWARD	- Run motors forward\r\n");
 80014d6:	4988      	ldr	r1, [pc, #544]	; (80016f8 <help+0x314>)
 80014d8:	4876      	ldr	r0, [pc, #472]	; (80016b4 <help+0x2d0>)
 80014da:	f00e ff35 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014de:	4875      	ldr	r0, [pc, #468]	; (80016b4 <help+0x2d0>)
 80014e0:	f002 ff0c 	bl	80042fc <Serial_Console>
	sprintf(msg, "RUN MOTORS REVERSE	- Run motors backward\r\n");
 80014e4:	4985      	ldr	r1, [pc, #532]	; (80016fc <help+0x318>)
 80014e6:	4873      	ldr	r0, [pc, #460]	; (80016b4 <help+0x2d0>)
 80014e8:	f00e ff2e 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014ec:	4871      	ldr	r0, [pc, #452]	; (80016b4 <help+0x2d0>)
 80014ee:	f002 ff05 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET PROXIMITY SPEED     - Set proximity speed\r\n");
 80014f2:	4983      	ldr	r1, [pc, #524]	; (8001700 <help+0x31c>)
 80014f4:	486f      	ldr	r0, [pc, #444]	; (80016b4 <help+0x2d0>)
 80014f6:	f00e ff27 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80014fa:	486e      	ldr	r0, [pc, #440]	; (80016b4 <help+0x2d0>)
 80014fc:	f002 fefe 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET VOLTAGE MULTIPLY   - Voltage Multiply for calculating voltage\r\n");
 8001500:	4980      	ldr	r1, [pc, #512]	; (8001704 <help+0x320>)
 8001502:	486c      	ldr	r0, [pc, #432]	; (80016b4 <help+0x2d0>)
 8001504:	f00e ff20 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001508:	486a      	ldr	r0, [pc, #424]	; (80016b4 <help+0x2d0>)
 800150a:	f002 fef7 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MOTOR MAX LIMIT     - Set Motor Max Limit in amp\r\n");
 800150e:	497e      	ldr	r1, [pc, #504]	; (8001708 <help+0x324>)
 8001510:	4868      	ldr	r0, [pc, #416]	; (80016b4 <help+0x2d0>)
 8001512:	f00e ff19 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001516:	4867      	ldr	r0, [pc, #412]	; (80016b4 <help+0x2d0>)
 8001518:	f002 fef0 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MOTOR MIN LIMIT     - Set Motor Min Limit in amp\r\n");
 800151c:	497b      	ldr	r1, [pc, #492]	; (800170c <help+0x328>)
 800151e:	4865      	ldr	r0, [pc, #404]	; (80016b4 <help+0x2d0>)
 8001520:	f00e ff12 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001524:	4863      	ldr	r0, [pc, #396]	; (80016b4 <help+0x2d0>)
 8001526:	f002 fee9 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BOUNDARY TIMEOUT    - How many seconds without INSIDE before HALT\r\n");
 800152a:	4979      	ldr	r1, [pc, #484]	; (8001710 <help+0x32c>)
 800152c:	4861      	ldr	r0, [pc, #388]	; (80016b4 <help+0x2d0>)
 800152e:	f00e ff0b 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001532:	4860      	ldr	r0, [pc, #384]	; (80016b4 <help+0x2d0>)
 8001534:	f002 fee2 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET OVERTURN LIMIT      - How many degrees it can tilt before HALT\r\n");
 8001538:	4976      	ldr	r1, [pc, #472]	; (8001714 <help+0x330>)
 800153a:	485e      	ldr	r0, [pc, #376]	; (80016b4 <help+0x2d0>)
 800153c:	f00e ff04 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001540:	485c      	ldr	r0, [pc, #368]	; (80016b4 <help+0x2d0>)
 8001542:	f002 fedb 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET OUTSIDE LIMIT       - How many seconds OUTSIDE before HALT\r\n");
 8001546:	4974      	ldr	r1, [pc, #464]	; (8001718 <help+0x334>)
 8001548:	485a      	ldr	r0, [pc, #360]	; (80016b4 <help+0x2d0>)
 800154a:	f00e fefd 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800154e:	4859      	ldr	r0, [pc, #356]	; (80016b4 <help+0x2d0>)
 8001550:	f002 fed4 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET CHARGE DETECTION    - How many (ms) from detecting charge to STOP\r\n");
 8001554:	4971      	ldr	r1, [pc, #452]	; (800171c <help+0x338>)
 8001556:	4857      	ldr	r0, [pc, #348]	; (80016b4 <help+0x2d0>)
 8001558:	f00e fef6 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800155c:	4855      	ldr	r0, [pc, #340]	; (80016b4 <help+0x2d0>)
 800155e:	f002 fecd 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BAT LOW             - Limit when considering charge needed\r\n");
 8001562:	496f      	ldr	r1, [pc, #444]	; (8001720 <help+0x33c>)
 8001564:	4853      	ldr	r0, [pc, #332]	; (80016b4 <help+0x2d0>)
 8001566:	f00e feef 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800156a:	4852      	ldr	r0, [pc, #328]	; (80016b4 <help+0x2d0>)
 800156c:	f002 fec6 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BAT HIGH            - Limit when considering battery full\r\n");
 8001570:	496c      	ldr	r1, [pc, #432]	; (8001724 <help+0x340>)
 8001572:	4850      	ldr	r0, [pc, #320]	; (80016b4 <help+0x2d0>)
 8001574:	f00e fee8 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001578:	484e      	ldr	r0, [pc, #312]	; (80016b4 <help+0x2d0>)
 800157a:	f002 febf 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BWF OUT             - Limit for considering BWF OUT\r\n");
 800157e:	496a      	ldr	r1, [pc, #424]	; (8001728 <help+0x344>)
 8001580:	484c      	ldr	r0, [pc, #304]	; (80016b4 <help+0x2d0>)
 8001582:	f00e fee1 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001586:	484b      	ldr	r0, [pc, #300]	; (80016b4 <help+0x2d0>)
 8001588:	f002 feb8 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BWF IN              - Limit for considering BWF IN\r\n");
 800158c:	4967      	ldr	r1, [pc, #412]	; (800172c <help+0x348>)
 800158e:	4849      	ldr	r0, [pc, #292]	; (80016b4 <help+0x2d0>)
 8001590:	f00e feda 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001594:	4847      	ldr	r0, [pc, #284]	; (80016b4 <help+0x2d0>)
 8001596:	f002 feb1 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET CUTTER LIMIT        - Set Cutter Motor Limit in Amp\r\n");
 800159a:	4965      	ldr	r1, [pc, #404]	; (8001730 <help+0x34c>)
 800159c:	4845      	ldr	r0, [pc, #276]	; (80016b4 <help+0x2d0>)
 800159e:	f00e fed3 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015a2:	4844      	ldr	r0, [pc, #272]	; (80016b4 <help+0x2d0>)
 80015a4:	f002 feaa 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MOTOR LIMIT         - Set Motor Limit, in multiply, default = 3.0\r\n");
 80015a8:	4962      	ldr	r1, [pc, #392]	; (8001734 <help+0x350>)
 80015aa:	4842      	ldr	r0, [pc, #264]	; (80016b4 <help+0x2d0>)
 80015ac:	f00e fecc 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015b0:	4840      	ldr	r0, [pc, #256]	; (80016b4 <help+0x2d0>)
 80015b2:	f002 fea3 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MOVEMENT LIMIT      - Set Movement Limit for detecting movement\r\n");
 80015b6:	4960      	ldr	r1, [pc, #384]	; (8001738 <help+0x354>)
 80015b8:	483e      	ldr	r0, [pc, #248]	; (80016b4 <help+0x2d0>)
 80015ba:	f00e fec5 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015be:	483d      	ldr	r0, [pc, #244]	; (80016b4 <help+0x2d0>)
 80015c0:	f002 fe9c 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET ADC LEVEL           - Set the ADC level for BWF\r\n");
 80015c4:	495d      	ldr	r1, [pc, #372]	; (800173c <help+0x358>)
 80015c6:	483b      	ldr	r0, [pc, #236]	; (80016b4 <help+0x2d0>)
 80015c8:	f00e febe 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015cc:	4839      	ldr	r0, [pc, #228]	; (80016b4 <help+0x2d0>)
 80015ce:	f002 fe95 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET CUTTER SPEED        - Set speed of cutter motor\r\n");
 80015d2:	495b      	ldr	r1, [pc, #364]	; (8001740 <help+0x35c>)
 80015d4:	4837      	ldr	r0, [pc, #220]	; (80016b4 <help+0x2d0>)
 80015d6:	f00e feb7 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015da:	4836      	ldr	r0, [pc, #216]	; (80016b4 <help+0x2d0>)
 80015dc:	f002 fe8e 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MOVEMENT COUNT LIMIT    - Set limit for movement detection before HALT\r\n");
 80015e0:	4958      	ldr	r1, [pc, #352]	; (8001744 <help+0x360>)
 80015e2:	4834      	ldr	r0, [pc, #208]	; (80016b4 <help+0x2d0>)
 80015e4:	f00e feb0 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015e8:	4832      	ldr	r0, [pc, #200]	; (80016b4 <help+0x2d0>)
 80015ea:	f002 fe87 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET BUMBER COUNT LIMIT  - Set limit for bumber detection before HALT\r\n");
 80015ee:	4956      	ldr	r1, [pc, #344]	; (8001748 <help+0x364>)
 80015f0:	4830      	ldr	r0, [pc, #192]	; (80016b4 <help+0x2d0>)
 80015f2:	f00e fea9 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80015f6:	482f      	ldr	r0, [pc, #188]	; (80016b4 <help+0x2d0>)
 80015f8:	f002 fe80 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET PITCH COMP          - Compensate pitch if not perfectly leveled\r\n");
 80015fc:	4953      	ldr	r1, [pc, #332]	; (800174c <help+0x368>)
 80015fe:	482d      	ldr	r0, [pc, #180]	; (80016b4 <help+0x2d0>)
 8001600:	f00e fea2 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001604:	482b      	ldr	r0, [pc, #172]	; (80016b4 <help+0x2d0>)
 8001606:	f002 fe79 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET ROLL COMP           - Compensate roll if not perfectly leveled\r\n");
 800160a:	4951      	ldr	r1, [pc, #324]	; (8001750 <help+0x36c>)
 800160c:	4829      	ldr	r0, [pc, #164]	; (80016b4 <help+0x2d0>)
 800160e:	f00e fe9b 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <help+0x2d0>)
 8001614:	f002 fe72 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET TIME		- Set current time for RTC\r\n");
 8001618:	494e      	ldr	r1, [pc, #312]	; (8001754 <help+0x370>)
 800161a:	4826      	ldr	r0, [pc, #152]	; (80016b4 <help+0x2d0>)
 800161c:	f00e fe94 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001620:	4824      	ldr	r0, [pc, #144]	; (80016b4 <help+0x2d0>)
 8001622:	f002 fe6b 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET DATE		- Set current date for RTC\r\n");
 8001626:	494c      	ldr	r1, [pc, #304]	; (8001758 <help+0x374>)
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <help+0x2d0>)
 800162a:	f00e fe8d 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800162e:	4821      	ldr	r0, [pc, #132]	; (80016b4 <help+0x2d0>)
 8001630:	f002 fe64 	bl	80042fc <Serial_Console>
	sprintf(msg, "			Date must be set in a special order:\r\n");
 8001634:	4949      	ldr	r1, [pc, #292]	; (800175c <help+0x378>)
 8001636:	481f      	ldr	r0, [pc, #124]	; (80016b4 <help+0x2d0>)
 8001638:	f00e fe86 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800163c:	481d      	ldr	r0, [pc, #116]	; (80016b4 <help+0x2d0>)
 800163e:	f002 fe5d 	bl	80042fc <Serial_Console>
	sprintf(msg, "			Year Month Day Weekday -> 21 3 31 2 (2 = Tuesday)\r\n");
 8001642:	4947      	ldr	r1, [pc, #284]	; (8001760 <help+0x37c>)
 8001644:	481b      	ldr	r0, [pc, #108]	; (80016b4 <help+0x2d0>)
 8001646:	f00e fe7f 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <help+0x2d0>)
 800164c:	f002 fe56 	bl	80042fc <Serial_Console>
	sprintf(msg, "TRACK PERIMETER 	- Track perimeter next time it crosses\r\n");
 8001650:	4944      	ldr	r1, [pc, #272]	; (8001764 <help+0x380>)
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <help+0x2d0>)
 8001654:	f00e fe78 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <help+0x2d0>)
 800165a:	f002 fe4f 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET KP			- PID Controller KP for Perimeter Tracking\r\n");
 800165e:	4942      	ldr	r1, [pc, #264]	; (8001768 <help+0x384>)
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <help+0x2d0>)
 8001662:	f00e fe71 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <help+0x2d0>)
 8001668:	f002 fe48 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET KI			- PID Controller KI for Perimeter Tracking\r\n");
 800166c:	493f      	ldr	r1, [pc, #252]	; (800176c <help+0x388>)
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <help+0x2d0>)
 8001670:	f00e fe6a 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <help+0x2d0>)
 8001676:	f002 fe41 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET KD			- PID Controller KD for Perimeter Tracking\r\n");
 800167a:	493d      	ldr	r1, [pc, #244]	; (8001770 <help+0x38c>)
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <help+0x2d0>)
 800167e:	f00e fe63 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <help+0x2d0>)
 8001684:	f002 fe3a 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MAG VALUE     - Set Magnitude value for BWF proximity\r\n");
 8001688:	493a      	ldr	r1, [pc, #232]	; (8001774 <help+0x390>)
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <help+0x2d0>)
 800168c:	f00e fe5c 	bl	8010348 <siprintf>
	Serial_Console(msg);
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <help+0x2d0>)
 8001692:	f002 fe33 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET MAGMIN VALUE     - Set Magnitude Min value for BWF proximity\r\n");
 8001696:	4938      	ldr	r1, [pc, #224]	; (8001778 <help+0x394>)
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <help+0x2d0>)
 800169a:	f00e fe55 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <help+0x2d0>)
 80016a0:	f002 fe2c 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET WORKING START	- Set Working Hour START\r\n");
 80016a4:	4935      	ldr	r1, [pc, #212]	; (800177c <help+0x398>)
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <help+0x2d0>)
 80016a8:	f00e fe4e 	bl	8010348 <siprintf>
 80016ac:	e068      	b.n	8001780 <help+0x39c>
 80016ae:	bf00      	nop
 80016b0:	08014fd0 	.word	0x08014fd0
 80016b4:	20000a68 	.word	0x20000a68
 80016b8:	08014fe8 	.word	0x08014fe8
 80016bc:	08015010 	.word	0x08015010
 80016c0:	08015040 	.word	0x08015040
 80016c4:	08015070 	.word	0x08015070
 80016c8:	080150a0 	.word	0x080150a0
 80016cc:	080150d0 	.word	0x080150d0
 80016d0:	08015100 	.word	0x08015100
 80016d4:	08015130 	.word	0x08015130
 80016d8:	0801515c 	.word	0x0801515c
 80016dc:	08015184 	.word	0x08015184
 80016e0:	080151b8 	.word	0x080151b8
 80016e4:	080151fc 	.word	0x080151fc
 80016e8:	08015230 	.word	0x08015230
 80016ec:	0801525c 	.word	0x0801525c
 80016f0:	0801528c 	.word	0x0801528c
 80016f4:	080152c4 	.word	0x080152c4
 80016f8:	080152e8 	.word	0x080152e8
 80016fc:	08015314 	.word	0x08015314
 8001700:	08015340 	.word	0x08015340
 8001704:	08015370 	.word	0x08015370
 8001708:	080153b4 	.word	0x080153b4
 800170c:	080153ec 	.word	0x080153ec
 8001710:	08015424 	.word	0x08015424
 8001714:	0801546c 	.word	0x0801546c
 8001718:	080154b4 	.word	0x080154b4
 800171c:	080154f8 	.word	0x080154f8
 8001720:	08015540 	.word	0x08015540
 8001724:	08015584 	.word	0x08015584
 8001728:	080155c4 	.word	0x080155c4
 800172c:	08015600 	.word	0x08015600
 8001730:	0801563c 	.word	0x0801563c
 8001734:	08015678 	.word	0x08015678
 8001738:	080156c0 	.word	0x080156c0
 800173c:	08015708 	.word	0x08015708
 8001740:	08015740 	.word	0x08015740
 8001744:	08015778 	.word	0x08015778
 8001748:	080157c8 	.word	0x080157c8
 800174c:	08015810 	.word	0x08015810
 8001750:	08015858 	.word	0x08015858
 8001754:	080158a0 	.word	0x080158a0
 8001758:	080158c8 	.word	0x080158c8
 800175c:	080158f0 	.word	0x080158f0
 8001760:	0801591c 	.word	0x0801591c
 8001764:	08015954 	.word	0x08015954
 8001768:	08015990 	.word	0x08015990
 800176c:	080159c8 	.word	0x080159c8
 8001770:	08015a00 	.word	0x08015a00
 8001774:	08015a38 	.word	0x08015a38
 8001778:	08015a74 	.word	0x08015a74
 800177c:	08015ab8 	.word	0x08015ab8
	Serial_Console(msg);
 8001780:	4815      	ldr	r0, [pc, #84]	; (80017d8 <help+0x3f4>)
 8001782:	f002 fdbb 	bl	80042fc <Serial_Console>
	sprintf(msg, "SET WORKING END	- Set Working Hour END\r\n");
 8001786:	4915      	ldr	r1, [pc, #84]	; (80017dc <help+0x3f8>)
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <help+0x3f4>)
 800178a:	f00e fddd 	bl	8010348 <siprintf>
	Serial_Console(msg);
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <help+0x3f4>)
 8001790:	f002 fdb4 	bl	80042fc <Serial_Console>
	Serial_Console("\r\n");
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <help+0x3fc>)
 8001796:	f002 fdb1 	bl	80042fc <Serial_Console>
	sprintf(msg, "LOAD CONFIG        - Load config from SRAM\r\n");
 800179a:	4912      	ldr	r1, [pc, #72]	; (80017e4 <help+0x400>)
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <help+0x3f4>)
 800179e:	f00e fdd3 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <help+0x3f4>)
 80017a4:	f002 fdaa 	bl	80042fc <Serial_Console>
	sprintf(msg, "SAVE CONFIG        - Save config to SRAM\r\n");
 80017a8:	490f      	ldr	r1, [pc, #60]	; (80017e8 <help+0x404>)
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <help+0x3f4>)
 80017ac:	f00e fdcc 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <help+0x3f4>)
 80017b2:	f002 fda3 	bl	80042fc <Serial_Console>
	sprintf(msg, "SAVE DEFAULT CONFIG     - Save default config to SRAM\r\n");
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <help+0x408>)
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <help+0x3f4>)
 80017ba:	f00e fdc5 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <help+0x3f4>)
 80017c0:	f002 fd9c 	bl	80042fc <Serial_Console>
	sprintf(msg, "SHOW CONFIG        - Show config from SRAM\r\n");
 80017c4:	490a      	ldr	r1, [pc, #40]	; (80017f0 <help+0x40c>)
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <help+0x3f4>)
 80017c8:	f00e fdbe 	bl	8010348 <siprintf>
	Serial_Console(msg);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <help+0x3f4>)
 80017ce:	f002 fd95 	bl	80042fc <Serial_Console>
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000a68 	.word	0x20000a68
 80017dc:	08015ae8 	.word	0x08015ae8
 80017e0:	08015b14 	.word	0x08015b14
 80017e4:	08015b18 	.word	0x08015b18
 80017e8:	08015b48 	.word	0x08015b48
 80017ec:	08015b74 	.word	0x08015b74
 80017f0:	08015bac 	.word	0x08015bac

080017f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SystemReset+0x24>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001806:	4904      	ldr	r1, [pc, #16]	; (8001818 <__NVIC_SystemReset+0x24>)
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_SystemReset+0x28>)
 800180a:	4313      	orrs	r3, r2
 800180c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800180e:	f3bf 8f4f 	dsb	sy
}
 8001812:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <__NVIC_SystemReset+0x20>
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	05fa0004 	.word	0x05fa0004

08001820 <reInitIMU>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void reInitIMU(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0

	// If the I2C bus hangs, this will clear the deadlock and re-init the MPU

	add_error_event("reInit IMU");
 8001826:	4821      	ldr	r0, [pc, #132]	; (80018ac <reInitIMU+0x8c>)
 8001828:	f005 fe10 	bl	800744c <add_error_event>
	Serial_Console("reInit IMU\r\n");
 800182c:	4820      	ldr	r0, [pc, #128]	; (80018b0 <reInitIMU+0x90>)
 800182e:	f002 fd65 	bl	80042fc <Serial_Console>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
	HAL_I2C_DeInit(&hi2c1);
 8001840:	481c      	ldr	r0, [pc, #112]	; (80018b4 <reInitIMU+0x94>)
 8001842:	f008 fdc7 	bl	800a3d4 <HAL_I2C_DeInit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <reInitIMU+0x98>)
 800184e:	f008 fc63 	bl	800a118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001858:	4817      	ldr	r0, [pc, #92]	; (80018b8 <reInitIMU+0x98>)
 800185a:	f008 fc5d 	bl	800a118 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001868:	2302      	movs	r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4810      	ldr	r0, [pc, #64]	; (80018b8 <reInitIMU+0x98>)
 8001876:	f008 f99f 	bl	8009bb8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800187a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001884:	2302      	movs	r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <reInitIMU+0x98>)
 8001892:	f008 f991 	bl	8009bb8 <HAL_GPIO_Init>
	HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f006 fefa 	bl	8008690 <HAL_Delay>
	MX_I2C1_Init();
 800189c:	f004 fc1c 	bl	80060d8 <MX_I2C1_Init>
	Init6050();
 80018a0:	f004 ffe6 	bl	8006870 <Init6050>
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08015bdc 	.word	0x08015bdc
 80018b0:	08015be8 	.word	0x08015be8
 80018b4:	20000d60 	.word	0x20000d60
 80018b8:	40020400 	.word	0x40020400

080018bc <CalcMagnitude>:

void CalcMagnitude(uint8_t Sensor) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4602      	mov	r2, r0
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	701a      	strb	r2, [r3, #0]
	float32_t Mag_Out[LENGTH_SAMPLES / 2];
	float32_t sum = 0;
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	float32_t magValue;

	if (Sensor == 1) {
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <CalcMagnitude+0x2e>
		arm_cmplx_mag_f32(BWF1, Mag_Out, LENGTH_SAMPLES / 2);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	4619      	mov	r1, r3
 80018e2:	4897      	ldr	r0, [pc, #604]	; (8001b40 <CalcMagnitude+0x284>)
 80018e4:	f00d fd88 	bl	800f3f8 <arm_cmplx_mag_f32>
 80018e8:	e00a      	b.n	8001900 <CalcMagnitude+0x44>
	}
	else if (Sensor == 2) {
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d106      	bne.n	8001900 <CalcMagnitude+0x44>
		arm_cmplx_mag_f32(BWF2, Mag_Out, LENGTH_SAMPLES / 2);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	4619      	mov	r1, r3
 80018fa:	4892      	ldr	r0, [pc, #584]	; (8001b44 <CalcMagnitude+0x288>)
 80018fc:	f00d fd7c 	bl	800f3f8 <arm_cmplx_mag_f32>
	}

	  for (int y = 0; y < LENGTH_SAMPLES / 2; y++) {
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001906:	e012      	b.n	800192e <CalcMagnitude+0x72>
		  sum += Mag_Out[y];
 8001908:	f107 020c 	add.w	r2, r7, #12
 800190c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ed97 7a87 	vldr	s14, [r7, #540]	; 0x21c
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
	  for (int y = 0; y < LENGTH_SAMPLES / 2; y++) {
 8001924:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001928:	3301      	adds	r3, #1
 800192a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800192e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001932:	2b7f      	cmp	r3, #127	; 0x7f
 8001934:	dde8      	ble.n	8001908 <CalcMagnitude+0x4c>
 8001936:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800193a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001946:	edd7 7a84 	vldr	s15, [r7, #528]	; 0x210
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	db0a      	blt.n	800196a <CalcMagnitude+0xae>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001954:	ed97 0a84 	vldr	s0, [r7, #528]	; 0x210
 8001958:	f012 ff18 	bl	801478c <sqrtf>
 800195c:	eef0 7a40 	vmov.f32	s15, s0
 8001960:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001964:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001968:	e005      	b.n	8001976 <CalcMagnitude+0xba>
    }
    else
    {
      *pOut = 0.0f;
 800196a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001974:	bf00      	nop
	  }
	  arm_sqrt_f32(sum, &magValue);

	  if (Sensor == 1) magBWF1 = round(magValue);
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d116      	bne.n	80019ac <CalcMagnitude+0xf0>
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdef 	bl	8000568 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ec43 2b10 	vmov	d0, r2, r3
 8001992:	f012 feb3 	bl	80146fc <round>
 8001996:	ec53 2b10 	vmov	r2, r3, d0
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f913 	bl	8000bc8 <__aeabi_d2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <CalcMagnitude+0x28c>)
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e019      	b.n	80019e0 <CalcMagnitude+0x124>
	  else if (Sensor == 2) magBWF2 = round(magValue);
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d115      	bne.n	80019e0 <CalcMagnitude+0x124>
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdd4 	bl	8000568 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	ec43 2b10 	vmov	d0, r2, r3
 80019c8:	f012 fe98 	bl	80146fc <round>
 80019cc:	ec53 2b10 	vmov	r2, r3, d0
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8f8 	bl	8000bc8 <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <CalcMagnitude+0x290>)
 80019de:	801a      	strh	r2, [r3, #0]

	  if (magBWF1 >= settings.magValue || magBWF2 >= settings.magValue) {
 80019e0:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <CalcMagnitude+0x294>)
 80019e2:	899a      	ldrh	r2, [r3, #12]
 80019e4:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <CalcMagnitude+0x28c>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d905      	bls.n	80019f8 <CalcMagnitude+0x13c>
 80019ec:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <CalcMagnitude+0x294>)
 80019ee:	899a      	ldrh	r2, [r3, #12]
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <CalcMagnitude+0x290>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d81e      	bhi.n	8001a36 <CalcMagnitude+0x17a>
		  if (mag_near_bwf == 0) {
 80019f8:	4b56      	ldr	r3, [pc, #344]	; (8001b54 <CalcMagnitude+0x298>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d114      	bne.n	8001a2a <CalcMagnitude+0x16e>
			  mag_near_bwf = 1;
 8001a00:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <CalcMagnitude+0x298>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
			  highgrass_slowdown = 0;
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <CalcMagnitude+0x29c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
			  sprintf(emsg, "proximity alert BWF1: %d BWF2: %d", magBWF1, magBWF2);
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <CalcMagnitude+0x28c>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <CalcMagnitude+0x290>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	4951      	ldr	r1, [pc, #324]	; (8001b5c <CalcMagnitude+0x2a0>)
 8001a18:	4851      	ldr	r0, [pc, #324]	; (8001b60 <CalcMagnitude+0x2a4>)
 8001a1a:	f00e fc95 	bl	8010348 <siprintf>
			  add_error_event(emsg);
 8001a1e:	4850      	ldr	r0, [pc, #320]	; (8001b60 <CalcMagnitude+0x2a4>)
 8001a20:	f005 fd14 	bl	800744c <add_error_event>
			  Serial_Console("PROXIMITY ALERT!\r\n");
 8001a24:	484f      	ldr	r0, [pc, #316]	; (8001b64 <CalcMagnitude+0x2a8>)
 8001a26:	f002 fc69 	bl	80042fc <Serial_Console>
		  }
		  mag_timer = HAL_GetTick();
 8001a2a:	f006 fe25 	bl	8008678 <HAL_GetTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <CalcMagnitude+0x2ac>)
 8001a32:	6013      	str	r3, [r2, #0]
				  add_error_event(emsg);
				  Serial_Console("PROXIMITY CLEARED!\r\n");
			  }
		  }
	  }
}
 8001a34:	e07f      	b.n	8001b36 <CalcMagnitude+0x27a>
	  else if (magBWF1 <= settings.magMinValue && magBWF2 <= settings.magMinValue) {
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <CalcMagnitude+0x294>)
 8001a38:	89da      	ldrh	r2, [r3, #14]
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <CalcMagnitude+0x28c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d379      	bcc.n	8001b36 <CalcMagnitude+0x27a>
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <CalcMagnitude+0x294>)
 8001a44:	89da      	ldrh	r2, [r3, #14]
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <CalcMagnitude+0x290>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d373      	bcc.n	8001b36 <CalcMagnitude+0x27a>
		  if (mag_near_bwf == 1) {
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <CalcMagnitude+0x298>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d16f      	bne.n	8001b36 <CalcMagnitude+0x27a>
			  if (HAL_GetTick() - mag_timer >= 4000) {
 8001a56:	f006 fe0f 	bl	8008678 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <CalcMagnitude+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001a66:	d366      	bcc.n	8001b36 <CalcMagnitude+0x27a>
				  if (mag_near_bwf == 1) {
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <CalcMagnitude+0x298>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d150      	bne.n	8001b12 <CalcMagnitude+0x256>
					  if (TIM4->CCR2 >= settings.motorMinSpeed || TIM4->CCR3 >= settings.motorMinSpeed) {
 8001a70:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <CalcMagnitude+0x294>)
 8001a76:	8a52      	ldrh	r2, [r2, #18]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d205      	bcs.n	8001a88 <CalcMagnitude+0x1cc>
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	4a33      	ldr	r2, [pc, #204]	; (8001b50 <CalcMagnitude+0x294>)
 8001a82:	8a52      	ldrh	r2, [r2, #18]
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d344      	bcc.n	8001b12 <CalcMagnitude+0x256>
						  for (uint32_t x = (round(TIM4->CCR2 + TIM4->CCR3) / 2); x < settings.motorMaxSpeed; x++) {
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	4413      	add	r3, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd46 	bl	8000524 <__aeabi_ui2d>
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa0:	f7fe fee4 	bl	800086c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f88c 	bl	8000bc8 <__aeabi_d2uiz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001ab6:	e025      	b.n	8001b04 <CalcMagnitude+0x248>
							  if (x < settings.motorMinSpeed || x > settings.motorMaxSpeed) break;
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <CalcMagnitude+0x294>)
 8001aba:	8a5b      	ldrh	r3, [r3, #18]
 8001abc:	461a      	mov	r2, r3
 8001abe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d325      	bcc.n	8001b12 <CalcMagnitude+0x256>
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <CalcMagnitude+0x294>)
 8001ac8:	8a1b      	ldrh	r3, [r3, #16]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d81e      	bhi.n	8001b12 <CalcMagnitude+0x256>
							  TIM4->CCR2 = x;
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001ad6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38
							  TIM4->CCR3 = x;
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <CalcMagnitude+0x2b0>)
 8001ade:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ae2:	63d3      	str	r3, [r2, #60]	; 0x3c
							  HAL_Delay(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f006 fdd3 	bl	8008690 <HAL_Delay>
							  if (CheckSecurity() == SECURITY_FAIL) {
 8001aea:	f002 fc2f 	bl	800434c <CheckSecurity>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <CalcMagnitude+0x23e>
								  MotorStop();
 8001af4:	f003 fce4 	bl	80054c0 <MotorStop>
								  break;
 8001af8:	e00b      	b.n	8001b12 <CalcMagnitude+0x256>
						  for (uint32_t x = (round(TIM4->CCR2 + TIM4->CCR3) / 2); x < settings.motorMaxSpeed; x++) {
 8001afa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001afe:	3301      	adds	r3, #1
 8001b00:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <CalcMagnitude+0x294>)
 8001b06:	8a1b      	ldrh	r3, [r3, #16]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d3d2      	bcc.n	8001ab8 <CalcMagnitude+0x1fc>
				  mag_near_bwf = 0;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <CalcMagnitude+0x298>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
				  sprintf(emsg, "proximity cleared BWF1: %d BWF2: %d", magBWF1, magBWF2);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <CalcMagnitude+0x28c>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <CalcMagnitude+0x290>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	4913      	ldr	r1, [pc, #76]	; (8001b70 <CalcMagnitude+0x2b4>)
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <CalcMagnitude+0x2a4>)
 8001b26:	f00e fc0f 	bl	8010348 <siprintf>
				  add_error_event(emsg);
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <CalcMagnitude+0x2a4>)
 8001b2c:	f005 fc8e 	bl	800744c <add_error_event>
				  Serial_Console("PROXIMITY CLEARED!\r\n");
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <CalcMagnitude+0x2b8>)
 8001b32:	f002 fbe3 	bl	80042fc <Serial_Console>
}
 8001b36:	bf00      	nop
 8001b38:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20002534 	.word	0x20002534
 8001b44:	20000dc4 	.word	0x20000dc4
 8001b48:	20000dc0 	.word	0x20000dc0
 8001b4c:	20000c20 	.word	0x20000c20
 8001b50:	20000cc0 	.word	0x20000cc0
 8001b54:	2000099a 	.word	0x2000099a
 8001b58:	200009b0 	.word	0x200009b0
 8001b5c:	08015bf8 	.word	0x08015bf8
 8001b60:	20000ae8 	.word	0x20000ae8
 8001b64:	08015c1c 	.word	0x08015c1c
 8001b68:	2000099c 	.word	0x2000099c
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	08015c30 	.word	0x08015c30
 8001b74:	08015c54 	.word	0x08015c54

08001b78 <TimeToGoHome>:

void TimeToGoHome(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0

	// Get Time and check if we should go home

	RTC_TimeTypeDef currTime = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef currDate = {0};
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <TimeToGoHome+0x5c>)
 8001b98:	f00a ff7d 	bl	800ca96 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <TimeToGoHome+0x5c>)
 8001ba4:	f00b f87c 	bl	800cca0 <HAL_RTC_GetDate>

	if (currTime.Hours >= settings.WorkingHourEnd) {
 8001ba8:	793a      	ldrb	r2, [r7, #4]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <TimeToGoHome+0x60>)
 8001bac:	791b      	ldrb	r3, [r3, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d30b      	bcc.n	8001bca <TimeToGoHome+0x52>
		sprintf(emsg, "tracking enabled %d", currTime.Hours);
 8001bb2:	793b      	ldrb	r3, [r7, #4]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4909      	ldr	r1, [pc, #36]	; (8001bdc <TimeToGoHome+0x64>)
 8001bb8:	4809      	ldr	r0, [pc, #36]	; (8001be0 <TimeToGoHome+0x68>)
 8001bba:	f00e fbc5 	bl	8010348 <siprintf>
		add_error_event(emsg);
 8001bbe:	4808      	ldr	r0, [pc, #32]	; (8001be0 <TimeToGoHome+0x68>)
 8001bc0:	f005 fc44 	bl	800744c <add_error_event>
		perimeterTracking = 1;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <TimeToGoHome+0x6c>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
	}

}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20002420 	.word	0x20002420
 8001bd8:	20000cc0 	.word	0x20000cc0
 8001bdc:	08015c6c 	.word	0x08015c6c
 8001be0:	20000ae8 	.word	0x20000ae8
 8001be4:	2000092c 	.word	0x2000092c

08001be8 <setTime>:

void setTime(uint8_t hour, uint8_t minute, uint8_t second) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	71bb      	strb	r3, [r7, #6]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	717b      	strb	r3, [r7, #5]

	RTC_TimeTypeDef sTime = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]

	sTime.Hours = RTC_ByteToBcd2(hour);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00b f8ea 	bl	800cde6 <RTC_ByteToBcd2>
 8001c12:	4603      	mov	r3, r0
 8001c14:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = RTC_ByteToBcd2(minute);
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00b f8e4 	bl	800cde6 <RTC_ByteToBcd2>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = RTC_ByteToBcd2(second);
 8001c22:	797b      	ldrb	r3, [r7, #5]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00b f8de 	bl	800cde6 <RTC_ByteToBcd2>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8001c32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c36:	61fb      	str	r3, [r7, #28]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <setTime+0x68>)
 8001c42:	f00a fe6b 	bl	800c91c <HAL_RTC_SetTime>

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20002420 	.word	0x20002420

08001c54 <setDate>:

void setDate(uint8_t year, uint8_t month, uint8_t day, uint8_t weekday) {
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4608      	mov	r0, r1
 8001c5e:	4611      	mov	r1, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	4623      	mov	r3, r4
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	4603      	mov	r3, r0
 8001c68:	71bb      	strb	r3, [r7, #6]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	717b      	strb	r3, [r7, #5]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	713b      	strb	r3, [r7, #4]

	RTC_DateTypeDef sDate = {0};
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]

	sDate.WeekDay = RTC_ByteToBcd2(weekday);
 8001c76:	793b      	ldrb	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00b f8b4 	bl	800cde6 <RTC_ByteToBcd2>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	733b      	strb	r3, [r7, #12]
	sDate.Month = RTC_ByteToBcd2(month);
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00b f8ae 	bl	800cde6 <RTC_ByteToBcd2>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	737b      	strb	r3, [r7, #13]
	sDate.Date = RTC_ByteToBcd2(day);
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00b f8a8 	bl	800cde6 <RTC_ByteToBcd2>
 8001c96:	4603      	mov	r3, r0
 8001c98:	73bb      	strb	r3, [r7, #14]
	sDate.Year = RTC_ByteToBcd2(year);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00b f8a2 	bl	800cde6 <RTC_ByteToBcd2>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2201      	movs	r2, #1
 8001cac:	4619      	mov	r1, r3
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <setDate+0x68>)
 8001cb0:	f00a ff4f 	bl	800cb52 <HAL_RTC_SetDate>

}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}
 8001cbc:	20002420 	.word	0x20002420

08001cc0 <BootLoaderInit>:

void BootLoaderInit(unsigned long BootLoaderStatus)

// Inside the debug menu you can type "upgrade", this will force the STM into the bootloader, so no need to change the jumper.
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  SysMemBootJump = (void (*)(void)) (*((unsigned long *) 0x1fff0004));
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <BootLoaderInit+0x58>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <BootLoaderInit+0x5c>)
 8001cd0:	601a      	str	r2, [r3, #0]
  if (BootLoaderStatus == 1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11a      	bne.n	8001d0e <BootLoaderInit+0x4e>
  {

    HAL_DeInit();
 8001cd8:	f006 fc56 	bl	8008588 <HAL_DeInit>
    SysTick->CTRL = 0;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <BootLoaderInit+0x60>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <BootLoaderInit+0x60>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <BootLoaderInit+0x60>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f383 8810 	msr	PRIMASK, r3
}
 8001cf8:	bf00      	nop
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <BootLoaderInit+0x64>)
 8001cfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f383 8808 	msr	MSP, r3
}
 8001d04:	bf00      	nop
    __set_PRIMASK(1);
    __set_MSP(0x20001000);
    SysMemBootJump();
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <BootLoaderInit+0x5c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4798      	blx	r3
    while(1);
 8001d0c:	e7fe      	b.n	8001d0c <BootLoaderInit+0x4c>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	1fff0004 	.word	0x1fff0004
 8001d1c:	200009b4 	.word	0x200009b4
 8001d20:	e000e010 	.word	0xe000e010
 8001d24:	20001000 	.word	0x20001000

08001d28 <WatchdogInit>:

void WatchdogInit(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
        16 * 4095 = 64
        64 / 32 = 2 seconds
        if the watchdog is not fed within 2 seconds, the Razorboard will simply reboot.
    */

    hiwdg.Instance = IWDG;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <WatchdogInit+0x24>)
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <WatchdogInit+0x28>)
 8001d30:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <WatchdogInit+0x24>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 4095;
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <WatchdogInit+0x24>)
 8001d3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d3e:	609a      	str	r2, [r3, #8]
    HAL_IWDG_Init(&hiwdg);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <WatchdogInit+0x24>)
 8001d42:	f009 fe66 	bl	800ba12 <HAL_IWDG_Init>

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000db4 	.word	0x20000db4
 8001d50:	40003000 	.word	0x40003000

08001d54 <WatchdogRefresh>:

void WatchdogRefresh(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

	// refresh the watchdog

    HAL_IWDG_Refresh(&hiwdg);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <WatchdogRefresh+0x10>)
 8001d5a:	f009 fe9c 	bl	800ba96 <HAL_IWDG_Refresh>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000db4 	.word	0x20000db4

08001d68 <InitFIR>:

void InitFIR(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af02      	add	r7, sp, #8

	// Initiate the FIR functions

	uint32_t blocksize = BLOCK_SIZE;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	607b      	str	r3, [r7, #4]
	arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blocksize);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <InitFIR+0x24>)
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <InitFIR+0x28>)
 8001d7a:	2105      	movs	r1, #5
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <InitFIR+0x2c>)
 8001d7e:	f00d f8c5 	bl	800ef0c <arm_fir_init_f32>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000468 	.word	0x20000468
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20001250 	.word	0x20001250

08001d98 <FIR_LEFT>:

void FIR_LEFT(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001da2:	2308      	movs	r3, #8
 8001da4:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF1[0];
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <FIR_LEFT+0x80>)
 8001da8:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <FIR_LEFT+0x84>)
 8001dac:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e014      	b.n	8001dde <FIR_LEFT+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	18d1      	adds	r1, r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	441a      	add	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4813      	ldr	r0, [pc, #76]	; (8001e20 <FIR_LEFT+0x88>)
 8001dd4:	f00d f8ac 	bl	800ef30 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3e6      	bcc.n	8001db4 <FIR_LEFT+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e00c      	b.n	8001e06 <FIR_LEFT+0x6e>
		  BWF1[x] = (float)outputF32[x];
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <FIR_LEFT+0x80>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	3301      	adds	r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2bff      	cmp	r3, #255	; 0xff
 8001e0a:	ddef      	ble.n	8001dec <FIR_LEFT+0x54>
	  }

}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20002534 	.word	0x20002534
 8001e1c:	200004f8 	.word	0x200004f8
 8001e20:	20001250 	.word	0x20001250

08001e24 <FIR_RIGHT>:
void FIR_RIGHT(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF2[0];
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <FIR_RIGHT+0x80>)
 8001e34:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <FIR_RIGHT+0x84>)
 8001e38:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e014      	b.n	8001e6a <FIR_RIGHT+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	18d1      	adds	r1, r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <FIR_RIGHT+0x88>)
 8001e60:	f00d f866 	bl	800ef30 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3e6      	bcc.n	8001e40 <FIR_RIGHT+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00c      	b.n	8001e92 <FIR_RIGHT+0x6e>
		  BWF2[x] = (float)outputF32[x];
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <FIR_RIGHT+0x80>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	ddef      	ble.n	8001e78 <FIR_RIGHT+0x54>
	  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000dc4 	.word	0x20000dc4
 8001ea8:	200004f8 	.word	0x200004f8
 8001eac:	20001250 	.word	0x20001250

08001eb0 <FIR_REAR>:

void FIR_REAR(void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF3[0];
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <FIR_REAR+0x80>)
 8001ec0:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <FIR_REAR+0x84>)
 8001ec4:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e014      	b.n	8001ef6 <FIR_REAR+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	18d1      	adds	r1, r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4813      	ldr	r0, [pc, #76]	; (8001f38 <FIR_REAR+0x88>)
 8001eec:	f00d f820 	bl	800ef30 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3e6      	bcc.n	8001ecc <FIR_REAR+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e00c      	b.n	8001f1e <FIR_REAR+0x6e>
		  BWF3[x] = (float)outputF32[x];
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <FIR_REAR+0x80>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	ddef      	ble.n	8001f04 <FIR_REAR+0x54>
	  }

}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200012ac 	.word	0x200012ac
 8001f34:	200004f8 	.word	0x200004f8
 8001f38:	20001250 	.word	0x20001250

08001f3c <rnd>:

uint32_t rnd(uint32_t maxValue) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

	// Our random number generator

	uint32_t rndnum;
	rndnum = HAL_RNG_GetRandomNumber(&hrng) % maxValue;
 8001f44:	4808      	ldr	r0, [pc, #32]	; (8001f68 <rnd+0x2c>)
 8001f46:	f00a fbd8 	bl	800c6fa <HAL_RNG_GetRandomNumber>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	fb01 f202 	mul.w	r2, r1, r2
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
	return rndnum;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20002974 	.word	0x20002974
 8001f6c:	00000000 	.word	0x00000000

08001f70 <CheckMotorCurrent>:

void CheckMotorCurrent(int RAW) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

			// Check if any motor is experiencing a spike in power, then we probably hit something.

			float M1, M2;
	        if (M1_idx == 10 || M2_idx == 10 || C1_idx == 10) Force_Active = 1;
 8001f78:	4bb5      	ldr	r3, [pc, #724]	; (8002250 <CheckMotorCurrent+0x2e0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b0a      	cmp	r3, #10
 8001f7e:	d007      	beq.n	8001f90 <CheckMotorCurrent+0x20>
 8001f80:	4bb4      	ldr	r3, [pc, #720]	; (8002254 <CheckMotorCurrent+0x2e4>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b0a      	cmp	r3, #10
 8001f86:	d003      	beq.n	8001f90 <CheckMotorCurrent+0x20>
 8001f88:	4bb3      	ldr	r3, [pc, #716]	; (8002258 <CheckMotorCurrent+0x2e8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b0a      	cmp	r3, #10
 8001f8e:	d102      	bne.n	8001f96 <CheckMotorCurrent+0x26>
 8001f90:	4bb2      	ldr	r3, [pc, #712]	; (800225c <CheckMotorCurrent+0x2ec>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]

			if (Channel == M1_addr) {
 8001f96:	4bb2      	ldr	r3, [pc, #712]	; (8002260 <CheckMotorCurrent+0x2f0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2bc1      	cmp	r3, #193	; 0xc1
 8001f9c:	f040 80f5 	bne.w	800218a <CheckMotorCurrent+0x21a>
				M1_Value = RAW;
 8001fa0:	4ab0      	ldr	r2, [pc, #704]	; (8002264 <CheckMotorCurrent+0x2f4>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
	            M1 = fabs(((M1_Value * 0.1875) - 2500) / 100);
 8001fa6:	4baf      	ldr	r3, [pc, #700]	; (8002264 <CheckMotorCurrent+0x2f4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faca 	bl	8000544 <__aeabi_i2d>
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4bac      	ldr	r3, [pc, #688]	; (8002268 <CheckMotorCurrent+0x2f8>)
 8001fb6:	f7fe fb2f 	bl	8000618 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	a3a1      	add	r3, pc, #644	; (adr r3, 8002248 <CheckMotorCurrent+0x2d8>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe f96e 	bl	80002a8 <__aeabi_dsub>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4ba4      	ldr	r3, [pc, #656]	; (800226c <CheckMotorCurrent+0x2fc>)
 8001fda:	f7fe fc47 	bl	800086c <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fe0f 	bl	8000c08 <__aeabi_d2f>
 8001fea:	ee07 0a90 	vmov	s15, r0
 8001fee:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff2:	edc7 7a02 	vstr	s15, [r7, #8]
	            if (Initial_Start == 0) M1_error = M1;
 8001ff6:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <CheckMotorCurrent+0x300>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <CheckMotorCurrent+0x94>
 8001ffe:	4a9d      	ldr	r2, [pc, #628]	; (8002274 <CheckMotorCurrent+0x304>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6013      	str	r3, [r2, #0]
	            M1_amp = fabs(M1 - M1_error);
 8002004:	4b9b      	ldr	r3, [pc, #620]	; (8002274 <CheckMotorCurrent+0x304>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ed97 7a02 	vldr	s14, [r7, #8]
 800200e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002012:	eef0 7ae7 	vabs.f32	s15, s15
 8002016:	4b98      	ldr	r3, [pc, #608]	; (8002278 <CheckMotorCurrent+0x308>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
	            M1_force[M1_idx] = M1_amp;
 800201c:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <CheckMotorCurrent+0x2e0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	4b95      	ldr	r3, [pc, #596]	; (8002278 <CheckMotorCurrent+0x308>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4995      	ldr	r1, [pc, #596]	; (800227c <CheckMotorCurrent+0x30c>)
 8002028:	0083      	lsls	r3, r0, #2
 800202a:	440b      	add	r3, r1
 800202c:	601a      	str	r2, [r3, #0]
	            M1_idx++;
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <CheckMotorCurrent+0x2e0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b86      	ldr	r3, [pc, #536]	; (8002250 <CheckMotorCurrent+0x2e0>)
 8002038:	701a      	strb	r2, [r3, #0]
	            if (M1_idx == 20) M1_idx = 0;
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <CheckMotorCurrent+0x2e0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b14      	cmp	r3, #20
 8002040:	d102      	bne.n	8002048 <CheckMotorCurrent+0xd8>
 8002042:	4b83      	ldr	r3, [pc, #524]	; (8002250 <CheckMotorCurrent+0x2e0>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
	            float ForceM1 = 0;
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
	            for (int x = 0; x < 20; x++) {
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	e00e      	b.n	8002072 <CheckMotorCurrent+0x102>
	            	ForceM1 += M1_force[x];
 8002054:	4a89      	ldr	r2, [pc, #548]	; (800227c <CheckMotorCurrent+0x30c>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ed97 7a07 	vldr	s14, [r7, #28]
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	edc7 7a07 	vstr	s15, [r7, #28]
	            for (int x = 0; x < 20; x++) {
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	3301      	adds	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b13      	cmp	r3, #19
 8002076:	dded      	ble.n	8002054 <CheckMotorCurrent+0xe4>
	            }
	            M1_F = ForceM1 / 20;
 8002078:	ed97 7a07 	vldr	s14, [r7, #28]
 800207c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002084:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <CheckMotorCurrent+0x310>)
 8002086:	edc3 7a00 	vstr	s15, [r3]
	            if (M1_F < settings.Motor_Min_Limit) M1_F = settings.Motor_Min_Limit;
 800208a:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <CheckMotorCurrent+0x314>)
 800208c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002090:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <CheckMotorCurrent+0x310>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209e:	dd03      	ble.n	80020a8 <CheckMotorCurrent+0x138>
 80020a0:	4b78      	ldr	r3, [pc, #480]	; (8002284 <CheckMotorCurrent+0x314>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a76      	ldr	r2, [pc, #472]	; (8002280 <CheckMotorCurrent+0x310>)
 80020a6:	6013      	str	r3, [r2, #0]
	            if ((M1_amp >= settings.Motor_Max_Limit || M1_amp >= M1_F * settings.Motor_Limit) && State == (FORWARD || RIGHT) && Force_Active == 1) {
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <CheckMotorCurrent+0x314>)
 80020aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80020ae:	4b72      	ldr	r3, [pc, #456]	; (8002278 <CheckMotorCurrent+0x308>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d910      	bls.n	80020e0 <CheckMotorCurrent+0x170>
 80020be:	4b71      	ldr	r3, [pc, #452]	; (8002284 <CheckMotorCurrent+0x314>)
 80020c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80020c4:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <CheckMotorCurrent+0x310>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ce:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <CheckMotorCurrent+0x308>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	f200 8184 	bhi.w	80023e8 <CheckMotorCurrent+0x478>
 80020e0:	4b69      	ldr	r3, [pc, #420]	; (8002288 <CheckMotorCurrent+0x318>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 817f 	bne.w	80023e8 <CheckMotorCurrent+0x478>
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <CheckMotorCurrent+0x2ec>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 817a 	bne.w	80023e8 <CheckMotorCurrent+0x478>

	  			    sprintf(emsg, "M1 current: %.2f", M1_amp);
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <CheckMotorCurrent+0x308>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa35 	bl	8000568 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4962      	ldr	r1, [pc, #392]	; (800228c <CheckMotorCurrent+0x31c>)
 8002104:	4862      	ldr	r0, [pc, #392]	; (8002290 <CheckMotorCurrent+0x320>)
 8002106:	f00e f91f 	bl	8010348 <siprintf>
	  			    add_error_event(emsg);
 800210a:	4861      	ldr	r0, [pc, #388]	; (8002290 <CheckMotorCurrent+0x320>)
 800210c:	f005 f99e 	bl	800744c <add_error_event>
	  			    sprintf(msg, "Motor Current Limit reached for M1: %.2f", M1_amp);
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <CheckMotorCurrent+0x308>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa27 	bl	8000568 <__aeabi_f2d>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	495d      	ldr	r1, [pc, #372]	; (8002294 <CheckMotorCurrent+0x324>)
 8002120:	485d      	ldr	r0, [pc, #372]	; (8002298 <CheckMotorCurrent+0x328>)
 8002122:	f00e f911 	bl	8010348 <siprintf>
	            	Serial_Console(msg);
 8002126:	485c      	ldr	r0, [pc, #368]	; (8002298 <CheckMotorCurrent+0x328>)
 8002128:	f002 f8e8 	bl	80042fc <Serial_Console>

	            	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {
 800212c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002130:	485a      	ldr	r0, [pc, #360]	; (800229c <CheckMotorCurrent+0x32c>)
 8002132:	f007 ffd9 	bl	800a0e8 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	f000 8152 	beq.w	80023e2 <CheckMotorCurrent+0x472>
	            		return;
	            	}
	            	MotorBrake();
 800213e:	f003 fa39 	bl	80055b4 <MotorBrake>
	            	HAL_Delay(500);
 8002142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002146:	f006 faa3 	bl	8008690 <HAL_Delay>
	            	MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <CheckMotorCurrent+0x314>)
 800214c:	8a5b      	ldrh	r3, [r3, #18]
 800214e:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <CheckMotorCurrent+0x314>)
 8002150:	8a11      	ldrh	r1, [r2, #16]
 8002152:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f806 	bl	8005168 <MotorBackward>
	            	HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002160:	f006 fa96 	bl	8008690 <HAL_Delay>
	            	MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 1000);
 8002164:	4b47      	ldr	r3, [pc, #284]	; (8002284 <CheckMotorCurrent+0x314>)
 8002166:	8a5b      	ldrh	r3, [r3, #18]
 8002168:	4a46      	ldr	r2, [pc, #280]	; (8002284 <CheckMotorCurrent+0x314>)
 800216a:	8a11      	ldrh	r1, [r2, #16]
 800216c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f8f9 	bl	8005368 <MotorRight>
	            	Force_Active = 0;
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <CheckMotorCurrent+0x2ec>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
	            	bumber_count++;
 800217c:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <CheckMotorCurrent+0x330>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <CheckMotorCurrent+0x330>)
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e12e      	b.n	80023e8 <CheckMotorCurrent+0x478>

	            }
			}
			else if (Channel == M2_addr) {
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <CheckMotorCurrent+0x2f0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2be1      	cmp	r3, #225	; 0xe1
 8002190:	f040 812a 	bne.w	80023e8 <CheckMotorCurrent+0x478>
				M2_Value = RAW;
 8002194:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <CheckMotorCurrent+0x334>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
	            M2 = fabs(((M2_Value * 0.1875) - 2500) / 100);
 800219a:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <CheckMotorCurrent+0x334>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d0 	bl	8000544 <__aeabi_i2d>
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <CheckMotorCurrent+0x2f8>)
 80021aa:	f7fe fa35 	bl	8000618 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	a324      	add	r3, pc, #144	; (adr r3, 8002248 <CheckMotorCurrent+0x2d8>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe f874 	bl	80002a8 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <CheckMotorCurrent+0x2fc>)
 80021ce:	f7fe fb4d 	bl	800086c <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fd15 	bl	8000c08 <__aeabi_d2f>
 80021de:	ee07 0a90 	vmov	s15, r0
 80021e2:	eef0 7ae7 	vabs.f32	s15, s15
 80021e6:	edc7 7a03 	vstr	s15, [r7, #12]
	            if (Initial_Start == 0) M2_error = M2;
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <CheckMotorCurrent+0x300>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <CheckMotorCurrent+0x288>
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <CheckMotorCurrent+0x338>)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6013      	str	r3, [r2, #0]
	            M2_amp = fabs(M2 - M2_error);
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <CheckMotorCurrent+0x338>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002206:	eef0 7ae7 	vabs.f32	s15, s15
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <CheckMotorCurrent+0x33c>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
	            M2_force[M2_idx] = M2_amp;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <CheckMotorCurrent+0x2e4>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <CheckMotorCurrent+0x33c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4925      	ldr	r1, [pc, #148]	; (80022b0 <CheckMotorCurrent+0x340>)
 800221c:	0083      	lsls	r3, r0, #2
 800221e:	440b      	add	r3, r1
 8002220:	601a      	str	r2, [r3, #0]
	            M2_idx++;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <CheckMotorCurrent+0x2e4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <CheckMotorCurrent+0x2e4>)
 800222c:	701a      	strb	r2, [r3, #0]
	            if (M2_idx == 20) M2_idx = 0;
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <CheckMotorCurrent+0x2e4>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b14      	cmp	r3, #20
 8002234:	d102      	bne.n	800223c <CheckMotorCurrent+0x2cc>
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <CheckMotorCurrent+0x2e4>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
	            float ForceM2 = 0;
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
	            for (int x = 0; x < 20; x++) {
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e044      	b.n	80022d2 <CheckMotorCurrent+0x362>
 8002248:	00000000 	.word	0x00000000
 800224c:	40a38800 	.word	0x40a38800
 8002250:	20000982 	.word	0x20000982
 8002254:	20000983 	.word	0x20000983
 8002258:	20000984 	.word	0x20000984
 800225c:	20000990 	.word	0x20000990
 8002260:	20000214 	.word	0x20000214
 8002264:	200008f8 	.word	0x200008f8
 8002268:	3fc80000 	.word	0x3fc80000
 800226c:	40590000 	.word	0x40590000
 8002270:	2000092e 	.word	0x2000092e
 8002274:	20000958 	.word	0x20000958
 8002278:	2000094c 	.word	0x2000094c
 800227c:	20000c24 	.word	0x20000c24
 8002280:	20000988 	.word	0x20000988
 8002284:	20000cc0 	.word	0x20000cc0
 8002288:	2000096b 	.word	0x2000096b
 800228c:	08015c80 	.word	0x08015c80
 8002290:	20000ae8 	.word	0x20000ae8
 8002294:	08015c94 	.word	0x08015c94
 8002298:	20000a68 	.word	0x20000a68
 800229c:	40020000 	.word	0x40020000
 80022a0:	200009b1 	.word	0x200009b1
 80022a4:	200008fc 	.word	0x200008fc
 80022a8:	2000095c 	.word	0x2000095c
 80022ac:	20000950 	.word	0x20000950
 80022b0:	20000bd0 	.word	0x20000bd0
	            	ForceM2 += M2_force[x];
 80022b4:	4a4e      	ldr	r2, [pc, #312]	; (80023f0 <CheckMotorCurrent+0x480>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	edc7 7a05 	vstr	s15, [r7, #20]
	            for (int x = 0; x < 20; x++) {
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3301      	adds	r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b13      	cmp	r3, #19
 80022d6:	dded      	ble.n	80022b4 <CheckMotorCurrent+0x344>
	            }
	            M2_F = ForceM2 / 20;
 80022d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022dc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80022e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <CheckMotorCurrent+0x484>)
 80022e6:	edc3 7a00 	vstr	s15, [r3]
	            if (M2_F < settings.Motor_Min_Limit) M2_F = settings.Motor_Min_Limit;
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <CheckMotorCurrent+0x488>)
 80022ec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80022f0:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <CheckMotorCurrent+0x484>)
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	dd03      	ble.n	8002308 <CheckMotorCurrent+0x398>
 8002300:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <CheckMotorCurrent+0x488>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <CheckMotorCurrent+0x484>)
 8002306:	6013      	str	r3, [r2, #0]
	            if ((M2_amp >= settings.Motor_Max_Limit || M2_amp >= M2_F * settings.Motor_Limit) && State == (FORWARD || LEFT) && Force_Active == 1) {
 8002308:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <CheckMotorCurrent+0x488>)
 800230a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <CheckMotorCurrent+0x48c>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d90f      	bls.n	800233e <CheckMotorCurrent+0x3ce>
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <CheckMotorCurrent+0x488>)
 8002320:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <CheckMotorCurrent+0x484>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <CheckMotorCurrent+0x48c>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d854      	bhi.n	80023e8 <CheckMotorCurrent+0x478>
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <CheckMotorCurrent+0x490>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d150      	bne.n	80023e8 <CheckMotorCurrent+0x478>
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <CheckMotorCurrent+0x494>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d14c      	bne.n	80023e8 <CheckMotorCurrent+0x478>

	  			    sprintf(emsg, "M2 current: %.2f", M2_amp);
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <CheckMotorCurrent+0x48c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f908 	bl	8000568 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	492a      	ldr	r1, [pc, #168]	; (8002408 <CheckMotorCurrent+0x498>)
 800235e:	482b      	ldr	r0, [pc, #172]	; (800240c <CheckMotorCurrent+0x49c>)
 8002360:	f00d fff2 	bl	8010348 <siprintf>
	  			    add_error_event(emsg);
 8002364:	4829      	ldr	r0, [pc, #164]	; (800240c <CheckMotorCurrent+0x49c>)
 8002366:	f005 f871 	bl	800744c <add_error_event>
	            	sprintf(msg, "Motor Current Limit reached for M2: %.2f", M2_amp);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <CheckMotorCurrent+0x48c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f8fa 	bl	8000568 <__aeabi_f2d>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4925      	ldr	r1, [pc, #148]	; (8002410 <CheckMotorCurrent+0x4a0>)
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <CheckMotorCurrent+0x4a4>)
 800237c:	f00d ffe4 	bl	8010348 <siprintf>
	            	Serial_Console(msg);
 8002380:	4824      	ldr	r0, [pc, #144]	; (8002414 <CheckMotorCurrent+0x4a4>)
 8002382:	f001 ffbb 	bl	80042fc <Serial_Console>

	            	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {
 8002386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238a:	4823      	ldr	r0, [pc, #140]	; (8002418 <CheckMotorCurrent+0x4a8>)
 800238c:	f007 feac 	bl	800a0e8 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d027      	beq.n	80023e6 <CheckMotorCurrent+0x476>
	            		return;
	            	}
	            	MotorBrake();
 8002396:	f003 f90d 	bl	80055b4 <MotorBrake>
	            	HAL_Delay(500);
 800239a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239e:	f006 f977 	bl	8008690 <HAL_Delay>
	            	MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <CheckMotorCurrent+0x488>)
 80023a4:	8a5b      	ldrh	r3, [r3, #18]
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <CheckMotorCurrent+0x488>)
 80023a8:	8a11      	ldrh	r1, [r2, #16]
 80023aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 feda 	bl	8005168 <MotorBackward>
	            	HAL_Delay(500);
 80023b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b8:	f006 f96a 	bl	8008690 <HAL_Delay>
	            	MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 1000);
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <CheckMotorCurrent+0x488>)
 80023be:	8a5b      	ldrh	r3, [r3, #18]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <CheckMotorCurrent+0x488>)
 80023c2:	8a11      	ldrh	r1, [r2, #16]
 80023c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f823 	bl	8005414 <MotorLeft>
	            	Force_Active = 0;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <CheckMotorCurrent+0x494>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
	            	bumber_count++;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <CheckMotorCurrent+0x4ac>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <CheckMotorCurrent+0x4ac>)
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e002      	b.n	80023e8 <CheckMotorCurrent+0x478>
	            		return;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <CheckMotorCurrent+0x478>
	            		return;
 80023e6:	bf00      	nop

	            }
			}
}
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000bd0 	.word	0x20000bd0
 80023f4:	2000098c 	.word	0x2000098c
 80023f8:	20000cc0 	.word	0x20000cc0
 80023fc:	20000950 	.word	0x20000950
 8002400:	2000096b 	.word	0x2000096b
 8002404:	20000990 	.word	0x20000990
 8002408:	08015cc0 	.word	0x08015cc0
 800240c:	20000ae8 	.word	0x20000ae8
 8002410:	08015cd4 	.word	0x08015cd4
 8002414:	20000a68 	.word	0x20000a68
 8002418:	40020000 	.word	0x40020000
 800241c:	200009b1 	.word	0x200009b1

08002420 <CheckVoltage>:

void CheckVoltage() {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0

	//Simple Voltage check

	if ( Voltage < settings.Battery_Low_Limit) {
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <CheckVoltage+0x64>)
 8002426:	ed93 7a06 	vldr	s14, [r3, #24]
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <CheckVoltage+0x68>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	dd22      	ble.n	8002480 <CheckVoltage+0x60>
		if (perimeterTracking == 1) return;
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <CheckVoltage+0x6c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d01d      	beq.n	800247e <CheckVoltage+0x5e>
		sprintf(emsg, "low voltage: %.2f", Voltage);
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <CheckVoltage+0x68>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f88e 	bl	8000568 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	490f      	ldr	r1, [pc, #60]	; (8002490 <CheckVoltage+0x70>)
 8002452:	4810      	ldr	r0, [pc, #64]	; (8002494 <CheckVoltage+0x74>)
 8002454:	f00d ff78 	bl	8010348 <siprintf>
		add_error_event(emsg);
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <CheckVoltage+0x74>)
 800245a:	f004 fff7 	bl	800744c <add_error_event>
		sprintf(msg, "Low Voltage - Searching for perimeter wire...\r\n");
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <CheckVoltage+0x78>)
 8002460:	480e      	ldr	r0, [pc, #56]	; (800249c <CheckVoltage+0x7c>)
 8002462:	f00d ff71 	bl	8010348 <siprintf>
		Serial_RPi(msg);
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <CheckVoltage+0x7c>)
 8002468:	f001 ff5c 	bl	8004324 <Serial_RPi>
		Serial_Console(msg);
 800246c:	480b      	ldr	r0, [pc, #44]	; (800249c <CheckVoltage+0x7c>)
 800246e:	f001 ff45 	bl	80042fc <Serial_Console>
		perimeterTracking = 1;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <CheckVoltage+0x6c>)
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
		cutterOFF();
 8002478:	f002 f8fa 	bl	8004670 <cutterOFF>
 800247c:	e000      	b.n	8002480 <CheckVoltage+0x60>
		if (perimeterTracking == 1) return;
 800247e:	bf00      	nop
	}

}
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000cc0 	.word	0x20000cc0
 8002488:	20000964 	.word	0x20000964
 800248c:	2000092c 	.word	0x2000092c
 8002490:	08015d00 	.word	0x08015d00
 8002494:	20000ae8 	.word	0x20000ae8
 8002498:	08015d14 	.word	0x08015d14
 800249c:	20000a68 	.word	0x20000a68

080024a0 <SendInfo>:

void SendInfo() {
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	b0af      	sub	sp, #188	; 0xbc
 80024a6:	af08      	add	r7, sp, #32

		SendInfoStatus = 0;
 80024a8:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <SendInfo+0x214>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]

		if (DEBUG_RAZORBOARD == 0) {
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <SendInfo+0x218>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d112      	bne.n	80024dc <SendInfo+0x3c>
			bwf1_inside = 0;
 80024b6:	4b81      	ldr	r3, [pc, #516]	; (80026bc <SendInfo+0x21c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
			bwf1_outside = 0;
 80024bc:	4b80      	ldr	r3, [pc, #512]	; (80026c0 <SendInfo+0x220>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
			bwf2_inside = 0;
 80024c2:	4b80      	ldr	r3, [pc, #512]	; (80026c4 <SendInfo+0x224>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
			bwf2_outside = 0;
 80024c8:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <SendInfo+0x228>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
			bwf3_inside = 0;
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <SendInfo+0x22c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
			bwf3_outside = 0;
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <SendInfo+0x230>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e180      	b.n	80027de <SendInfo+0x33e>
			return;
		}

		// Send info to the Console & Raspberry PI - Update frequency is ~1 Hz
    	RTC_TimeTypeDef currTime = {0};
 80024dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
    	RTC_DateTypeDef currDate = {0};
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80024f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024f6:	2200      	movs	r2, #0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4876      	ldr	r0, [pc, #472]	; (80026d4 <SendInfo+0x234>)
 80024fc:	f00a facb 	bl	800ca96 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002500:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	4872      	ldr	r0, [pc, #456]	; (80026d4 <SendInfo+0x234>)
 800250a:	f00a fbc9 	bl	800cca0 <HAL_RTC_GetDate>

		sprintf(msg, "M1: %.2f\r\n", M1_amp);
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <SendInfo+0x238>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f828 	bl	8000568 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	496f      	ldr	r1, [pc, #444]	; (80026dc <SendInfo+0x23c>)
 800251e:	4870      	ldr	r0, [pc, #448]	; (80026e0 <SendInfo+0x240>)
 8002520:	f00d ff12 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002524:	486e      	ldr	r0, [pc, #440]	; (80026e0 <SendInfo+0x240>)
 8002526:	f001 fee9 	bl	80042fc <Serial_Console>
		sprintf(msg, "M2: %.2f\r\n", M2_amp);
 800252a:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <SendInfo+0x244>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f81a 	bl	8000568 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	496b      	ldr	r1, [pc, #428]	; (80026e8 <SendInfo+0x248>)
 800253a:	4869      	ldr	r0, [pc, #420]	; (80026e0 <SendInfo+0x240>)
 800253c:	f00d ff04 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002540:	4867      	ldr	r0, [pc, #412]	; (80026e0 <SendInfo+0x240>)
 8002542:	f001 fedb 	bl	80042fc <Serial_Console>
		sprintf(msg, "C1: %.2f\r\n", C1_amp);
 8002546:	4b69      	ldr	r3, [pc, #420]	; (80026ec <SendInfo+0x24c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f80c 	bl	8000568 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4966      	ldr	r1, [pc, #408]	; (80026f0 <SendInfo+0x250>)
 8002556:	4862      	ldr	r0, [pc, #392]	; (80026e0 <SendInfo+0x240>)
 8002558:	f00d fef6 	bl	8010348 <siprintf>
		Serial_Console(msg);
 800255c:	4860      	ldr	r0, [pc, #384]	; (80026e0 <SendInfo+0x240>)
 800255e:	f001 fecd 	bl	80042fc <Serial_Console>
		sprintf(msg, "V1: %.2f\r\n", Voltage);
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <SendInfo+0x254>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fffe 	bl	8000568 <__aeabi_f2d>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4961      	ldr	r1, [pc, #388]	; (80026f8 <SendInfo+0x258>)
 8002572:	485b      	ldr	r0, [pc, #364]	; (80026e0 <SendInfo+0x240>)
 8002574:	f00d fee8 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002578:	4859      	ldr	r0, [pc, #356]	; (80026e0 <SendInfo+0x240>)
 800257a:	f001 febf 	bl	80042fc <Serial_Console>
		sprintf(msg,"Charger Connected: %d\r\n", ChargerConnect);
 800257e:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <SendInfo+0x25c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	495e      	ldr	r1, [pc, #376]	; (8002700 <SendInfo+0x260>)
 8002586:	4856      	ldr	r0, [pc, #344]	; (80026e0 <SendInfo+0x240>)
 8002588:	f00d fede 	bl	8010348 <siprintf>
		Serial_Console(msg);
 800258c:	4854      	ldr	r0, [pc, #336]	; (80026e0 <SendInfo+0x240>)
 800258e:	f001 feb5 	bl	80042fc <Serial_Console>
		sprintf(msg,"IN-> BWF1: %d BWF2: %d BWF3: %d\r\nOUT-> BWF1: %d BWF2: %d BWF3: %d\r\n", bwf1_inside, bwf2_inside, bwf3_inside, bwf1_outside, bwf2_outside, bwf3_outside);
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <SendInfo+0x21c>)
 8002594:	681c      	ldr	r4, [r3, #0]
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <SendInfo+0x224>)
 8002598:	681d      	ldr	r5, [r3, #0]
 800259a:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <SendInfo+0x22c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <SendInfo+0x220>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4949      	ldr	r1, [pc, #292]	; (80026c8 <SendInfo+0x228>)
 80025a4:	6809      	ldr	r1, [r1, #0]
 80025a6:	484a      	ldr	r0, [pc, #296]	; (80026d0 <SendInfo+0x230>)
 80025a8:	6800      	ldr	r0, [r0, #0]
 80025aa:	9003      	str	r0, [sp, #12]
 80025ac:	9102      	str	r1, [sp, #8]
 80025ae:	9201      	str	r2, [sp, #4]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	462b      	mov	r3, r5
 80025b4:	4622      	mov	r2, r4
 80025b6:	4953      	ldr	r1, [pc, #332]	; (8002704 <SendInfo+0x264>)
 80025b8:	4849      	ldr	r0, [pc, #292]	; (80026e0 <SendInfo+0x240>)
 80025ba:	f00d fec5 	bl	8010348 <siprintf>
		Serial_Console(msg);
 80025be:	4848      	ldr	r0, [pc, #288]	; (80026e0 <SendInfo+0x240>)
 80025c0:	f001 fe9c 	bl	80042fc <Serial_Console>
		sprintf(msg, "Magnitude -> BWF1: %d BWF2: %d\r\n", magBWF1, magBWF2);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <SendInfo+0x268>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b50      	ldr	r3, [pc, #320]	; (800270c <SendInfo+0x26c>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	4950      	ldr	r1, [pc, #320]	; (8002710 <SendInfo+0x270>)
 80025d0:	4843      	ldr	r0, [pc, #268]	; (80026e0 <SendInfo+0x240>)
 80025d2:	f00d feb9 	bl	8010348 <siprintf>
		Serial_Console(msg);
 80025d6:	4842      	ldr	r0, [pc, #264]	; (80026e0 <SendInfo+0x240>)
 80025d8:	f001 fe90 	bl	80042fc <Serial_Console>
		sprintf(msg, "Battery Fully Charged: %d\r\n", Battery_Ready);
 80025dc:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <SendInfo+0x274>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	494d      	ldr	r1, [pc, #308]	; (8002718 <SendInfo+0x278>)
 80025e4:	483e      	ldr	r0, [pc, #248]	; (80026e0 <SendInfo+0x240>)
 80025e6:	f00d feaf 	bl	8010348 <siprintf>
		Serial_Console(msg);
 80025ea:	483d      	ldr	r0, [pc, #244]	; (80026e0 <SendInfo+0x240>)
 80025ec:	f001 fe86 	bl	80042fc <Serial_Console>
		sprintf(msg, "Roll: %.2f Pitch: %2.f Yaw: %2.f\r\n", mpu.roll, mpu.pitch, mpu.yaw);
 80025f0:	4b4a      	ldr	r3, [pc, #296]	; (800271c <SendInfo+0x27c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffb7 	bl	8000568 <__aeabi_f2d>
 80025fa:	4680      	mov	r8, r0
 80025fc:	4689      	mov	r9, r1
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <SendInfo+0x27c>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffb0 	bl	8000568 <__aeabi_f2d>
 8002608:	4604      	mov	r4, r0
 800260a:	460d      	mov	r5, r1
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <SendInfo+0x27c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffa9 	bl	8000568 <__aeabi_f2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800261e:	e9cd 4500 	strd	r4, r5, [sp]
 8002622:	4642      	mov	r2, r8
 8002624:	464b      	mov	r3, r9
 8002626:	493e      	ldr	r1, [pc, #248]	; (8002720 <SendInfo+0x280>)
 8002628:	482d      	ldr	r0, [pc, #180]	; (80026e0 <SendInfo+0x240>)
 800262a:	f00d fe8d 	bl	8010348 <siprintf>
		Serial_Console(msg);
 800262e:	482c      	ldr	r0, [pc, #176]	; (80026e0 <SendInfo+0x240>)
 8002630:	f001 fe64 	bl	80042fc <Serial_Console>
		sprintf(msg, "Time: %d:%d:%d\r\n", currTime.Hours, currTime.Minutes, currTime.Seconds);
 8002634:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8002638:	461a      	mov	r2, r3
 800263a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800263e:	4619      	mov	r1, r3
 8002640:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	460b      	mov	r3, r1
 8002648:	4936      	ldr	r1, [pc, #216]	; (8002724 <SendInfo+0x284>)
 800264a:	4825      	ldr	r0, [pc, #148]	; (80026e0 <SendInfo+0x240>)
 800264c:	f00d fe7c 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002650:	4823      	ldr	r0, [pc, #140]	; (80026e0 <SendInfo+0x240>)
 8002652:	f001 fe53 	bl	80042fc <Serial_Console>
		sprintf(msg, "Date: 20%d-%d-%d\r\n", currDate.Year, currDate.Month, currDate.Date);
 8002656:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800265a:	461a      	mov	r2, r3
 800265c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002660:	4619      	mov	r1, r3
 8002662:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	460b      	mov	r3, r1
 800266a:	492f      	ldr	r1, [pc, #188]	; (8002728 <SendInfo+0x288>)
 800266c:	481c      	ldr	r0, [pc, #112]	; (80026e0 <SendInfo+0x240>)
 800266e:	f00d fe6b 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002672:	481b      	ldr	r0, [pc, #108]	; (80026e0 <SendInfo+0x240>)
 8002674:	f001 fe42 	bl	80042fc <Serial_Console>
		sprintf(msg, "Movement: %.2f\r\n", mpu.movement);
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <SendInfo+0x27c>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff73 	bl	8000568 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4929      	ldr	r1, [pc, #164]	; (800272c <SendInfo+0x28c>)
 8002688:	4815      	ldr	r0, [pc, #84]	; (80026e0 <SendInfo+0x240>)
 800268a:	f00d fe5d 	bl	8010348 <siprintf>
		Serial_Console(msg);
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <SendInfo+0x240>)
 8002690:	f001 fe34 	bl	80042fc <Serial_Console>
		if (mpu.movement < settings.movement) sprintf(msg, "Movement Verdict: Standing\r\n");
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <SendInfo+0x27c>)
 8002696:	ed93 7a08 	vldr	s14, [r3, #32]
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <SendInfo+0x290>)
 800269c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80026a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	d546      	bpl.n	8002738 <SendInfo+0x298>
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <SendInfo+0x294>)
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <SendInfo+0x240>)
 80026ae:	f00d fe4b 	bl	8010348 <siprintf>
 80026b2:	e045      	b.n	8002740 <SendInfo+0x2a0>
 80026b4:	2000097c 	.word	0x2000097c
 80026b8:	20000999 	.word	0x20000999
 80026bc:	20000934 	.word	0x20000934
 80026c0:	20000940 	.word	0x20000940
 80026c4:	20000938 	.word	0x20000938
 80026c8:	20000944 	.word	0x20000944
 80026cc:	2000093c 	.word	0x2000093c
 80026d0:	20000948 	.word	0x20000948
 80026d4:	20002420 	.word	0x20002420
 80026d8:	2000094c 	.word	0x2000094c
 80026dc:	08015d44 	.word	0x08015d44
 80026e0:	20000a68 	.word	0x20000a68
 80026e4:	20000950 	.word	0x20000950
 80026e8:	08015d50 	.word	0x08015d50
 80026ec:	20000954 	.word	0x20000954
 80026f0:	08015d5c 	.word	0x08015d5c
 80026f4:	20000964 	.word	0x20000964
 80026f8:	08015d68 	.word	0x08015d68
 80026fc:	20000998 	.word	0x20000998
 8002700:	08015d74 	.word	0x08015d74
 8002704:	08015d8c 	.word	0x08015d8c
 8002708:	20000dc0 	.word	0x20000dc0
 800270c:	20000c20 	.word	0x20000c20
 8002710:	08015dd0 	.word	0x08015dd0
 8002714:	20000981 	.word	0x20000981
 8002718:	08015df4 	.word	0x08015df4
 800271c:	2000239c 	.word	0x2000239c
 8002720:	08015e10 	.word	0x08015e10
 8002724:	08015e34 	.word	0x08015e34
 8002728:	08015e48 	.word	0x08015e48
 800272c:	08015e5c 	.word	0x08015e5c
 8002730:	20000cc0 	.word	0x20000cc0
 8002734:	08015e70 	.word	0x08015e70
		else sprintf(msg, "Movement Verdict: Moving\r\n");
 8002738:	492b      	ldr	r1, [pc, #172]	; (80027e8 <SendInfo+0x348>)
 800273a:	482c      	ldr	r0, [pc, #176]	; (80027ec <SendInfo+0x34c>)
 800273c:	f00d fe04 	bl	8010348 <siprintf>
		Serial_Console(msg);
 8002740:	482a      	ldr	r0, [pc, #168]	; (80027ec <SendInfo+0x34c>)
 8002742:	f001 fddb 	bl	80042fc <Serial_Console>

		char Data[128];

		sprintf(Data, "Battery Voltage,%.2f\r\n"
 8002746:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <SendInfo+0x350>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff0c 	bl	8000568 <__aeabi_f2d>
 8002750:	4682      	mov	sl, r0
 8002752:	468b      	mov	fp, r1
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <SendInfo+0x354>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd ff05 	bl	8000568 <__aeabi_f2d>
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <SendInfo+0x358>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fefe 	bl	8000568 <__aeabi_f2d>
 800276c:	4680      	mov	r8, r0
 800276e:	4689      	mov	r9, r1
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <SendInfo+0x35c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fef7 	bl	8000568 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4920      	ldr	r1, [pc, #128]	; (8002800 <SendInfo+0x360>)
 8002780:	7809      	ldrb	r1, [r1, #0]
 8002782:	460e      	mov	r6, r1
 8002784:	491f      	ldr	r1, [pc, #124]	; (8002804 <SendInfo+0x364>)
 8002786:	7809      	ldrb	r1, [r1, #0]
 8002788:	4638      	mov	r0, r7
 800278a:	9107      	str	r1, [sp, #28]
 800278c:	9606      	str	r6, [sp, #24]
 800278e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002792:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002796:	e9cd 4500 	strd	r4, r5, [sp]
 800279a:	4652      	mov	r2, sl
 800279c:	465b      	mov	r3, fp
 800279e:	491a      	ldr	r1, [pc, #104]	; (8002808 <SendInfo+0x368>)
 80027a0:	f00d fdd2 	bl	8010348 <siprintf>
				      "M2 Current,%.2f\r\n"
				      "C1 Current,%.2f\r\n"
				      "Security,%d\r\n"
				      "Mower State,%d\r\n", Voltage, M1_amp,M2_amp,C1_amp, Security, State);

		bwf1_inside = 0;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <SendInfo+0x36c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
		bwf1_outside = 0;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <SendInfo+0x370>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
		bwf2_inside = 0;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <SendInfo+0x374>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
		bwf2_outside = 0;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <SendInfo+0x378>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
		bwf3_inside = 0;
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <SendInfo+0x37c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
		bwf3_outside = 0;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <SendInfo+0x380>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(&huart2, (uint8_t *)&Data, strlen(Data), 100);
 80027c8:	463b      	mov	r3, r7
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fd0a 	bl	80001e4 <strlen>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4639      	mov	r1, r7
 80027d6:	2364      	movs	r3, #100	; 0x64
 80027d8:	4812      	ldr	r0, [pc, #72]	; (8002824 <SendInfo+0x384>)
 80027da:	f00b fc28 	bl	800e02e <HAL_UART_Transmit>

}
 80027de:	379c      	adds	r7, #156	; 0x9c
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	08015e90 	.word	0x08015e90
 80027ec:	20000a68 	.word	0x20000a68
 80027f0:	20000964 	.word	0x20000964
 80027f4:	2000094c 	.word	0x2000094c
 80027f8:	20000950 	.word	0x20000950
 80027fc:	20000954 	.word	0x20000954
 8002800:	20000980 	.word	0x20000980
 8002804:	2000096b 	.word	0x2000096b
 8002808:	08015eac 	.word	0x08015eac
 800280c:	20000934 	.word	0x20000934
 8002810:	20000940 	.word	0x20000940
 8002814:	20000938 	.word	0x20000938
 8002818:	20000944 	.word	0x20000944
 800281c:	2000093c 	.word	0x2000093c
 8002820:	20000948 	.word	0x20000948
 8002824:	200031bc 	.word	0x200031bc

08002828 <CollectADC>:

void CollectADC() {
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0

	// Collect IC2 data from the external ADC, in a non-blocking way.

	if (Channel == M1_addr && Channel_Status == 0) {
 800282e:	4bb0      	ldr	r3, [pc, #704]	; (8002af0 <CollectADC+0x2c8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2bc1      	cmp	r3, #193	; 0xc1
 8002834:	d111      	bne.n	800285a <CollectADC+0x32>
 8002836:	4baf      	ldr	r3, [pc, #700]	; (8002af4 <CollectADC+0x2cc>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <CollectADC+0x32>
		ADC_Send(Channel);
 800283e:	4bac      	ldr	r3, [pc, #688]	; (8002af0 <CollectADC+0x2c8>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fa92 	bl	8004d6c <ADC_Send>
		Channel_Status = 1;
 8002848:	4baa      	ldr	r3, [pc, #680]	; (8002af4 <CollectADC+0x2cc>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 800284e:	f005 ff13 	bl	8008678 <HAL_GetTick>
 8002852:	4603      	mov	r3, r0
 8002854:	4aa8      	ldr	r2, [pc, #672]	; (8002af8 <CollectADC+0x2d0>)
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e040      	b.n	80028dc <CollectADC+0xb4>
	}
	else if (Channel == M2_addr && Channel_Status == 0) {
 800285a:	4ba5      	ldr	r3, [pc, #660]	; (8002af0 <CollectADC+0x2c8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2be1      	cmp	r3, #225	; 0xe1
 8002860:	d111      	bne.n	8002886 <CollectADC+0x5e>
 8002862:	4ba4      	ldr	r3, [pc, #656]	; (8002af4 <CollectADC+0x2cc>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <CollectADC+0x5e>
		ADC_Send(Channel);
 800286a:	4ba1      	ldr	r3, [pc, #644]	; (8002af0 <CollectADC+0x2c8>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fa7c 	bl	8004d6c <ADC_Send>
		Channel_Status = 1;
 8002874:	4b9f      	ldr	r3, [pc, #636]	; (8002af4 <CollectADC+0x2cc>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 800287a:	f005 fefd 	bl	8008678 <HAL_GetTick>
 800287e:	4603      	mov	r3, r0
 8002880:	4a9d      	ldr	r2, [pc, #628]	; (8002af8 <CollectADC+0x2d0>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e02a      	b.n	80028dc <CollectADC+0xb4>
	}
	else if (Channel == C1_addr && Channel_Status == 0) {
 8002886:	4b9a      	ldr	r3, [pc, #616]	; (8002af0 <CollectADC+0x2c8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2bf1      	cmp	r3, #241	; 0xf1
 800288c:	d111      	bne.n	80028b2 <CollectADC+0x8a>
 800288e:	4b99      	ldr	r3, [pc, #612]	; (8002af4 <CollectADC+0x2cc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <CollectADC+0x8a>
		ADC_Send(Channel);
 8002896:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <CollectADC+0x2c8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fa66 	bl	8004d6c <ADC_Send>
		Channel_Status = 1;
 80028a0:	4b94      	ldr	r3, [pc, #592]	; (8002af4 <CollectADC+0x2cc>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 80028a6:	f005 fee7 	bl	8008678 <HAL_GetTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a92      	ldr	r2, [pc, #584]	; (8002af8 <CollectADC+0x2d0>)
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e014      	b.n	80028dc <CollectADC+0xb4>
	}
	else if (Channel == V1_addr && Channel_Status == 0) {
 80028b2:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <CollectADC+0x2c8>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2bd1      	cmp	r3, #209	; 0xd1
 80028b8:	d110      	bne.n	80028dc <CollectADC+0xb4>
 80028ba:	4b8e      	ldr	r3, [pc, #568]	; (8002af4 <CollectADC+0x2cc>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <CollectADC+0xb4>
		ADC_Send(Channel);
 80028c2:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <CollectADC+0x2c8>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fa50 	bl	8004d6c <ADC_Send>
		Channel_Status = 1;
 80028cc:	4b89      	ldr	r3, [pc, #548]	; (8002af4 <CollectADC+0x2cc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 80028d2:	f005 fed1 	bl	8008678 <HAL_GetTick>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a87      	ldr	r2, [pc, #540]	; (8002af8 <CollectADC+0x2d0>)
 80028da:	6013      	str	r3, [r2, #0]
	}

	if ((HAL_GetTick() - ADC_timer) >= 20 && Channel_Status == 1) {
 80028dc:	f005 fecc 	bl	8008678 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <CollectADC+0x2d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b13      	cmp	r3, #19
 80028ea:	f240 81a8 	bls.w	8002c3e <CollectADC+0x416>
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <CollectADC+0x2cc>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f040 81a3 	bne.w	8002c3e <CollectADC+0x416>
		int RAW = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
		RAW = ADC_Receive();
 80028fc:	f002 fa5c 	bl	8004db8 <ADC_Receive>
 8002900:	60b8      	str	r0, [r7, #8]

		CheckMotorCurrent(RAW);
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f7ff fb34 	bl	8001f70 <CheckMotorCurrent>

	    if (Channel == C1_addr) {
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <CollectADC+0x2c8>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2bf1      	cmp	r3, #241	; 0xf1
 800290e:	f040 810f 	bne.w	8002b30 <CollectADC+0x308>
			C1_Value = RAW;
 8002912:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <CollectADC+0x2d4>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6013      	str	r3, [r2, #0]
			float C1;
            C1 = fabs(((C1_Value * 0.1875) - 2500) / 100);
 8002918:	4b78      	ldr	r3, [pc, #480]	; (8002afc <CollectADC+0x2d4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fe11 	bl	8000544 <__aeabi_i2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <CollectADC+0x2d8>)
 8002928:	f7fd fe76 	bl	8000618 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	a36a      	add	r3, pc, #424	; (adr r3, 8002ae0 <CollectADC+0x2b8>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fcb5 	bl	80002a8 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <CollectADC+0x2dc>)
 800294c:	f7fd ff8e 	bl	800086c <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe f956 	bl	8000c08 <__aeabi_d2f>
 800295c:	ee07 0a90 	vmov	s15, r0
 8002960:	eef0 7ae7 	vabs.f32	s15, s15
 8002964:	edc7 7a01 	vstr	s15, [r7, #4]
            if (Initial_Start == 0) C1_error = C1;
 8002968:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <CollectADC+0x2e0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <CollectADC+0x14e>
 8002970:	4a66      	ldr	r2, [pc, #408]	; (8002b0c <CollectADC+0x2e4>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
            C1_amp = fabs(C1 - C1_error);
 8002976:	4b65      	ldr	r3, [pc, #404]	; (8002b0c <CollectADC+0x2e4>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002984:	eef0 7ae7 	vabs.f32	s15, s15
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <CollectADC+0x2e8>)
 800298a:	edc3 7a00 	vstr	s15, [r3]

            if (C1_amp >= 1.5) {
 800298e:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <CollectADC+0x2e8>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a0:	db2f      	blt.n	8002a02 <CollectADC+0x1da>
            	highgrass_slowdown = 1;
 80029a2:	4b5c      	ldr	r3, [pc, #368]	; (8002b14 <CollectADC+0x2ec>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
            	MotorStop();
 80029a8:	f002 fd8a 	bl	80054c0 <MotorStop>
            	MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 80029ac:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <CollectADC+0x2f0>)
 80029ae:	8a5b      	ldrh	r3, [r3, #18]
 80029b0:	4a59      	ldr	r2, [pc, #356]	; (8002b18 <CollectADC+0x2f0>)
 80029b2:	8a11      	ldrh	r1, [r2, #16]
 80029b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fbd5 	bl	8005168 <MotorBackward>
            	HAL_Delay(2000);
 80029be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029c2:	f005 fe65 	bl	8008690 <HAL_Delay>
            	MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed * 0.78);
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <CollectADC+0x2f0>)
 80029c8:	8a5c      	ldrh	r4, [r3, #18]
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <CollectADC+0x2f0>)
 80029cc:	8a1b      	ldrh	r3, [r3, #16]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fdb8 	bl	8000544 <__aeabi_i2d>
 80029d4:	a344      	add	r3, pc, #272	; (adr r3, 8002ae8 <CollectADC+0x2c0>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fe1d 	bl	8000618 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f8ef 	bl	8000bc8 <__aeabi_d2uiz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	4620      	mov	r0, r4
 80029f2:	f002 fb03 	bl	8004ffc <MotorForward>
            	highgrass_timer = HAL_GetTick();
 80029f6:	f005 fe3f 	bl	8008678 <HAL_GetTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <CollectADC+0x2f4>)
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e04d      	b.n	8002a9e <CollectADC+0x276>
            }
            else {
            	if (HAL_GetTick() - highgrass_timer >= 10000) {
 8002a02:	f005 fe39 	bl	8008678 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <CollectADC+0x2f4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d943      	bls.n	8002a9e <CollectADC+0x276>
            		if (highgrass_slowdown == 1) {
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <CollectADC+0x2ec>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d13c      	bne.n	8002a98 <CollectADC+0x270>
            			if (TIM4->CCR2 >= settings.motorMinSpeed || TIM4->CCR3 >= settings.motorMinSpeed) {
 8002a1e:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <CollectADC+0x2f8>)
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	4a3d      	ldr	r2, [pc, #244]	; (8002b18 <CollectADC+0x2f0>)
 8002a24:	8a52      	ldrh	r2, [r2, #18]
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d205      	bcs.n	8002a36 <CollectADC+0x20e>
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <CollectADC+0x2f8>)
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <CollectADC+0x2f0>)
 8002a30:	8a52      	ldrh	r2, [r2, #18]
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d330      	bcc.n	8002a98 <CollectADC+0x270>

            				for (uint32_t x = (round(TIM4->CCR2 + TIM4->CCR3) / 2); x < settings.motorMaxSpeed; x++) {
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <CollectADC+0x2f8>)
 8002a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <CollectADC+0x2f8>)
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	4413      	add	r3, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd6f 	bl	8000524 <__aeabi_ui2d>
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a4e:	f7fd ff0d 	bl	800086c <__aeabi_ddiv>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f8b5 	bl	8000bc8 <__aeabi_d2uiz>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e013      	b.n	8002a8c <CollectADC+0x264>
            					TIM4->CCR2 = x;
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <CollectADC+0x2f8>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	6393      	str	r3, [r2, #56]	; 0x38
            					TIM4->CCR3 = x;
 8002a6a:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <CollectADC+0x2f8>)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	63d3      	str	r3, [r2, #60]	; 0x3c
            					HAL_Delay(1);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f005 fe0d 	bl	8008690 <HAL_Delay>
            					if (CheckSecurity() == SECURITY_FAIL) {
 8002a76:	f001 fc69 	bl	800434c <CheckSecurity>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <CollectADC+0x25e>
            						MotorStop();
 8002a80:	f002 fd1e 	bl	80054c0 <MotorStop>
            						break;
 8002a84:	e008      	b.n	8002a98 <CollectADC+0x270>
            				for (uint32_t x = (round(TIM4->CCR2 + TIM4->CCR3) / 2); x < settings.motorMaxSpeed; x++) {
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <CollectADC+0x2f0>)
 8002a8e:	8a1b      	ldrh	r3, [r3, #16]
 8002a90:	461a      	mov	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d3e5      	bcc.n	8002a64 <CollectADC+0x23c>
            					}
            				}
            			}
            		}
            		highgrass_slowdown = 0;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <CollectADC+0x2ec>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
            	}
            }
            if (C1_amp >= settings.Cutter_Limit) {
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <CollectADC+0x2f0>)
 8002aa0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <CollectADC+0x2e8>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	f200 80a2 	bhi.w	8002bfa <CollectADC+0x3d2>
            	sprintf(emsg, "C1 current: %.2f", C1_amp);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <CollectADC+0x2e8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd54 	bl	8000568 <__aeabi_f2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4917      	ldr	r1, [pc, #92]	; (8002b24 <CollectADC+0x2fc>)
 8002ac6:	4818      	ldr	r0, [pc, #96]	; (8002b28 <CollectADC+0x300>)
 8002ac8:	f00d fc3e 	bl	8010348 <siprintf>
            	add_error_event(emsg);
 8002acc:	4816      	ldr	r0, [pc, #88]	; (8002b28 <CollectADC+0x300>)
 8002ace:	f004 fcbd 	bl	800744c <add_error_event>
            	MasterSwitch =  0;
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <CollectADC+0x304>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
            	return;
 8002ad8:	e0b1      	b.n	8002c3e <CollectADC+0x416>
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	40a38800 	.word	0x40a38800
 8002ae8:	8f5c28f6 	.word	0x8f5c28f6
 8002aec:	3fe8f5c2 	.word	0x3fe8f5c2
 8002af0:	20000214 	.word	0x20000214
 8002af4:	20000908 	.word	0x20000908
 8002af8:	20000970 	.word	0x20000970
 8002afc:	20000900 	.word	0x20000900
 8002b00:	3fc80000 	.word	0x3fc80000
 8002b04:	40590000 	.word	0x40590000
 8002b08:	2000092e 	.word	0x2000092e
 8002b0c:	20000960 	.word	0x20000960
 8002b10:	20000954 	.word	0x20000954
 8002b14:	200009b0 	.word	0x200009b0
 8002b18:	20000cc0 	.word	0x20000cc0
 8002b1c:	200009a4 	.word	0x200009a4
 8002b20:	40000800 	.word	0x40000800
 8002b24:	08015f14 	.word	0x08015f14
 8002b28:	20000ae8 	.word	0x20000ae8
 8002b2c:	20000215 	.word	0x20000215
            }

		}
		else if (Channel == V1_addr) {
 8002b30:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <CollectADC+0x41c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2bd1      	cmp	r3, #209	; 0xd1
 8002b36:	d160      	bne.n	8002bfa <CollectADC+0x3d2>
			V1_Value = RAW;
 8002b38:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <CollectADC+0x420>)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6013      	str	r3, [r2, #0]
            V1_array[V1_index] = (V1_Value * 0.1875) * settings.voltageMultiply / 1000;
 8002b3e:	4b42      	ldr	r3, [pc, #264]	; (8002c48 <CollectADC+0x420>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fcfe 	bl	8000544 <__aeabi_i2d>
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <CollectADC+0x424>)
 8002b4e:	f7fd fd63 	bl	8000618 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4614      	mov	r4, r2
 8002b58:	461d      	mov	r5, r3
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <CollectADC+0x428>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fd02 	bl	8000568 <__aeabi_f2d>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fd54 	bl	8000618 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <CollectADC+0x42c>)
 8002b7e:	f7fd fe75 	bl	800086c <__aeabi_ddiv>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <CollectADC+0x430>)
 8002b88:	7809      	ldrb	r1, [r1, #0]
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fe f83a 	bl	8000c08 <__aeabi_d2f>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4931      	ldr	r1, [pc, #196]	; (8002c5c <CollectADC+0x434>)
 8002b98:	00a3      	lsls	r3, r4, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	601a      	str	r2, [r3, #0]
            V1_index++;
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <CollectADC+0x430>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <CollectADC+0x430>)
 8002ba8:	701a      	strb	r2, [r3, #0]
            if (V1_index >= 60) V1_index = 0;
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <CollectADC+0x430>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b3b      	cmp	r3, #59	; 0x3b
 8002bb0:	d902      	bls.n	8002bb8 <CollectADC+0x390>
 8002bb2:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <CollectADC+0x430>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
            float volt_sum = 0.0;
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
            for (uint8_t x = 0; x < 60; x++) {
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e00e      	b.n	8002be2 <CollectADC+0x3ba>
            	volt_sum += V1_array[x];
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <CollectADC+0x434>)
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	edc7 7a04 	vstr	s15, [r7, #16]
            for (uint8_t x = 0; x < 60; x++) {
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	3301      	adds	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b3b      	cmp	r3, #59	; 0x3b
 8002be6:	d9ed      	bls.n	8002bc4 <CollectADC+0x39c>
            }
            Voltage = volt_sum / 60;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002c60 <CollectADC+0x438>
 8002bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <CollectADC+0x43c>)
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
		}

		if (Channel == M1_addr) Channel = M2_addr;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <CollectADC+0x41c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2bc1      	cmp	r3, #193	; 0xc1
 8002c00:	d103      	bne.n	8002c0a <CollectADC+0x3e2>
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <CollectADC+0x41c>)
 8002c04:	22e1      	movs	r2, #225	; 0xe1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e016      	b.n	8002c38 <CollectADC+0x410>
		else if (Channel == M2_addr) Channel = C1_addr;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <CollectADC+0x41c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2be1      	cmp	r3, #225	; 0xe1
 8002c10:	d103      	bne.n	8002c1a <CollectADC+0x3f2>
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <CollectADC+0x41c>)
 8002c14:	22f1      	movs	r2, #241	; 0xf1
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e00e      	b.n	8002c38 <CollectADC+0x410>
		else if (Channel == C1_addr) Channel = V1_addr;
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <CollectADC+0x41c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2bf1      	cmp	r3, #241	; 0xf1
 8002c20:	d103      	bne.n	8002c2a <CollectADC+0x402>
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <CollectADC+0x41c>)
 8002c24:	22d1      	movs	r2, #209	; 0xd1
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e006      	b.n	8002c38 <CollectADC+0x410>
		else if (Channel == V1_addr) Channel = M1_addr;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <CollectADC+0x41c>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2bd1      	cmp	r3, #209	; 0xd1
 8002c30:	d102      	bne.n	8002c38 <CollectADC+0x410>
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <CollectADC+0x41c>)
 8002c34:	22c1      	movs	r2, #193	; 0xc1
 8002c36:	701a      	strb	r2, [r3, #0]
		Channel_Status = 0;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <CollectADC+0x440>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]

	}
}
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdb0      	pop	{r4, r5, r7, pc}
 8002c44:	20000214 	.word	0x20000214
 8002c48:	20000904 	.word	0x20000904
 8002c4c:	3fc80000 	.word	0x3fc80000
 8002c50:	20000cc0 	.word	0x20000cc0
 8002c54:	408f4000 	.word	0x408f4000
 8002c58:	20000985 	.word	0x20000985
 8002c5c:	20002444 	.word	0x20002444
 8002c60:	42700000 	.word	0x42700000
 8002c64:	20000964 	.word	0x20000964
 8002c68:	20000908 	.word	0x20000908

08002c6c <delay_us>:

void delay_us (uint16_t us)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5,0);  // set the counter value a 0
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <delay_us+0x30>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim5) < us);  // wait for the counter to reach the us input in the parameter
 8002c7e:	bf00      	nop
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <delay_us+0x30>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3f9      	bcc.n	8002c80 <delay_us+0x14>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20001204 	.word	0x20001204

08002ca0 <unDock>:

void unDock(void) {
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b099      	sub	sp, #100	; 0x64
 8002ca4:	af12      	add	r7, sp, #72	; 0x48

	// Simple undock sequence,  check if Battery is ready (fully charged) and if we are within working hours.

	RTC_TimeTypeDef currTime = {0};
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef currDate = {0};
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4837      	ldr	r0, [pc, #220]	; (8002d9c <unDock+0xfc>)
 8002cc0:	f009 fee9 	bl	800ca96 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4834      	ldr	r0, [pc, #208]	; (8002d9c <unDock+0xfc>)
 8002ccc:	f009 ffe8 	bl	800cca0 <HAL_RTC_GetDate>

	if (currTime.Hours >= settings.WorkingHourStart && currTime.Hours < settings.WorkingHourEnd && Battery_Ready == 1 && Docked == 1) {
 8002cd0:	793a      	ldrb	r2, [r7, #4]
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <unDock+0x100>)
 8002cd4:	78db      	ldrb	r3, [r3, #3]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d35c      	bcc.n	8002d94 <unDock+0xf4>
 8002cda:	793a      	ldrb	r2, [r7, #4]
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <unDock+0x100>)
 8002cde:	791b      	ldrb	r3, [r3, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d257      	bcs.n	8002d94 <unDock+0xf4>
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <unDock+0x104>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d153      	bne.n	8002d94 <unDock+0xf4>
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <unDock+0x108>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d14f      	bne.n	8002d94 <unDock+0xf4>

		add_error_event("Switch Main Battery");
 8002cf4:	482d      	ldr	r0, [pc, #180]	; (8002dac <unDock+0x10c>)
 8002cf6:	f004 fba9 	bl	800744c <add_error_event>
		add_error_event("Test UNDOCK");
 8002cfa:	482d      	ldr	r0, [pc, #180]	; (8002db0 <unDock+0x110>)
 8002cfc:	f004 fba6 	bl	800744c <add_error_event>
		Serial_Console("Switching to Main Battery\r\n");
 8002d00:	482c      	ldr	r0, [pc, #176]	; (8002db4 <unDock+0x114>)
 8002d02:	f001 fafb 	bl	80042fc <Serial_Console>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2101      	movs	r1, #1
 8002d0a:	482b      	ldr	r0, [pc, #172]	; (8002db8 <unDock+0x118>)
 8002d0c:	f007 fa04 	bl	800a118 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8002d10:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d14:	f005 fcbc 	bl	8008690 <HAL_Delay>

		MasterSwitch = 1;
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <unDock+0x11c>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]

		mpu.roll = 0;
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <unDock+0x120>)
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
		mpu.pitch = 0;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <unDock+0x120>)
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]

		MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 3000);
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <unDock+0x100>)
 8002d30:	8a5b      	ldrh	r3, [r3, #18]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <unDock+0x100>)
 8002d34:	8a11      	ldrh	r1, [r2, #16]
 8002d36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fa14 	bl	8005168 <MotorBackward>

		MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 800);			// This needs to be changed if your docking is on the right side
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <unDock+0x100>)
 8002d42:	8a5b      	ldrh	r3, [r3, #18]
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <unDock+0x100>)
 8002d46:	8a11      	ldrh	r1, [r2, #16]
 8002d48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 fb61 	bl	8005414 <MotorLeft>

		Docked = 0;
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <unDock+0x108>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
		Initial_Start = 0;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <unDock+0x124>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		Start_Threshold = 0;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <unDock+0x128>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
		Battery_Ready = 0;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <unDock+0x104>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
		lastError = 0;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <unDock+0x12c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
		perimeterTracking = 0;
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <unDock+0x130>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
		perimeterTrackingActive = 0;
 8002d76:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <unDock+0x134>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		write_all_settings(settings);
 8002d7c:	4c08      	ldr	r4, [pc, #32]	; (8002da0 <unDock+0x100>)
 8002d7e:	4668      	mov	r0, sp
 8002d80:	f104 0310 	add.w	r3, r4, #16
 8002d84:	2248      	movs	r2, #72	; 0x48
 8002d86:	4619      	mov	r1, r3
 8002d88:	f00c fc48 	bl	800f61c <memcpy>
 8002d8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d90:	f004 fd5e 	bl	8007850 <write_all_settings>

	}

}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	20002420 	.word	0x20002420
 8002da0:	20000cc0 	.word	0x20000cc0
 8002da4:	20000981 	.word	0x20000981
 8002da8:	2000097d 	.word	0x2000097d
 8002dac:	08015f28 	.word	0x08015f28
 8002db0:	08015f3c 	.word	0x08015f3c
 8002db4:	08015f48 	.word	0x08015f48
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	20000215 	.word	0x20000215
 8002dc0:	2000239c 	.word	0x2000239c
 8002dc4:	2000092e 	.word	0x2000092e
 8002dc8:	20000930 	.word	0x20000930
 8002dcc:	20000918 	.word	0x20000918
 8002dd0:	2000092c 	.word	0x2000092c
 8002dd4:	2000092d 	.word	0x2000092d

08002dd8 <ChargerConnected>:

void ChargerConnected(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0

	// Is the charger connected?

	if (ChargerConnect == 1 || Docked == 1) {
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <ChargerConnected+0xf0>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d003      	beq.n	8002dec <ChargerConnected+0x14>
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <ChargerConnected+0xf4>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d128      	bne.n	8002e3e <ChargerConnected+0x66>
		if (Voltage >= settings.Battery_High_Limit && Battery_Ready == 0) {
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <ChargerConnected+0xf8>)
 8002dee:	ed93 7a07 	vldr	s14, [r3, #28]
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <ChargerConnected+0xfc>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d900      	bls.n	8002e04 <ChargerConnected+0x2c>
			Serial_Console("Charger disconnected.\r\n");
			ChargerConnect = 0;
			perimeterTracking = 0;
			perimeterTrackingActive = 0;
		}
		return;
 8002e02:	e05f      	b.n	8002ec4 <ChargerConnected+0xec>
		if (Voltage >= settings.Battery_High_Limit && Battery_Ready == 0) {
 8002e04:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <ChargerConnected+0x100>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d15b      	bne.n	8002ec4 <ChargerConnected+0xec>
			Battery_Ready = 1;
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <ChargerConnected+0x100>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e18:	4830      	ldr	r0, [pc, #192]	; (8002edc <ChargerConnected+0x104>)
 8002e1a:	f007 f97d 	bl	800a118 <HAL_GPIO_WritePin>
			add_error_event("Charger disconnect");
 8002e1e:	4830      	ldr	r0, [pc, #192]	; (8002ee0 <ChargerConnected+0x108>)
 8002e20:	f004 fb14 	bl	800744c <add_error_event>
			Serial_Console("Charger disconnected.\r\n");
 8002e24:	482f      	ldr	r0, [pc, #188]	; (8002ee4 <ChargerConnected+0x10c>)
 8002e26:	f001 fa69 	bl	80042fc <Serial_Console>
			ChargerConnect = 0;
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <ChargerConnected+0xf0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
			perimeterTracking = 0;
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <ChargerConnected+0x110>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
			perimeterTrackingActive = 0;
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <ChargerConnected+0x114>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
		return;
 8002e3c:	e042      	b.n	8002ec4 <ChargerConnected+0xec>
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {			// Read Volt sense pin
 8002e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e42:	482b      	ldr	r0, [pc, #172]	; (8002ef0 <ChargerConnected+0x118>)
 8002e44:	f007 f950 	bl	800a0e8 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d13b      	bne.n	8002ec6 <ChargerConnected+0xee>
		HAL_Delay(settings.HoldChargeDetection);									// Wait for a while so a proper connection is made
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <ChargerConnected+0xf8>)
 8002e50:	895b      	ldrh	r3, [r3, #10]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fc1c 	bl	8008690 <HAL_Delay>
		Force_Active = 0;
 8002e58:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <ChargerConnected+0x11c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
		MotorBrake();
 8002e5e:	f002 fba9 	bl	80055b4 <MotorBrake>
		cutterHardBreak();
 8002e62:	f001 fb95 	bl	8004590 <cutterHardBreak>
		add_error_event("Charger connect");
 8002e66:	4824      	ldr	r0, [pc, #144]	; (8002ef8 <ChargerConnected+0x120>)
 8002e68:	f004 faf0 	bl	800744c <add_error_event>
		Serial_Console("Charger Connected\r\n");
 8002e6c:	4823      	ldr	r0, [pc, #140]	; (8002efc <ChargerConnected+0x124>)
 8002e6e:	f001 fa45 	bl	80042fc <Serial_Console>
		HAL_Delay(10000);
 8002e72:	f242 7010 	movw	r0, #10000	; 0x2710
 8002e76:	f005 fc0b 	bl	8008690 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);				// Main Power switch
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4820      	ldr	r0, [pc, #128]	; (8002f00 <ChargerConnected+0x128>)
 8002e80:	f007 f94a 	bl	800a118 <HAL_GPIO_WritePin>
		Serial_Console("Changing Main Power\r\n");
 8002e84:	481f      	ldr	r0, [pc, #124]	; (8002f04 <ChargerConnected+0x12c>)
 8002e86:	f001 fa39 	bl	80042fc <Serial_Console>
		ChargerConnect = 1;
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <ChargerConnected+0xf0>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
		Docked = 1;
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <ChargerConnected+0xf4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000);
 8002e96:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e9a:	f005 fbf9 	bl	8008690 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);			// Charger Switch
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <ChargerConnected+0x104>)
 8002ea6:	f007 f937 	bl	800a118 <HAL_GPIO_WritePin>
		add_error_event("Charging active");
 8002eaa:	4817      	ldr	r0, [pc, #92]	; (8002f08 <ChargerConnected+0x130>)
 8002eac:	f004 face 	bl	800744c <add_error_event>
		Serial_Console("Charging activated\r\n");
 8002eb0:	4816      	ldr	r0, [pc, #88]	; (8002f0c <ChargerConnected+0x134>)
 8002eb2:	f001 fa23 	bl	80042fc <Serial_Console>
		perimeterTracking = 0;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <ChargerConnected+0x110>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
		perimeterTrackingActive = 0;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <ChargerConnected+0x114>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]

		return;
 8002ec2:	e000      	b.n	8002ec6 <ChargerConnected+0xee>
		return;
 8002ec4:	bf00      	nop
		}
}
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000998 	.word	0x20000998
 8002ecc:	2000097d 	.word	0x2000097d
 8002ed0:	20000cc0 	.word	0x20000cc0
 8002ed4:	20000964 	.word	0x20000964
 8002ed8:	20000981 	.word	0x20000981
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	08015f64 	.word	0x08015f64
 8002ee4:	08015f78 	.word	0x08015f78
 8002ee8:	2000092c 	.word	0x2000092c
 8002eec:	2000092d 	.word	0x2000092d
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	20000990 	.word	0x20000990
 8002ef8:	08015f90 	.word	0x08015f90
 8002efc:	08015fa0 	.word	0x08015fa0
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	08015fb4 	.word	0x08015fb4
 8002f08:	08015fcc 	.word	0x08015fcc
 8002f0c:	08015fdc 	.word	0x08015fdc

08002f10 <perimeterTracker>:

void perimeterTracker(void) {
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0

	CheckSecurity();
 8002f16:	f001 fa19 	bl	800434c <CheckSecurity>

	mag_near_bwf = 0;
 8002f1a:	4ba3      	ldr	r3, [pc, #652]	; (80031a8 <perimeterTracker+0x298>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	highgrass_slowdown = 0;
 8002f20:	4ba2      	ldr	r3, [pc, #648]	; (80031ac <perimeterTracker+0x29c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]

	elapsedTime = HAL_GetTick() - previousTime;
 8002f26:	f005 fba7 	bl	8008678 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <perimeterTracker+0x2a0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	4aa0      	ldr	r2, [pc, #640]	; (80031b4 <perimeterTracker+0x2a4>)
 8002f34:	6013      	str	r3, [r2, #0]

    if (BWF2_Status == OUTSIDE) {
 8002f36:	4ba0      	ldr	r3, [pc, #640]	; (80031b8 <perimeterTracker+0x2a8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d125      	bne.n	8002f8a <perimeterTracker+0x7a>
    	Tick1 -= elapsedTime;
 8002f3e:	4b9f      	ldr	r3, [pc, #636]	; (80031bc <perimeterTracker+0x2ac>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b9c      	ldr	r3, [pc, #624]	; (80031b4 <perimeterTracker+0x2a4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	4a9c      	ldr	r2, [pc, #624]	; (80031bc <perimeterTracker+0x2ac>)
 8002f4a:	6013      	str	r3, [r2, #0]
    	Tick2 = 0;
 8002f4c:	4b9c      	ldr	r3, [pc, #624]	; (80031c0 <perimeterTracker+0x2b0>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    	GoHome_timer_IN = HAL_GetTick();
 8002f52:	f005 fb91 	bl	8008678 <HAL_GetTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4a9a      	ldr	r2, [pc, #616]	; (80031c4 <perimeterTracker+0x2b4>)
 8002f5a:	6013      	str	r3, [r2, #0]

    	if (HAL_GetTick() - GoHome_timer_OUT >= 10000) {		// 10 seconds
 8002f5c:	f005 fb8c 	bl	8008678 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b99      	ldr	r3, [pc, #612]	; (80031c8 <perimeterTracker+0x2b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d90c      	bls.n	8002f8a <perimeterTracker+0x7a>
    		perimeterTrackingActive = 0;
 8002f70:	4b96      	ldr	r3, [pc, #600]	; (80031cc <perimeterTracker+0x2bc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    		perimeterTracking = 0;
 8002f76:	4b96      	ldr	r3, [pc, #600]	; (80031d0 <perimeterTracker+0x2c0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    		MasterSwitch = 0;
 8002f7c:	4b95      	ldr	r3, [pc, #596]	; (80031d4 <perimeterTracker+0x2c4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
    		add_error_event("Stuck during perimeterTracking - HALT");
 8002f82:	4895      	ldr	r0, [pc, #596]	; (80031d8 <perimeterTracker+0x2c8>)
 8002f84:	f004 fa62 	bl	800744c <add_error_event>
    		return;
 8002f88:	e10a      	b.n	80031a0 <perimeterTracker+0x290>

    	}
    }

    if (BWF2_Status == INSIDE) {
 8002f8a:	4b8b      	ldr	r3, [pc, #556]	; (80031b8 <perimeterTracker+0x2a8>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d125      	bne.n	8002fde <perimeterTracker+0xce>
    	Tick2 -= elapsedTime;
 8002f92:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <perimeterTracker+0x2b0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <perimeterTracker+0x2a4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4a88      	ldr	r2, [pc, #544]	; (80031c0 <perimeterTracker+0x2b0>)
 8002f9e:	6013      	str	r3, [r2, #0]
    	Tick1 = 0;
 8002fa0:	4b86      	ldr	r3, [pc, #536]	; (80031bc <perimeterTracker+0x2ac>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    	GoHome_timer_OUT = HAL_GetTick();
 8002fa6:	f005 fb67 	bl	8008678 <HAL_GetTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a86      	ldr	r2, [pc, #536]	; (80031c8 <perimeterTracker+0x2b8>)
 8002fae:	6013      	str	r3, [r2, #0]

    	if (HAL_GetTick() - GoHome_timer_IN >= 10000) {			// 10 seconds
 8002fb0:	f005 fb62 	bl	8008678 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b83      	ldr	r3, [pc, #524]	; (80031c4 <perimeterTracker+0x2b4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d90c      	bls.n	8002fde <perimeterTracker+0xce>
    		perimeterTrackingActive = 0;
 8002fc4:	4b81      	ldr	r3, [pc, #516]	; (80031cc <perimeterTracker+0x2bc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
    		perimeterTracking = 0;
 8002fca:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <perimeterTracker+0x2c0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
    		MasterSwitch = 0;
 8002fd0:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <perimeterTracker+0x2c4>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
    		add_error_event("Stuck during perimeterTracking - HALT");
 8002fd6:	4880      	ldr	r0, [pc, #512]	; (80031d8 <perimeterTracker+0x2c8>)
 8002fd8:	f004 fa38 	bl	800744c <add_error_event>
    		return;
 8002fdc:	e0e0      	b.n	80031a0 <perimeterTracker+0x290>

    	}
    }

    error = settings.motorMaxSpeed - (Tick1 + Tick2);                // determine error
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <perimeterTracker+0x2cc>)
 8002fe0:	8a1b      	ldrh	r3, [r3, #16]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <perimeterTracker+0x2ac>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <perimeterTracker+0x2b0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	1acb      	subs	r3, r1, r3
 8002ff0:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <perimeterTracker+0x2d0>)
 8002ff2:	6013      	str	r3, [r2, #0]
    cumError += error * elapsedTime;               // compute integral
 8002ff4:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <perimeterTracker+0x2d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <perimeterTracker+0x2a4>)
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fb02 f203 	mul.w	r2, r2, r3
 8003000:	4b78      	ldr	r3, [pc, #480]	; (80031e4 <perimeterTracker+0x2d4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4413      	add	r3, r2
 8003006:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <perimeterTracker+0x2d4>)
 8003008:	6013      	str	r3, [r2, #0]
    rateError = (error - lastError)/elapsedTime;   // compute derivative
 800300a:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <perimeterTracker+0x2d0>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <perimeterTracker+0x2d8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1ad2      	subs	r2, r2, r3
 8003014:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <perimeterTracker+0x2a4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	4a73      	ldr	r2, [pc, #460]	; (80031ec <perimeterTracker+0x2dc>)
 800301e:	6013      	str	r3, [r2, #0]

    float out = settings.kp*error + settings.ki*cumError + settings.kd*rateError;                //PID output
 8003020:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <perimeterTracker+0x2cc>)
 8003022:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <perimeterTracker+0x2d0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003036:	4b69      	ldr	r3, [pc, #420]	; (80031dc <perimeterTracker+0x2cc>)
 8003038:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800303c:	4b69      	ldr	r3, [pc, #420]	; (80031e4 <perimeterTracker+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003050:	4b62      	ldr	r3, [pc, #392]	; (80031dc <perimeterTracker+0x2cc>)
 8003052:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003056:	4b65      	ldr	r3, [pc, #404]	; (80031ec <perimeterTracker+0x2dc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306a:	edc7 7a01 	vstr	s15, [r7, #4]

    lastError = error;                             //remember current error
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <perimeterTracker+0x2d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <perimeterTracker+0x2d8>)
 8003074:	6013      	str	r3, [r2, #0]
    previousTime = HAL_GetTick();                  //remember current time
 8003076:	f005 faff 	bl	8008678 <HAL_GetTick>
 800307a:	4603      	mov	r3, r0
 800307c:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <perimeterTracker+0x2a0>)
 800307e:	6013      	str	r3, [r2, #0]

    int speedA = (settings.motorMaxSpeed + round(out));
 8003080:	4b56      	ldr	r3, [pc, #344]	; (80031dc <perimeterTracker+0x2cc>)
 8003082:	8a1b      	ldrh	r3, [r3, #16]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa5d 	bl	8000544 <__aeabi_i2d>
 800308a:	4604      	mov	r4, r0
 800308c:	460d      	mov	r5, r1
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fa6a 	bl	8000568 <__aeabi_f2d>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	ec43 2b10 	vmov	d0, r2, r3
 800309c:	f011 fb2e 	bl	80146fc <round>
 80030a0:	ec53 2b10 	vmov	r2, r3, d0
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f900 	bl	80002ac <__adddf3>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fd60 	bl	8000b78 <__aeabi_d2iz>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]
    int speedB = (settings.motorMaxSpeed - round(out));
 80030bc:	4b47      	ldr	r3, [pc, #284]	; (80031dc <perimeterTracker+0x2cc>)
 80030be:	8a1b      	ldrh	r3, [r3, #16]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa3f 	bl	8000544 <__aeabi_i2d>
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fa4c 	bl	8000568 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	ec43 2b10 	vmov	d0, r2, r3
 80030d8:	f011 fb10 	bl	80146fc <round>
 80030dc:	ec53 2b10 	vmov	r2, r3, d0
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd f8e0 	bl	80002a8 <__aeabi_dsub>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fd fd42 	bl	8000b78 <__aeabi_d2iz>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60bb      	str	r3, [r7, #8]

    if (speedA > settings.motorMaxSpeed) speedA = settings.motorMaxSpeed;				// limit upper and lower speed
 80030f8:	4b38      	ldr	r3, [pc, #224]	; (80031dc <perimeterTracker+0x2cc>)
 80030fa:	8a1b      	ldrh	r3, [r3, #16]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4293      	cmp	r3, r2
 8003102:	dd02      	ble.n	800310a <perimeterTracker+0x1fa>
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <perimeterTracker+0x2cc>)
 8003106:	8a1b      	ldrh	r3, [r3, #16]
 8003108:	60fb      	str	r3, [r7, #12]
    if (speedB > settings.motorMaxSpeed) speedB = settings.motorMaxSpeed;
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <perimeterTracker+0x2cc>)
 800310c:	8a1b      	ldrh	r3, [r3, #16]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4293      	cmp	r3, r2
 8003114:	dd02      	ble.n	800311c <perimeterTracker+0x20c>
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <perimeterTracker+0x2cc>)
 8003118:	8a1b      	ldrh	r3, [r3, #16]
 800311a:	60bb      	str	r3, [r7, #8]

    if (speedA < 1000) speedA = 1000;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003122:	da02      	bge.n	800312a <perimeterTracker+0x21a>
 8003124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003128:	60fb      	str	r3, [r7, #12]
    if (speedB < 1000) speedB = 1000;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003130:	da02      	bge.n	8003138 <perimeterTracker+0x228>
 8003132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003136:	60bb      	str	r3, [r7, #8]

    if (BWF2_Status == OUTSIDE) {
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <perimeterTracker+0x2a8>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11f      	bne.n	8003180 <perimeterTracker+0x270>

		  if (BWF1_Status == OUTSIDE) {
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <perimeterTracker+0x2e0>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10b      	bne.n	8003160 <perimeterTracker+0x250>
			  TIM4->CCR1 = settings.motorMaxSpeed;			// if both boundary sensors are OUTSIDE, reverse M1 motor, this logic needs to be changed if docking is to the right
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <perimeterTracker+0x2cc>)
 800314a:	8a1a      	ldrh	r2, [r3, #16]
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <perimeterTracker+0x2e4>)
 800314e:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(300);
 8003150:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003154:	f005 fa9c 	bl	8008690 <HAL_Delay>
			  TIM4->CCR2 = 0;
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <perimeterTracker+0x2e4>)
 800315a:	2200      	movs	r2, #0
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
 800315e:	e009      	b.n	8003174 <perimeterTracker+0x264>
		  }
		  else if (BWF1_Status == INSIDE) {
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <perimeterTracker+0x2e0>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <perimeterTracker+0x264>
			  TIM4->CCR1 = 0;
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <perimeterTracker+0x2e4>)
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = speedB;
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <perimeterTracker+0x2e4>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6393      	str	r3, [r2, #56]	; 0x38
		  }

		  TIM4->CCR3 = speedA;
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <perimeterTracker+0x2e4>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	63d3      	str	r3, [r2, #60]	; 0x3c
		  TIM4->CCR4 = 0;
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <perimeterTracker+0x2e4>)
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

    }

    if (BWF2_Status == INSIDE) {
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <perimeterTracker+0x2a8>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10b      	bne.n	80031a0 <perimeterTracker+0x290>
		  TIM4->CCR1 = 0;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <perimeterTracker+0x2e4>)
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM4->CCR2 = speedA;
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <perimeterTracker+0x2e4>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6393      	str	r3, [r2, #56]	; 0x38

		  TIM4->CCR3 = speedB;
 8003194:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <perimeterTracker+0x2e4>)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	63d3      	str	r3, [r2, #60]	; 0x3c
		  TIM4->CCR4 = 0;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <perimeterTracker+0x2e4>)
 800319c:	2200      	movs	r2, #0
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }

}
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdb0      	pop	{r4, r5, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000099a 	.word	0x2000099a
 80031ac:	200009b0 	.word	0x200009b0
 80031b0:	20000928 	.word	0x20000928
 80031b4:	20000920 	.word	0x20000920
 80031b8:	20000969 	.word	0x20000969
 80031bc:	2000090c 	.word	0x2000090c
 80031c0:	20000910 	.word	0x20000910
 80031c4:	200009a8 	.word	0x200009a8
 80031c8:	200009ac 	.word	0x200009ac
 80031cc:	2000092d 	.word	0x2000092d
 80031d0:	2000092c 	.word	0x2000092c
 80031d4:	20000215 	.word	0x20000215
 80031d8:	08015ff4 	.word	0x08015ff4
 80031dc:	20000cc0 	.word	0x20000cc0
 80031e0:	20000914 	.word	0x20000914
 80031e4:	2000091c 	.word	0x2000091c
 80031e8:	20000918 	.word	0x20000918
 80031ec:	20000924 	.word	0x20000924
 80031f0:	20000968 	.word	0x20000968
 80031f4:	40000800 	.word	0x40000800

080031f8 <parseCommand_Console>:
void parseCommand_Console(void) {
 80031f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031fc:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8003200:	af12      	add	r7, sp, #72	; 0x48

	// Parse commands from the Console

	char Command[64] = {"\0"};
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8003208:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800320c:	223c      	movs	r2, #60	; 0x3c
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f00c fa11 	bl	800f638 <memset>

	for (uint8_t x = 0; x < sizeof(ConsoleBuffer); x++) {
 8003216:	2300      	movs	r3, #0
 8003218:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 800321c:	f000 bfbd 	b.w	800419a <parseCommand_Console+0xfa2>
		if (ConsoleBuffer[x] == 13) {
 8003220:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8003224:	4ab4      	ldr	r2, [pc, #720]	; (80034f8 <parseCommand_Console+0x300>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	2b0d      	cmp	r3, #13
 800322a:	f040 87b1 	bne.w	8004190 <parseCommand_Console+0xf98>
			if (ConsoleBuffer[0] == 13) memcpy(Command, "DISABLE", 7);
 800322e:	4bb2      	ldr	r3, [pc, #712]	; (80034f8 <parseCommand_Console+0x300>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b0d      	cmp	r3, #13
 8003234:	d107      	bne.n	8003246 <parseCommand_Console+0x4e>
 8003236:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800323a:	2207      	movs	r2, #7
 800323c:	49af      	ldr	r1, [pc, #700]	; (80034fc <parseCommand_Console+0x304>)
 800323e:	4618      	mov	r0, r3
 8003240:	f00c f9ec 	bl	800f61c <memcpy>
 8003244:	e007      	b.n	8003256 <parseCommand_Console+0x5e>
			else {
				memcpy(Command,ConsoleBuffer,x);
 8003246:	f897 236f 	ldrb.w	r2, [r7, #879]	; 0x36f
 800324a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800324e:	49aa      	ldr	r1, [pc, #680]	; (80034f8 <parseCommand_Console+0x300>)
 8003250:	4618      	mov	r0, r3
 8003252:	f00c f9e3 	bl	800f61c <memcpy>
			}
			sprintf(msg,"%s\r\n", Command);
 8003256:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800325a:	461a      	mov	r2, r3
 800325c:	49a8      	ldr	r1, [pc, #672]	; (8003500 <parseCommand_Console+0x308>)
 800325e:	48a9      	ldr	r0, [pc, #676]	; (8003504 <parseCommand_Console+0x30c>)
 8003260:	f00d f872 	bl	8010348 <siprintf>
			Serial_Console(msg);
 8003264:	48a7      	ldr	r0, [pc, #668]	; (8003504 <parseCommand_Console+0x30c>)
 8003266:	f001 f849 	bl	80042fc <Serial_Console>
			for (uint8_t i = 0; i < CONSOLE_BFR_SIZE; i++) {
 800326a:	2300      	movs	r3, #0
 800326c:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
 8003270:	e026      	b.n	80032c0 <parseCommand_Console+0xc8>
				Command[i] = toupper(Command[i]);
 8003272:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8003276:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800327a:	4413      	add	r3, r2
 800327c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8003280:	f887 3363 	strb.w	r3, [r7, #867]	; 0x363
 8003284:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 8003288:	3301      	adds	r3, #1
 800328a:	4a9f      	ldr	r2, [pc, #636]	; (8003508 <parseCommand_Console+0x310>)
 800328c:	4413      	add	r3, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d103      	bne.n	80032a0 <parseCommand_Console+0xa8>
 8003298:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 800329c:	3b20      	subs	r3, #32
 800329e:	e001      	b.n	80032a4 <parseCommand_Console+0xac>
 80032a0:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 80032a4:	f897 236e 	ldrb.w	r2, [r7, #878]	; 0x36e
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ae:	4413      	add	r3, r2
 80032b0:	460a      	mov	r2, r1
 80032b2:	f803 2c50 	strb.w	r2, [r3, #-80]
			for (uint8_t i = 0; i < CONSOLE_BFR_SIZE; i++) {
 80032b6:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 80032ba:	3301      	adds	r3, #1
 80032bc:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
 80032c0:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 80032c4:	2b3f      	cmp	r3, #63	; 0x3f
 80032c6:	d9d4      	bls.n	8003272 <parseCommand_Console+0x7a>
			}

			if (strcmp(Command, "HELLO") == 0) {
 80032c8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80032cc:	498f      	ldr	r1, [pc, #572]	; (800350c <parseCommand_Console+0x314>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fc ff7e 	bl	80001d0 <strcmp>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <parseCommand_Console+0xe8>
				Serial_Console("Hello fellow user! Welcome to RazorBoard!\r\n");
 80032da:	488d      	ldr	r0, [pc, #564]	; (8003510 <parseCommand_Console+0x318>)
 80032dc:	f001 f80e 	bl	80042fc <Serial_Console>
				}
			if (strcmp(Command, "VERSION") == 0) {
 80032e0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80032e4:	498b      	ldr	r1, [pc, #556]	; (8003514 <parseCommand_Console+0x31c>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fc ff72 	bl	80001d0 <strcmp>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <parseCommand_Console+0x10a>
				sprintf(msg, "%s\r\n", VERSION);
 80032f2:	4a89      	ldr	r2, [pc, #548]	; (8003518 <parseCommand_Console+0x320>)
 80032f4:	4982      	ldr	r1, [pc, #520]	; (8003500 <parseCommand_Console+0x308>)
 80032f6:	4883      	ldr	r0, [pc, #524]	; (8003504 <parseCommand_Console+0x30c>)
 80032f8:	f00d f826 	bl	8010348 <siprintf>
				Serial_Console(msg);
 80032fc:	4881      	ldr	r0, [pc, #516]	; (8003504 <parseCommand_Console+0x30c>)
 80032fe:	f000 fffd 	bl	80042fc <Serial_Console>
				}
			if (strcmp(Command, "DEBUG ON") == 0) {
 8003302:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003306:	4985      	ldr	r1, [pc, #532]	; (800351c <parseCommand_Console+0x324>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fc ff61 	bl	80001d0 <strcmp>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <parseCommand_Console+0x128>
				DEBUG_RAZORBOARD = 1;
 8003314:	4b82      	ldr	r3, [pc, #520]	; (8003520 <parseCommand_Console+0x328>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
				Serial_Console("DEBUG is now ON\r\n");
 800331a:	4882      	ldr	r0, [pc, #520]	; (8003524 <parseCommand_Console+0x32c>)
 800331c:	f000 ffee 	bl	80042fc <Serial_Console>
				}
			if (strcmp(Command, "DEBUG OFF") == 0) {
 8003320:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003324:	4980      	ldr	r1, [pc, #512]	; (8003528 <parseCommand_Console+0x330>)
 8003326:	4618      	mov	r0, r3
 8003328:	f7fc ff52 	bl	80001d0 <strcmp>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <parseCommand_Console+0x146>
				DEBUG_RAZORBOARD = 0;
 8003332:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <parseCommand_Console+0x328>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
				Serial_Console("DEBUG is now OFF\r\n");
 8003338:	487c      	ldr	r0, [pc, #496]	; (800352c <parseCommand_Console+0x334>)
 800333a:	f000 ffdf 	bl	80042fc <Serial_Console>
				}
			if (strcmp(Command, "VOLTAGE") == 0) {
 800333e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003342:	497b      	ldr	r1, [pc, #492]	; (8003530 <parseCommand_Console+0x338>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7fc ff43 	bl	80001d0 <strcmp>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <parseCommand_Console+0x174>
				sprintf(msg, "%.2f\r\n", Voltage);
 8003350:	4b78      	ldr	r3, [pc, #480]	; (8003534 <parseCommand_Console+0x33c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f907 	bl	8000568 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4976      	ldr	r1, [pc, #472]	; (8003538 <parseCommand_Console+0x340>)
 8003360:	4868      	ldr	r0, [pc, #416]	; (8003504 <parseCommand_Console+0x30c>)
 8003362:	f00c fff1 	bl	8010348 <siprintf>
				Serial_Console(msg);
 8003366:	4867      	ldr	r0, [pc, #412]	; (8003504 <parseCommand_Console+0x30c>)
 8003368:	f000 ffc8 	bl	80042fc <Serial_Console>
				}
			if (strcmp(Command, "UPGRADE") == 0) {
 800336c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003370:	4972      	ldr	r1, [pc, #456]	; (800353c <parseCommand_Console+0x344>)
 8003372:	4618      	mov	r0, r3
 8003374:	f7fc ff2c 	bl	80001d0 <strcmp>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <parseCommand_Console+0x19a>
				Serial_Console("Entering Bootloader...\r\n");
 800337e:	4870      	ldr	r0, [pc, #448]	; (8003540 <parseCommand_Console+0x348>)
 8003380:	f000 ffbc 	bl	80042fc <Serial_Console>
				HAL_Delay(500);
 8003384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003388:	f005 f982 	bl	8008690 <HAL_Delay>
				BootLoaderInit(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fe fc97 	bl	8001cc0 <BootLoaderInit>
			}
			if (strcmp(Command, "SHOW SIG") == 0) {
 8003392:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003396:	496b      	ldr	r1, [pc, #428]	; (8003544 <parseCommand_Console+0x34c>)
 8003398:	4618      	mov	r0, r3
 800339a:	f7fc ff19 	bl	80001d0 <strcmp>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d125      	bne.n	80033f0 <parseCommand_Console+0x1f8>
				Serial_Console("Signature will be printed in 8 seconds, please start your plotter before.\r\n");
 80033a4:	4868      	ldr	r0, [pc, #416]	; (8003548 <parseCommand_Console+0x350>)
 80033a6:	f000 ffa9 	bl	80042fc <Serial_Console>
				HAL_Delay(8000);
 80033aa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80033ae:	f005 f96f 	bl	8008690 <HAL_Delay>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80033b8:	e016      	b.n	80033e8 <parseCommand_Console+0x1f0>
					sprintf(msg,"%f\r\n", validSignature[x]);
 80033ba:	4a64      	ldr	r2, [pc, #400]	; (800354c <parseCommand_Console+0x354>)
 80033bc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8ce 	bl	8000568 <__aeabi_f2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	495f      	ldr	r1, [pc, #380]	; (8003550 <parseCommand_Console+0x358>)
 80033d2:	484c      	ldr	r0, [pc, #304]	; (8003504 <parseCommand_Console+0x30c>)
 80033d4:	f00c ffb8 	bl	8010348 <siprintf>
					Serial_Console(msg);
 80033d8:	484a      	ldr	r0, [pc, #296]	; (8003504 <parseCommand_Console+0x30c>)
 80033da:	f000 ff8f 	bl	80042fc <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 80033de:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80033e2:	3301      	adds	r3, #1
 80033e4:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80033e8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80033ec:	2b7f      	cmp	r3, #127	; 0x7f
 80033ee:	dde4      	ble.n	80033ba <parseCommand_Console+0x1c2>
				}
			}
			if (strcmp(Command, "EXPORT SIG") == 0) {
 80033f0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80033f4:	4957      	ldr	r1, [pc, #348]	; (8003554 <parseCommand_Console+0x35c>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fc feea 	bl	80001d0 <strcmp>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d127      	bne.n	8003452 <parseCommand_Console+0x25a>
				Serial_Console("Signature exported as an array\r\n");
 8003402:	4855      	ldr	r0, [pc, #340]	; (8003558 <parseCommand_Console+0x360>)
 8003404:	f000 ff7a 	bl	80042fc <Serial_Console>
				Serial_Console("{ ");
 8003408:	4854      	ldr	r0, [pc, #336]	; (800355c <parseCommand_Console+0x364>)
 800340a:	f000 ff77 	bl	80042fc <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8003414:	e016      	b.n	8003444 <parseCommand_Console+0x24c>
					sprintf(msg,"%f,", validSignature[x]);
 8003416:	4a4d      	ldr	r2, [pc, #308]	; (800354c <parseCommand_Console+0x354>)
 8003418:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f8a0 	bl	8000568 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	494c      	ldr	r1, [pc, #304]	; (8003560 <parseCommand_Console+0x368>)
 800342e:	4835      	ldr	r0, [pc, #212]	; (8003504 <parseCommand_Console+0x30c>)
 8003430:	f00c ff8a 	bl	8010348 <siprintf>
					Serial_Console(msg);
 8003434:	4833      	ldr	r0, [pc, #204]	; (8003504 <parseCommand_Console+0x30c>)
 8003436:	f000 ff61 	bl	80042fc <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 800343a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800343e:	3301      	adds	r3, #1
 8003440:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8003444:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8003448:	2b7f      	cmp	r3, #127	; 0x7f
 800344a:	dde4      	ble.n	8003416 <parseCommand_Console+0x21e>
				}
				Serial_Console(" };\r\n");
 800344c:	4845      	ldr	r0, [pc, #276]	; (8003564 <parseCommand_Console+0x36c>)
 800344e:	f000 ff55 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "RECORD SIG") == 0) {
 8003452:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003456:	4944      	ldr	r1, [pc, #272]	; (8003568 <parseCommand_Console+0x370>)
 8003458:	4618      	mov	r0, r3
 800345a:	f7fc feb9 	bl	80001d0 <strcmp>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <parseCommand_Console+0x278>
				Signature_Record = TRUE;
 8003464:	4b41      	ldr	r3, [pc, #260]	; (800356c <parseCommand_Console+0x374>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
				Serial_Console("Done!\r\n");
 800346a:	4841      	ldr	r0, [pc, #260]	; (8003570 <parseCommand_Console+0x378>)
 800346c:	f000 ff46 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "TEST LEFT MOTOR") == 0) {
 8003470:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003474:	493f      	ldr	r1, [pc, #252]	; (8003574 <parseCommand_Console+0x37c>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc feaa 	bl	80001d0 <strcmp>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <parseCommand_Console+0x2aa>
				  TIM4->CCR1 = 0;
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <parseCommand_Console+0x380>)
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM4->CCR2 = 2000;
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <parseCommand_Console+0x380>)
 800348a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(3000);
 8003490:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003494:	f005 f8fc 	bl	8008690 <HAL_Delay>
				  MotorStop();
 8003498:	f002 f812 	bl	80054c0 <MotorStop>
				  Serial_Console("Done.\r\n");
 800349c:	4837      	ldr	r0, [pc, #220]	; (800357c <parseCommand_Console+0x384>)
 800349e:	f000 ff2d 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "TEST RIGHT MOTOR") == 0) {
 80034a2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80034a6:	4936      	ldr	r1, [pc, #216]	; (8003580 <parseCommand_Console+0x388>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fc fe91 	bl	80001d0 <strcmp>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10f      	bne.n	80034d4 <parseCommand_Console+0x2dc>
				  TIM4->CCR3 = 2000;
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <parseCommand_Console+0x380>)
 80034b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM4->CCR4 = 0;
 80034bc:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <parseCommand_Console+0x380>)
 80034be:	2200      	movs	r2, #0
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(3000);
 80034c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80034c6:	f005 f8e3 	bl	8008690 <HAL_Delay>
				  MotorStop();
 80034ca:	f001 fff9 	bl	80054c0 <MotorStop>
				  Serial_Console("Done.\r\n");
 80034ce:	482b      	ldr	r0, [pc, #172]	; (800357c <parseCommand_Console+0x384>)
 80034d0:	f000 ff14 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "REBOOT") == 0) {
 80034d4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80034d8:	492a      	ldr	r1, [pc, #168]	; (8003584 <parseCommand_Console+0x38c>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fe78 	bl	80001d0 <strcmp>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d152      	bne.n	800358c <parseCommand_Console+0x394>
				Serial_Console("Rebooting...\r\n");
 80034e6:	4828      	ldr	r0, [pc, #160]	; (8003588 <parseCommand_Console+0x390>)
 80034e8:	f000 ff08 	bl	80042fc <Serial_Console>
				HAL_Delay(500);
 80034ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034f0:	f005 f8ce 	bl	8008690 <HAL_Delay>
				NVIC_SystemReset();
 80034f4:	f7fe f97e 	bl	80017f4 <__NVIC_SystemReset>
 80034f8:	200011c4 	.word	0x200011c4
 80034fc:	0801601c 	.word	0x0801601c
 8003500:	08016024 	.word	0x08016024
 8003504:	20000a68 	.word	0x20000a68
 8003508:	080169f4 	.word	0x080169f4
 800350c:	0801602c 	.word	0x0801602c
 8003510:	08016034 	.word	0x08016034
 8003514:	08016060 	.word	0x08016060
 8003518:	080169c4 	.word	0x080169c4
 800351c:	08016068 	.word	0x08016068
 8003520:	20000999 	.word	0x20000999
 8003524:	08016074 	.word	0x08016074
 8003528:	08016088 	.word	0x08016088
 800352c:	08016094 	.word	0x08016094
 8003530:	080160a8 	.word	0x080160a8
 8003534:	20000964 	.word	0x20000964
 8003538:	080160b0 	.word	0x080160b0
 800353c:	080160b8 	.word	0x080160b8
 8003540:	080160c0 	.word	0x080160c0
 8003544:	080160dc 	.word	0x080160dc
 8003548:	080160e8 	.word	0x080160e8
 800354c:	20000014 	.word	0x20000014
 8003550:	08016134 	.word	0x08016134
 8003554:	0801613c 	.word	0x0801613c
 8003558:	08016148 	.word	0x08016148
 800355c:	0801616c 	.word	0x0801616c
 8003560:	08016170 	.word	0x08016170
 8003564:	08016174 	.word	0x08016174
 8003568:	0801617c 	.word	0x0801617c
 800356c:	20000991 	.word	0x20000991
 8003570:	08016188 	.word	0x08016188
 8003574:	08016190 	.word	0x08016190
 8003578:	40000800 	.word	0x40000800
 800357c:	080161a0 	.word	0x080161a0
 8003580:	080161a8 	.word	0x080161a8
 8003584:	080161bc 	.word	0x080161bc
 8003588:	080161c4 	.word	0x080161c4

			}
			if (strcmp(Command, "LOAD CONFIG") == 0) {
 800358c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003590:	49cb      	ldr	r1, [pc, #812]	; (80038c0 <parseCommand_Console+0x6c8>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc fe1c 	bl	80001d0 <strcmp>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10e      	bne.n	80035bc <parseCommand_Console+0x3c4>
				settings = read_all_settings();
 800359e:	4cc9      	ldr	r4, [pc, #804]	; (80038c4 <parseCommand_Console+0x6cc>)
 80035a0:	463b      	mov	r3, r7
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 f83e 	bl	8007624 <read_all_settings>
 80035a8:	463b      	mov	r3, r7
 80035aa:	4620      	mov	r0, r4
 80035ac:	4619      	mov	r1, r3
 80035ae:	2358      	movs	r3, #88	; 0x58
 80035b0:	461a      	mov	r2, r3
 80035b2:	f00c f833 	bl	800f61c <memcpy>
				Serial_Console("Config loaded.\r\n");
 80035b6:	48c4      	ldr	r0, [pc, #784]	; (80038c8 <parseCommand_Console+0x6d0>)
 80035b8:	f000 fea0 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "SHOW CONFIG") == 0) {
 80035bc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80035c0:	49c2      	ldr	r1, [pc, #776]	; (80038cc <parseCommand_Console+0x6d4>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc fe04 	bl	80001d0 <strcmp>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <parseCommand_Console+0x3ee>

				show_config(settings);
 80035ce:	4cbd      	ldr	r4, [pc, #756]	; (80038c4 <parseCommand_Console+0x6cc>)
 80035d0:	4668      	mov	r0, sp
 80035d2:	f104 0310 	add.w	r3, r4, #16
 80035d6:	2248      	movs	r2, #72	; 0x48
 80035d8:	4619      	mov	r1, r3
 80035da:	f00c f81f 	bl	800f61c <memcpy>
 80035de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035e2:	f7fd fd4f 	bl	8001084 <show_config>

			}
			if (strcmp(Command, "SHOW ERRORS") == 0) {
 80035e6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80035ea:	49b9      	ldr	r1, [pc, #740]	; (80038d0 <parseCommand_Console+0x6d8>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc fdef 	bl	80001d0 <strcmp>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <parseCommand_Console+0x404>

				show_error();
 80035f8:	f7fd fd08 	bl	800100c <show_error>

			}
			if (strcmp(Command, "ADD ERROR") == 0) {
 80035fc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003600:	49b4      	ldr	r1, [pc, #720]	; (80038d4 <parseCommand_Console+0x6dc>)
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc fde4 	bl	80001d0 <strcmp>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <parseCommand_Console+0x41c>
				add_error_event("This is a test error!");
 800360e:	48b2      	ldr	r0, [pc, #712]	; (80038d8 <parseCommand_Console+0x6e0>)
 8003610:	f003 ff1c 	bl	800744c <add_error_event>

			}

			if (strcmp(Command, "CLEAR ERRORS") == 0) {
 8003614:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003618:	49b0      	ldr	r1, [pc, #704]	; (80038dc <parseCommand_Console+0x6e4>)
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc fdd8 	bl	80001d0 <strcmp>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <parseCommand_Console+0x432>
				clear_errors();
 8003626:	f003 fe83 	bl	8007330 <clear_errors>

			}

			if (strcmp(Command, "SAVE CONFIG") == 0) {
 800362a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800362e:	49ac      	ldr	r1, [pc, #688]	; (80038e0 <parseCommand_Console+0x6e8>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc fdcd 	bl	80001d0 <strcmp>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11a      	bne.n	8003672 <parseCommand_Console+0x47a>
				write_all_settings(settings);
 800363c:	4ca1      	ldr	r4, [pc, #644]	; (80038c4 <parseCommand_Console+0x6cc>)
 800363e:	4668      	mov	r0, sp
 8003640:	f104 0310 	add.w	r3, r4, #16
 8003644:	2248      	movs	r2, #72	; 0x48
 8003646:	4619      	mov	r1, r3
 8003648:	f00b ffe8 	bl	800f61c <memcpy>
 800364c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003650:	f004 f8fe 	bl	8007850 <write_all_settings>
				settings = read_all_settings();
 8003654:	4c9b      	ldr	r4, [pc, #620]	; (80038c4 <parseCommand_Console+0x6cc>)
 8003656:	463b      	mov	r3, r7
 8003658:	4618      	mov	r0, r3
 800365a:	f003 ffe3 	bl	8007624 <read_all_settings>
 800365e:	463b      	mov	r3, r7
 8003660:	4620      	mov	r0, r4
 8003662:	4619      	mov	r1, r3
 8003664:	2358      	movs	r3, #88	; 0x58
 8003666:	461a      	mov	r2, r3
 8003668:	f00b ffd8 	bl	800f61c <memcpy>
				Serial_Console("Settings saved.\r\n");
 800366c:	489d      	ldr	r0, [pc, #628]	; (80038e4 <parseCommand_Console+0x6ec>)
 800366e:	f000 fe45 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "SAVE DEFAULT CONFIG") == 0) {
 8003672:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003676:	499c      	ldr	r1, [pc, #624]	; (80038e8 <parseCommand_Console+0x6f0>)
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc fda9 	bl	80001d0 <strcmp>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d110      	bne.n	80036a6 <parseCommand_Console+0x4ae>
				save_default_settings();
 8003684:	f004 f9b8 	bl	80079f8 <save_default_settings>
				settings = read_all_settings();
 8003688:	4c8e      	ldr	r4, [pc, #568]	; (80038c4 <parseCommand_Console+0x6cc>)
 800368a:	463b      	mov	r3, r7
 800368c:	4618      	mov	r0, r3
 800368e:	f003 ffc9 	bl	8007624 <read_all_settings>
 8003692:	463b      	mov	r3, r7
 8003694:	4620      	mov	r0, r4
 8003696:	4619      	mov	r1, r3
 8003698:	2358      	movs	r3, #88	; 0x58
 800369a:	461a      	mov	r2, r3
 800369c:	f00b ffbe 	bl	800f61c <memcpy>
				Serial_Console("Default settings saved.\r\n");
 80036a0:	4892      	ldr	r0, [pc, #584]	; (80038ec <parseCommand_Console+0x6f4>)
 80036a2:	f000 fe2b 	bl	80042fc <Serial_Console>

			}
			if (strcmp(Command, "SHOW CURRENT") == 0) {
 80036a6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80036aa:	4991      	ldr	r1, [pc, #580]	; (80038f0 <parseCommand_Console+0x6f8>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fd8f 	bl	80001d0 <strcmp>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d121      	bne.n	80036fc <parseCommand_Console+0x504>
				sprintf(msg, "M1: %.2f\r\nM2: %.2f\r\nC1: %.2f\r\n", M1_amp, M2_amp, C1_amp);
 80036b8:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <parseCommand_Console+0x6fc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc ff53 	bl	8000568 <__aeabi_f2d>
 80036c2:	4680      	mov	r8, r0
 80036c4:	4689      	mov	r9, r1
 80036c6:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <parseCommand_Console+0x700>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff4c 	bl	8000568 <__aeabi_f2d>
 80036d0:	4604      	mov	r4, r0
 80036d2:	460d      	mov	r5, r1
 80036d4:	4b89      	ldr	r3, [pc, #548]	; (80038fc <parseCommand_Console+0x704>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff45 	bl	8000568 <__aeabi_f2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036e6:	e9cd 4500 	strd	r4, r5, [sp]
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	4984      	ldr	r1, [pc, #528]	; (8003900 <parseCommand_Console+0x708>)
 80036f0:	4884      	ldr	r0, [pc, #528]	; (8003904 <parseCommand_Console+0x70c>)
 80036f2:	f00c fe29 	bl	8010348 <siprintf>
				Serial_Console(msg);
 80036f6:	4883      	ldr	r0, [pc, #524]	; (8003904 <parseCommand_Console+0x70c>)
 80036f8:	f000 fe00 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "STOP MOTORS") == 0) {
 80036fc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003700:	4981      	ldr	r1, [pc, #516]	; (8003908 <parseCommand_Console+0x710>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc fd64 	bl	80001d0 <strcmp>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <parseCommand_Console+0x51a>
				MotorStop();
 800370e:	f001 fed7 	bl	80054c0 <MotorStop>
			}
			if (strcmp(Command, "RUN MOTORS FORWARD") == 0) {
 8003712:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003716:	497d      	ldr	r1, [pc, #500]	; (800390c <parseCommand_Console+0x714>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fd59 	bl	80001d0 <strcmp>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d110      	bne.n	8003746 <parseCommand_Console+0x54e>
				State = FORWARD;
 8003724:	4b7a      	ldr	r3, [pc, #488]	; (8003910 <parseCommand_Console+0x718>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
				TIM4->CCR1 = 0;
 800372a:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <parseCommand_Console+0x71c>)
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 2000;
 8003730:	4b78      	ldr	r3, [pc, #480]	; (8003914 <parseCommand_Console+0x71c>)
 8003732:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
				TIM4->CCR3 = 2000;
 8003738:	4b76      	ldr	r3, [pc, #472]	; (8003914 <parseCommand_Console+0x71c>)
 800373a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->CCR4 = 0;
 8003740:	4b74      	ldr	r3, [pc, #464]	; (8003914 <parseCommand_Console+0x71c>)
 8003742:	2200      	movs	r2, #0
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (strcmp(Command, "RUN MOTORS REVERSE") == 0) {
 8003746:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800374a:	4973      	ldr	r1, [pc, #460]	; (8003918 <parseCommand_Console+0x720>)
 800374c:	4618      	mov	r0, r3
 800374e:	f7fc fd3f 	bl	80001d0 <strcmp>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d110      	bne.n	800377a <parseCommand_Console+0x582>
				State = BACKWARD;
 8003758:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <parseCommand_Console+0x718>)
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
				TIM4->CCR1 = 2000;
 800375e:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <parseCommand_Console+0x71c>)
 8003760:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 0;
 8003766:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <parseCommand_Console+0x71c>)
 8003768:	2200      	movs	r2, #0
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM4->CCR3 = 0;
 800376c:	4b69      	ldr	r3, [pc, #420]	; (8003914 <parseCommand_Console+0x71c>)
 800376e:	2200      	movs	r2, #0
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->CCR4 = 2000;
 8003772:	4b68      	ldr	r3, [pc, #416]	; (8003914 <parseCommand_Console+0x71c>)
 8003774:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (strncmp(Command, "SET PITCH COMP", 14) == 0) {
 800377a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800377e:	220e      	movs	r2, #14
 8003780:	4966      	ldr	r1, [pc, #408]	; (800391c <parseCommand_Console+0x724>)
 8003782:	4618      	mov	r0, r3
 8003784:	f00c fe79 	bl	801047a <strncmp>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <parseCommand_Console+0x5be>
				float pitch;
				char cmd1[3], cmd2[5], cmd3[4];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &pitch);
 800378e:	f507 7144 	add.w	r1, r7, #784	; 0x310
 8003792:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8003796:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800379a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	460b      	mov	r3, r1
 80037a8:	495d      	ldr	r1, [pc, #372]	; (8003920 <parseCommand_Console+0x728>)
 80037aa:	f00c fded 	bl	8010388 <siscanf>
				settings.pitch_comp = pitch;
 80037ae:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 80037b2:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <parseCommand_Console+0x6cc>)
 80037b4:	6553      	str	r3, [r2, #84]	; 0x54
			}
			if (strncmp(Command, "SET ROLL COMP", 13) == 0) {
 80037b6:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80037ba:	220d      	movs	r2, #13
 80037bc:	4959      	ldr	r1, [pc, #356]	; (8003924 <parseCommand_Console+0x72c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f00c fe5b 	bl	801047a <strncmp>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d113      	bne.n	80037f2 <parseCommand_Console+0x5fa>
				float roll;
				char cmd1[3], cmd2[4], cmd3[4];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &roll);
 80037ca:	f507 7140 	add.w	r1, r7, #768	; 0x300
 80037ce:	f507 7241 	add.w	r2, r7, #772	; 0x304
 80037d2:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80037d6:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	460b      	mov	r3, r1
 80037e4:	494e      	ldr	r1, [pc, #312]	; (8003920 <parseCommand_Console+0x728>)
 80037e6:	f00c fdcf 	bl	8010388 <siscanf>
				settings.roll_comp = roll;
 80037ea:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 80037ee:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <parseCommand_Console+0x6cc>)
 80037f0:	6513      	str	r3, [r2, #80]	; 0x50
			}
			if (strncmp(Command, "SET PROXIMITY SPEED", 19) == 0) {
 80037f2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80037f6:	2213      	movs	r2, #19
 80037f8:	494b      	ldr	r1, [pc, #300]	; (8003928 <parseCommand_Console+0x730>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f00c fe3d 	bl	801047a <strncmp>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <parseCommand_Console+0x636>
				float speed;
				char cmd1[3], cmd2[9], cmd3[5];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &speed);
 8003806:	f507 713a 	add.w	r1, r7, #744	; 0x2e8
 800380a:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800380e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003812:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	460b      	mov	r3, r1
 8003820:	493f      	ldr	r1, [pc, #252]	; (8003920 <parseCommand_Console+0x728>)
 8003822:	f00c fdb1 	bl	8010388 <siscanf>
				settings.proximitySpeed = speed;
 8003826:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800382a:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <parseCommand_Console+0x6cc>)
 800382c:	6493      	str	r3, [r2, #72]	; 0x48
			}
			if (strncmp(Command, "SET VOLTAGE MULTIPLY", 20) == 0) {
 800382e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003832:	2214      	movs	r2, #20
 8003834:	493d      	ldr	r1, [pc, #244]	; (800392c <parseCommand_Console+0x734>)
 8003836:	4618      	mov	r0, r3
 8003838:	f00c fe1f 	bl	801047a <strncmp>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <parseCommand_Console+0x672>
				float multiply;
				char cmd1[3], cmd2[7], cmd3[8];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &multiply);
 8003842:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8003846:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800384a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800384e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	460b      	mov	r3, r1
 800385c:	4930      	ldr	r1, [pc, #192]	; (8003920 <parseCommand_Console+0x728>)
 800385e:	f00c fd93 	bl	8010388 <siscanf>
				settings.voltageMultiply = multiply;
 8003862:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8003866:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <parseCommand_Console+0x6cc>)
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
			}
			if (strncmp(Command, "SET MOTOR MAX LIMIT", 19) == 0) {
 800386a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800386e:	2213      	movs	r2, #19
 8003870:	492f      	ldr	r1, [pc, #188]	; (8003930 <parseCommand_Console+0x738>)
 8003872:	4618      	mov	r0, r3
 8003874:	f00c fe01 	bl	801047a <strncmp>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <parseCommand_Console+0x6b4>
				float limit;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %f", cmd1, cmd2, cmd3, cmd4, &limit);
 800387e:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8003882:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003886:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800388a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	460b      	mov	r3, r1
 800389e:	4925      	ldr	r1, [pc, #148]	; (8003934 <parseCommand_Console+0x73c>)
 80038a0:	f00c fd72 	bl	8010388 <siscanf>
				settings.Motor_Max_Limit = limit;
 80038a4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80038a8:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <parseCommand_Console+0x6cc>)
 80038aa:	62d3      	str	r3, [r2, #44]	; 0x2c
			}
			if (strncmp(Command, "SET MOTOR MIN LIMIT", 19) == 0) {
 80038ac:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80038b0:	2213      	movs	r2, #19
 80038b2:	4921      	ldr	r1, [pc, #132]	; (8003938 <parseCommand_Console+0x740>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00c fde0 	bl	801047a <strncmp>
 80038ba:	4603      	mov	r3, r0
 80038bc:	e03e      	b.n	800393c <parseCommand_Console+0x744>
 80038be:	bf00      	nop
 80038c0:	080161d4 	.word	0x080161d4
 80038c4:	20000cc0 	.word	0x20000cc0
 80038c8:	080161e0 	.word	0x080161e0
 80038cc:	080161f4 	.word	0x080161f4
 80038d0:	08016200 	.word	0x08016200
 80038d4:	0801620c 	.word	0x0801620c
 80038d8:	08016218 	.word	0x08016218
 80038dc:	08016230 	.word	0x08016230
 80038e0:	08016240 	.word	0x08016240
 80038e4:	0801624c 	.word	0x0801624c
 80038e8:	08016260 	.word	0x08016260
 80038ec:	08016274 	.word	0x08016274
 80038f0:	08016290 	.word	0x08016290
 80038f4:	2000094c 	.word	0x2000094c
 80038f8:	20000950 	.word	0x20000950
 80038fc:	20000954 	.word	0x20000954
 8003900:	080162a0 	.word	0x080162a0
 8003904:	20000a68 	.word	0x20000a68
 8003908:	080162c0 	.word	0x080162c0
 800390c:	080162cc 	.word	0x080162cc
 8003910:	2000096b 	.word	0x2000096b
 8003914:	40000800 	.word	0x40000800
 8003918:	080162e0 	.word	0x080162e0
 800391c:	080162f4 	.word	0x080162f4
 8003920:	08016304 	.word	0x08016304
 8003924:	08016310 	.word	0x08016310
 8003928:	08016320 	.word	0x08016320
 800392c:	08016334 	.word	0x08016334
 8003930:	0801634c 	.word	0x0801634c
 8003934:	08016360 	.word	0x08016360
 8003938:	08016370 	.word	0x08016370
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <parseCommand_Console+0x776>
				float limit;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %f", cmd1, cmd2, cmd3, cmd4, &limit);
 8003940:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8003944:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8003948:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800394c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003950:	9302      	str	r3, [sp, #8]
 8003952:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	460b      	mov	r3, r1
 8003960:	49c8      	ldr	r1, [pc, #800]	; (8003c84 <parseCommand_Console+0xa8c>)
 8003962:	f00c fd11 	bl	8010388 <siscanf>
				settings.Motor_Min_Limit = limit;
 8003966:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800396a:	4ac7      	ldr	r2, [pc, #796]	; (8003c88 <parseCommand_Console+0xa90>)
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
			}
			if (strncmp(Command, "SET MOTOR MAX SPEED", 19) == 0) {
 800396e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003972:	2213      	movs	r2, #19
 8003974:	49c5      	ldr	r1, [pc, #788]	; (8003c8c <parseCommand_Console+0xa94>)
 8003976:	4618      	mov	r0, r3
 8003978:	f00c fd7f 	bl	801047a <strncmp>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d117      	bne.n	80039b2 <parseCommand_Console+0x7ba>
				int speed;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %d", cmd1, cmd2, cmd3, cmd4, &speed);
 8003982:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8003986:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800398a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800398e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	460b      	mov	r3, r1
 80039a2:	49bb      	ldr	r1, [pc, #748]	; (8003c90 <parseCommand_Console+0xa98>)
 80039a4:	f00c fcf0 	bl	8010388 <siscanf>
				settings.motorMaxSpeed = speed;
 80039a8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4bb6      	ldr	r3, [pc, #728]	; (8003c88 <parseCommand_Console+0xa90>)
 80039b0:	821a      	strh	r2, [r3, #16]
			}
			if (strncmp(Command, "SET MOTOR MIN SPEED", 19) == 0) {
 80039b2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80039b6:	2213      	movs	r2, #19
 80039b8:	49b6      	ldr	r1, [pc, #728]	; (8003c94 <parseCommand_Console+0xa9c>)
 80039ba:	4618      	mov	r0, r3
 80039bc:	f00c fd5d 	bl	801047a <strncmp>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d118      	bne.n	80039f8 <parseCommand_Console+0x800>
				int speed;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %d", cmd1, cmd2, cmd3, cmd4, &speed);
 80039c6:	f507 7119 	add.w	r1, r7, #612	; 0x264
 80039ca:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 80039ce:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80039d2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	460b      	mov	r3, r1
 80039e6:	49aa      	ldr	r1, [pc, #680]	; (8003c90 <parseCommand_Console+0xa98>)
 80039e8:	f00c fcce 	bl	8010388 <siscanf>
				settings.motorMinSpeed = speed;
 80039ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4ba4      	ldr	r3, [pc, #656]	; (8003c88 <parseCommand_Console+0xa90>)
 80039f6:	825a      	strh	r2, [r3, #18]
			}
			if (strncmp(Command, "SET ADC LEVEL", 13) == 0) {
 80039f8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80039fc:	220d      	movs	r2, #13
 80039fe:	49a6      	ldr	r1, [pc, #664]	; (8003c98 <parseCommand_Console+0xaa0>)
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00c fd3a 	bl	801047a <strncmp>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <parseCommand_Console+0x840>
				int adc;
				char cmd1[3], cmd2[3], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &adc);
 8003a0c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8003a10:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003a14:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003a18:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	499d      	ldr	r1, [pc, #628]	; (8003c9c <parseCommand_Console+0xaa4>)
 8003a28:	f00c fcae 	bl	8010388 <siscanf>
				settings.adcLevel = adc;
 8003a2c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b94      	ldr	r3, [pc, #592]	; (8003c88 <parseCommand_Console+0xa90>)
 8003a36:	82da      	strh	r2, [r3, #22]
			}
			if (strncmp(Command, "SET CUTTER SPEED", 16) == 0) {
 8003a38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	4998      	ldr	r1, [pc, #608]	; (8003ca0 <parseCommand_Console+0xaa8>)
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00c fd1a 	bl	801047a <strncmp>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d115      	bne.n	8003a78 <parseCommand_Console+0x880>
				int speed;
				char cmd1[3], cmd2[5], cmd3[3];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &speed);
 8003a4c:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8003a50:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8003a54:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003a58:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	460b      	mov	r3, r1
 8003a66:	498d      	ldr	r1, [pc, #564]	; (8003c9c <parseCommand_Console+0xaa4>)
 8003a68:	f00c fc8e 	bl	8010388 <siscanf>
				settings.cutterSpeed = speed;
 8003a6c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b84      	ldr	r3, [pc, #528]	; (8003c88 <parseCommand_Console+0xa90>)
 8003a76:	829a      	strh	r2, [r3, #20]
			}
			if (strncmp(Command, "SET BOUNDARY TIMEOUT", 20) == 0) {
 8003a78:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003a7c:	2214      	movs	r2, #20
 8003a7e:	4989      	ldr	r1, [pc, #548]	; (8003ca4 <parseCommand_Console+0xaac>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f00c fcfa 	bl	801047a <strncmp>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <parseCommand_Console+0x8c0>
				int limit;
				char cmd1[3], cmd2[8], cmd3[7];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 8003a8c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8003a90:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8003a94:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003a98:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4980      	ldr	r1, [pc, #512]	; (8003ca8 <parseCommand_Console+0xab0>)
 8003aa8:	f00c fc6e 	bl	8010388 <siscanf>
				settings.Boundary_Timeout = limit;
 8003aac:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b74      	ldr	r3, [pc, #464]	; (8003c88 <parseCommand_Console+0xa90>)
 8003ab6:	709a      	strb	r2, [r3, #2]
			}
			if (strncmp(Command, "SET OVERTURN LIMIT", 18) == 0) {
 8003ab8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003abc:	2212      	movs	r2, #18
 8003abe:	497b      	ldr	r1, [pc, #492]	; (8003cac <parseCommand_Console+0xab4>)
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00c fcda 	bl	801047a <strncmp>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d115      	bne.n	8003af8 <parseCommand_Console+0x900>
				int limit;
				char cmd1[3], cmd2[8], cmd3[5];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 8003acc:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8003ad0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003ad4:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003ad8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4970      	ldr	r1, [pc, #448]	; (8003ca8 <parseCommand_Console+0xab0>)
 8003ae8:	f00c fc4e 	bl	8010388 <siscanf>
				settings.Overturn_Limit = limit;
 8003aec:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b64      	ldr	r3, [pc, #400]	; (8003c88 <parseCommand_Console+0xa90>)
 8003af6:	715a      	strb	r2, [r3, #5]
			}
			if (strncmp(Command, "SET OUTSIDE LIMIT", 17) == 0) {
 8003af8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003afc:	2211      	movs	r2, #17
 8003afe:	496c      	ldr	r1, [pc, #432]	; (8003cb0 <parseCommand_Console+0xab8>)
 8003b00:	4618      	mov	r0, r3
 8003b02:	f00c fcba 	bl	801047a <strncmp>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d115      	bne.n	8003b38 <parseCommand_Console+0x940>
				int limit;
				char cmd1[3], cmd2[7], cmd3[5];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 8003b0c:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8003b10:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8003b14:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003b18:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	460b      	mov	r3, r1
 8003b26:	4960      	ldr	r1, [pc, #384]	; (8003ca8 <parseCommand_Console+0xab0>)
 8003b28:	f00c fc2e 	bl	8010388 <siscanf>
				settings.Outside_Threshold = limit;
 8003b2c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <parseCommand_Console+0xa90>)
 8003b36:	71da      	strb	r2, [r3, #7]
			}
			if (strncmp(Command, "SET BAT HIGH", 12) == 0) {
 8003b38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003b3c:	220c      	movs	r2, #12
 8003b3e:	495d      	ldr	r1, [pc, #372]	; (8003cb4 <parseCommand_Console+0xabc>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00c fc9a 	bl	801047a <strncmp>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d114      	bne.n	8003b76 <parseCommand_Console+0x97e>
				float limit;
				char cmd1[3], cmd2[3], cmd3[4];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003b4c:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 8003b50:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003b54:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003b58:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	460b      	mov	r3, r1
 8003b66:	4954      	ldr	r1, [pc, #336]	; (8003cb8 <parseCommand_Console+0xac0>)
 8003b68:	f00c fc0e 	bl	8010388 <siscanf>
				settings.Battery_High_Limit = limit;
 8003b6c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a45      	ldr	r2, [pc, #276]	; (8003c88 <parseCommand_Console+0xa90>)
 8003b74:	61d3      	str	r3, [r2, #28]
			}
			if (strncmp(Command, "SET BAT LOW", 11) == 0) {
 8003b76:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003b7a:	220b      	movs	r2, #11
 8003b7c:	494f      	ldr	r1, [pc, #316]	; (8003cbc <parseCommand_Console+0xac4>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00c fc7b 	bl	801047a <strncmp>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d114      	bne.n	8003bb4 <parseCommand_Console+0x9bc>
				float limit;
				char cmd1[3], cmd2[3], cmd3[3];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003b8a:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8003b8e:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8003b92:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003b96:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4944      	ldr	r1, [pc, #272]	; (8003cb8 <parseCommand_Console+0xac0>)
 8003ba6:	f00c fbef 	bl	8010388 <siscanf>
				settings.Battery_Low_Limit = limit;
 8003baa:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a35      	ldr	r2, [pc, #212]	; (8003c88 <parseCommand_Console+0xa90>)
 8003bb2:	6193      	str	r3, [r2, #24]
			}
			if (strncmp(Command, "SET BWF OUT", 11) == 0) {
 8003bb4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003bb8:	220b      	movs	r2, #11
 8003bba:	4941      	ldr	r1, [pc, #260]	; (8003cc0 <parseCommand_Console+0xac8>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00c fc5c 	bl	801047a <strncmp>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d114      	bne.n	8003bf2 <parseCommand_Console+0x9fa>
				float limit;
				char cmd1[3], cmd2[3], cmd3[3];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003bc8:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 8003bcc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8003bd0:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003bd4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	4935      	ldr	r1, [pc, #212]	; (8003cb8 <parseCommand_Console+0xac0>)
 8003be4:	f00c fbd0 	bl	8010388 <siscanf>
				settings.Signal_Integrity_OUT = limit;
 8003be8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <parseCommand_Console+0xa90>)
 8003bf0:	6253      	str	r3, [r2, #36]	; 0x24
			}
			if (strncmp(Command, "SET BWF IN", 10) == 0) {
 8003bf2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	4932      	ldr	r1, [pc, #200]	; (8003cc4 <parseCommand_Console+0xacc>)
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00c fc3d 	bl	801047a <strncmp>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d114      	bne.n	8003c30 <parseCommand_Console+0xa38>
				float limit;
				char cmd1[3], cmd2[3], cmd3[2];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003c06:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8003c0a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003c0e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003c12:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4925      	ldr	r1, [pc, #148]	; (8003cb8 <parseCommand_Console+0xac0>)
 8003c22:	f00c fbb1 	bl	8010388 <siscanf>
				settings.Signal_Integrity_IN = limit;
 8003c26:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <parseCommand_Console+0xa90>)
 8003c2e:	6213      	str	r3, [r2, #32]
			}
			if (strncmp(Command, "SET CHARGE DETECTION", 20) == 0) {
 8003c30:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003c34:	2214      	movs	r2, #20
 8003c36:	4924      	ldr	r1, [pc, #144]	; (8003cc8 <parseCommand_Console+0xad0>)
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f00c fc1e 	bl	801047a <strncmp>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d115      	bne.n	8003c70 <parseCommand_Console+0xa78>
				int limit;
				char cmd1[3], cmd2[6], cmd3[9];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &limit);
 8003c44:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8003c48:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003c4c:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003c50:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	490f      	ldr	r1, [pc, #60]	; (8003c9c <parseCommand_Console+0xaa4>)
 8003c60:	f00c fb92 	bl	8010388 <siscanf>
				settings.HoldChargeDetection = limit;
 8003c64:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <parseCommand_Console+0xa90>)
 8003c6e:	815a      	strh	r2, [r3, #10]
			}
			if (strncmp(Command, "SET CUTTER LIMIT", 16) == 0) {
 8003c70:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003c74:	2210      	movs	r2, #16
 8003c76:	4915      	ldr	r1, [pc, #84]	; (8003ccc <parseCommand_Console+0xad4>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00c fbfe 	bl	801047a <strncmp>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	e025      	b.n	8003cd0 <parseCommand_Console+0xad8>
 8003c84:	08016360 	.word	0x08016360
 8003c88:	20000cc0 	.word	0x20000cc0
 8003c8c:	08016384 	.word	0x08016384
 8003c90:	08016398 	.word	0x08016398
 8003c94:	080163a8 	.word	0x080163a8
 8003c98:	080163bc 	.word	0x080163bc
 8003c9c:	080163cc 	.word	0x080163cc
 8003ca0:	080163d8 	.word	0x080163d8
 8003ca4:	080163ec 	.word	0x080163ec
 8003ca8:	08016404 	.word	0x08016404
 8003cac:	08016414 	.word	0x08016414
 8003cb0:	08016428 	.word	0x08016428
 8003cb4:	0801643c 	.word	0x0801643c
 8003cb8:	0801644c 	.word	0x0801644c
 8003cbc:	0801645c 	.word	0x0801645c
 8003cc0:	08016468 	.word	0x08016468
 8003cc4:	08016474 	.word	0x08016474
 8003cc8:	08016480 	.word	0x08016480
 8003ccc:	08016498 	.word	0x08016498
 8003cd0:	d114      	bne.n	8003cfc <parseCommand_Console+0xb04>
				float limit;
				char cmd1[3], cmd2[6], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003cd2:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8003cd6:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8003cda:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003cde:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	460b      	mov	r3, r1
 8003cec:	49c2      	ldr	r1, [pc, #776]	; (8003ff8 <parseCommand_Console+0xe00>)
 8003cee:	f00c fb4b 	bl	8010388 <siscanf>
				settings.Cutter_Limit = limit;
 8003cf2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4ac0      	ldr	r2, [pc, #768]	; (8003ffc <parseCommand_Console+0xe04>)
 8003cfa:	6353      	str	r3, [r2, #52]	; 0x34
			}
			if (strncmp(Command, "SET MOTOR LIMIT", 15) == 0) {
 8003cfc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003d00:	220f      	movs	r2, #15
 8003d02:	49bf      	ldr	r1, [pc, #764]	; (8004000 <parseCommand_Console+0xe08>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f00c fbb8 	bl	801047a <strncmp>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d114      	bne.n	8003d3a <parseCommand_Console+0xb42>
				float limit;
				char cmd1[3], cmd2[5], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003d10:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8003d14:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8003d18:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003d1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	49b3      	ldr	r1, [pc, #716]	; (8003ff8 <parseCommand_Console+0xe00>)
 8003d2c:	f00c fb2c 	bl	8010388 <siscanf>
				settings.Motor_Limit = limit;
 8003d30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4ab1      	ldr	r2, [pc, #708]	; (8003ffc <parseCommand_Console+0xe04>)
 8003d38:	6293      	str	r3, [r2, #40]	; 0x28
			}
			if (strncmp(Command, "SET MOVEMENT LIMIT", 18) == 0) {
 8003d3a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003d3e:	2212      	movs	r2, #18
 8003d40:	49b0      	ldr	r1, [pc, #704]	; (8004004 <parseCommand_Console+0xe0c>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00c fb99 	bl	801047a <strncmp>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d114      	bne.n	8003d78 <parseCommand_Console+0xb80>
				float limit;
				char cmd1[3], cmd2[8], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003d4e:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 8003d52:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8003d56:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003d5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	460b      	mov	r3, r1
 8003d68:	49a3      	ldr	r1, [pc, #652]	; (8003ff8 <parseCommand_Console+0xe00>)
 8003d6a:	f00c fb0d 	bl	8010388 <siscanf>
				settings.movement = limit;
 8003d6e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4aa1      	ldr	r2, [pc, #644]	; (8003ffc <parseCommand_Console+0xe04>)
 8003d76:	64d3      	str	r3, [r2, #76]	; 0x4c
			}
			if (strncmp(Command, "SET MOVEMENT COUNT LIMIT", 24) == 0) {
 8003d78:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003d7c:	2218      	movs	r2, #24
 8003d7e:	49a2      	ldr	r1, [pc, #648]	; (8004008 <parseCommand_Console+0xe10>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f00c fb7a 	bl	801047a <strncmp>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d118      	bne.n	8003dbe <parseCommand_Console+0xbc6>
				int limit;
				char cmd1[3], cmd2[8], cmd3[5], cmd4[5];
				sscanf(Command, "%s %s %s %s %d ", cmd1, cmd2, cmd3, cmd4, &limit);
 8003d8c:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8003d90:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003d94:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003d98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	460b      	mov	r3, r1
 8003dac:	4997      	ldr	r1, [pc, #604]	; (800400c <parseCommand_Console+0xe14>)
 8003dae:	f00c faeb 	bl	8010388 <siscanf>
				settings.move_count_limit = limit;
 8003db2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b90      	ldr	r3, [pc, #576]	; (8003ffc <parseCommand_Console+0xe04>)
 8003dbc:	721a      	strb	r2, [r3, #8]
			}
			if (strncmp(Command, "SET BUMBER COUNT LIMIT", 22) == 0) {
 8003dbe:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003dc2:	2216      	movs	r2, #22
 8003dc4:	4992      	ldr	r1, [pc, #584]	; (8004010 <parseCommand_Console+0xe18>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00c fb57 	bl	801047a <strncmp>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <parseCommand_Console+0xc0c>
				int limit;
				char cmd1[3], cmd2[6], cmd3[5], cmd4[5];
				sscanf(Command, "%s %s %s %s %d ", cmd1, cmd2, cmd3, cmd4, &limit);
 8003dd2:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8003dd6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003dda:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003dde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003de2:	9302      	str	r3, [sp, #8]
 8003de4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	460b      	mov	r3, r1
 8003df2:	4986      	ldr	r1, [pc, #536]	; (800400c <parseCommand_Console+0xe14>)
 8003df4:	f00c fac8 	bl	8010388 <siscanf>
				settings.bumber_count_limit = limit;
 8003df8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b7e      	ldr	r3, [pc, #504]	; (8003ffc <parseCommand_Console+0xe04>)
 8003e02:	725a      	strb	r2, [r3, #9]
			}
			if (strncmp(Command, "SET DATE", 8) == 0) {
 8003e04:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e08:	2208      	movs	r2, #8
 8003e0a:	4982      	ldr	r1, [pc, #520]	; (8004014 <parseCommand_Console+0xe1c>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f00c fb34 	bl	801047a <strncmp>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d137      	bne.n	8003e88 <parseCommand_Console+0xc90>
				int year = 0, month = 0, day = 0, weekday = 0;
 8003e18:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
				char cmd1[3], cmd2[4];
				sscanf(Command, "%s %s %d %d %d %d", cmd1, cmd2, &year, &month, &day, &weekday);
 8003e38:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003e3c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003e40:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003e44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	496e      	ldr	r1, [pc, #440]	; (8004018 <parseCommand_Console+0xe20>)
 8003e60:	f00c fa92 	bl	8010388 <siscanf>
				setDate(year, month, day, weekday);
 8003e64:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b2d8      	uxtb	r0, r3
 8003e6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b2d9      	uxtb	r1, r3
 8003e74:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f7fd fee6 	bl	8001c54 <setDate>
			}
			if (strncmp(Command, "SET TIME", 8) == 0) {
 8003e88:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4963      	ldr	r1, [pc, #396]	; (800401c <parseCommand_Console+0xe24>)
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00c faf2 	bl	801047a <strncmp>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d12d      	bne.n	8003ef8 <parseCommand_Console+0xd00>
				int hour = 0, minute = 0, second = 0;
 8003e9c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
				char cmd1[3], cmd2[4];
				sscanf(Command, "%s %s %d %d %d", cmd1, cmd2, &hour, &minute, &second);
 8003eb4:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8003eb8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8003ebc:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003ec0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003ec4:	9302      	str	r3, [sp, #8]
 8003ec6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4952      	ldr	r1, [pc, #328]	; (8004020 <parseCommand_Console+0xe28>)
 8003ed6:	f00c fa57 	bl	8010388 <siscanf>
				setTime(hour, minute, second);
 8003eda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b2d8      	uxtb	r0, r3
 8003ee2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b2d9      	uxtb	r1, r3
 8003eea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fd fe78 	bl	8001be8 <setTime>
			}
			if (strncmp(Command, "SET KP", 6) == 0) {
 8003ef8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003efc:	2206      	movs	r2, #6
 8003efe:	4949      	ldr	r1, [pc, #292]	; (8004024 <parseCommand_Console+0xe2c>)
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00c faba 	bl	801047a <strncmp>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <parseCommand_Console+0xd38>
				float pid_kp;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_kp);
 8003f0c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003f10:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003f14:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003f18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4941      	ldr	r1, [pc, #260]	; (8004028 <parseCommand_Console+0xe30>)
 8003f22:	f00c fa31 	bl	8010388 <siscanf>
				settings.kp = pid_kp;
 8003f26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <parseCommand_Console+0xe04>)
 8003f2e:	6393      	str	r3, [r2, #56]	; 0x38
			}
			if (strncmp(Command, "SET KI", 6) == 0) {
 8003f30:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f34:	2206      	movs	r2, #6
 8003f36:	493d      	ldr	r1, [pc, #244]	; (800402c <parseCommand_Console+0xe34>)
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f00c fa9e 	bl	801047a <strncmp>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <parseCommand_Console+0xd70>
				float pid_ki;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_ki);
 8003f44:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8003f48:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003f4c:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003f50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	460b      	mov	r3, r1
 8003f58:	4933      	ldr	r1, [pc, #204]	; (8004028 <parseCommand_Console+0xe30>)
 8003f5a:	f00c fa15 	bl	8010388 <siscanf>
				settings.ki = pid_ki;
 8003f5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <parseCommand_Console+0xe04>)
 8003f66:	63d3      	str	r3, [r2, #60]	; 0x3c
			}
			if (strncmp(Command, "SET KD", 6) == 0) {
 8003f68:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f6c:	2206      	movs	r2, #6
 8003f6e:	4930      	ldr	r1, [pc, #192]	; (8004030 <parseCommand_Console+0xe38>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f00c fa82 	bl	801047a <strncmp>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d111      	bne.n	8003fa0 <parseCommand_Console+0xda8>
				float pid_kd;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_kd);
 8003f7c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003f80:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003f84:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003f88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4925      	ldr	r1, [pc, #148]	; (8004028 <parseCommand_Console+0xe30>)
 8003f92:	f00c f9f9 	bl	8010388 <siscanf>
				settings.kd = pid_kd;
 8003f96:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <parseCommand_Console+0xe04>)
 8003f9e:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (strncmp(Command, "SET WORKING START", 17) == 0) {
 8003fa0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003fa4:	2211      	movs	r2, #17
 8003fa6:	4923      	ldr	r1, [pc, #140]	; (8004034 <parseCommand_Console+0xe3c>)
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00c fa66 	bl	801047a <strncmp>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d115      	bne.n	8003fe0 <parseCommand_Console+0xde8>
				int start;
				char cmd1[3], cmd2[7], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &start);
 8003fb4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003fb8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003fbc:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8003fc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	491a      	ldr	r1, [pc, #104]	; (8004038 <parseCommand_Console+0xe40>)
 8003fd0:	f00c f9da 	bl	8010388 <siscanf>
				settings.WorkingHourStart = start;
 8003fd4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <parseCommand_Console+0xe04>)
 8003fde:	70da      	strb	r2, [r3, #3]
			}
			if (strncmp(Command, "SET WORKING END", 15) == 0) {
 8003fe0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	4915      	ldr	r1, [pc, #84]	; (800403c <parseCommand_Console+0xe44>)
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f00c fa46 	bl	801047a <strncmp>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d13b      	bne.n	800406c <parseCommand_Console+0xe74>
 8003ff4:	e024      	b.n	8004040 <parseCommand_Console+0xe48>
 8003ff6:	bf00      	nop
 8003ff8:	0801644c 	.word	0x0801644c
 8003ffc:	20000cc0 	.word	0x20000cc0
 8004000:	080164ac 	.word	0x080164ac
 8004004:	080164bc 	.word	0x080164bc
 8004008:	080164d0 	.word	0x080164d0
 800400c:	080164ec 	.word	0x080164ec
 8004010:	080164fc 	.word	0x080164fc
 8004014:	08016514 	.word	0x08016514
 8004018:	08016520 	.word	0x08016520
 800401c:	08016534 	.word	0x08016534
 8004020:	08016540 	.word	0x08016540
 8004024:	08016550 	.word	0x08016550
 8004028:	08016558 	.word	0x08016558
 800402c:	08016564 	.word	0x08016564
 8004030:	0801656c 	.word	0x0801656c
 8004034:	08016574 	.word	0x08016574
 8004038:	080163cc 	.word	0x080163cc
 800403c:	08016588 	.word	0x08016588
				int end;
				char cmd1[3], cmd2[7], cmd3[3];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &end);
 8004040:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004044:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004048:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800404c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	460b      	mov	r3, r1
 800405a:	4957      	ldr	r1, [pc, #348]	; (80041b8 <parseCommand_Console+0xfc0>)
 800405c:	f00c f994 	bl	8010388 <siscanf>
				settings.WorkingHourEnd = end;
 8004060:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b54      	ldr	r3, [pc, #336]	; (80041bc <parseCommand_Console+0xfc4>)
 800406a:	711a      	strb	r2, [r3, #4]
			}
			if (strncmp(Command, "SET MAG VALUE", 13) == 0) {
 800406c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8004070:	220d      	movs	r2, #13
 8004072:	4953      	ldr	r1, [pc, #332]	; (80041c0 <parseCommand_Console+0xfc8>)
 8004074:	4618      	mov	r0, r3
 8004076:	f00c fa00 	bl	801047a <strncmp>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d115      	bne.n	80040ac <parseCommand_Console+0xeb4>
				int magValue;
				char cmd1[3], cmd2[3], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &magValue);
 8004080:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8004084:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004088:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800408c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	460b      	mov	r3, r1
 800409a:	4947      	ldr	r1, [pc, #284]	; (80041b8 <parseCommand_Console+0xfc0>)
 800409c:	f00c f974 	bl	8010388 <siscanf>
				settings.magValue = magValue;
 80040a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	4b44      	ldr	r3, [pc, #272]	; (80041bc <parseCommand_Console+0xfc4>)
 80040aa:	819a      	strh	r2, [r3, #12]
			}
			if (strncmp(Command, "SET MAGMIN VALUE", 16) == 0) {
 80040ac:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80040b0:	2210      	movs	r2, #16
 80040b2:	4944      	ldr	r1, [pc, #272]	; (80041c4 <parseCommand_Console+0xfcc>)
 80040b4:	4618      	mov	r0, r3
 80040b6:	f00c f9e0 	bl	801047a <strncmp>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d115      	bne.n	80040ec <parseCommand_Console+0xef4>
				int magMinValue;
				char cmd1[3], cmd2[6], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &magMinValue);
 80040c0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80040c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80040c8:	f507 7048 	add.w	r0, r7, #800	; 0x320
 80040cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	4937      	ldr	r1, [pc, #220]	; (80041b8 <parseCommand_Console+0xfc0>)
 80040dc:	f00c f954 	bl	8010388 <siscanf>
				settings.magMinValue = magMinValue;
 80040e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	4b34      	ldr	r3, [pc, #208]	; (80041bc <parseCommand_Console+0xfc4>)
 80040ea:	81da      	strh	r2, [r3, #14]
			}
			if (strcmp(Command, "DISABLE") == 0) {
 80040ec:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80040f0:	4935      	ldr	r1, [pc, #212]	; (80041c8 <parseCommand_Console+0xfd0>)
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f86c 	bl	80001d0 <strcmp>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <parseCommand_Console+0xf1e>
				MasterSwitch = 0;
 80040fe:	4b33      	ldr	r3, [pc, #204]	; (80041cc <parseCommand_Console+0xfd4>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
				add_error_event("User typed disable");
 8004104:	4832      	ldr	r0, [pc, #200]	; (80041d0 <parseCommand_Console+0xfd8>)
 8004106:	f003 f9a1 	bl	800744c <add_error_event>
				Serial_Console("RazorBoard DISABLED.\r\n");
 800410a:	4832      	ldr	r0, [pc, #200]	; (80041d4 <parseCommand_Console+0xfdc>)
 800410c:	f000 f8f6 	bl	80042fc <Serial_Console>
				Serial_Console("Please type <help> to see available commands\r\n");
 8004110:	4831      	ldr	r0, [pc, #196]	; (80041d8 <parseCommand_Console+0xfe0>)
 8004112:	f000 f8f3 	bl	80042fc <Serial_Console>

			}

			if (strcmp(Command, "ENABLE") == 0) {
 8004116:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800411a:	4930      	ldr	r1, [pc, #192]	; (80041dc <parseCommand_Console+0xfe4>)
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc f857 	bl	80001d0 <strcmp>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10e      	bne.n	8004146 <parseCommand_Console+0xf4e>
				MasterSwitch = 1;
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <parseCommand_Console+0xfd4>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
				add_error_event("User typed enable");
 800412e:	482c      	ldr	r0, [pc, #176]	; (80041e0 <parseCommand_Console+0xfe8>)
 8004130:	f003 f98c 	bl	800744c <add_error_event>
				Serial_Console("RazorBoard ENABLED. STEP AWAY FROM THE VEHICLE!\r\n");
 8004134:	482b      	ldr	r0, [pc, #172]	; (80041e4 <parseCommand_Console+0xfec>)
 8004136:	f000 f8e1 	bl	80042fc <Serial_Console>
				Initial_Start = 0;
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <parseCommand_Console+0xff0>)
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
				Initial_Start = 0;
 8004140:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <parseCommand_Console+0xff0>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(Command, "TRACK PERIMETER") == 0) {
 8004146:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800414a:	4928      	ldr	r1, [pc, #160]	; (80041ec <parseCommand_Console+0xff4>)
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f83f 	bl	80001d0 <strcmp>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <parseCommand_Console+0xf70>
				perimeterTracking = 1;
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <parseCommand_Console+0xff8>)
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
				cutterOFF();
 800415e:	f000 fa87 	bl	8004670 <cutterOFF>
				Serial_Console("Perimeter tracking ENABLED\r\n");
 8004162:	4824      	ldr	r0, [pc, #144]	; (80041f4 <parseCommand_Console+0xffc>)
 8004164:	f000 f8ca 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "HELP") == 0) {
 8004168:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800416c:	4922      	ldr	r1, [pc, #136]	; (80041f8 <parseCommand_Console+0x1000>)
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f82e 	bl	80001d0 <strcmp>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <parseCommand_Console+0xf86>
				help();
 800417a:	f7fd f933 	bl	80013e4 <help>
			}

			memset(ConsoleBuffer, 0, sizeof(CONSOLE_BFR_SIZE));
 800417e:	2204      	movs	r2, #4
 8004180:	2100      	movs	r1, #0
 8004182:	481e      	ldr	r0, [pc, #120]	; (80041fc <parseCommand_Console+0x1004>)
 8004184:	f00b fa58 	bl	800f638 <memset>

			UART1_ready = 0;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <parseCommand_Console+0x1008>)
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
			break;
 800418e:	e009      	b.n	80041a4 <parseCommand_Console+0xfac>
	for (uint8_t x = 0; x < sizeof(ConsoleBuffer); x++) {
 8004190:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 8004194:	3301      	adds	r3, #1
 8004196:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 800419a:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 800419e:	2b3f      	cmp	r3, #63	; 0x3f
 80041a0:	f67f a83e 	bls.w	8003220 <parseCommand_Console+0x28>
			}
	}
	UART1_ready = 0;
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <parseCommand_Console+0x1008>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041b6:	bf00      	nop
 80041b8:	080163cc 	.word	0x080163cc
 80041bc:	20000cc0 	.word	0x20000cc0
 80041c0:	08016598 	.word	0x08016598
 80041c4:	080165a8 	.word	0x080165a8
 80041c8:	0801601c 	.word	0x0801601c
 80041cc:	20000215 	.word	0x20000215
 80041d0:	080165bc 	.word	0x080165bc
 80041d4:	080165d0 	.word	0x080165d0
 80041d8:	080165e8 	.word	0x080165e8
 80041dc:	08016618 	.word	0x08016618
 80041e0:	08016620 	.word	0x08016620
 80041e4:	08016634 	.word	0x08016634
 80041e8:	2000092e 	.word	0x2000092e
 80041ec:	08016668 	.word	0x08016668
 80041f0:	2000092c 	.word	0x2000092c
 80041f4:	08016678 	.word	0x08016678
 80041f8:	08016698 	.word	0x08016698
 80041fc:	200011c4 	.word	0x200011c4
 8004200:	2000097e 	.word	0x2000097e

08004204 <parseCommand_RPI>:
void parseCommand_RPI() {
 8004204:	b580      	push	{r7, lr}
 8004206:	b092      	sub	sp, #72	; 0x48
 8004208:	af00      	add	r7, sp, #0

	// Parse commands from the Raspberry PI

	char Command[64] = {"\0"};
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	223c      	movs	r2, #60	; 0x3c
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f00b fa0e 	bl	800f638 <memset>

	for (uint8_t x = 0; x < sizeof(PIBuffer); x++) {
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004222:	e04b      	b.n	80042bc <parseCommand_RPI+0xb8>
		if (PIBuffer[x] == 13) {
 8004224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <parseCommand_RPI+0xcc>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	2b0d      	cmp	r3, #13
 800422e:	d140      	bne.n	80042b2 <parseCommand_RPI+0xae>
			memcpy(Command,PIBuffer,x);
 8004230:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	4926      	ldr	r1, [pc, #152]	; (80042d0 <parseCommand_RPI+0xcc>)
 8004238:	4618      	mov	r0, r3
 800423a:	f00b f9ef 	bl	800f61c <memcpy>
			sprintf(msg,"%s\r\n", Command);
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	461a      	mov	r2, r3
 8004242:	4924      	ldr	r1, [pc, #144]	; (80042d4 <parseCommand_RPI+0xd0>)
 8004244:	4824      	ldr	r0, [pc, #144]	; (80042d8 <parseCommand_RPI+0xd4>)
 8004246:	f00c f87f 	bl	8010348 <siprintf>
			if (strcmp(Command, "RUN") == 0) {
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	4923      	ldr	r1, [pc, #140]	; (80042dc <parseCommand_RPI+0xd8>)
 800424e:	4618      	mov	r0, r3
 8004250:	f7fb ffbe 	bl	80001d0 <strcmp>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <parseCommand_RPI+0x68>
				MasterSwitch = 1;
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <parseCommand_RPI+0xdc>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
				Serial_RPi("Status: RUN\r\n");
 8004260:	4820      	ldr	r0, [pc, #128]	; (80042e4 <parseCommand_RPI+0xe0>)
 8004262:	f000 f85f 	bl	8004324 <Serial_RPi>
				Serial_Console("Status: RUN\r\n");
 8004266:	481f      	ldr	r0, [pc, #124]	; (80042e4 <parseCommand_RPI+0xe0>)
 8004268:	f000 f848 	bl	80042fc <Serial_Console>
			}
			if (strcmp(Command, "GOHOME") == 0) {
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	491e      	ldr	r1, [pc, #120]	; (80042e8 <parseCommand_RPI+0xe4>)
 8004270:	4618      	mov	r0, r3
 8004272:	f7fb ffad 	bl	80001d0 <strcmp>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <parseCommand_RPI+0x7e>
				perimeterTracking = 1;
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <parseCommand_RPI+0xe8>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(Command, "STOP") == 0) {
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	491a      	ldr	r1, [pc, #104]	; (80042f0 <parseCommand_RPI+0xec>)
 8004286:	4618      	mov	r0, r3
 8004288:	f7fb ffa2 	bl	80001d0 <strcmp>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <parseCommand_RPI+0xa0>
				MasterSwitch = 0;
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <parseCommand_RPI+0xdc>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]

				Serial_RPi("Status: STOP\r\n");
 8004298:	4816      	ldr	r0, [pc, #88]	; (80042f4 <parseCommand_RPI+0xf0>)
 800429a:	f000 f843 	bl	8004324 <Serial_RPi>
				Serial_Console("Status: STOP\r\n");
 800429e:	4815      	ldr	r0, [pc, #84]	; (80042f4 <parseCommand_RPI+0xf0>)
 80042a0:	f000 f82c 	bl	80042fc <Serial_Console>
			}
			Serial_Console(msg);
 80042a4:	480c      	ldr	r0, [pc, #48]	; (80042d8 <parseCommand_RPI+0xd4>)
 80042a6:	f000 f829 	bl	80042fc <Serial_Console>
			UART2_ready = 0;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <parseCommand_RPI+0xf4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]

			break;
 80042b0:	e009      	b.n	80042c6 <parseCommand_RPI+0xc2>
	for (uint8_t x = 0; x < sizeof(PIBuffer); x++) {
 80042b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042b6:	3301      	adds	r3, #1
 80042b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80042bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042c0:	2b3f      	cmp	r3, #63	; 0x3f
 80042c2:	d9af      	bls.n	8004224 <parseCommand_RPI+0x20>
		}
	}
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3748      	adds	r7, #72	; 0x48
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20002934 	.word	0x20002934
 80042d4:	08016024 	.word	0x08016024
 80042d8:	20000a68 	.word	0x20000a68
 80042dc:	080166a0 	.word	0x080166a0
 80042e0:	20000215 	.word	0x20000215
 80042e4:	080166a4 	.word	0x080166a4
 80042e8:	080166b4 	.word	0x080166b4
 80042ec:	2000092c 	.word	0x2000092c
 80042f0:	080166bc 	.word	0x080166bc
 80042f4:	080166c4 	.word	0x080166c4
 80042f8:	2000097f 	.word	0x2000097f

080042fc <Serial_Console>:

void Serial_Console(char *msg) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

	// Write to USB/Serial

	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fb ff6d 	bl	80001e4 <strlen>
 800430a:	4603      	mov	r3, r0
 800430c:	b29a      	uxth	r2, r3
 800430e:	2364      	movs	r3, #100	; 0x64
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4803      	ldr	r0, [pc, #12]	; (8004320 <Serial_Console+0x24>)
 8004314:	f009 fe8b 	bl	800e02e <HAL_UART_Transmit>
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20002354 	.word	0x20002354

08004324 <Serial_RPi>:
void Serial_RPi(char *msg) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

	// Write to Raspberry PI

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fb ff59 	bl	80001e4 <strlen>
 8004332:	4603      	mov	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	2364      	movs	r3, #100	; 0x64
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4803      	ldr	r0, [pc, #12]	; (8004348 <Serial_RPi+0x24>)
 800433c:	f009 fe77 	bl	800e02e <HAL_UART_Transmit>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200031bc 	.word	0x200031bc

0800434c <CheckSecurity>:
uint8_t CheckSecurity(void) {
 800434c:	b5b0      	push	{r4, r5, r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af02      	add	r7, sp, #8

	// Check security, what is our status with the boundary signals

    CheckBWF();
 8004352:	f000 fac3 	bl	80048dc <CheckBWF>

    if (State == BACKWARD) {
 8004356:	4b7e      	ldr	r3, [pc, #504]	; (8004550 <CheckSecurity+0x204>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d107      	bne.n	800436e <CheckSecurity+0x22>
    	CheckBWF_Rear();
 800435e:	f000 f99d 	bl	800469c <CheckBWF_Rear>
    	if (BWF3_Status == OUTSIDE) {
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <CheckSecurity+0x208>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d101      	bne.n	800436e <CheckSecurity+0x22>
    		return SECURITY_BACKWARD_OUTSIDE;
 800436a:	2309      	movs	r3, #9
 800436c:	e0ec      	b.n	8004548 <CheckSecurity+0x1fc>
    	}
    }

	if (fabs(mpu.pitch) >= settings.Overturn_Limit || fabs(mpu.roll) >= settings.Overturn_Limit) {
 800436e:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <CheckSecurity+0x20c>)
 8004370:	edd3 7a03 	vldr	s15, [r3, #12]
 8004374:	eef0 7ae7 	vabs.f32	s15, s15
 8004378:	ee17 0a90 	vmov	r0, s15
 800437c:	f7fc f8f4 	bl	8000568 <__aeabi_f2d>
 8004380:	4604      	mov	r4, r0
 8004382:	460d      	mov	r5, r1
 8004384:	4b75      	ldr	r3, [pc, #468]	; (800455c <CheckSecurity+0x210>)
 8004386:	795b      	ldrb	r3, [r3, #5]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc f8db 	bl	8000544 <__aeabi_i2d>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fc fbc5 	bl	8000b24 <__aeabi_dcmpge>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d118      	bne.n	80043d2 <CheckSecurity+0x86>
 80043a0:	4b6d      	ldr	r3, [pc, #436]	; (8004558 <CheckSecurity+0x20c>)
 80043a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80043a6:	eef0 7ae7 	vabs.f32	s15, s15
 80043aa:	ee17 0a90 	vmov	r0, s15
 80043ae:	f7fc f8db 	bl	8000568 <__aeabi_f2d>
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	4b69      	ldr	r3, [pc, #420]	; (800455c <CheckSecurity+0x210>)
 80043b8:	795b      	ldrb	r3, [r3, #5]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc f8c2 	bl	8000544 <__aeabi_i2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4620      	mov	r0, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7fc fbac 	bl	8000b24 <__aeabi_dcmpge>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01e      	beq.n	8004410 <CheckSecurity+0xc4>
		sprintf(emsg, "Overturn: pitch %.1f roll %.1f", mpu.pitch, mpu.roll);
 80043d2:	4b61      	ldr	r3, [pc, #388]	; (8004558 <CheckSecurity+0x20c>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f8c6 	bl	8000568 <__aeabi_f2d>
 80043dc:	4604      	mov	r4, r0
 80043de:	460d      	mov	r5, r1
 80043e0:	4b5d      	ldr	r3, [pc, #372]	; (8004558 <CheckSecurity+0x20c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc f8bf 	bl	8000568 <__aeabi_f2d>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	e9cd 2300 	strd	r2, r3, [sp]
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	495a      	ldr	r1, [pc, #360]	; (8004560 <CheckSecurity+0x214>)
 80043f8:	485a      	ldr	r0, [pc, #360]	; (8004564 <CheckSecurity+0x218>)
 80043fa:	f00b ffa5 	bl	8010348 <siprintf>
		add_error_event(emsg);
 80043fe:	4859      	ldr	r0, [pc, #356]	; (8004564 <CheckSecurity+0x218>)
 8004400:	f003 f824 	bl	800744c <add_error_event>
		MotorHardBrake();
 8004404:	f001 f8f6 	bl	80055f4 <MotorHardBrake>
		cutterHardBreak();
 8004408:	f000 f8c2 	bl	8004590 <cutterHardBreak>
		return SECURITY_IMU_FAIL;
 800440c:	2306      	movs	r3, #6
 800440e:	e09b      	b.n	8004548 <CheckSecurity+0x1fc>
	}

    if (HAL_GetTick() - Boundary_Timer >= (settings.Boundary_Timeout * 1000)) {
 8004410:	f004 f932 	bl	8008678 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	4b54      	ldr	r3, [pc, #336]	; (8004568 <CheckSecurity+0x21c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	4a4f      	ldr	r2, [pc, #316]	; (800455c <CheckSecurity+0x210>)
 800441e:	7892      	ldrb	r2, [r2, #2]
 8004420:	4611      	mov	r1, r2
 8004422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004426:	fb02 f201 	mul.w	r2, r2, r1
 800442a:	4293      	cmp	r3, r2
 800442c:	d30d      	bcc.n	800444a <CheckSecurity+0xfe>
    	BWF1_Status = NOSIGNAL;
 800442e:	4b4f      	ldr	r3, [pc, #316]	; (800456c <CheckSecurity+0x220>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
    	BWF2_Status = NOSIGNAL;
 8004434:	4b4e      	ldr	r3, [pc, #312]	; (8004570 <CheckSecurity+0x224>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
    	State = FAIL;
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <CheckSecurity+0x204>)
 800443c:	2206      	movs	r2, #6
 800443e:	701a      	strb	r2, [r3, #0]
    	Security = NOSIGNAL;
 8004440:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <CheckSecurity+0x228>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
    	return SECURITY_NOSIGNAL;
 8004446:	2302      	movs	r3, #2
 8004448:	e07e      	b.n	8004548 <CheckSecurity+0x1fc>
    }

    if (Initial_Start == 0) {
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <CheckSecurity+0x22c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <CheckSecurity+0x110>
    	move_timer = HAL_GetTick();
 8004452:	f004 f911 	bl	8008678 <HAL_GetTick>
 8004456:	4603      	mov	r3, r0
 8004458:	4a48      	ldr	r2, [pc, #288]	; (800457c <CheckSecurity+0x230>)
 800445a:	6013      	str	r3, [r2, #0]
    }

    if ((TIM4->CCR2 >= (settings.motorMaxSpeed * 0.5) || TIM4->CCR3 >= (settings.motorMaxSpeed * 0.5)) && mpu.movement < settings.movement) {
 800445c:	4b48      	ldr	r3, [pc, #288]	; (8004580 <CheckSecurity+0x234>)
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc f85f 	bl	8000524 <__aeabi_ui2d>
 8004466:	4604      	mov	r4, r0
 8004468:	460d      	mov	r5, r1
 800446a:	4b3c      	ldr	r3, [pc, #240]	; (800455c <CheckSecurity+0x210>)
 800446c:	8a1b      	ldrh	r3, [r3, #16]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc f868 	bl	8000544 <__aeabi_i2d>
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <CheckSecurity+0x238>)
 800447a:	f7fc f8cd 	bl	8000618 <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4620      	mov	r0, r4
 8004484:	4629      	mov	r1, r5
 8004486:	f7fc fb4d 	bl	8000b24 <__aeabi_dcmpge>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d119      	bne.n	80044c4 <CheckSecurity+0x178>
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <CheckSecurity+0x234>)
 8004492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc f845 	bl	8000524 <__aeabi_ui2d>
 800449a:	4604      	mov	r4, r0
 800449c:	460d      	mov	r5, r1
 800449e:	4b2f      	ldr	r3, [pc, #188]	; (800455c <CheckSecurity+0x210>)
 80044a0:	8a1b      	ldrh	r3, [r3, #16]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f84e 	bl	8000544 <__aeabi_i2d>
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <CheckSecurity+0x238>)
 80044ae:	f7fc f8b3 	bl	8000618 <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7fc fb33 	bl	8000b24 <__aeabi_dcmpge>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01c      	beq.n	80044fe <CheckSecurity+0x1b2>
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <CheckSecurity+0x20c>)
 80044c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <CheckSecurity+0x210>)
 80044cc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d511      	bpl.n	80044fe <CheckSecurity+0x1b2>
        if (HAL_GetTick() - move_timer >= 5000) {
 80044da:	f004 f8cd 	bl	8008678 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b26      	ldr	r3, [pc, #152]	; (800457c <CheckSecurity+0x230>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d90c      	bls.n	8004508 <CheckSecurity+0x1bc>
        	move_count++;
 80044ee:	4b26      	ldr	r3, [pc, #152]	; (8004588 <CheckSecurity+0x23c>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <CheckSecurity+0x23c>)
 80044f8:	701a      	strb	r2, [r3, #0]
        	return SECURITY_MOVEMENT;
 80044fa:	2308      	movs	r3, #8
 80044fc:	e024      	b.n	8004548 <CheckSecurity+0x1fc>
        }
    }
    else {
    	move_timer = HAL_GetTick();
 80044fe:	f004 f8bb 	bl	8008678 <HAL_GetTick>
 8004502:	4603      	mov	r3, r0
 8004504:	4a1d      	ldr	r2, [pc, #116]	; (800457c <CheckSecurity+0x230>)
 8004506:	6013      	str	r3, [r2, #0]
    }

    if (BWF1_Status == INSIDE && BWF2_Status == INSIDE) {
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <CheckSecurity+0x220>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <CheckSecurity+0x1e0>
 8004510:	4b17      	ldr	r3, [pc, #92]	; (8004570 <CheckSecurity+0x224>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d109      	bne.n	800452c <CheckSecurity+0x1e0>
    	Security = INSIDE;
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <CheckSecurity+0x228>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
    	OUTSIDE_timer = HAL_GetTick();		// We are inside, reset OUTSIDE_timer
 800451e:	f004 f8ab 	bl	8008678 <HAL_GetTick>
 8004522:	4603      	mov	r3, r0
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <CheckSecurity+0x240>)
 8004526:	6013      	str	r3, [r2, #0]
		return SECURITY_OK;
 8004528:	2301      	movs	r3, #1
 800452a:	e00d      	b.n	8004548 <CheckSecurity+0x1fc>
	}
	else if (BWF1_Status == OUTSIDE || BWF2_Status == OUTSIDE) {
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <CheckSecurity+0x220>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d003      	beq.n	800453c <CheckSecurity+0x1f0>
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <CheckSecurity+0x224>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d104      	bne.n	8004546 <CheckSecurity+0x1fa>
		Security = OUTSIDE;
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <CheckSecurity+0x228>)
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
		return SECURITY_FAIL;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <CheckSecurity+0x1fc>
	}

	return SECURITY_FAIL;
 8004546:	2300      	movs	r3, #0

}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	bdb0      	pop	{r4, r5, r7, pc}
 800454e:	bf00      	nop
 8004550:	2000096b 	.word	0x2000096b
 8004554:	2000096a 	.word	0x2000096a
 8004558:	2000239c 	.word	0x2000239c
 800455c:	20000cc0 	.word	0x20000cc0
 8004560:	080166d4 	.word	0x080166d4
 8004564:	20000ae8 	.word	0x20000ae8
 8004568:	2000124c 	.word	0x2000124c
 800456c:	20000968 	.word	0x20000968
 8004570:	20000969 	.word	0x20000969
 8004574:	20000980 	.word	0x20000980
 8004578:	2000092e 	.word	0x2000092e
 800457c:	200009a0 	.word	0x200009a0
 8004580:	40000800 	.word	0x40000800
 8004584:	3fe00000 	.word	0x3fe00000
 8004588:	200009b2 	.word	0x200009b2
 800458c:	20000978 	.word	0x20000978

08004590 <cutterHardBreak>:

void cutterHardBreak() {
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0

	// Cutter disc hard brake

	TIM3->CCR1 = settings.motorMaxSpeed;		// Motor will hard brake when both "pins" go HIGH
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <cutterHardBreak+0x24>)
 8004596:	8a1a      	ldrh	r2, [r3, #16]
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <cutterHardBreak+0x28>)
 800459a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = settings.motorMaxSpeed;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <cutterHardBreak+0x24>)
 800459e:	8a1a      	ldrh	r2, [r3, #16]
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <cutterHardBreak+0x28>)
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(3000);
 80045a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80045a8:	f004 f872 	bl	8008690 <HAL_Delay>
	cutterOFF();
 80045ac:	f000 f860 	bl	8004670 <cutterOFF>

}
 80045b0:	bf00      	nop
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000cc0 	.word	0x20000cc0
 80045b8:	40000400 	.word	0x40000400

080045bc <cutterON>:

void cutterON(void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0

	cutterStatus = 1;
 80045c2:	4b25      	ldr	r3, [pc, #148]	; (8004658 <cutterON+0x9c>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]

	Serial_Console("Cutter Motor ON\r\n");
 80045c8:	4824      	ldr	r0, [pc, #144]	; (800465c <cutterON+0xa0>)
 80045ca:	f7ff fe97 	bl	80042fc <Serial_Console>
	add_error_event("Cutter Motor ON");
 80045ce:	4824      	ldr	r0, [pc, #144]	; (8004660 <cutterON+0xa4>)
 80045d0:	f002 ff3c 	bl	800744c <add_error_event>

	if (rnd(10000) < 5000 ) {			// Randomly select CW or CCW
 80045d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80045d8:	f7fd fcb0 	bl	8001f3c <rnd>
 80045dc:	4603      	mov	r3, r0
 80045de:	f241 3287 	movw	r2, #4999	; 0x1387
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d81a      	bhi.n	800461c <cutterON+0x60>

		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 80045e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ea:	80fb      	strh	r3, [r7, #6]
 80045ec:	e010      	b.n	8004610 <cutterON+0x54>

			Boundary_Timer = HAL_GetTick();
 80045ee:	f004 f843 	bl	8008678 <HAL_GetTick>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <cutterON+0xa8>)
 80045f6:	6013      	str	r3, [r2, #0]
			TIM3->CCR1 = cutterSpeed;
 80045f8:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <cutterON+0xac>)
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <cutterON+0xac>)
 8004600:	2200      	movs	r2, #0
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(2);
 8004604:	2002      	movs	r0, #2
 8004606:	f004 f843 	bl	8008690 <HAL_Delay>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	3301      	adds	r3, #1
 800460e:	80fb      	strh	r3, [r7, #6]
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <cutterON+0xb0>)
 8004612:	8a9b      	ldrh	r3, [r3, #20]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	429a      	cmp	r2, r3
 8004618:	d3e9      	bcc.n	80045ee <cutterON+0x32>
			HAL_Delay(2);

		}
	}

}
 800461a:	e019      	b.n	8004650 <cutterON+0x94>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 800461c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004620:	80bb      	strh	r3, [r7, #4]
 8004622:	e010      	b.n	8004646 <cutterON+0x8a>
			Boundary_Timer = HAL_GetTick();
 8004624:	f004 f828 	bl	8008678 <HAL_GetTick>
 8004628:	4603      	mov	r3, r0
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <cutterON+0xa8>)
 800462c:	6013      	str	r3, [r2, #0]
			TIM3->CCR1 = 0;
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <cutterON+0xac>)
 8004630:	2200      	movs	r2, #0
 8004632:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = cutterSpeed;
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <cutterON+0xac>)
 8004636:	88bb      	ldrh	r3, [r7, #4]
 8004638:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_Delay(2);
 800463a:	2002      	movs	r0, #2
 800463c:	f004 f828 	bl	8008690 <HAL_Delay>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 8004640:	88bb      	ldrh	r3, [r7, #4]
 8004642:	3301      	adds	r3, #1
 8004644:	80bb      	strh	r3, [r7, #4]
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <cutterON+0xb0>)
 8004648:	8a9b      	ldrh	r3, [r3, #20]
 800464a:	88ba      	ldrh	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d3e9      	bcc.n	8004624 <cutterON+0x68>
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	2000096d 	.word	0x2000096d
 800465c:	080166f4 	.word	0x080166f4
 8004660:	08016708 	.word	0x08016708
 8004664:	2000124c 	.word	0x2000124c
 8004668:	40000400 	.word	0x40000400
 800466c:	20000cc0 	.word	0x20000cc0

08004670 <cutterOFF>:

void cutterOFF(void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0

	add_error_event("Cutter Motor OFF");
 8004674:	4806      	ldr	r0, [pc, #24]	; (8004690 <cutterOFF+0x20>)
 8004676:	f002 fee9 	bl	800744c <add_error_event>
	cutterStatus = 0;
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <cutterOFF+0x24>)
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]

	TIM3->CCR1 = 0;
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <cutterOFF+0x28>)
 8004682:	2200      	movs	r2, #0
 8004684:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <cutterOFF+0x28>)
 8004688:	2200      	movs	r2, #0
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	08016718 	.word	0x08016718
 8004694:	2000096d 	.word	0x2000096d
 8004698:	40000400 	.word	0x40000400

0800469c <CheckBWF_Rear>:
void CheckBWF_Rear() {
 800469c:	b580      	push	{r7, lr}
 800469e:	b08c      	sub	sp, #48	; 0x30
 80046a0:	af00      	add	r7, sp, #0

	float BWF3_Mixed_Signal = 0;
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float BWF3_Received_Signal = 0;
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t myID = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t BWF3_reply = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float Match_Signal = 0;
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
	float Result_Signal = 0;
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
	float BWF3_Verdict_Signal = 0.0;
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
	int count = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]

	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e01d      	b.n	8004710 <CheckBWF_Rear+0x74>
		if (x%2) {
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <CheckBWF_Rear+0x4a>
			count++;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e011      	b.n	800470a <CheckBWF_Rear+0x6e>
		}
		else {
			BWF3[count] = ADC_REAR_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 80046e6:	4a75      	ldr	r2, [pc, #468]	; (80048bc <CheckBWF_Rear+0x220>)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b73      	ldr	r3, [pc, #460]	; (80048c0 <CheckBWF_Rear+0x224>)
 80046f2:	8adb      	ldrh	r3, [r3, #22]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fe:	4a71      	ldr	r2, [pc, #452]	; (80048c4 <CheckBWF_Rear+0x228>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	edc3 7a00 	vstr	s15, [r3]
	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	3301      	adds	r3, #1
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	dbdd      	blt.n	80046d4 <CheckBWF_Rear+0x38>
		}
	}

	FIR_REAR();
 8004718:	f7fd fbca 	bl	8001eb0 <FIR_REAR>

	for (uint16_t idx = 0; idx < 96; idx++) {
 800471c:	2300      	movs	r3, #0
 800471e:	82fb      	strh	r3, [r7, #22]
 8004720:	e0c1      	b.n	80048a6 <CheckBWF_Rear+0x20a>
        if (BWF3_reply == 1) {
 8004722:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004726:	2b01      	cmp	r3, #1
 8004728:	f000 80c2 	beq.w	80048b0 <CheckBWF_Rear+0x214>
        	break;
        }
		myID = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	84fb      	strh	r3, [r7, #38]	; 0x26
		BWF3_Mixed_Signal = 0;
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
		BWF3_Received_Signal = 0;
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
		Match_Signal = 0;
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	623b      	str	r3, [r7, #32]


		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 8004742:	8afb      	ldrh	r3, [r7, #22]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e041      	b.n	80047cc <CheckBWF_Rear+0x130>

			BWF3_Mixed_Signal += (BWF3[x] * validSignature[myID]);
 8004748:	4a5e      	ldr	r2, [pc, #376]	; (80048c4 <CheckBWF_Rear+0x228>)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	ed93 7a00 	vldr	s14, [r3]
 8004754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004756:	4a5c      	ldr	r2, [pc, #368]	; (80048c8 <CheckBWF_Rear+0x22c>)
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			BWF3_Received_Signal += BWF3[x] * BWF3[x];
 8004770:	4a54      	ldr	r2, [pc, #336]	; (80048c4 <CheckBWF_Rear+0x228>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	ed93 7a00 	vldr	s14, [r3]
 800477c:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <CheckBWF_Rear+0x228>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004794:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

			Match_Signal += validSignature[myID] * validSignature[myID];
 8004798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800479a:	4a4b      	ldr	r2, [pc, #300]	; (80048c8 <CheckBWF_Rear+0x22c>)
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	ed93 7a00 	vldr	s14, [r3]
 80047a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a6:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <CheckBWF_Rear+0x22c>)
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	edd3 7a00 	vldr	s15, [r3]
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80047b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047bc:	edc7 7a08 	vstr	s15, [r7, #32]
			myID++;
 80047c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047c2:	3301      	adds	r3, #1
 80047c4:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	8afb      	ldrh	r3, [r7, #22]
 80047ce:	337e      	adds	r3, #126	; 0x7e
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	ddb8      	ble.n	8004748 <CheckBWF_Rear+0xac>
		}

	arm_sqrt_f32((BWF3_Received_Signal * Match_Signal), &Result_Signal);
 80047d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80047da:	edd7 7a08 	vldr	s15, [r7, #32]
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a02 	vstr	s15, [r7, #8]
 80047e6:	463b      	mov	r3, r7
 80047e8:	607b      	str	r3, [r7, #4]
    if (in >= 0.0f)
 80047ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80047ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	db09      	blt.n	800480c <CheckBWF_Rear+0x170>
      *pOut = __builtin_sqrtf(in);
 80047f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80047fc:	f00f ffc6 	bl	801478c <sqrtf>
 8004800:	eef0 7a40 	vmov.f32	s15, s0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800480a:	e004      	b.n	8004816 <CheckBWF_Rear+0x17a>
      *pOut = 0.0f;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004814:	bf00      	nop
	BWF3_Verdict_Signal = (BWF3_Mixed_Signal / Result_Signal);
 8004816:	ed97 7a00 	vldr	s14, [r7]
 800481a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800481e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004822:	edc7 7a03 	vstr	s15, [r7, #12]

    if (BWF3_Verdict_Signal >= settings.Signal_Integrity_IN && BWF3_reply == 0) {
 8004826:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <CheckBWF_Rear+0x224>)
 8004828:	edd3 7a08 	vldr	s15, [r3, #32]
 800482c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	db14      	blt.n	8004864 <CheckBWF_Rear+0x1c8>
 800483a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800483e:	2b00      	cmp	r3, #0
 8004840:	d110      	bne.n	8004864 <CheckBWF_Rear+0x1c8>
    	BWF3_Status = INSIDE;
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <CheckBWF_Rear+0x230>)
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004848:	f003 ff16 	bl	8008678 <HAL_GetTick>
 800484c:	4603      	mov	r3, r0
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <CheckBWF_Rear+0x234>)
 8004850:	6013      	str	r3, [r2, #0]
    	BWF3_reply = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	bwf3_inside++;
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <CheckBWF_Rear+0x238>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <CheckBWF_Rear+0x238>)
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <CheckBWF_Rear+0x204>
    }

    else if (BWF3_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF3_reply == 0) {
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <CheckBWF_Rear+0x224>)
 8004866:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800486a:	ed97 7a03 	vldr	s14, [r7, #12]
 800486e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d813      	bhi.n	80048a0 <CheckBWF_Rear+0x204>
 8004878:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <CheckBWF_Rear+0x204>
    	BWF3_Status = OUTSIDE;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <CheckBWF_Rear+0x230>)
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004886:	f003 fef7 	bl	8008678 <HAL_GetTick>
 800488a:	4603      	mov	r3, r0
 800488c:	4a10      	ldr	r2, [pc, #64]	; (80048d0 <CheckBWF_Rear+0x234>)
 800488e:	6013      	str	r3, [r2, #0]
    	BWF3_reply = 1;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	bwf3_outside++;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <CheckBWF_Rear+0x23c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <CheckBWF_Rear+0x23c>)
 800489e:	6013      	str	r3, [r2, #0]
	for (uint16_t idx = 0; idx < 96; idx++) {
 80048a0:	8afb      	ldrh	r3, [r7, #22]
 80048a2:	3301      	adds	r3, #1
 80048a4:	82fb      	strh	r3, [r7, #22]
 80048a6:	8afb      	ldrh	r3, [r7, #22]
 80048a8:	2b5f      	cmp	r3, #95	; 0x5f
 80048aa:	f67f af3a 	bls.w	8004722 <CheckBWF_Rear+0x86>
    }
	}
}
 80048ae:	e000      	b.n	80048b2 <CheckBWF_Rear+0x216>
        	break;
 80048b0:	bf00      	nop
}
 80048b2:	bf00      	nop
 80048b4:	3730      	adds	r7, #48	; 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200016f4 	.word	0x200016f4
 80048c0:	20000cc0 	.word	0x20000cc0
 80048c4:	200012ac 	.word	0x200012ac
 80048c8:	20000014 	.word	0x20000014
 80048cc:	2000096a 	.word	0x2000096a
 80048d0:	2000124c 	.word	0x2000124c
 80048d4:	2000093c 	.word	0x2000093c
 80048d8:	20000948 	.word	0x20000948

080048dc <CheckBWF>:
void CheckBWF() {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b092      	sub	sp, #72	; 0x48
 80048e0:	af00      	add	r7, sp, #0
	 * 0.85 = 85% match for INSIDE
	 * -0.75 = 75% match for OUTSIDE
	 * -1.0 = 100% match for OUTSIDE
	 */

	float BWF1_Mixed_Signal = 0;
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	647b      	str	r3, [r7, #68]	; 0x44
	float BWF1_Received_Signal = 0;
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
	float BWF2_Mixed_Signal = 0;
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float BWF2_Received_Signal = 0;
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t myID = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t BWF1_reply = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t BWF2_reply = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	float Match_Signal = 0;
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
	float Result_Signal = 0;
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
	float BWF1_Verdict_Signal = 0.0;
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
	float BWF2_Verdict_Signal = 0.0;
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
	int count = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 8004926:	2300      	movs	r3, #0
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 800492a:	e02f      	b.n	800498c <CheckBWF+0xb0>
		if (x%2) {
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d015      	beq.n	8004962 <CheckBWF+0x86>
			BWF2[count] = ADC_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 8004936:	4ab0      	ldr	r2, [pc, #704]	; (8004bf8 <CheckBWF+0x31c>)
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800493e:	461a      	mov	r2, r3
 8004940:	4bae      	ldr	r3, [pc, #696]	; (8004bfc <CheckBWF+0x320>)
 8004942:	8adb      	ldrh	r3, [r3, #22]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800494e:	4aac      	ldr	r2, [pc, #688]	; (8004c00 <CheckBWF+0x324>)
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	edc3 7a00 	vstr	s15, [r3]
			count++;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	3301      	adds	r3, #1
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004960:	e011      	b.n	8004986 <CheckBWF+0xaa>
		}
		else {
			BWF1[count] = ADC_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 8004962:	4aa5      	ldr	r2, [pc, #660]	; (8004bf8 <CheckBWF+0x31c>)
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800496a:	461a      	mov	r2, r3
 800496c:	4ba3      	ldr	r3, [pc, #652]	; (8004bfc <CheckBWF+0x320>)
 800496e:	8adb      	ldrh	r3, [r3, #22]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	4aa2      	ldr	r2, [pc, #648]	; (8004c04 <CheckBWF+0x328>)
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	edc3 7a00 	vstr	s15, [r3]
	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	3301      	adds	r3, #1
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004992:	dbcb      	blt.n	800492c <CheckBWF+0x50>
		}
	}

	FIR_LEFT();		// Run FIR on left BWF	(BWF1)
 8004994:	f7fd fa00 	bl	8001d98 <FIR_LEFT>
	FIR_RIGHT();	// Run FIR on right BWF	(BWF2)
 8004998:	f7fd fa44 	bl	8001e24 <FIR_RIGHT>

	if (Signature_Record == TRUE) {
 800499c:	4b9a      	ldr	r3, [pc, #616]	; (8004c08 <CheckBWF+0x32c>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d115      	bne.n	80049d0 <CheckBWF+0xf4>
		for (uint16_t x = 0; x < SIGNATURE_LEN; x++) {
 80049a4:	2300      	movs	r3, #0
 80049a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049a8:	e00c      	b.n	80049c4 <CheckBWF+0xe8>
			validSignature[x] = BWF1[x];
 80049aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049ae:	4995      	ldr	r1, [pc, #596]	; (8004c04 <CheckBWF+0x328>)
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	440a      	add	r2, r1
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	4995      	ldr	r1, [pc, #596]	; (8004c0c <CheckBWF+0x330>)
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	601a      	str	r2, [r3, #0]
		for (uint16_t x = 0; x < SIGNATURE_LEN; x++) {
 80049be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049c0:	3301      	adds	r3, #1
 80049c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049c6:	2b7f      	cmp	r3, #127	; 0x7f
 80049c8:	d9ef      	bls.n	80049aa <CheckBWF+0xce>
		}
		Signature_Record = FALSE;
 80049ca:	4b8f      	ldr	r3, [pc, #572]	; (8004c08 <CheckBWF+0x32c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
	}

	for (uint16_t idx = 0; idx < 96; idx++) {
 80049d0:	2300      	movs	r3, #0
 80049d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80049d4:	e1ae      	b.n	8004d34 <CheckBWF+0x458>
        if (BWF1_reply == 1 && BWF2_reply == 1) {
 80049d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d104      	bne.n	80049e8 <CheckBWF+0x10c>
 80049de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f000 81ab 	beq.w	8004d3e <CheckBWF+0x462>
        	break;
        }
		myID = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	86fb      	strh	r3, [r7, #54]	; 0x36
		BWF1_Mixed_Signal = 0;
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
		BWF1_Received_Signal = 0;
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40
		BWF2_Mixed_Signal = 0;
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		BWF2_Received_Signal = 0;
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
		Match_Signal = 0;
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30


		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 8004a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	e069      	b.n	8004ae4 <CheckBWF+0x208>

			BWF1_Mixed_Signal += (BWF1[x] * validSignature[myID]);
 8004a10:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <CheckBWF+0x328>)
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	ed93 7a00 	vldr	s14, [r3]
 8004a1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a1e:	4a7b      	ldr	r2, [pc, #492]	; (8004c0c <CheckBWF+0x330>)
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	edd3 7a00 	vldr	s15, [r3]
 8004a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			BWF1_Received_Signal += BWF1[x] * BWF1[x];
 8004a38:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <CheckBWF+0x328>)
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	ed93 7a00 	vldr	s14, [r3]
 8004a44:	4a6f      	ldr	r2, [pc, #444]	; (8004c04 <CheckBWF+0x328>)
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			BWF2_Mixed_Signal += (BWF2[x] * validSignature[myID]);
 8004a60:	4a67      	ldr	r2, [pc, #412]	; (8004c00 <CheckBWF+0x324>)
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	ed93 7a00 	vldr	s14, [r3]
 8004a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a6e:	4a67      	ldr	r2, [pc, #412]	; (8004c0c <CheckBWF+0x330>)
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	edd3 7a00 	vldr	s15, [r3]
 8004a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			BWF2_Received_Signal += BWF2[x] * BWF2[x];
 8004a88:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <CheckBWF+0x324>)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	ed93 7a00 	vldr	s14, [r3]
 8004a94:	4a5a      	ldr	r2, [pc, #360]	; (8004c00 <CheckBWF+0x324>)
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	edd3 7a00 	vldr	s15, [r3]
 8004aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			Match_Signal += validSignature[myID] * validSignature[myID];
 8004ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ab2:	4a56      	ldr	r2, [pc, #344]	; (8004c0c <CheckBWF+0x330>)
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	ed93 7a00 	vldr	s14, [r3]
 8004abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004abe:	4a53      	ldr	r2, [pc, #332]	; (8004c0c <CheckBWF+0x330>)
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004acc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			myID++;
 8004ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ada:	3301      	adds	r3, #1
 8004adc:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae6:	337e      	adds	r3, #126	; 0x7e
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	dd90      	ble.n	8004a10 <CheckBWF+0x134>
		}

	arm_sqrt_f32((BWF1_Received_Signal * Match_Signal), &Result_Signal);
 8004aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004af2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a03 	vstr	s15, [r7, #12]
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	60bb      	str	r3, [r7, #8]
    if (in >= 0.0f)
 8004b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	db09      	blt.n	8004b24 <CheckBWF+0x248>
      *pOut = __builtin_sqrtf(in);
 8004b10:	ed97 0a03 	vldr	s0, [r7, #12]
 8004b14:	f00f fe3a 	bl	801478c <sqrtf>
 8004b18:	eef0 7a40 	vmov.f32	s15, s0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8004b22:	e004      	b.n	8004b2e <CheckBWF+0x252>
      *pOut = 0.0f;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004b2c:	bf00      	nop
	BWF1_Verdict_Signal = (BWF1_Mixed_Signal / Result_Signal);
 8004b2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b32:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]

	arm_sqrt_f32((BWF2_Received_Signal * Match_Signal), &Result_Signal);
 8004b3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004b42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a05 	vstr	s15, [r7, #20]
 8004b4e:	1d3b      	adds	r3, r7, #4
 8004b50:	613b      	str	r3, [r7, #16]
    if (in >= 0.0f)
 8004b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5e:	db09      	blt.n	8004b74 <CheckBWF+0x298>
      *pOut = __builtin_sqrtf(in);
 8004b60:	ed97 0a05 	vldr	s0, [r7, #20]
 8004b64:	f00f fe12 	bl	801478c <sqrtf>
 8004b68:	eef0 7a40 	vmov.f32	s15, s0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8004b72:	e004      	b.n	8004b7e <CheckBWF+0x2a2>
      *pOut = 0.0f;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004b7c:	bf00      	nop
	BWF2_Verdict_Signal = (BWF2_Mixed_Signal / Result_Signal);
 8004b7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b82:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	edc7 7a06 	vstr	s15, [r7, #24]

    if (BWF1_Verdict_Signal >= settings.Signal_Integrity_IN && BWF1_reply == 0) {
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <CheckBWF+0x320>)
 8004b90:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b94:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba0:	db40      	blt.n	8004c24 <CheckBWF+0x348>
 8004ba2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d13c      	bne.n	8004c24 <CheckBWF+0x348>
    	BWF1_Status = INSIDE;
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <CheckBWF+0x334>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004bb0:	f003 fd62 	bl	8008678 <HAL_GetTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <CheckBWF+0x338>)
 8004bb8:	6013      	str	r3, [r2, #0]
    	BWF1_reply = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    	if (Initial_Start == 0) {
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <CheckBWF+0x33c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10e      	bne.n	8004be6 <CheckBWF+0x30a>
    		Start_Threshold++;
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <CheckBWF+0x340>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <CheckBWF+0x340>)
 8004bd2:	801a      	strh	r2, [r3, #0]
    		if (Start_Threshold >= INITIAL_MAX_THRESHOLD) {
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <CheckBWF+0x340>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d902      	bls.n	8004be6 <CheckBWF+0x30a>
    			Initial_Start = 1;
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <CheckBWF+0x33c>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
    		}
    	}
    	bwf1_inside++;
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <CheckBWF+0x344>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <CheckBWF+0x344>)
 8004bee:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(1);
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7fc fe63 	bl	80018bc <CalcMagnitude>
 8004bf6:	e03d      	b.n	8004c74 <CheckBWF+0x398>
 8004bf8:	20001af4 	.word	0x20001af4
 8004bfc:	20000cc0 	.word	0x20000cc0
 8004c00:	20000dc4 	.word	0x20000dc4
 8004c04:	20002534 	.word	0x20002534
 8004c08:	20000991 	.word	0x20000991
 8004c0c:	20000014 	.word	0x20000014
 8004c10:	20000968 	.word	0x20000968
 8004c14:	2000124c 	.word	0x2000124c
 8004c18:	2000092e 	.word	0x2000092e
 8004c1c:	20000930 	.word	0x20000930
 8004c20:	20000934 	.word	0x20000934

    }

    else if (BWF1_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF1_reply == 0) {
 8004c24:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <CheckBWF+0x46c>)
 8004c26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d81d      	bhi.n	8004c74 <CheckBWF+0x398>
 8004c38:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d119      	bne.n	8004c74 <CheckBWF+0x398>
    	BWF1_Status = OUTSIDE;
 8004c40:	4b42      	ldr	r3, [pc, #264]	; (8004d4c <CheckBWF+0x470>)
 8004c42:	2202      	movs	r2, #2
 8004c44:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004c46:	f003 fd17 	bl	8008678 <HAL_GetTick>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <CheckBWF+0x474>)
 8004c4e:	6013      	str	r3, [r2, #0]
    	BWF1_reply = 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    	if (Initial_Start == 0) Start_Threshold = 0;
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <CheckBWF+0x478>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <CheckBWF+0x388>
 8004c5e:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <CheckBWF+0x47c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]
    	bwf1_outside++;
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <CheckBWF+0x480>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <CheckBWF+0x480>)
 8004c6c:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(1);
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f7fc fe24 	bl	80018bc <CalcMagnitude>
    }

    if (BWF2_Verdict_Signal >= settings.Signal_Integrity_IN && BWF2_reply == 0) {
 8004c74:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <CheckBWF+0x46c>)
 8004c76:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	db2a      	blt.n	8004cde <CheckBWF+0x402>
 8004c88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d126      	bne.n	8004cde <CheckBWF+0x402>
    	BWF2_Status = INSIDE;
 8004c90:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <CheckBWF+0x484>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004c96:	f003 fcef 	bl	8008678 <HAL_GetTick>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <CheckBWF+0x474>)
 8004c9e:	6013      	str	r3, [r2, #0]
    	BWF2_reply = 1;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    	if (Initial_Start == 0) {
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <CheckBWF+0x478>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10e      	bne.n	8004ccc <CheckBWF+0x3f0>
    		Start_Threshold++;
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <CheckBWF+0x47c>)
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <CheckBWF+0x47c>)
 8004cb8:	801a      	strh	r2, [r3, #0]
    		if (Start_Threshold >= INITIAL_MAX_THRESHOLD) {
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <CheckBWF+0x47c>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d902      	bls.n	8004ccc <CheckBWF+0x3f0>
    			Initial_Start = 1;
 8004cc6:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <CheckBWF+0x478>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
    		}
    	}
    	bwf2_inside++;
 8004ccc:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <CheckBWF+0x488>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <CheckBWF+0x488>)
 8004cd4:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(2);
 8004cd6:	2002      	movs	r0, #2
 8004cd8:	f7fc fdf0 	bl	80018bc <CalcMagnitude>
 8004cdc:	e027      	b.n	8004d2e <CheckBWF+0x452>

    }
    else if (BWF2_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF2_reply == 0) {
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <CheckBWF+0x46c>)
 8004ce0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf0:	d81d      	bhi.n	8004d2e <CheckBWF+0x452>
 8004cf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <CheckBWF+0x452>
    	BWF2_Status = OUTSIDE;
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <CheckBWF+0x484>)
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004d00:	f003 fcba 	bl	8008678 <HAL_GetTick>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <CheckBWF+0x474>)
 8004d08:	6013      	str	r3, [r2, #0]
    	BWF2_reply = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    	if (Initial_Start == 0) Start_Threshold = 0;
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <CheckBWF+0x478>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <CheckBWF+0x442>
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <CheckBWF+0x47c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
    	bwf2_outside++;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <CheckBWF+0x48c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <CheckBWF+0x48c>)
 8004d26:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(2);
 8004d28:	2002      	movs	r0, #2
 8004d2a:	f7fc fdc7 	bl	80018bc <CalcMagnitude>
	for (uint16_t idx = 0; idx < 96; idx++) {
 8004d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d30:	3301      	adds	r3, #1
 8004d32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d36:	2b5f      	cmp	r3, #95	; 0x5f
 8004d38:	f67f ae4d 	bls.w	80049d6 <CheckBWF+0xfa>
    }
	}
}
 8004d3c:	e000      	b.n	8004d40 <CheckBWF+0x464>
        	break;
 8004d3e:	bf00      	nop
}
 8004d40:	bf00      	nop
 8004d42:	3748      	adds	r7, #72	; 0x48
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000cc0 	.word	0x20000cc0
 8004d4c:	20000968 	.word	0x20000968
 8004d50:	2000124c 	.word	0x2000124c
 8004d54:	2000092e 	.word	0x2000092e
 8004d58:	20000930 	.word	0x20000930
 8004d5c:	20000940 	.word	0x20000940
 8004d60:	20000969 	.word	0x20000969
 8004d64:	20000938 	.word	0x20000938
 8004d68:	20000944 	.word	0x20000944

08004d6c <ADC_Send>:

void ADC_Send(uint8_t Channel) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]

	// Send ADC data

	unsigned char ADSwrite[6];

	ADSwrite[0] = 0x01;
 8004d76:	2301      	movs	r3, #1
 8004d78:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = Channel;
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83;
 8004d7e:	2383      	movs	r3, #131	; 0x83
 8004d80:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8004d82:	f107 0208 	add.w	r2, r7, #8
 8004d86:	2364      	movs	r3, #100	; 0x64
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	2190      	movs	r1, #144	; 0x90
 8004d8e:	4809      	ldr	r0, [pc, #36]	; (8004db4 <ADC_Send+0x48>)
 8004d90:	f005 fb50 	bl	800a434 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8004d94:	2300      	movs	r3, #0
 8004d96:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 1, 100);
 8004d98:	f107 0208 	add.w	r2, r7, #8
 8004d9c:	2364      	movs	r3, #100	; 0x64
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2301      	movs	r3, #1
 8004da2:	2190      	movs	r1, #144	; 0x90
 8004da4:	4803      	ldr	r0, [pc, #12]	; (8004db4 <ADC_Send+0x48>)
 8004da6:	f005 fb45 	bl	800a434 <HAL_I2C_Master_Transmit>

}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000d60 	.word	0x20000d60

08004db8 <ADC_Receive>:

int ADC_Receive() {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
	// Receive ADC data

	unsigned char ADSwrite[6];
	int reading;

	HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8004dbe:	1d3a      	adds	r2, r7, #4
 8004dc0:	2364      	movs	r3, #100	; 0x64
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2190      	movs	r1, #144	; 0x90
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <ADC_Receive+0x3c>)
 8004dca:	f005 fc31 	bl	800a630 <HAL_I2C_Master_Receive>

	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8004dce:	793b      	ldrb	r3, [r7, #4]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	797a      	ldrb	r2, [r7, #5]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

	if(reading < 0 || reading > 32768) {
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db03      	blt.n	8004de6 <ADC_Receive+0x2e>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de4:	dd01      	ble.n	8004dea <ADC_Receive+0x32>
		reading = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
	}

	return reading;
 8004dea:	68fb      	ldr	r3, [r7, #12]

}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20000d60 	.word	0x20000d60

08004df8 <UpdateMotorSpeed>:

void UpdateMotorSpeed() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
	 * A simple motor speed controller, for each degree off, we simply decrease the speed with 120.
	 * TODO - a proper PID controller
	 */

	int16_t diff;
	int8_t dir = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	737b      	strb	r3, [r7, #13]

	// Calculate the difference in bearing, 0-360 accounted for. (Circular heading)
	diff = (((((int)mpu.heading - (int)mpu.hold_heading) % 360) + 540 ) % 360) - 180;
 8004e02:	4b77      	ldr	r3, [pc, #476]	; (8004fe0 <UpdateMotorSpeed+0x1e8>)
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0c:	ee17 2a90 	vmov	r2, s15
 8004e10:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <UpdateMotorSpeed+0x1e8>)
 8004e12:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e1a:	ee17 3a90 	vmov	r3, s15
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	4a70      	ldr	r2, [pc, #448]	; (8004fe4 <UpdateMotorSpeed+0x1ec>)
 8004e22:	fb82 1203 	smull	r1, r2, r2, r3
 8004e26:	441a      	add	r2, r3
 8004e28:	1211      	asrs	r1, r2, #8
 8004e2a:	17da      	asrs	r2, r3, #31
 8004e2c:	1a8a      	subs	r2, r1, r2
 8004e2e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004e32:	fb01 f202 	mul.w	r2, r1, r2
 8004e36:	1a9a      	subs	r2, r3, r2
 8004e38:	f502 7307 	add.w	r3, r2, #540	; 0x21c
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <UpdateMotorSpeed+0x1ec>)
 8004e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8004e42:	441a      	add	r2, r3
 8004e44:	1211      	asrs	r1, r2, #8
 8004e46:	17da      	asrs	r2, r3, #31
 8004e48:	1a8a      	subs	r2, r1, r2
 8004e4a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004e4e:	fb01 f202 	mul.w	r2, r1, r2
 8004e52:	1a9a      	subs	r2, r3, r2
 8004e54:	b293      	uxth	r3, r2
 8004e56:	3bb4      	subs	r3, #180	; 0xb4
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	81fb      	strh	r3, [r7, #14]
	diff *= 120.0;
 8004e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb fb6f 	bl	8000544 <__aeabi_i2d>
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	4b5f      	ldr	r3, [pc, #380]	; (8004fe8 <UpdateMotorSpeed+0x1f0>)
 8004e6c:	f7fb fbd4 	bl	8000618 <__aeabi_dmul>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f7fb fe7e 	bl	8000b78 <__aeabi_d2iz>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	81fb      	strh	r3, [r7, #14]

	if (diff < 0) dir = -1;
 8004e80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	da02      	bge.n	8004e8e <UpdateMotorSpeed+0x96>
 8004e88:	23ff      	movs	r3, #255	; 0xff
 8004e8a:	737b      	strb	r3, [r7, #13]
 8004e8c:	e00c      	b.n	8004ea8 <UpdateMotorSpeed+0xb0>
	else if (diff > 0) dir = 1;
 8004e8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd02      	ble.n	8004e9c <UpdateMotorSpeed+0xa4>
 8004e96:	2301      	movs	r3, #1
 8004e98:	737b      	strb	r3, [r7, #13]
 8004e9a:	e005      	b.n	8004ea8 <UpdateMotorSpeed+0xb0>
	else if (diff == 0) dir = 0;
 8004e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <UpdateMotorSpeed+0xb0>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	737b      	strb	r3, [r7, #13]

		// Do not change speed more than 1000
	if (diff > 1000) diff = 1000;
 8004ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb0:	dd02      	ble.n	8004eb8 <UpdateMotorSpeed+0xc0>
 8004eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eb6:	81fb      	strh	r3, [r7, #14]
	if (diff < -1000) diff = -1000;
 8004eb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ebc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004ec0:	da02      	bge.n	8004ec8 <UpdateMotorSpeed+0xd0>
 8004ec2:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8004ec6:	81fb      	strh	r3, [r7, #14]

	uint16_t Speed;
	if (mag_near_bwf == 1 || highgrass_slowdown == 1) {
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <UpdateMotorSpeed+0x1f4>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d003      	beq.n	8004ed8 <UpdateMotorSpeed+0xe0>
 8004ed0:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <UpdateMotorSpeed+0x1f8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d143      	bne.n	8004f60 <UpdateMotorSpeed+0x168>
		Speed = settings.motorMaxSpeed;
 8004ed8:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <UpdateMotorSpeed+0x1fc>)
 8004eda:	8a1b      	ldrh	r3, [r3, #16]
 8004edc:	817b      	strh	r3, [r7, #10]
		if (mag_near_bwf == 1) {
 8004ede:	4b43      	ldr	r3, [pc, #268]	; (8004fec <UpdateMotorSpeed+0x1f4>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11c      	bne.n	8004f20 <UpdateMotorSpeed+0x128>
			Speed = round(Speed * settings.proximitySpeed);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef0:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <UpdateMotorSpeed+0x1fc>)
 8004ef2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efa:	ee17 0a90 	vmov	r0, s15
 8004efe:	f7fb fb33 	bl	8000568 <__aeabi_f2d>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	ec43 2b10 	vmov	d0, r2, r3
 8004f0a:	f00f fbf7 	bl	80146fc <round>
 8004f0e:	ec53 2b10 	vmov	r2, r3, d0
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fb fe57 	bl	8000bc8 <__aeabi_d2uiz>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
		if (mag_near_bwf == 1) {
 8004f1e:	e023      	b.n	8004f68 <UpdateMotorSpeed+0x170>
		}
		else if (highgrass_slowdown == 1) {
 8004f20:	4b33      	ldr	r3, [pc, #204]	; (8004ff0 <UpdateMotorSpeed+0x1f8>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d11f      	bne.n	8004f68 <UpdateMotorSpeed+0x170>
			Speed = round(Speed * 0.78);
 8004f28:	897b      	ldrh	r3, [r7, #10]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb fb0a 	bl	8000544 <__aeabi_i2d>
 8004f30:	a329      	add	r3, pc, #164	; (adr r3, 8004fd8 <UpdateMotorSpeed+0x1e0>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	f7fb fb6f 	bl	8000618 <__aeabi_dmul>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	ec43 2b17 	vmov	d7, r2, r3
 8004f42:	eeb0 0a47 	vmov.f32	s0, s14
 8004f46:	eef0 0a67 	vmov.f32	s1, s15
 8004f4a:	f00f fbd7 	bl	80146fc <round>
 8004f4e:	ec53 2b10 	vmov	r2, r3, d0
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	f7fb fe37 	bl	8000bc8 <__aeabi_d2uiz>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	817b      	strh	r3, [r7, #10]
		if (mag_near_bwf == 1) {
 8004f5e:	e003      	b.n	8004f68 <UpdateMotorSpeed+0x170>

		}
	}

	else Speed = settings.motorMaxSpeed;
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <UpdateMotorSpeed+0x1fc>)
 8004f62:	8a1b      	ldrh	r3, [r3, #16]
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	e000      	b.n	8004f6a <UpdateMotorSpeed+0x172>
		if (mag_near_bwf == 1) {
 8004f68:	bf00      	nop

		// Target is on the Left side
		if (dir > 0) {
 8004f6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dd0f      	ble.n	8004f92 <UpdateMotorSpeed+0x19a>
			int CorrectedSpeed = Speed - abs(diff);
 8004f72:	897b      	ldrh	r3, [r7, #10]
 8004f74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	bfb8      	it	lt
 8004f7c:	4252      	neglt	r2, r2
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	603b      	str	r3, [r7, #0]
			TIM4->CCR2 = CorrectedSpeed;
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = Speed;
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	63d3      	str	r3, [r2, #60]	; 0x3c
		else if (dir == 0) {
			TIM4->CCR2 = Speed;
			TIM4->CCR3 = Speed;
		}

}
 8004f90:	e01d      	b.n	8004fce <UpdateMotorSpeed+0x1d6>
		else if (dir < 0){
 8004f92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da0f      	bge.n	8004fba <UpdateMotorSpeed+0x1c2>
			int CorrectedSpeed = Speed - abs(diff);
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	bfb8      	it	lt
 8004fa4:	4252      	neglt	r2, r2
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	607b      	str	r3, [r7, #4]
			TIM4->CCR2 = Speed;
 8004fac:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = CorrectedSpeed;
 8004fb2:	4a11      	ldr	r2, [pc, #68]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004fb8:	e009      	b.n	8004fce <UpdateMotorSpeed+0x1d6>
		else if (dir == 0) {
 8004fba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <UpdateMotorSpeed+0x1d6>
			TIM4->CCR2 = Speed;
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004fc4:	897b      	ldrh	r3, [r7, #10]
 8004fc6:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = Speed;
 8004fc8:	4a0b      	ldr	r2, [pc, #44]	; (8004ff8 <UpdateMotorSpeed+0x200>)
 8004fca:	897b      	ldrh	r3, [r7, #10]
 8004fcc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	8f5c28f6 	.word	0x8f5c28f6
 8004fdc:	3fe8f5c2 	.word	0x3fe8f5c2
 8004fe0:	2000239c 	.word	0x2000239c
 8004fe4:	b60b60b7 	.word	0xb60b60b7
 8004fe8:	405e0000 	.word	0x405e0000
 8004fec:	2000099a 	.word	0x2000099a
 8004ff0:	200009b0 	.word	0x200009b0
 8004ff4:	20000cc0 	.word	0x20000cc0
 8004ff8:	40000800 	.word	0x40000800

08004ffc <MotorForward>:

void MotorForward(uint16_t minSpeed, uint16_t maxSpeed) {
 8004ffc:	b5b0      	push	{r4, r5, r7, lr}
 8004ffe:	b096      	sub	sp, #88	; 0x58
 8005000:	af12      	add	r7, sp, #72	; 0x48
 8005002:	4603      	mov	r3, r0
 8005004:	460a      	mov	r2, r1
 8005006:	80fb      	strh	r3, [r7, #6]
 8005008:	4613      	mov	r3, r2
 800500a:	80bb      	strh	r3, [r7, #4]

	State = FORWARD;
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <MotorForward+0x154>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]

	MPU6050_Read_Accel();		// Get fresh data for Pitch/Roll
 8005012:	f001 fd8d 	bl	8006b30 <MPU6050_Read_Accel>
	ProcessIMUData(settings);			// Compute Pitch/Roll
 8005016:	4c4f      	ldr	r4, [pc, #316]	; (8005154 <MotorForward+0x158>)
 8005018:	4668      	mov	r0, sp
 800501a:	f104 0310 	add.w	r3, r4, #16
 800501e:	2248      	movs	r2, #72	; 0x48
 8005020:	4619      	mov	r1, r3
 8005022:	f00a fafb 	bl	800f61c <memcpy>
 8005026:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800502a:	f001 fc6d 	bl	8006908 <ProcessIMUData>
	move_timer = HAL_GetTick();
 800502e:	f003 fb23 	bl	8008678 <HAL_GetTick>
 8005032:	4603      	mov	r3, r0
 8005034:	4a48      	ldr	r2, [pc, #288]	; (8005158 <MotorForward+0x15c>)
 8005036:	6013      	str	r3, [r2, #0]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	81fb      	strh	r3, [r7, #14]
 800503c:	e07c      	b.n	8005138 <MotorForward+0x13c>

	  currentSpeed += 3;
 800503e:	89fb      	ldrh	r3, [r7, #14]
 8005040:	3303      	adds	r3, #3
 8005042:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8005044:	89fa      	ldrh	r2, [r7, #14]
 8005046:	88bb      	ldrh	r3, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d27b      	bcs.n	8005144 <MotorForward+0x148>
		  break;
	  }

	  uint16_t leftTilt = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	81bb      	strh	r3, [r7, #12]
	  uint16_t rightTilt = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	817b      	strh	r3, [r7, #10]

	  if (mpu.roll < 0) {
 8005054:	4b41      	ldr	r3, [pc, #260]	; (800515c <MotorForward+0x160>)
 8005056:	edd3 7a02 	vldr	s15, [r3, #8]
 800505a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d50d      	bpl.n	8005080 <MotorForward+0x84>
		  leftTilt = fabs(mpu.roll * 50);
 8005064:	4b3d      	ldr	r3, [pc, #244]	; (800515c <MotorForward+0x160>)
 8005066:	edd3 7a02 	vldr	s15, [r3, #8]
 800506a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005160 <MotorForward+0x164>
 800506e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005072:	eef0 7ae7 	vabs.f32	s15, s15
 8005076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507a:	ee17 3a90 	vmov	r3, s15
 800507e:	81bb      	strh	r3, [r7, #12]
	  }
	  if (mpu.roll > 0) {
 8005080:	4b36      	ldr	r3, [pc, #216]	; (800515c <MotorForward+0x160>)
 8005082:	edd3 7a02 	vldr	s15, [r3, #8]
 8005086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	dd0d      	ble.n	80050ac <MotorForward+0xb0>
		  rightTilt = fabs(mpu.roll * 50);
 8005090:	4b32      	ldr	r3, [pc, #200]	; (800515c <MotorForward+0x160>)
 8005092:	edd3 7a02 	vldr	s15, [r3, #8]
 8005096:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005160 <MotorForward+0x164>
 800509a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800509e:	eef0 7ae7 	vabs.f32	s15, s15
 80050a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a6:	ee17 3a90 	vmov	r3, s15
 80050aa:	817b      	strh	r3, [r7, #10]
	  }

	  TIM4->CCR1 = 0;
 80050ac:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <MotorForward+0x168>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM4->CCR2 = currentSpeed - round(leftTilt);
 80050b2:	89fb      	ldrh	r3, [r7, #14]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fb fa45 	bl	8000544 <__aeabi_i2d>
 80050ba:	4604      	mov	r4, r0
 80050bc:	460d      	mov	r5, r1
 80050be:	89bb      	ldrh	r3, [r7, #12]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fa2f 	bl	8000524 <__aeabi_ui2d>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb f8eb 	bl	80002a8 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4c23      	ldr	r4, [pc, #140]	; (8005164 <MotorForward+0x168>)
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f7fb fd74 	bl	8000bc8 <__aeabi_d2uiz>
 80050e0:	4603      	mov	r3, r0
 80050e2:	63a3      	str	r3, [r4, #56]	; 0x38

	  TIM4->CCR3 = currentSpeed - round(rightTilt);
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fb fa2c 	bl	8000544 <__aeabi_i2d>
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fa16 	bl	8000524 <__aeabi_ui2d>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb f8d2 	bl	80002a8 <__aeabi_dsub>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4c16      	ldr	r4, [pc, #88]	; (8005164 <MotorForward+0x168>)
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fb fd5b 	bl	8000bc8 <__aeabi_d2uiz>
 8005112:	4603      	mov	r3, r0
 8005114:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM4->CCR4 = 0;
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <MotorForward+0x168>)
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

	  HAL_Delay(1);
 800511c:	2001      	movs	r0, #1
 800511e:	f003 fab7 	bl	8008690 <HAL_Delay>

	  if (CheckSecurity() == SECURITY_FAIL) {
 8005122:	f7ff f913 	bl	800434c <CheckSecurity>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <MotorForward+0x136>
		  MotorStop();
 800512c:	f000 f9c8 	bl	80054c0 <MotorStop>
		  break;
 8005130:	e009      	b.n	8005146 <MotorForward+0x14a>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	3301      	adds	r3, #1
 8005136:	81fb      	strh	r3, [r7, #14]
 8005138:	89fa      	ldrh	r2, [r7, #14]
 800513a:	88bb      	ldrh	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	f4ff af7e 	bcc.w	800503e <MotorForward+0x42>
	  }

 }
}
 8005142:	e000      	b.n	8005146 <MotorForward+0x14a>
		  break;
 8005144:	bf00      	nop
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bdb0      	pop	{r4, r5, r7, pc}
 800514e:	bf00      	nop
 8005150:	2000096b 	.word	0x2000096b
 8005154:	20000cc0 	.word	0x20000cc0
 8005158:	200009a0 	.word	0x200009a0
 800515c:	2000239c 	.word	0x2000239c
 8005160:	42480000 	.word	0x42480000
 8005164:	40000800 	.word	0x40000800

08005168 <MotorBackward>:
void MotorBackward(uint16_t minSpeed, uint16_t maxSpeed, uint32_t time_ms) {
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b098      	sub	sp, #96	; 0x60
 800516c:	af12      	add	r7, sp, #72	; 0x48
 800516e:	4603      	mov	r3, r0
 8005170:	603a      	str	r2, [r7, #0]
 8005172:	80fb      	strh	r3, [r7, #6]
 8005174:	460b      	mov	r3, r1
 8005176:	80bb      	strh	r3, [r7, #4]

	add_error_event("MotorBackward");
 8005178:	4875      	ldr	r0, [pc, #468]	; (8005350 <MotorBackward+0x1e8>)
 800517a:	f002 f967 	bl	800744c <add_error_event>
	uint32_t motor_timer;
	State = BACKWARD;
 800517e:	4b75      	ldr	r3, [pc, #468]	; (8005354 <MotorBackward+0x1ec>)
 8005180:	2202      	movs	r2, #2
 8005182:	701a      	strb	r2, [r3, #0]
	motor_timer = HAL_GetTick();
 8005184:	f003 fa78 	bl	8008678 <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]
	MPU6050_Read_Accel();		// Get fresh data for Pitch/Roll
 800518a:	f001 fcd1 	bl	8006b30 <MPU6050_Read_Accel>
	ProcessIMUData(settings);			// Compute Pitch/Roll
 800518e:	4c72      	ldr	r4, [pc, #456]	; (8005358 <MotorBackward+0x1f0>)
 8005190:	4668      	mov	r0, sp
 8005192:	f104 0310 	add.w	r3, r4, #16
 8005196:	2248      	movs	r2, #72	; 0x48
 8005198:	4619      	mov	r1, r3
 800519a:	f00a fa3f 	bl	800f61c <memcpy>
 800519e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80051a2:	f001 fbb1 	bl	8006908 <ProcessIMUData>

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	82fb      	strh	r3, [r7, #22]
 80051aa:	e09b      	b.n	80052e4 <MotorBackward+0x17c>

	  currentSpeed += 3;
 80051ac:	8afb      	ldrh	r3, [r7, #22]
 80051ae:	3303      	adds	r3, #3
 80051b0:	82fb      	strh	r3, [r7, #22]
	  if (currentSpeed >= maxSpeed) {
 80051b2:	8afa      	ldrh	r2, [r7, #22]
 80051b4:	88bb      	ldrh	r3, [r7, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	f080 809a 	bcs.w	80052f0 <MotorBackward+0x188>
		  break;
	  }

	  uint16_t leftTilt = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	82bb      	strh	r3, [r7, #20]
	  uint16_t rightTilt = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	827b      	strh	r3, [r7, #18]

	  if (mpu.roll < 0) {
 80051c4:	4b65      	ldr	r3, [pc, #404]	; (800535c <MotorBackward+0x1f4>)
 80051c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d2:	d50d      	bpl.n	80051f0 <MotorBackward+0x88>
		  leftTilt = fabs(mpu.roll * 50);
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <MotorBackward+0x1f4>)
 80051d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80051da:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8005360 <MotorBackward+0x1f8>
 80051de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e2:	eef0 7ae7 	vabs.f32	s15, s15
 80051e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ea:	ee17 3a90 	vmov	r3, s15
 80051ee:	82bb      	strh	r3, [r7, #20]
	  }
	  if (mpu.roll > 0) {
 80051f0:	4b5a      	ldr	r3, [pc, #360]	; (800535c <MotorBackward+0x1f4>)
 80051f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80051f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	dd0d      	ble.n	800521c <MotorBackward+0xb4>
		  rightTilt = fabs(mpu.roll * 50);
 8005200:	4b56      	ldr	r3, [pc, #344]	; (800535c <MotorBackward+0x1f4>)
 8005202:	edd3 7a02 	vldr	s15, [r3, #8]
 8005206:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005360 <MotorBackward+0x1f8>
 800520a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800520e:	eef0 7ae7 	vabs.f32	s15, s15
 8005212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005216:	ee17 3a90 	vmov	r3, s15
 800521a:	827b      	strh	r3, [r7, #18]
	  }

	  TIM4->CCR1 = currentSpeed - round(rightTilt);
 800521c:	8afb      	ldrh	r3, [r7, #22]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb f990 	bl	8000544 <__aeabi_i2d>
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	8a7b      	ldrh	r3, [r7, #18]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fb f97a 	bl	8000524 <__aeabi_ui2d>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb f836 	bl	80002a8 <__aeabi_dsub>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4c48      	ldr	r4, [pc, #288]	; (8005364 <MotorBackward+0x1fc>)
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f7fb fcbf 	bl	8000bc8 <__aeabi_d2uiz>
 800524a:	4603      	mov	r3, r0
 800524c:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM4->CCR2 = 0;
 800524e:	4b45      	ldr	r3, [pc, #276]	; (8005364 <MotorBackward+0x1fc>)
 8005250:	2200      	movs	r2, #0
 8005252:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM4->CCR3 = 0;
 8005254:	4b43      	ldr	r3, [pc, #268]	; (8005364 <MotorBackward+0x1fc>)
 8005256:	2200      	movs	r2, #0
 8005258:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4->CCR4 = currentSpeed - round(leftTilt);
 800525a:	8afb      	ldrh	r3, [r7, #22]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb f971 	bl	8000544 <__aeabi_i2d>
 8005262:	4604      	mov	r4, r0
 8005264:	460d      	mov	r5, r1
 8005266:	8abb      	ldrh	r3, [r7, #20]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb f95b 	bl	8000524 <__aeabi_ui2d>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4620      	mov	r0, r4
 8005274:	4629      	mov	r1, r5
 8005276:	f7fb f817 	bl	80002a8 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4c39      	ldr	r4, [pc, #228]	; (8005364 <MotorBackward+0x1fc>)
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	f7fb fca0 	bl	8000bc8 <__aeabi_d2uiz>
 8005288:	4603      	mov	r3, r0
 800528a:	6423      	str	r3, [r4, #64]	; 0x40

	  HAL_Delay(1);
 800528c:	2001      	movs	r0, #1
 800528e:	f003 f9ff 	bl	8008690 <HAL_Delay>

	  if (CheckSecurity() == SECURITY_BACKWARD_OUTSIDE) {
 8005292:	f7ff f85b 	bl	800434c <CheckSecurity>
 8005296:	4603      	mov	r3, r0
 8005298:	2b09      	cmp	r3, #9
 800529a:	d118      	bne.n	80052ce <MotorBackward+0x166>
		  MotorHardBrake();
 800529c:	f000 f9aa 	bl	80055f4 <MotorHardBrake>
		  HAL_Delay(1000);
 80052a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052a4:	f003 f9f4 	bl	8008690 <HAL_Delay>
		  MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <MotorBackward+0x1f0>)
 80052aa:	8a5b      	ldrh	r3, [r3, #18]
 80052ac:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <MotorBackward+0x1f0>)
 80052ae:	8a12      	ldrh	r2, [r2, #16]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fea2 	bl	8004ffc <MotorForward>
		  HAL_Delay(500);
 80052b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052bc:	f003 f9e8 	bl	8008690 <HAL_Delay>
		  MotorStop();
 80052c0:	f000 f8fe 	bl	80054c0 <MotorStop>
		  HAL_Delay(500);
 80052c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052c8:	f003 f9e2 	bl	8008690 <HAL_Delay>
		  return;
 80052cc:	e03c      	b.n	8005348 <MotorBackward+0x1e0>
	  }

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 80052ce:	f003 f9d3 	bl	8008678 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d90a      	bls.n	80052f4 <MotorBackward+0x18c>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 80052de:	8afb      	ldrh	r3, [r7, #22]
 80052e0:	3301      	adds	r3, #1
 80052e2:	82fb      	strh	r3, [r7, #22]
 80052e4:	8afa      	ldrh	r2, [r7, #22]
 80052e6:	88bb      	ldrh	r3, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	f4ff af5f 	bcc.w	80051ac <MotorBackward+0x44>
 80052ee:	e021      	b.n	8005334 <MotorBackward+0x1cc>
		  break;
 80052f0:	bf00      	nop
 80052f2:	e01f      	b.n	8005334 <MotorBackward+0x1cc>
		  break;
 80052f4:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 80052f6:	e01d      	b.n	8005334 <MotorBackward+0x1cc>
	if (CheckSecurity() == SECURITY_BACKWARD_OUTSIDE) {
 80052f8:	f7ff f828 	bl	800434c <CheckSecurity>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d118      	bne.n	8005334 <MotorBackward+0x1cc>
		MotorHardBrake();
 8005302:	f000 f977 	bl	80055f4 <MotorHardBrake>
		HAL_Delay(1000);
 8005306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800530a:	f003 f9c1 	bl	8008690 <HAL_Delay>
		MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <MotorBackward+0x1f0>)
 8005310:	8a5b      	ldrh	r3, [r3, #18]
 8005312:	4a11      	ldr	r2, [pc, #68]	; (8005358 <MotorBackward+0x1f0>)
 8005314:	8a12      	ldrh	r2, [r2, #16]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fe6f 	bl	8004ffc <MotorForward>
		HAL_Delay(500);
 800531e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005322:	f003 f9b5 	bl	8008690 <HAL_Delay>
		MotorStop();
 8005326:	f000 f8cb 	bl	80054c0 <MotorStop>
		HAL_Delay(500);
 800532a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800532e:	f003 f9af 	bl	8008690 <HAL_Delay>
		return;
 8005332:	e009      	b.n	8005348 <MotorBackward+0x1e0>
while (HAL_GetTick() - motor_timer < time_ms) {
 8005334:	f003 f9a0 	bl	8008678 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d8d9      	bhi.n	80052f8 <MotorBackward+0x190>
	}
}
	MotorStop();
 8005344:	f000 f8bc 	bl	80054c0 <MotorStop>
}
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bdb0      	pop	{r4, r5, r7, pc}
 800534e:	bf00      	nop
 8005350:	0801672c 	.word	0x0801672c
 8005354:	2000096b 	.word	0x2000096b
 8005358:	20000cc0 	.word	0x20000cc0
 800535c:	2000239c 	.word	0x2000239c
 8005360:	42480000 	.word	0x42480000
 8005364:	40000800 	.word	0x40000800

08005368 <MotorRight>:
void MotorRight(uint16_t minSpeed, uint16_t maxSpeed, uint32_t time_ms) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	603a      	str	r2, [r7, #0]
 8005372:	80fb      	strh	r3, [r7, #6]
 8005374:	460b      	mov	r3, r1
 8005376:	80bb      	strh	r3, [r7, #4]

	add_error_event("MotorRight");
 8005378:	4823      	ldr	r0, [pc, #140]	; (8005408 <MotorRight+0xa0>)
 800537a:	f002 f867 	bl	800744c <add_error_event>
	State = RIGHT;
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <MotorRight+0xa4>)
 8005380:	2204      	movs	r2, #4
 8005382:	701a      	strb	r2, [r3, #0]
	uint32_t motor_timer;
	motor_timer = HAL_GetTick();
 8005384:	f003 f978 	bl	8008678 <HAL_GetTick>
 8005388:	60b8      	str	r0, [r7, #8]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	81fb      	strh	r3, [r7, #14]
 800538e:	e022      	b.n	80053d6 <MotorRight+0x6e>

	  currentSpeed += 3;
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	3303      	adds	r3, #3
 8005394:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8005396:	89fa      	ldrh	r2, [r7, #14]
 8005398:	88bb      	ldrh	r3, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d220      	bcs.n	80053e0 <MotorRight+0x78>
		  break;
	  }
	  TIM4->CCR1 = 0;
 800539e:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <MotorRight+0xa8>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM4->CCR2 = currentSpeed;
 80053a4:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <MotorRight+0xa8>)
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	6393      	str	r3, [r2, #56]	; 0x38

	  TIM4->CCR3 = 0;
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <MotorRight+0xa8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4->CCR4 = currentSpeed;
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <MotorRight+0xa8>)
 80053b2:	89fb      	ldrh	r3, [r7, #14]
 80053b4:	6413      	str	r3, [r2, #64]	; 0x40

	  HAL_Delay(1);
 80053b6:	2001      	movs	r0, #1
 80053b8:	f003 f96a 	bl	8008690 <HAL_Delay>

	  CheckSecurity();
 80053bc:	f7fe ffc6 	bl	800434c <CheckSecurity>

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 80053c0:	f003 f95a 	bl	8008678 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d909      	bls.n	80053e4 <MotorRight+0x7c>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	3301      	adds	r3, #1
 80053d4:	81fb      	strh	r3, [r7, #14]
 80053d6:	89fa      	ldrh	r2, [r7, #14]
 80053d8:	88bb      	ldrh	r3, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3d8      	bcc.n	8005390 <MotorRight+0x28>
 80053de:	e005      	b.n	80053ec <MotorRight+0x84>
		  break;
 80053e0:	bf00      	nop
 80053e2:	e003      	b.n	80053ec <MotorRight+0x84>
		  break;
 80053e4:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 80053e6:	e001      	b.n	80053ec <MotorRight+0x84>
	CheckSecurity();
 80053e8:	f7fe ffb0 	bl	800434c <CheckSecurity>
while (HAL_GetTick() - motor_timer < time_ms) {
 80053ec:	f003 f944 	bl	8008678 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d8f5      	bhi.n	80053e8 <MotorRight+0x80>
}
	MotorStop();
 80053fc:	f000 f860 	bl	80054c0 <MotorStop>
}
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	0801673c 	.word	0x0801673c
 800540c:	2000096b 	.word	0x2000096b
 8005410:	40000800 	.word	0x40000800

08005414 <MotorLeft>:
void MotorLeft(uint16_t minSpeed, uint16_t maxSpeed, uint32_t time_ms) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	603a      	str	r2, [r7, #0]
 800541e:	80fb      	strh	r3, [r7, #6]
 8005420:	460b      	mov	r3, r1
 8005422:	80bb      	strh	r3, [r7, #4]

	add_error_event("MotorLeft");
 8005424:	4823      	ldr	r0, [pc, #140]	; (80054b4 <MotorLeft+0xa0>)
 8005426:	f002 f811 	bl	800744c <add_error_event>
	State = LEFT;
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <MotorLeft+0xa4>)
 800542c:	2203      	movs	r2, #3
 800542e:	701a      	strb	r2, [r3, #0]
	uint32_t motor_timer;
	motor_timer = HAL_GetTick();
 8005430:	f003 f922 	bl	8008678 <HAL_GetTick>
 8005434:	60b8      	str	r0, [r7, #8]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	81fb      	strh	r3, [r7, #14]
 800543a:	e022      	b.n	8005482 <MotorLeft+0x6e>

	  currentSpeed += 3;
 800543c:	89fb      	ldrh	r3, [r7, #14]
 800543e:	3303      	adds	r3, #3
 8005440:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8005442:	89fa      	ldrh	r2, [r7, #14]
 8005444:	88bb      	ldrh	r3, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d220      	bcs.n	800548c <MotorLeft+0x78>
		  break;
	  }
	  TIM4->CCR1 = currentSpeed;
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <MotorLeft+0xa8>)
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM4->CCR2 = 0;
 8005450:	4b1a      	ldr	r3, [pc, #104]	; (80054bc <MotorLeft+0xa8>)
 8005452:	2200      	movs	r2, #0
 8005454:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM4->CCR3 = currentSpeed;
 8005456:	4a19      	ldr	r2, [pc, #100]	; (80054bc <MotorLeft+0xa8>)
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  TIM4->CCR4 = 0;
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <MotorLeft+0xa8>)
 800545e:	2200      	movs	r2, #0
 8005460:	641a      	str	r2, [r3, #64]	; 0x40

	  HAL_Delay(1);
 8005462:	2001      	movs	r0, #1
 8005464:	f003 f914 	bl	8008690 <HAL_Delay>

	  CheckSecurity();
 8005468:	f7fe ff70 	bl	800434c <CheckSecurity>

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 800546c:	f003 f904 	bl	8008678 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d909      	bls.n	8005490 <MotorLeft+0x7c>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 800547c:	89fb      	ldrh	r3, [r7, #14]
 800547e:	3301      	adds	r3, #1
 8005480:	81fb      	strh	r3, [r7, #14]
 8005482:	89fa      	ldrh	r2, [r7, #14]
 8005484:	88bb      	ldrh	r3, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d3d8      	bcc.n	800543c <MotorLeft+0x28>
 800548a:	e005      	b.n	8005498 <MotorLeft+0x84>
		  break;
 800548c:	bf00      	nop
 800548e:	e003      	b.n	8005498 <MotorLeft+0x84>
		  break;
 8005490:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 8005492:	e001      	b.n	8005498 <MotorLeft+0x84>
	CheckSecurity();
 8005494:	f7fe ff5a 	bl	800434c <CheckSecurity>
while (HAL_GetTick() - motor_timer < time_ms) {
 8005498:	f003 f8ee 	bl	8008678 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d8f5      	bhi.n	8005494 <MotorLeft+0x80>
}
	MotorStop();
 80054a8:	f000 f80a 	bl	80054c0 <MotorStop>
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	08016748 	.word	0x08016748
 80054b8:	2000096b 	.word	0x2000096b
 80054bc:	40000800 	.word	0x40000800

080054c0 <MotorStop>:
void MotorStop(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0

	LastState = State;
 80054c6:	4b38      	ldr	r3, [pc, #224]	; (80055a8 <MotorStop+0xe8>)
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <MotorStop+0xec>)
 80054cc:	701a      	strb	r2, [r3, #0]
	State = STOP;
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <MotorStop+0xe8>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
	int speed = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	603b      	str	r3, [r7, #0]

	speed = (TIM4->CCR1 + TIM4->CCR2 + TIM4->CCR3 + TIM4->CCR4) / 2;
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <MotorStop+0xf0>)
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <MotorStop+0xf0>)
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	441a      	add	r2, r3
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <MotorStop+0xf0>)
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	441a      	add	r2, r3
 80054e8:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <MotorStop+0xf0>)
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	4413      	add	r3, r2
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	603b      	str	r3, [r7, #0]
	speed *= 0.90;
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	f7fb f826 	bl	8000544 <__aeabi_i2d>
 80054f8:	a329      	add	r3, pc, #164	; (adr r3, 80055a0 <MotorStop+0xe0>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f88b 	bl	8000618 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb fb35 	bl	8000b78 <__aeabi_d2iz>
 800550e:	4603      	mov	r3, r0
 8005510:	603b      	str	r3, [r7, #0]

	if (speed == 0) return;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03e      	beq.n	8005596 <MotorStop+0xd6>

	for (int x = speed; x > 1000; x--) {
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	e028      	b.n	8005570 <MotorStop+0xb0>

		x -= 4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3b04      	subs	r3, #4
 8005522:	607b      	str	r3, [r7, #4]

		if (x < 1000) break;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552a:	db26      	blt.n	800557a <MotorStop+0xba>

		if (TIM4->CCR1 != 0) TIM4->CCR1 = x;
 800552c:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <MotorStop+0xf0>)
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <MotorStop+0x7a>
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <MotorStop+0xf0>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6353      	str	r3, [r2, #52]	; 0x34
		if (TIM4->CCR2 != 0) TIM4->CCR2 = x;
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <MotorStop+0xf0>)
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <MotorStop+0x88>
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <MotorStop+0xf0>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6393      	str	r3, [r2, #56]	; 0x38
		if (TIM4->CCR3 != 0) TIM4->CCR3 = x;
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <MotorStop+0xf0>)
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <MotorStop+0x96>
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <MotorStop+0xf0>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (TIM4->CCR4 != 0) TIM4->CCR4 = x;
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <MotorStop+0xf0>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <MotorStop+0xa4>
 800555e:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <MotorStop+0xf0>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6413      	str	r3, [r2, #64]	; 0x40

		HAL_Delay(1);
 8005564:	2001      	movs	r0, #1
 8005566:	f003 f893 	bl	8008690 <HAL_Delay>
	for (int x = speed; x > 1000; x--) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3b01      	subs	r3, #1
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005576:	dcd2      	bgt.n	800551e <MotorStop+0x5e>
 8005578:	e000      	b.n	800557c <MotorStop+0xbc>
		if (x < 1000) break;
 800557a:	bf00      	nop
	}

	TIM4->CCR1 = 0;
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <MotorStop+0xf0>)
 800557e:	2200      	movs	r2, #0
 8005580:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = 0;
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <MotorStop+0xf0>)
 8005584:	2200      	movs	r2, #0
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = 0;
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <MotorStop+0xf0>)
 800558a:	2200      	movs	r2, #0
 800558c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <MotorStop+0xf0>)
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
 8005594:	e000      	b.n	8005598 <MotorStop+0xd8>
	if (speed == 0) return;
 8005596:	bf00      	nop

}
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	cccccccd 	.word	0xcccccccd
 80055a4:	3feccccc 	.word	0x3feccccc
 80055a8:	2000096b 	.word	0x2000096b
 80055ac:	2000096c 	.word	0x2000096c
 80055b0:	40000800 	.word	0x40000800

080055b4 <MotorBrake>:

void MotorBrake(void) {
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0

	LastState = State;
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <MotorBrake+0x34>)
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <MotorBrake+0x38>)
 80055be:	701a      	strb	r2, [r3, #0]
	State = BRAKE;
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <MotorBrake+0x34>)
 80055c2:	2207      	movs	r2, #7
 80055c4:	701a      	strb	r2, [r3, #0]

	// Brake - free wheeling
	TIM4->CCR1 = 0;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <MotorBrake+0x3c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = 0;
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <MotorBrake+0x3c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = 0;
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <MotorBrake+0x3c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <MotorBrake+0x3c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	2000096b 	.word	0x2000096b
 80055ec:	2000096c 	.word	0x2000096c
 80055f0:	40000800 	.word	0x40000800

080055f4 <MotorHardBrake>:
void MotorHardBrake(void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0

	LastState = State;
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <MotorHardBrake+0x40>)
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <MotorHardBrake+0x44>)
 80055fe:	701a      	strb	r2, [r3, #0]

	State = HARDBRAKE;
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <MotorHardBrake+0x40>)
 8005602:	2208      	movs	r2, #8
 8005604:	701a      	strb	r2, [r3, #0]

	// Wheels will do a hard brake when both pins go HIGH.
	TIM4->CCR1 = settings.motorMaxSpeed;
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <MotorHardBrake+0x48>)
 8005608:	8a1a      	ldrh	r2, [r3, #16]
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <MotorHardBrake+0x4c>)
 800560c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = settings.motorMaxSpeed;
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <MotorHardBrake+0x48>)
 8005610:	8a1a      	ldrh	r2, [r3, #16]
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <MotorHardBrake+0x4c>)
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = settings.motorMaxSpeed;
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <MotorHardBrake+0x48>)
 8005618:	8a1a      	ldrh	r2, [r3, #16]
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <MotorHardBrake+0x4c>)
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = settings.motorMaxSpeed;
 800561e:	4b07      	ldr	r3, [pc, #28]	; (800563c <MotorHardBrake+0x48>)
 8005620:	8a1a      	ldrh	r2, [r3, #16]
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <MotorHardBrake+0x4c>)
 8005624:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(250);
 8005626:	20fa      	movs	r0, #250	; 0xfa
 8005628:	f003 f832 	bl	8008690 <HAL_Delay>

	MotorBrake();	//Release motors
 800562c:	f7ff ffc2 	bl	80055b4 <MotorBrake>

}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000096b 	.word	0x2000096b
 8005638:	2000096c 	.word	0x2000096c
 800563c:	20000cc0 	.word	0x20000cc0
 8005640:	40000800 	.word	0x40000800

08005644 <CheckState>:
void CheckState(void) {
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	af00      	add	r7, sp, #0

	/* This is our main loop function, this is where all the states are
	 * What state is the mower in? and what to do next.
	 */
	if (Initial_Start == 0) return;
 8005648:	4bb0      	ldr	r3, [pc, #704]	; (800590c <CheckState+0x2c8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8243 	beq.w	8005ad8 <CheckState+0x494>

	if (MasterSwitch == 0) {
 8005652:	4baf      	ldr	r3, [pc, #700]	; (8005910 <CheckState+0x2cc>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <CheckState+0x20>
		cutterOFF();
 800565a:	f7ff f809 	bl	8004670 <cutterOFF>
		MotorStop();
 800565e:	f7ff ff2f 	bl	80054c0 <MotorStop>
		return;
 8005662:	e23a      	b.n	8005ada <CheckState+0x496>
	}

	if (Security == NOSIGNAL) {
 8005664:	4bab      	ldr	r3, [pc, #684]	; (8005914 <CheckState+0x2d0>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <CheckState+0x32>
		MotorStop();
 800566c:	f7ff ff28 	bl	80054c0 <MotorStop>
		cutterOFF();
 8005670:	f7fe fffe 	bl	8004670 <cutterOFF>
		return;
 8005674:	e231      	b.n	8005ada <CheckState+0x496>
	}

	if (HAL_GetTick() - OUTSIDE_timer >= (settings.Outside_Threshold * 1000) && Docked == 0) {
 8005676:	f002 ffff 	bl	8008678 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	4ba6      	ldr	r3, [pc, #664]	; (8005918 <CheckState+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	4aa6      	ldr	r2, [pc, #664]	; (800591c <CheckState+0x2d8>)
 8005684:	79d2      	ldrb	r2, [r2, #7]
 8005686:	4611      	mov	r1, r2
 8005688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800568c:	fb02 f201 	mul.w	r2, r2, r1
 8005690:	4293      	cmp	r3, r2
 8005692:	d30b      	bcc.n	80056ac <CheckState+0x68>
 8005694:	4ba2      	ldr	r3, [pc, #648]	; (8005920 <CheckState+0x2dc>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d107      	bne.n	80056ac <CheckState+0x68>
		Serial_Console("OUTSIDE timer triggered\r\n");
 800569c:	48a1      	ldr	r0, [pc, #644]	; (8005924 <CheckState+0x2e0>)
 800569e:	f7fe fe2d 	bl	80042fc <Serial_Console>
		MotorStop();
 80056a2:	f7ff ff0d 	bl	80054c0 <MotorStop>
		cutterOFF();
 80056a6:	f7fe ffe3 	bl	8004670 <cutterOFF>
		return;
 80056aa:	e216      	b.n	8005ada <CheckState+0x496>
	}
	if (Docked == 1) {
 80056ac:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <CheckState+0x2dc>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <CheckState+0x76>
		unDock();
 80056b4:	f7fd faf4 	bl	8002ca0 <unDock>
		return;
 80056b8:	e20f      	b.n	8005ada <CheckState+0x496>
		}
	if (bumber_count >= settings.bumber_count_limit) {
 80056ba:	4b98      	ldr	r3, [pc, #608]	; (800591c <CheckState+0x2d8>)
 80056bc:	7a5a      	ldrb	r2, [r3, #9]
 80056be:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <CheckState+0x2e4>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d80b      	bhi.n	80056de <CheckState+0x9a>

		add_error_event("Bumber detection HALT");
 80056c6:	4899      	ldr	r0, [pc, #612]	; (800592c <CheckState+0x2e8>)
 80056c8:	f001 fec0 	bl	800744c <add_error_event>
		MotorStop();
 80056cc:	f7ff fef8 	bl	80054c0 <MotorStop>
		MasterSwitch = 0;
 80056d0:	4b8f      	ldr	r3, [pc, #572]	; (8005910 <CheckState+0x2cc>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
		Serial_Console("Bumber detection - HALT\r\n");
 80056d6:	4896      	ldr	r0, [pc, #600]	; (8005930 <CheckState+0x2ec>)
 80056d8:	f7fe fe10 	bl	80042fc <Serial_Console>
		return;
 80056dc:	e1fd      	b.n	8005ada <CheckState+0x496>
	}

	if (CheckSecurity() == SECURITY_MOVEMENT) {
 80056de:	f7fe fe35 	bl	800434c <CheckSecurity>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d128      	bne.n	800573a <CheckState+0xf6>
		add_error_event("Movement detection HALT");
 80056e8:	4892      	ldr	r0, [pc, #584]	; (8005934 <CheckState+0x2f0>)
 80056ea:	f001 feaf 	bl	800744c <add_error_event>
		MotorStop();
 80056ee:	f7ff fee7 	bl	80054c0 <MotorStop>
		if (move_count >= settings.move_count_limit) {
 80056f2:	4b8a      	ldr	r3, [pc, #552]	; (800591c <CheckState+0x2d8>)
 80056f4:	7a1a      	ldrb	r2, [r3, #8]
 80056f6:	4b90      	ldr	r3, [pc, #576]	; (8005938 <CheckState+0x2f4>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d806      	bhi.n	800570c <CheckState+0xc8>
			MasterSwitch = 0;
 80056fe:	4b84      	ldr	r3, [pc, #528]	; (8005910 <CheckState+0x2cc>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
			Serial_Console("Movement detection - HALT\r\n");
 8005704:	488d      	ldr	r0, [pc, #564]	; (800593c <CheckState+0x2f8>)
 8005706:	f7fe fdf9 	bl	80042fc <Serial_Console>
			return;
 800570a:	e1e6      	b.n	8005ada <CheckState+0x496>
		}
		HAL_Delay(500);
 800570c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005710:	f002 ffbe 	bl	8008690 <HAL_Delay>
		MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005714:	4b81      	ldr	r3, [pc, #516]	; (800591c <CheckState+0x2d8>)
 8005716:	8a5b      	ldrh	r3, [r3, #18]
 8005718:	4a80      	ldr	r2, [pc, #512]	; (800591c <CheckState+0x2d8>)
 800571a:	8a11      	ldrh	r1, [r2, #16]
 800571c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fd21 	bl	8005168 <MotorBackward>
		MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005726:	4b7d      	ldr	r3, [pc, #500]	; (800591c <CheckState+0x2d8>)
 8005728:	8a5b      	ldrh	r3, [r3, #18]
 800572a:	4a7c      	ldr	r2, [pc, #496]	; (800591c <CheckState+0x2d8>)
 800572c:	8a11      	ldrh	r1, [r2, #16]
 800572e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fe6e 	bl	8005414 <MotorLeft>
		return;
 8005738:	e1cf      	b.n	8005ada <CheckState+0x496>
	}
	if (State == FAIL) {
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <CheckState+0x2fc>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d113      	bne.n	800576a <CheckState+0x126>
		add_error_event("State Fail, waiting");
 8005742:	4880      	ldr	r0, [pc, #512]	; (8005944 <CheckState+0x300>)
 8005744:	f001 fe82 	bl	800744c <add_error_event>
		MotorStop();
 8005748:	f7ff feba 	bl	80054c0 <MotorStop>
		cutterOFF();
 800574c:	f7fe ff90 	bl	8004670 <cutterOFF>
		while (CheckSecurity() != SECURITY_OK) {
 8005750:	e002      	b.n	8005758 <CheckState+0x114>
			Serial_Console("State Fail, waiting...\r\n");
 8005752:	487d      	ldr	r0, [pc, #500]	; (8005948 <CheckState+0x304>)
 8005754:	f7fe fdd2 	bl	80042fc <Serial_Console>
		while (CheckSecurity() != SECURITY_OK) {
 8005758:	f7fe fdf8 	bl	800434c <CheckSecurity>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d1f7      	bne.n	8005752 <CheckState+0x10e>
		}
		State = STOP;
 8005762:	4b77      	ldr	r3, [pc, #476]	; (8005940 <CheckState+0x2fc>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
		return;
 8005768:	e1b7      	b.n	8005ada <CheckState+0x496>
	}

	else if (State == FORWARD && CheckSecurity() == SECURITY_FAIL) {
 800576a:	4b75      	ldr	r3, [pc, #468]	; (8005940 <CheckState+0x2fc>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	f040 8102 	bne.w	8005978 <CheckState+0x334>
 8005774:	f7fe fdea 	bl	800434c <CheckSecurity>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 80fc 	bne.w	8005978 <CheckState+0x334>
		add_error_event("FORWARD+SECURITY_FAIL");
 8005780:	4872      	ldr	r0, [pc, #456]	; (800594c <CheckState+0x308>)
 8005782:	f001 fe63 	bl	800744c <add_error_event>
		MotorStop();
 8005786:	f7ff fe9b 	bl	80054c0 <MotorStop>
		move_count = 0;
 800578a:	4b6b      	ldr	r3, [pc, #428]	; (8005938 <CheckState+0x2f4>)
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
		bumber_count = 0;
 8005790:	4b65      	ldr	r3, [pc, #404]	; (8005928 <CheckState+0x2e4>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
		TimeToGoHome();			// Check if within working hours, if not, go home
 8005796:	f7fc f9ef 	bl	8001b78 <TimeToGoHome>
		if (perimeterTracking == 1) {
 800579a:	4b6d      	ldr	r3, [pc, #436]	; (8005950 <CheckState+0x30c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d113      	bne.n	80057ca <CheckState+0x186>
			cutterOFF();
 80057a2:	f7fe ff65 	bl	8004670 <cutterOFF>
			perimeterTrackingActive = 1;
 80057a6:	4b6b      	ldr	r3, [pc, #428]	; (8005954 <CheckState+0x310>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
			GoHome_timer_IN = HAL_GetTick();
 80057ac:	f002 ff64 	bl	8008678 <HAL_GetTick>
 80057b0:	4603      	mov	r3, r0
 80057b2:	4a69      	ldr	r2, [pc, #420]	; (8005958 <CheckState+0x314>)
 80057b4:	6013      	str	r3, [r2, #0]
			GoHome_timer_OUT = HAL_GetTick();
 80057b6:	f002 ff5f 	bl	8008678 <HAL_GetTick>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4a67      	ldr	r2, [pc, #412]	; (800595c <CheckState+0x318>)
 80057be:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 80057c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057c4:	f002 ff64 	bl	8008690 <HAL_Delay>
				MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 900);
				CheckSecurity();

			}
*/
			return;
 80057c8:	e187      	b.n	8005ada <CheckState+0x496>
		}
		HAL_Delay(500);
 80057ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ce:	f002 ff5f 	bl	8008690 <HAL_Delay>

		CheckSecurity();				// Double check status of the sensors when we are standing still
 80057d2:	f7fe fdbb 	bl	800434c <CheckSecurity>

		if (BWF1_Status == OUTSIDE && BWF2_Status == INSIDE) {
 80057d6:	4b62      	ldr	r3, [pc, #392]	; (8005960 <CheckState+0x31c>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d124      	bne.n	8005828 <CheckState+0x1e4>
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <CheckState+0x320>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d120      	bne.n	8005828 <CheckState+0x1e4>
			add_error_event("BWF1 OUT BWF2 IN");
 80057e6:	4860      	ldr	r0, [pc, #384]	; (8005968 <CheckState+0x324>)
 80057e8:	f001 fe30 	bl	800744c <add_error_event>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 80057ec:	4b4b      	ldr	r3, [pc, #300]	; (800591c <CheckState+0x2d8>)
 80057ee:	8a5b      	ldrh	r3, [r3, #18]
 80057f0:	4a4a      	ldr	r2, [pc, #296]	; (800591c <CheckState+0x2d8>)
 80057f2:	8a11      	ldrh	r1, [r2, #16]
 80057f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fcb5 	bl	8005168 <MotorBackward>
			HAL_Delay(500);
 80057fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005802:	f002 ff45 	bl	8008690 <HAL_Delay>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 900 + rnd(500) );
 8005806:	4b45      	ldr	r3, [pc, #276]	; (800591c <CheckState+0x2d8>)
 8005808:	8a5c      	ldrh	r4, [r3, #18]
 800580a:	4b44      	ldr	r3, [pc, #272]	; (800591c <CheckState+0x2d8>)
 800580c:	8a1d      	ldrh	r5, [r3, #16]
 800580e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005812:	f7fc fb93 	bl	8001f3c <rnd>
 8005816:	4603      	mov	r3, r0
 8005818:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800581c:	461a      	mov	r2, r3
 800581e:	4629      	mov	r1, r5
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff fda1 	bl	8005368 <MotorRight>
 8005826:	e06c      	b.n	8005902 <CheckState+0x2be>
		}
		else if (BWF1_Status == INSIDE && BWF2_Status == OUTSIDE) {
 8005828:	4b4d      	ldr	r3, [pc, #308]	; (8005960 <CheckState+0x31c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d124      	bne.n	800587a <CheckState+0x236>
 8005830:	4b4c      	ldr	r3, [pc, #304]	; (8005964 <CheckState+0x320>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d120      	bne.n	800587a <CheckState+0x236>
			add_error_event("BWF1 IN BWF2 OUT");
 8005838:	484c      	ldr	r0, [pc, #304]	; (800596c <CheckState+0x328>)
 800583a:	f001 fe07 	bl	800744c <add_error_event>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <CheckState+0x2d8>)
 8005840:	8a5b      	ldrh	r3, [r3, #18]
 8005842:	4a36      	ldr	r2, [pc, #216]	; (800591c <CheckState+0x2d8>)
 8005844:	8a11      	ldrh	r1, [r2, #16]
 8005846:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fc8c 	bl	8005168 <MotorBackward>
			HAL_Delay(500);
 8005850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005854:	f002 ff1c 	bl	8008690 <HAL_Delay>
			MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 900 + rnd(500) );
 8005858:	4b30      	ldr	r3, [pc, #192]	; (800591c <CheckState+0x2d8>)
 800585a:	8a5c      	ldrh	r4, [r3, #18]
 800585c:	4b2f      	ldr	r3, [pc, #188]	; (800591c <CheckState+0x2d8>)
 800585e:	8a1d      	ldrh	r5, [r3, #16]
 8005860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005864:	f7fc fb6a 	bl	8001f3c <rnd>
 8005868:	4603      	mov	r3, r0
 800586a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800586e:	461a      	mov	r2, r3
 8005870:	4629      	mov	r1, r5
 8005872:	4620      	mov	r0, r4
 8005874:	f7ff fdce 	bl	8005414 <MotorLeft>
 8005878:	e043      	b.n	8005902 <CheckState+0x2be>
		}
		else if (BWF1_Status == OUTSIDE && BWF2_Status == OUTSIDE) {
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <CheckState+0x31c>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d13f      	bne.n	8005902 <CheckState+0x2be>
 8005882:	4b38      	ldr	r3, [pc, #224]	; (8005964 <CheckState+0x320>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d13b      	bne.n	8005902 <CheckState+0x2be>
			add_error_event("BWF1 OUT BWF2 OUT");
 800588a:	4839      	ldr	r0, [pc, #228]	; (8005970 <CheckState+0x32c>)
 800588c:	f001 fdde 	bl	800744c <add_error_event>
			Serial_Console("Going Backward\r\n");
 8005890:	4838      	ldr	r0, [pc, #224]	; (8005974 <CheckState+0x330>)
 8005892:	f7fe fd33 	bl	80042fc <Serial_Console>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005896:	4b21      	ldr	r3, [pc, #132]	; (800591c <CheckState+0x2d8>)
 8005898:	8a5b      	ldrh	r3, [r3, #18]
 800589a:	4a20      	ldr	r2, [pc, #128]	; (800591c <CheckState+0x2d8>)
 800589c:	8a11      	ldrh	r1, [r2, #16]
 800589e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fc60 	bl	8005168 <MotorBackward>
			HAL_Delay(500);
 80058a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058ac:	f002 fef0 	bl	8008690 <HAL_Delay>
			if (rnd(1000) < 500 ) {
 80058b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058b4:	f7fc fb42 	bl	8001f3c <rnd>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80058be:	d210      	bcs.n	80058e2 <CheckState+0x29e>
				MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 900 + rnd(500) );
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <CheckState+0x2d8>)
 80058c2:	8a5c      	ldrh	r4, [r3, #18]
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <CheckState+0x2d8>)
 80058c6:	8a1d      	ldrh	r5, [r3, #16]
 80058c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058cc:	f7fc fb36 	bl	8001f3c <rnd>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80058d6:	461a      	mov	r2, r3
 80058d8:	4629      	mov	r1, r5
 80058da:	4620      	mov	r0, r4
 80058dc:	f7ff fd9a 	bl	8005414 <MotorLeft>
 80058e0:	e00f      	b.n	8005902 <CheckState+0x2be>
			}
			else {
				MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 900 + rnd(500) );
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <CheckState+0x2d8>)
 80058e4:	8a5c      	ldrh	r4, [r3, #18]
 80058e6:	4b0d      	ldr	r3, [pc, #52]	; (800591c <CheckState+0x2d8>)
 80058e8:	8a1d      	ldrh	r5, [r3, #16]
 80058ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058ee:	f7fc fb25 	bl	8001f3c <rnd>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80058f8:	461a      	mov	r2, r3
 80058fa:	4629      	mov	r1, r5
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff fd33 	bl	8005368 <MotorRight>
				}
		}

		HAL_Delay(500);
 8005902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005906:	f002 fec3 	bl	8008690 <HAL_Delay>
 800590a:	e0e6      	b.n	8005ada <CheckState+0x496>
 800590c:	2000092e 	.word	0x2000092e
 8005910:	20000215 	.word	0x20000215
 8005914:	20000980 	.word	0x20000980
 8005918:	20000978 	.word	0x20000978
 800591c:	20000cc0 	.word	0x20000cc0
 8005920:	2000097d 	.word	0x2000097d
 8005924:	08016754 	.word	0x08016754
 8005928:	200009b1 	.word	0x200009b1
 800592c:	08016770 	.word	0x08016770
 8005930:	08016788 	.word	0x08016788
 8005934:	080167a4 	.word	0x080167a4
 8005938:	200009b2 	.word	0x200009b2
 800593c:	080167bc 	.word	0x080167bc
 8005940:	2000096b 	.word	0x2000096b
 8005944:	080167d8 	.word	0x080167d8
 8005948:	080167ec 	.word	0x080167ec
 800594c:	08016808 	.word	0x08016808
 8005950:	2000092c 	.word	0x2000092c
 8005954:	2000092d 	.word	0x2000092d
 8005958:	200009a8 	.word	0x200009a8
 800595c:	200009ac 	.word	0x200009ac
 8005960:	20000968 	.word	0x20000968
 8005964:	20000969 	.word	0x20000969
 8005968:	08016820 	.word	0x08016820
 800596c:	08016834 	.word	0x08016834
 8005970:	08016848 	.word	0x08016848
 8005974:	0801685c 	.word	0x0801685c
	}
	else if (State == FORWARD) {
 8005978:	4b58      	ldr	r3, [pc, #352]	; (8005adc <CheckState+0x498>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10d      	bne.n	800599c <CheckState+0x358>

		if (TIM4->CCR2 == 0 && TIM4->CCR3  == 0) {
 8005980:	4b57      	ldr	r3, [pc, #348]	; (8005ae0 <CheckState+0x49c>)
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 80a8 	bne.w	8005ada <CheckState+0x496>
 800598a:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <CheckState+0x49c>)
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 80a3 	bne.w	8005ada <CheckState+0x496>
			State = STOP;
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <CheckState+0x498>)
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e09e      	b.n	8005ada <CheckState+0x496>
		}
	}
	else if (State == STOP && CheckSecurity() == SECURITY_OK) {
 800599c:	4b4f      	ldr	r3, [pc, #316]	; (8005adc <CheckState+0x498>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d128      	bne.n	80059f6 <CheckState+0x3b2>
 80059a4:	f7fe fcd2 	bl	800434c <CheckSecurity>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d123      	bne.n	80059f6 <CheckState+0x3b2>
		HAL_Delay(500);
 80059ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059b2:	f002 fe6d 	bl	8008690 <HAL_Delay>
		add_error_event("STOP+SECURITY_OK");
 80059b6:	484b      	ldr	r0, [pc, #300]	; (8005ae4 <CheckState+0x4a0>)
 80059b8:	f001 fd48 	bl	800744c <add_error_event>
		mpu.hold_heading = mpu.heading;
 80059bc:	4b4a      	ldr	r3, [pc, #296]	; (8005ae8 <CheckState+0x4a4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a49      	ldr	r2, [pc, #292]	; (8005ae8 <CheckState+0x4a4>)
 80059c2:	6113      	str	r3, [r2, #16]
		if (cutterStatus == 0 && perimeterTracking == 0) {
 80059c4:	4b49      	ldr	r3, [pc, #292]	; (8005aec <CheckState+0x4a8>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <CheckState+0x394>
 80059cc:	4b48      	ldr	r3, [pc, #288]	; (8005af0 <CheckState+0x4ac>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <CheckState+0x394>
			cutterON();
 80059d4:	f7fe fdf2 	bl	80045bc <cutterON>
		}
		Serial_Console("Going Forward\r\n");
 80059d8:	4846      	ldr	r0, [pc, #280]	; (8005af4 <CheckState+0x4b0>)
 80059da:	f7fe fc8f 	bl	80042fc <Serial_Console>
		mag_near_bwf = 0;
 80059de:	4b46      	ldr	r3, [pc, #280]	; (8005af8 <CheckState+0x4b4>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
		MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 80059e4:	4b45      	ldr	r3, [pc, #276]	; (8005afc <CheckState+0x4b8>)
 80059e6:	8a5b      	ldrh	r3, [r3, #18]
 80059e8:	4a44      	ldr	r2, [pc, #272]	; (8005afc <CheckState+0x4b8>)
 80059ea:	8a12      	ldrh	r2, [r2, #16]
 80059ec:	4611      	mov	r1, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fb04 	bl	8004ffc <MotorForward>
 80059f4:	e071      	b.n	8005ada <CheckState+0x496>

	}
	else if (State == STOP && CheckSecurity() == SECURITY_FAIL) {
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <CheckState+0x498>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d16d      	bne.n	8005ada <CheckState+0x496>
 80059fe:	f7fe fca5 	bl	800434c <CheckSecurity>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d168      	bne.n	8005ada <CheckState+0x496>
		HAL_Delay(500);
 8005a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a0c:	f002 fe40 	bl	8008690 <HAL_Delay>
		add_error_event("STOP+SECURITY_FAIL");
 8005a10:	483b      	ldr	r0, [pc, #236]	; (8005b00 <CheckState+0x4bc>)
 8005a12:	f001 fd1b 	bl	800744c <add_error_event>
		Serial_Console("STOP + Security Fail\r\n");
 8005a16:	483b      	ldr	r0, [pc, #236]	; (8005b04 <CheckState+0x4c0>)
 8005a18:	f7fe fc70 	bl	80042fc <Serial_Console>

		CheckSecurity();
 8005a1c:	f7fe fc96 	bl	800434c <CheckSecurity>

		if (BWF1_Status == INSIDE && (BWF2_Status == OUTSIDE || BWF2_Status == NOSIGNAL)) {
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <CheckState+0x4c4>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d118      	bne.n	8005a5a <CheckState+0x416>
 8005a28:	4b38      	ldr	r3, [pc, #224]	; (8005b0c <CheckState+0x4c8>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d003      	beq.n	8005a38 <CheckState+0x3f4>
 8005a30:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <CheckState+0x4c8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d110      	bne.n	8005a5a <CheckState+0x416>
			MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005a38:	4b30      	ldr	r3, [pc, #192]	; (8005afc <CheckState+0x4b8>)
 8005a3a:	8a5c      	ldrh	r4, [r3, #18]
 8005a3c:	4b2f      	ldr	r3, [pc, #188]	; (8005afc <CheckState+0x4b8>)
 8005a3e:	8a1d      	ldrh	r5, [r3, #16]
 8005a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a44:	f7fc fa7a 	bl	8001f3c <rnd>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4629      	mov	r1, r5
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fcde 	bl	8005414 <MotorLeft>
 8005a58:	e03f      	b.n	8005ada <CheckState+0x496>
		}
		else if (BWF2_Status == INSIDE && (BWF1_Status == OUTSIDE || BWF1_Status == NOSIGNAL)) {
 8005a5a:	4b2c      	ldr	r3, [pc, #176]	; (8005b0c <CheckState+0x4c8>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d118      	bne.n	8005a94 <CheckState+0x450>
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <CheckState+0x4c4>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d003      	beq.n	8005a72 <CheckState+0x42e>
 8005a6a:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <CheckState+0x4c4>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d110      	bne.n	8005a94 <CheckState+0x450>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005a72:	4b22      	ldr	r3, [pc, #136]	; (8005afc <CheckState+0x4b8>)
 8005a74:	8a5c      	ldrh	r4, [r3, #18]
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <CheckState+0x4b8>)
 8005a78:	8a1d      	ldrh	r5, [r3, #16]
 8005a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a7e:	f7fc fa5d 	bl	8001f3c <rnd>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff fc6b 	bl	8005368 <MotorRight>
 8005a92:	e022      	b.n	8005ada <CheckState+0x496>
		}
		else if (BWF1_Status == OUTSIDE && BWF2_Status == OUTSIDE) {
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <CheckState+0x4c4>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d11e      	bne.n	8005ada <CheckState+0x496>
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <CheckState+0x4c8>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11a      	bne.n	8005ada <CheckState+0x496>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005aa4:	4b15      	ldr	r3, [pc, #84]	; (8005afc <CheckState+0x4b8>)
 8005aa6:	8a5b      	ldrh	r3, [r3, #18]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <CheckState+0x4b8>)
 8005aaa:	8a11      	ldrh	r1, [r2, #16]
 8005aac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fb59 	bl	8005168 <MotorBackward>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <CheckState+0x4b8>)
 8005ab8:	8a5c      	ldrh	r4, [r3, #18]
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <CheckState+0x4b8>)
 8005abc:	8a1d      	ldrh	r5, [r3, #16]
 8005abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ac2:	f7fc fa3b 	bl	8001f3c <rnd>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005acc:	461a      	mov	r2, r3
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff fc49 	bl	8005368 <MotorRight>
 8005ad6:	e000      	b.n	8005ada <CheckState+0x496>
	if (Initial_Start == 0) return;
 8005ad8:	bf00      	nop
		}
	}

}
 8005ada:	bdb0      	pop	{r4, r5, r7, pc}
 8005adc:	2000096b 	.word	0x2000096b
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	08016870 	.word	0x08016870
 8005ae8:	2000239c 	.word	0x2000239c
 8005aec:	2000096d 	.word	0x2000096d
 8005af0:	2000092c 	.word	0x2000092c
 8005af4:	08016884 	.word	0x08016884
 8005af8:	2000099a 	.word	0x2000099a
 8005afc:	20000cc0 	.word	0x20000cc0
 8005b00:	08016894 	.word	0x08016894
 8005b04:	080168a8 	.word	0x080168a8
 8005b08:	20000968 	.word	0x20000968
 8005b0c:	20000969 	.word	0x20000969

08005b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b0ab      	sub	sp, #172	; 0xac
 8005b14:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b16:	f002 fd15 	bl	8008544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b1a:	f000 f999 	bl	8005e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b1e:	f000 fdad 	bl	800667c <MX_GPIO_Init>
  MX_DMA_Init();
 8005b22:	f000 fd65 	bl	80065f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8005b26:	f000 fa17 	bl	8005f58 <MX_ADC1_Init>
  MX_IWDG_Init();
 8005b2a:	f000 fb03 	bl	8006134 <MX_IWDG_Init>
  MX_RNG_Init();
 8005b2e:	f000 fb1b 	bl	8006168 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8005b32:	f000 fd09 	bl	8006548 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005b36:	f000 fd31 	bl	800659c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8005b3a:	f000 fb9d 	bl	8006278 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005b3e:	f000 fc1d 	bl	800637c <MX_TIM4_Init>
  MX_RTC_Init();
 8005b42:	f000 fb25 	bl	8006190 <MX_RTC_Init>
  MX_TIM2_Init();
 8005b46:	f000 fb49 	bl	80061dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8005b4a:	f000 fcaf 	bl	80064ac <MX_TIM5_Init>
  MX_I2C1_Init();
 8005b4e:	f000 fac3 	bl	80060d8 <MX_I2C1_Init>
  MX_ADC2_Init();
 8005b52:	f000 fa61 	bl	8006018 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);					// Start TIM4 on wheel motors
 8005b56:	4899      	ldr	r0, [pc, #612]	; (8005dbc <main+0x2ac>)
 8005b58:	f007 f9d0 	bl	800cefc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Start TIM3 on cutter motor
 8005b5c:	4898      	ldr	r0, [pc, #608]	; (8005dc0 <main+0x2b0>)
 8005b5e:	f007 f9cd 	bl	800cefc <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);		//M1 Motor PWM
 8005b62:	2100      	movs	r1, #0
 8005b64:	4895      	ldr	r0, [pc, #596]	; (8005dbc <main+0x2ac>)
 8005b66:	f007 fafb 	bl	800d160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);		//M1 Motor PWM
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	4893      	ldr	r0, [pc, #588]	; (8005dbc <main+0x2ac>)
 8005b6e:	f007 faf7 	bl	800d160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);		//M2 Motor PWM
 8005b72:	2108      	movs	r1, #8
 8005b74:	4891      	ldr	r0, [pc, #580]	; (8005dbc <main+0x2ac>)
 8005b76:	f007 faf3 	bl	800d160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);		//M2 Motor PWM
 8005b7a:	210c      	movs	r1, #12
 8005b7c:	488f      	ldr	r0, [pc, #572]	; (8005dbc <main+0x2ac>)
 8005b7e:	f007 faef 	bl	800d160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);		//C1 Motor PWM
 8005b82:	2100      	movs	r1, #0
 8005b84:	488e      	ldr	r0, [pc, #568]	; (8005dc0 <main+0x2b0>)
 8005b86:	f007 faeb 	bl	800d160 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);		//C1 Motor PWM
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	488c      	ldr	r0, [pc, #560]	; (8005dc0 <main+0x2b0>)
 8005b8e:	f007 fae7 	bl	800d160 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5);					//Start Timer5 for MicroSeconds delay
 8005b92:	488c      	ldr	r0, [pc, #560]	; (8005dc4 <main+0x2b4>)
 8005b94:	f007 f9b2 	bl	800cefc <HAL_TIM_Base_Start>

  TIM4->CCR1 = 0;								//M1 Motor - Make sure PWM is 0
 8005b98:	4b8b      	ldr	r3, [pc, #556]	; (8005dc8 <main+0x2b8>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;								//M1 Motor - Make sure PWM is 0
 8005b9e:	4b8a      	ldr	r3, [pc, #552]	; (8005dc8 <main+0x2b8>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 0;								//M2 Motor - Make sure PWM is 0
 8005ba4:	4b88      	ldr	r3, [pc, #544]	; (8005dc8 <main+0x2b8>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0;								//M2 Motor - Make sure PWM is 0
 8005baa:	4b87      	ldr	r3, [pc, #540]	; (8005dc8 <main+0x2b8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
  TIM3->CCR1 = 0;								//C1 Motor - Make sure PWM is 0
 8005bb0:	4b86      	ldr	r3, [pc, #536]	; (8005dcc <main+0x2bc>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;								//C1 Motor - Make sure PWM is 0
 8005bb6:	4b85      	ldr	r3, [pc, #532]	; (8005dcc <main+0x2bc>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  enable_backup_sram();
 8005bbc:	f001 fb9c 	bl	80072f8 <enable_backup_sram>

  WatchdogInit();								// STM32 Watchdog - NEVER DISABLE THIS (for safety!)
 8005bc0:	f7fc f8b2 	bl	8001d28 <WatchdogInit>
  HAL_TIM_Base_Start_IT(&htim2);				// 1 second interrupt, will update the watchdog and send info to Serial Console
 8005bc4:	4882      	ldr	r0, [pc, #520]	; (8005dd0 <main+0x2c0>)
 8005bc6:	f007 fa01 	bl	800cfcc <HAL_TIM_Base_Start_IT>

  Serial_RPi("RazorBoard booting...please wait!\r\n");
 8005bca:	4882      	ldr	r0, [pc, #520]	; (8005dd4 <main+0x2c4>)
 8005bcc:	f7fe fbaa 	bl	8004324 <Serial_RPi>
  Serial_Console("RazorBoard booting...please wait!\r\n");
 8005bd0:	4880      	ldr	r0, [pc, #512]	; (8005dd4 <main+0x2c4>)
 8005bd2:	f7fe fb93 	bl	80042fc <Serial_Console>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_BUFFER, ADC_SAMPLE_LEN);		// Start the DMA for continues scan mode
 8005bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bda:	497f      	ldr	r1, [pc, #508]	; (8005dd8 <main+0x2c8>)
 8005bdc:	487f      	ldr	r0, [pc, #508]	; (8005ddc <main+0x2cc>)
 8005bde:	f002 feff 	bl	80089e0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_REAR_BUFFER, ADC_SAMPLE_LEN);
 8005be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be6:	497e      	ldr	r1, [pc, #504]	; (8005de0 <main+0x2d0>)
 8005be8:	487e      	ldr	r0, [pc, #504]	; (8005de4 <main+0x2d4>)
 8005bea:	f002 fef9 	bl	80089e0 <HAL_ADC_Start_DMA>

  InitFIR();									// Initiate the FIR functions in hardware
 8005bee:	f7fc f8bb 	bl	8001d68 <InitFIR>

  HAL_RNG_Init(&hrng);							// Initiate the True Random Number generator
 8005bf2:	487d      	ldr	r0, [pc, #500]	; (8005de8 <main+0x2d8>)
 8005bf4:	f006 fd08 	bl	800c608 <HAL_RNG_Init>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);	// Enable interrupt for Serial Console
 8005bf8:	4b7c      	ldr	r3, [pc, #496]	; (8005dec <main+0x2dc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	4b7b      	ldr	r3, [pc, #492]	; (8005dec <main+0x2dc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0210 	orr.w	r2, r2, #16
 8005c06:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);	// Enable interrupt for the Raspberry Pi
 8005c08:	4b79      	ldr	r3, [pc, #484]	; (8005df0 <main+0x2e0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	4b78      	ldr	r3, [pc, #480]	; (8005df0 <main+0x2e0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0210 	orr.w	r2, r2, #16
 8005c16:	60da      	str	r2, [r3, #12]

  ADC_timer = HAL_GetTick();					// Initial load of the ADC timer
 8005c18:	f002 fd2e 	bl	8008678 <HAL_GetTick>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4a75      	ldr	r2, [pc, #468]	; (8005df4 <main+0x2e4>)
 8005c20:	6013      	str	r3, [r2, #0]
  IMU_timer = HAL_GetTick();					// Initial load of the IMU timer
 8005c22:	f002 fd29 	bl	8008678 <HAL_GetTick>
 8005c26:	4603      	mov	r3, r0
 8005c28:	4a73      	ldr	r2, [pc, #460]	; (8005df8 <main+0x2e8>)
 8005c2a:	6013      	str	r3, [r2, #0]
  MotorSpeedUpdateFreq_timer =  HAL_GetTick();	// Initial load of the MotorSpeedUpdateFreq
 8005c2c:	f002 fd24 	bl	8008678 <HAL_GetTick>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4a72      	ldr	r2, [pc, #456]	; (8005dfc <main+0x2ec>)
 8005c34:	6013      	str	r3, [r2, #0]

  HAL_Delay(5000);
 8005c36:	f241 3088 	movw	r0, #5000	; 0x1388
 8005c3a:	f002 fd29 	bl	8008690 <HAL_Delay>

  Init6050();									// Start the MPU-6050
 8005c3e:	f000 fe17 	bl	8006870 <Init6050>

  Boundary_Timer = HAL_GetTick();				// Initiate timer for the Boundary Wire
 8005c42:	f002 fd19 	bl	8008678 <HAL_GetTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a6d      	ldr	r2, [pc, #436]	; (8005e00 <main+0x2f0>)
 8005c4a:	6013      	str	r3, [r2, #0]

  delay_us(100);
 8005c4c:	2064      	movs	r0, #100	; 0x64
 8005c4e:	f7fd f80d 	bl	8002c6c <delay_us>

  settings = read_all_settings();
 8005c52:	4c6c      	ldr	r4, [pc, #432]	; (8005e04 <main+0x2f4>)
 8005c54:	463b      	mov	r3, r7
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fce4 	bl	8007624 <read_all_settings>
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	463b      	mov	r3, r7
 8005c60:	2258      	movs	r2, #88	; 0x58
 8005c62:	4619      	mov	r1, r3
 8005c64:	f009 fcda 	bl	800f61c <memcpy>
  if (settings.Config_Set != 42) {
 8005c68:	4b66      	ldr	r3, [pc, #408]	; (8005e04 <main+0x2f4>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6e:	d018      	beq.n	8005ca2 <main+0x192>
	  save_default_settings();
 8005c70:	f001 fec2 	bl	80079f8 <save_default_settings>
	  add_error_event("No config found");
 8005c74:	4864      	ldr	r0, [pc, #400]	; (8005e08 <main+0x2f8>)
 8005c76:	f001 fbe9 	bl	800744c <add_error_event>
	  Serial_Console("No config found - Saving factory defaults\r\n");
 8005c7a:	4864      	ldr	r0, [pc, #400]	; (8005e0c <main+0x2fc>)
 8005c7c:	f7fe fb3e 	bl	80042fc <Serial_Console>
	  Serial_Console("Masterswitch set to OFF - please configure settings and reboot\r\n");
 8005c80:	4863      	ldr	r0, [pc, #396]	; (8005e10 <main+0x300>)
 8005c82:	f7fe fb3b 	bl	80042fc <Serial_Console>
	  MasterSwitch = 0;
 8005c86:	4b63      	ldr	r3, [pc, #396]	; (8005e14 <main+0x304>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
	  settings = read_all_settings();
 8005c8c:	4c5d      	ldr	r4, [pc, #372]	; (8005e04 <main+0x2f4>)
 8005c8e:	463b      	mov	r3, r7
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fcc7 	bl	8007624 <read_all_settings>
 8005c96:	4620      	mov	r0, r4
 8005c98:	463b      	mov	r3, r7
 8005c9a:	2258      	movs	r2, #88	; 0x58
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f009 fcbd 	bl	800f61c <memcpy>
  }
  Serial_Console("Config loaded from SRAM\r\n");
 8005ca2:	485d      	ldr	r0, [pc, #372]	; (8005e18 <main+0x308>)
 8005ca4:	f7fe fb2a 	bl	80042fc <Serial_Console>

  for (uint8_t x = 0; x < 60; x++) {
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cae:	e00c      	b.n	8005cca <main+0x1ba>
  	V1_array[x] = settings.Battery_High_Limit;
 8005cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cb4:	4a53      	ldr	r2, [pc, #332]	; (8005e04 <main+0x2f4>)
 8005cb6:	69d2      	ldr	r2, [r2, #28]
 8005cb8:	4958      	ldr	r1, [pc, #352]	; (8005e1c <main+0x30c>)
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	601a      	str	r2, [r3, #0]
  for (uint8_t x = 0; x < 60; x++) {
 8005cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cce:	2b3b      	cmp	r3, #59	; 0x3b
 8005cd0:	d9ee      	bls.n	8005cb0 <main+0x1a0>
  }

  Serial_RPi("Booting done!\r\n");
 8005cd2:	4853      	ldr	r0, [pc, #332]	; (8005e20 <main+0x310>)
 8005cd4:	f7fe fb26 	bl	8004324 <Serial_RPi>
  Serial_Console("Booting done!\r\n");
 8005cd8:	4851      	ldr	r0, [pc, #324]	; (8005e20 <main+0x310>)
 8005cda:	f7fe fb0f 	bl	80042fc <Serial_Console>
  add_error_event("RazorBoard booted");
 8005cde:	4851      	ldr	r0, [pc, #324]	; (8005e24 <main+0x314>)
 8005ce0:	f001 fbb4 	bl	800744c <add_error_event>

  while (1)
    {

    	// Collect IMU data every 20 ms, non-blocking.
  	if (HAL_GetTick() - IMU_timer >= 20) {
 8005ce4:	f002 fcc8 	bl	8008678 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <main+0x2e8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b13      	cmp	r3, #19
 8005cf2:	d914      	bls.n	8005d1e <main+0x20e>
   	  MPU6050_Read_Accel();
 8005cf4:	f000 ff1c 	bl	8006b30 <MPU6050_Read_Accel>
  	  MPU6050_Read_Gyro();
 8005cf8:	f001 f85e 	bl	8006db8 <MPU6050_Read_Gyro>
  	  ProcessIMUData(settings);
 8005cfc:	4c41      	ldr	r4, [pc, #260]	; (8005e04 <main+0x2f4>)
 8005cfe:	4668      	mov	r0, sp
 8005d00:	f104 0310 	add.w	r3, r4, #16
 8005d04:	2248      	movs	r2, #72	; 0x48
 8005d06:	4619      	mov	r1, r3
 8005d08:	f009 fc88 	bl	800f61c <memcpy>
 8005d0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005d10:	f000 fdfa 	bl	8006908 <ProcessIMUData>
  	  IMU_timer = HAL_GetTick();
 8005d14:	f002 fcb0 	bl	8008678 <HAL_GetTick>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4a37      	ldr	r2, [pc, #220]	; (8005df8 <main+0x2e8>)
 8005d1c:	6013      	str	r3, [r2, #0]
  	  }


  	if (perimeterTrackingActive == 0) {
 8005d1e:	4b42      	ldr	r3, [pc, #264]	; (8005e28 <main+0x318>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d129      	bne.n	8005d7a <main+0x26a>

  		CheckSecurity();
 8005d26:	f7fe fb11 	bl	800434c <CheckSecurity>

  		CheckState();
 8005d2a:	f7ff fc8b 	bl	8005644 <CheckState>

  		if (State == FORWARD && Force_Active == 1) {
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <main+0x31c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d114      	bne.n	8005d60 <main+0x250>
 8005d36:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <main+0x320>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d110      	bne.n	8005d60 <main+0x250>
  			if (HAL_GetTick() - MotorSpeedUpdateFreq_timer >= MotorSpeedUpdateFreq) {
 8005d3e:	f002 fc9b 	bl	8008678 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <main+0x2ec>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <main+0x324>)
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d306      	bcc.n	8005d60 <main+0x250>

  			 UpdateMotorSpeed();
 8005d52:	f7ff f851 	bl	8004df8 <UpdateMotorSpeed>
  			 MotorSpeedUpdateFreq_timer =  HAL_GetTick();
 8005d56:	f002 fc8f 	bl	8008678 <HAL_GetTick>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <main+0x2ec>)
 8005d5e:	6013      	str	r3, [r2, #0]

  			}
  		}
  		CollectADC();
 8005d60:	f7fc fd62 	bl	8002828 <CollectADC>
  		if (Voltage != 0) CheckVoltage();
 8005d64:	4b34      	ldr	r3, [pc, #208]	; (8005e38 <main+0x328>)
 8005d66:	edd3 7a00 	vldr	s15, [r3]
 8005d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	d004      	beq.n	8005d7e <main+0x26e>
 8005d74:	f7fc fb54 	bl	8002420 <CheckVoltage>
 8005d78:	e001      	b.n	8005d7e <main+0x26e>
  	}
  	else {
  		perimeterTracker();
 8005d7a:	f7fd f8c9 	bl	8002f10 <perimeterTracker>
  	}

    if (SendInfoStatus == 1) SendInfo();
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <main+0x32c>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <main+0x27a>
 8005d86:	f7fc fb8b 	bl	80024a0 <SendInfo>

  	ChargerConnected();
 8005d8a:	f7fd f825 	bl	8002dd8 <ChargerConnected>

  	HAL_UART_Receive_DMA(&huart1, ConsoleBuffer, CONSOLE_BFR_SIZE);
 8005d8e:	2240      	movs	r2, #64	; 0x40
 8005d90:	492b      	ldr	r1, [pc, #172]	; (8005e40 <main+0x330>)
 8005d92:	4816      	ldr	r0, [pc, #88]	; (8005dec <main+0x2dc>)
 8005d94:	f008 f9dd 	bl	800e152 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, PIBuffer, PI_BFR_SIZE);
 8005d98:	2240      	movs	r2, #64	; 0x40
 8005d9a:	492a      	ldr	r1, [pc, #168]	; (8005e44 <main+0x334>)
 8005d9c:	4814      	ldr	r0, [pc, #80]	; (8005df0 <main+0x2e0>)
 8005d9e:	f008 f9d8 	bl	800e152 <HAL_UART_Receive_DMA>

    if (UART1_ready == 1) {
 8005da2:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <main+0x338>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <main+0x29e>
    	parseCommand_Console();
 8005daa:	f7fd fa25 	bl	80031f8 <parseCommand_Console>
    }
  	if (UART2_ready == 1) {
 8005dae:	4b27      	ldr	r3, [pc, #156]	; (8005e4c <main+0x33c>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d196      	bne.n	8005ce4 <main+0x1d4>
  		parseCommand_RPI();
 8005db6:	f7fe fa25 	bl	8004204 <parseCommand_RPI>
  	if (HAL_GetTick() - IMU_timer >= 20) {
 8005dba:	e793      	b.n	8005ce4 <main+0x1d4>
 8005dbc:	20000c78 	.word	0x20000c78
 8005dc0:	2000125c 	.word	0x2000125c
 8005dc4:	20001204 	.word	0x20001204
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	20003174 	.word	0x20003174
 8005dd4:	080168c0 	.word	0x080168c0
 8005dd8:	20001af4 	.word	0x20001af4
 8005ddc:	200016ac 	.word	0x200016ac
 8005de0:	200016f4 	.word	0x200016f4
 8005de4:	20000d18 	.word	0x20000d18
 8005de8:	20002974 	.word	0x20002974
 8005dec:	20002354 	.word	0x20002354
 8005df0:	200031bc 	.word	0x200031bc
 8005df4:	20000970 	.word	0x20000970
 8005df8:	20000974 	.word	0x20000974
 8005dfc:	20000994 	.word	0x20000994
 8005e00:	2000124c 	.word	0x2000124c
 8005e04:	20000cc0 	.word	0x20000cc0
 8005e08:	080168e4 	.word	0x080168e4
 8005e0c:	080168f4 	.word	0x080168f4
 8005e10:	08016920 	.word	0x08016920
 8005e14:	20000215 	.word	0x20000215
 8005e18:	08016964 	.word	0x08016964
 8005e1c:	20002444 	.word	0x20002444
 8005e20:	08016980 	.word	0x08016980
 8005e24:	08016990 	.word	0x08016990
 8005e28:	2000092d 	.word	0x2000092d
 8005e2c:	2000096b 	.word	0x2000096b
 8005e30:	20000990 	.word	0x20000990
 8005e34:	20000216 	.word	0x20000216
 8005e38:	20000964 	.word	0x20000964
 8005e3c:	2000097c 	.word	0x2000097c
 8005e40:	200011c4 	.word	0x200011c4
 8005e44:	20002934 	.word	0x20002934
 8005e48:	2000097e 	.word	0x2000097e
 8005e4c:	2000097f 	.word	0x2000097f

08005e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b098      	sub	sp, #96	; 0x60
 8005e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e5a:	2230      	movs	r2, #48	; 0x30
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f009 fbea 	bl	800f638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e64:	f107 031c 	add.w	r3, r7, #28
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <SystemClock_Config+0x100>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <SystemClock_Config+0x100>)
 8005e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e90:	6413      	str	r3, [r2, #64]	; 0x40
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <SystemClock_Config+0x100>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <SystemClock_Config+0x104>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <SystemClock_Config+0x104>)
 8005ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <SystemClock_Config+0x104>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8005eba:	230d      	movs	r3, #13
 8005ebc:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005eda:	23a8      	movs	r3, #168	; 0xa8
 8005edc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005ee2:	2307      	movs	r3, #7
 8005ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eea:	4618      	mov	r0, r3
 8005eec:	f005 fe38 	bl	800bb60 <HAL_RCC_OscConfig>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8005ef6:	f000 fcb5 	bl	8006864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005efa:	230f      	movs	r3, #15
 8005efc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005efe:	2302      	movs	r3, #2
 8005f00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f02:	2300      	movs	r3, #0
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005f12:	f107 031c 	add.w	r3, r7, #28
 8005f16:	2105      	movs	r1, #5
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f006 f899 	bl	800c050 <HAL_RCC_ClockConfig>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005f24:	f000 fc9e 	bl	8006864 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f30:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	f006 fa84 	bl	800c444 <HAL_RCCEx_PeriphCLKConfig>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005f42:	f000 fc8f 	bl	8006864 <Error_Handler>
  }
}
 8005f46:	bf00      	nop
 8005f48:	3760      	adds	r7, #96	; 0x60
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40007000 	.word	0x40007000

08005f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f5e:	463b      	mov	r3, r7
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	605a      	str	r2, [r3, #4]
 8005f66:	609a      	str	r2, [r3, #8]
 8005f68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f6c:	4a28      	ldr	r2, [pc, #160]	; (8006010 <MX_ADC1_Init+0xb8>)
 8005f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f78:	4b24      	ldr	r3, [pc, #144]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005f7e:	4b23      	ldr	r3, [pc, #140]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f84:	4b21      	ldr	r3, [pc, #132]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f8a:	4b20      	ldr	r3, [pc, #128]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f92:	4b1e      	ldr	r3, [pc, #120]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f98:	4b1c      	ldr	r3, [pc, #112]	; (800600c <MX_ADC1_Init+0xb4>)
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <MX_ADC1_Init+0xbc>)
 8005f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005faa:	4b18      	ldr	r3, [pc, #96]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005fb8:	4814      	ldr	r0, [pc, #80]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fba:	f002 fb8d 	bl	80086d8 <HAL_ADC_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005fc4:	f000 fc4e 	bl	8006864 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005fc8:	230d      	movs	r3, #13
 8005fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005fd0:	2306      	movs	r3, #6
 8005fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	480c      	ldr	r0, [pc, #48]	; (800600c <MX_ADC1_Init+0xb4>)
 8005fda:	f002 fe2f 	bl	8008c3c <HAL_ADC_ConfigChannel>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005fe4:	f000 fc3e 	bl	8006864 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005fe8:	230c      	movs	r3, #12
 8005fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005fec:	2302      	movs	r3, #2
 8005fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4805      	ldr	r0, [pc, #20]	; (800600c <MX_ADC1_Init+0xb4>)
 8005ff6:	f002 fe21 	bl	8008c3c <HAL_ADC_ConfigChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006000:	f000 fc30 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006004:	bf00      	nop
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	200016ac 	.word	0x200016ac
 8006010:	40012000 	.word	0x40012000
 8006014:	0f000001 	.word	0x0f000001

08006018 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800601e:	463b      	mov	r3, r7
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800602a:	4b28      	ldr	r3, [pc, #160]	; (80060cc <MX_ADC2_Init+0xb4>)
 800602c:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <MX_ADC2_Init+0xb8>)
 800602e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006030:	4b26      	ldr	r3, [pc, #152]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006036:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006038:	4b24      	ldr	r3, [pc, #144]	; (80060cc <MX_ADC2_Init+0xb4>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800603e:	4b23      	ldr	r3, [pc, #140]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006040:	2201      	movs	r2, #1
 8006042:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006046:	2201      	movs	r2, #1
 8006048:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <MX_ADC2_Init+0xb4>)
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006052:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006054:	2200      	movs	r2, #0
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <MX_ADC2_Init+0xb4>)
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <MX_ADC2_Init+0xbc>)
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800605e:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006060:	2200      	movs	r2, #0
 8006062:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006066:	2202      	movs	r2, #2
 8006068:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800606a:	4b18      	ldr	r3, [pc, #96]	; (80060cc <MX_ADC2_Init+0xb4>)
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <MX_ADC2_Init+0xb4>)
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006078:	4814      	ldr	r0, [pc, #80]	; (80060cc <MX_ADC2_Init+0xb4>)
 800607a:	f002 fb2d 	bl	80086d8 <HAL_ADC_Init>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006084:	f000 fbee 	bl	8006864 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006088:	230b      	movs	r3, #11
 800608a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800608c:	2301      	movs	r3, #1
 800608e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006090:	2306      	movs	r3, #6
 8006092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	480c      	ldr	r0, [pc, #48]	; (80060cc <MX_ADC2_Init+0xb4>)
 800609a:	f002 fdcf 	bl	8008c3c <HAL_ADC_ConfigChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80060a4:	f000 fbde 	bl	8006864 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80060a8:	230a      	movs	r3, #10
 80060aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80060ac:	2302      	movs	r3, #2
 80060ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060b0:	463b      	mov	r3, r7
 80060b2:	4619      	mov	r1, r3
 80060b4:	4805      	ldr	r0, [pc, #20]	; (80060cc <MX_ADC2_Init+0xb4>)
 80060b6:	f002 fdc1 	bl	8008c3c <HAL_ADC_ConfigChannel>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80060c0:	f000 fbd0 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000d18 	.word	0x20000d18
 80060d0:	40012100 	.word	0x40012100
 80060d4:	0f000001 	.word	0x0f000001

080060d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <MX_I2C1_Init+0x50>)
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <MX_I2C1_Init+0x54>)
 80060e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <MX_I2C1_Init+0x50>)
 80060e4:	4a12      	ldr	r2, [pc, #72]	; (8006130 <MX_I2C1_Init+0x58>)
 80060e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <MX_I2C1_Init+0x50>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <MX_I2C1_Init+0x50>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <MX_I2C1_Init+0x50>)
 80060f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <MX_I2C1_Init+0x50>)
 80060fe:	2200      	movs	r2, #0
 8006100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <MX_I2C1_Init+0x50>)
 8006104:	2200      	movs	r2, #0
 8006106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <MX_I2C1_Init+0x50>)
 800610a:	2200      	movs	r2, #0
 800610c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <MX_I2C1_Init+0x50>)
 8006110:	2200      	movs	r2, #0
 8006112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006114:	4804      	ldr	r0, [pc, #16]	; (8006128 <MX_I2C1_Init+0x50>)
 8006116:	f004 f819 	bl	800a14c <HAL_I2C_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006120:	f000 fba0 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000d60 	.word	0x20000d60
 800612c:	40005400 	.word	0x40005400
 8006130:	00061a80 	.word	0x00061a80

08006134 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <MX_IWDG_Init+0x2c>)
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <MX_IWDG_Init+0x30>)
 800613c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <MX_IWDG_Init+0x2c>)
 8006140:	2202      	movs	r2, #2
 8006142:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <MX_IWDG_Init+0x2c>)
 8006146:	f640 72ff 	movw	r2, #4095	; 0xfff
 800614a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <MX_IWDG_Init+0x2c>)
 800614e:	f005 fc60 	bl	800ba12 <HAL_IWDG_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8006158:	f000 fb84 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000db4 	.word	0x20000db4
 8006164:	40003000 	.word	0x40003000

08006168 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <MX_RNG_Init+0x20>)
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <MX_RNG_Init+0x24>)
 8006170:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <MX_RNG_Init+0x20>)
 8006174:	f006 fa48 	bl	800c608 <HAL_RNG_Init>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800617e:	f000 fb71 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20002974 	.word	0x20002974
 800618c:	50060800 	.word	0x50060800

08006190 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <MX_RTC_Init+0x44>)
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <MX_RTC_Init+0x48>)
 8006198:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <MX_RTC_Init+0x44>)
 800619c:	2200      	movs	r2, #0
 800619e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <MX_RTC_Init+0x44>)
 80061a2:	227f      	movs	r2, #127	; 0x7f
 80061a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <MX_RTC_Init+0x44>)
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <MX_RTC_Init+0x44>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <MX_RTC_Init+0x44>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <MX_RTC_Init+0x44>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80061be:	4805      	ldr	r0, [pc, #20]	; (80061d4 <MX_RTC_Init+0x44>)
 80061c0:	f006 fb1b 	bl	800c7fa <HAL_RTC_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80061ca:	f000 fb4b 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20002420 	.word	0x20002420
 80061d8:	40002800 	.word	0x40002800

080061dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	609a      	str	r2, [r3, #8]
 80061ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061f0:	463b      	mov	r3, r7
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <MX_TIM2_Init+0x98>)
 80061fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <MX_TIM2_Init+0x98>)
 8006202:	f242 720f 	movw	r2, #9999	; 0x270f
 8006206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006208:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <MX_TIM2_Init+0x98>)
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 800620e:	4b19      	ldr	r3, [pc, #100]	; (8006274 <MX_TIM2_Init+0x98>)
 8006210:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <MX_TIM2_Init+0x98>)
 8006218:	2200      	movs	r2, #0
 800621a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800621c:	4b15      	ldr	r3, [pc, #84]	; (8006274 <MX_TIM2_Init+0x98>)
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006222:	4814      	ldr	r0, [pc, #80]	; (8006274 <MX_TIM2_Init+0x98>)
 8006224:	f006 fe1b 	bl	800ce5e <HAL_TIM_Base_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800622e:	f000 fb19 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	4619      	mov	r1, r3
 800623e:	480d      	ldr	r0, [pc, #52]	; (8006274 <MX_TIM2_Init+0x98>)
 8006240:	f007 fa1c 	bl	800d67c <HAL_TIM_ConfigClockSource>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800624a:	f000 fb0b 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006256:	463b      	mov	r3, r7
 8006258:	4619      	mov	r1, r3
 800625a:	4806      	ldr	r0, [pc, #24]	; (8006274 <MX_TIM2_Init+0x98>)
 800625c:	f007 fe0a 	bl	800de74 <HAL_TIMEx_MasterConfigSynchronization>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006266:	f000 fafd 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20003174 	.word	0x20003174

08006278 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08e      	sub	sp, #56	; 0x38
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800627e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800628c:	f107 0320 	add.w	r3, r7, #32
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	609a      	str	r2, [r3, #8]
 80062a0:	60da      	str	r2, [r3, #12]
 80062a2:	611a      	str	r2, [r3, #16]
 80062a4:	615a      	str	r2, [r3, #20]
 80062a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062a8:	4b32      	ldr	r3, [pc, #200]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062aa:	4a33      	ldr	r2, [pc, #204]	; (8006378 <MX_TIM3_Init+0x100>)
 80062ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80062ae:	4b31      	ldr	r3, [pc, #196]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3360-1;
 80062ba:	4b2e      	ldr	r3, [pc, #184]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062bc:	f640 521f 	movw	r2, #3359	; 0xd1f
 80062c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062c2:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80062ce:	4829      	ldr	r0, [pc, #164]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062d0:	f006 fdc5 	bl	800ce5e <HAL_TIM_Base_Init>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80062da:	f000 fac3 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80062e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062e8:	4619      	mov	r1, r3
 80062ea:	4822      	ldr	r0, [pc, #136]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062ec:	f007 f9c6 	bl	800d67c <HAL_TIM_ConfigClockSource>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80062f6:	f000 fab5 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80062fa:	481e      	ldr	r0, [pc, #120]	; (8006374 <MX_TIM3_Init+0xfc>)
 80062fc:	f006 fed6 	bl	800d0ac <HAL_TIM_PWM_Init>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8006306:	f000 faad 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800630a:	2300      	movs	r3, #0
 800630c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006312:	f107 0320 	add.w	r3, r7, #32
 8006316:	4619      	mov	r1, r3
 8006318:	4816      	ldr	r0, [pc, #88]	; (8006374 <MX_TIM3_Init+0xfc>)
 800631a:	f007 fdab 	bl	800de74 <HAL_TIMEx_MasterConfigSynchronization>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006324:	f000 fa9e 	bl	8006864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006328:	2360      	movs	r3, #96	; 0x60
 800632a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	2200      	movs	r2, #0
 800633c:	4619      	mov	r1, r3
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <MX_TIM3_Init+0xfc>)
 8006340:	f007 f8de 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800634a:	f000 fa8b 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	2204      	movs	r2, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4807      	ldr	r0, [pc, #28]	; (8006374 <MX_TIM3_Init+0xfc>)
 8006356:	f007 f8d3 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8006360:	f000 fa80 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006364:	4803      	ldr	r0, [pc, #12]	; (8006374 <MX_TIM3_Init+0xfc>)
 8006366:	f001 fded 	bl	8007f44 <HAL_TIM_MspPostInit>

}
 800636a:	bf00      	nop
 800636c:	3738      	adds	r7, #56	; 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000125c 	.word	0x2000125c
 8006378:	40000400 	.word	0x40000400

0800637c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	; 0x38
 8006380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006390:	f107 0320 	add.w	r3, r7, #32
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
 80063a8:	615a      	str	r2, [r3, #20]
 80063aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80063ac:	4b3d      	ldr	r3, [pc, #244]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063ae:	4a3e      	ldr	r2, [pc, #248]	; (80064a8 <MX_TIM4_Init+0x12c>)
 80063b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80063b2:	4b3c      	ldr	r3, [pc, #240]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063b8:	4b3a      	ldr	r3, [pc, #232]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3360-1;
 80063be:	4b39      	ldr	r3, [pc, #228]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063c0:	f640 521f 	movw	r2, #3359	; 0xd1f
 80063c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063c6:	4b37      	ldr	r3, [pc, #220]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063cc:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80063d2:	4834      	ldr	r0, [pc, #208]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063d4:	f006 fd43 	bl	800ce5e <HAL_TIM_Base_Init>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80063de:	f000 fa41 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80063e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063ec:	4619      	mov	r1, r3
 80063ee:	482d      	ldr	r0, [pc, #180]	; (80064a4 <MX_TIM4_Init+0x128>)
 80063f0:	f007 f944 	bl	800d67c <HAL_TIM_ConfigClockSource>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80063fa:	f000 fa33 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063fe:	4829      	ldr	r0, [pc, #164]	; (80064a4 <MX_TIM4_Init+0x128>)
 8006400:	f006 fe54 	bl	800d0ac <HAL_TIM_PWM_Init>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800640a:	f000 fa2b 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006416:	f107 0320 	add.w	r3, r7, #32
 800641a:	4619      	mov	r1, r3
 800641c:	4821      	ldr	r0, [pc, #132]	; (80064a4 <MX_TIM4_Init+0x128>)
 800641e:	f007 fd29 	bl	800de74 <HAL_TIMEx_MasterConfigSynchronization>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8006428:	f000 fa1c 	bl	8006864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800642c:	2360      	movs	r3, #96	; 0x60
 800642e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	2200      	movs	r2, #0
 8006440:	4619      	mov	r1, r3
 8006442:	4818      	ldr	r0, [pc, #96]	; (80064a4 <MX_TIM4_Init+0x128>)
 8006444:	f007 f85c 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800644e:	f000 fa09 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	2204      	movs	r2, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4812      	ldr	r0, [pc, #72]	; (80064a4 <MX_TIM4_Init+0x128>)
 800645a:	f007 f851 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8006464:	f000 f9fe 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	2208      	movs	r2, #8
 800646c:	4619      	mov	r1, r3
 800646e:	480d      	ldr	r0, [pc, #52]	; (80064a4 <MX_TIM4_Init+0x128>)
 8006470:	f007 f846 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800647a:	f000 f9f3 	bl	8006864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	220c      	movs	r2, #12
 8006482:	4619      	mov	r1, r3
 8006484:	4807      	ldr	r0, [pc, #28]	; (80064a4 <MX_TIM4_Init+0x128>)
 8006486:	f007 f83b 	bl	800d500 <HAL_TIM_PWM_ConfigChannel>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8006490:	f000 f9e8 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006494:	4803      	ldr	r0, [pc, #12]	; (80064a4 <MX_TIM4_Init+0x128>)
 8006496:	f001 fd55 	bl	8007f44 <HAL_TIM_MspPostInit>

}
 800649a:	bf00      	nop
 800649c:	3738      	adds	r7, #56	; 0x38
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000c78 	.word	0x20000c78
 80064a8:	40000800 	.word	0x40000800

080064ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064c0:	463b      	mov	r3, r7
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <MX_TIM5_Init+0x94>)
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <MX_TIM5_Init+0x98>)
 80064cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80064ce:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <MX_TIM5_Init+0x94>)
 80064d0:	2253      	movs	r2, #83	; 0x53
 80064d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <MX_TIM5_Init+0x94>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80064da:	4b19      	ldr	r3, [pc, #100]	; (8006540 <MX_TIM5_Init+0x94>)
 80064dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <MX_TIM5_Init+0x94>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <MX_TIM5_Init+0x94>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80064ee:	4814      	ldr	r0, [pc, #80]	; (8006540 <MX_TIM5_Init+0x94>)
 80064f0:	f006 fcb5 	bl	800ce5e <HAL_TIM_Base_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80064fa:	f000 f9b3 	bl	8006864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006504:	f107 0308 	add.w	r3, r7, #8
 8006508:	4619      	mov	r1, r3
 800650a:	480d      	ldr	r0, [pc, #52]	; (8006540 <MX_TIM5_Init+0x94>)
 800650c:	f007 f8b6 	bl	800d67c <HAL_TIM_ConfigClockSource>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8006516:	f000 f9a5 	bl	8006864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800651a:	2300      	movs	r3, #0
 800651c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006522:	463b      	mov	r3, r7
 8006524:	4619      	mov	r1, r3
 8006526:	4806      	ldr	r0, [pc, #24]	; (8006540 <MX_TIM5_Init+0x94>)
 8006528:	f007 fca4 	bl	800de74 <HAL_TIMEx_MasterConfigSynchronization>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8006532:	f000 f997 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006536:	bf00      	nop
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20001204 	.word	0x20001204
 8006544:	40000c00 	.word	0x40000c00

08006548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800654c:	4b11      	ldr	r3, [pc, #68]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <MX_USART1_UART_Init+0x50>)
 8006550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 8006554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800655a:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 800655c:	2200      	movs	r2, #0
 800655e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 8006562:	2200      	movs	r2, #0
 8006564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 8006568:	2200      	movs	r2, #0
 800656a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 800656e:	220c      	movs	r2, #12
 8006570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 8006574:	2200      	movs	r2, #0
 8006576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 800657a:	2200      	movs	r2, #0
 800657c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800657e:	4805      	ldr	r0, [pc, #20]	; (8006594 <MX_USART1_UART_Init+0x4c>)
 8006580:	f007 fd08 	bl	800df94 <HAL_UART_Init>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800658a:	f000 f96b 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20002354 	.word	0x20002354
 8006598:	40011000 	.word	0x40011000

0800659c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065a2:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <MX_USART2_UART_Init+0x4c>)
 80065a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065a8:	4a10      	ldr	r2, [pc, #64]	; (80065ec <MX_USART2_UART_Init+0x50>)
 80065aa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065c0:	220c      	movs	r2, #12
 80065c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80065d0:	4804      	ldr	r0, [pc, #16]	; (80065e4 <MX_USART2_UART_Init+0x48>)
 80065d2:	f007 fcdf 	bl	800df94 <HAL_UART_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80065dc:	f000 f942 	bl	8006864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200031bc 	.word	0x200031bc
 80065e8:	40004400 	.word	0x40004400
 80065ec:	000f4240 	.word	0x000f4240

080065f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <MX_DMA_Init+0x88>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <MX_DMA_Init+0x88>)
 8006600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006604:	6313      	str	r3, [r2, #48]	; 0x30
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <MX_DMA_Init+0x88>)
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006612:	2300      	movs	r3, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4b18      	ldr	r3, [pc, #96]	; (8006678 <MX_DMA_Init+0x88>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <MX_DMA_Init+0x88>)
 800661c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006620:	6313      	str	r3, [r2, #48]	; 0x30
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <MX_DMA_Init+0x88>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800662e:	2200      	movs	r2, #0
 8006630:	2100      	movs	r1, #0
 8006632:	2010      	movs	r0, #16
 8006634:	f002 fe87 	bl	8009346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006638:	2010      	movs	r0, #16
 800663a:	f002 fea0 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	2100      	movs	r1, #0
 8006642:	2038      	movs	r0, #56	; 0x38
 8006644:	f002 fe7f 	bl	8009346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006648:	2038      	movs	r0, #56	; 0x38
 800664a:	f002 fe98 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800664e:	2200      	movs	r2, #0
 8006650:	2100      	movs	r1, #0
 8006652:	203a      	movs	r0, #58	; 0x3a
 8006654:	f002 fe77 	bl	8009346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006658:	203a      	movs	r0, #58	; 0x3a
 800665a:	f002 fe90 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	203b      	movs	r0, #59	; 0x3b
 8006664:	f002 fe6f 	bl	8009346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006668:	203b      	movs	r0, #59	; 0x3b
 800666a:	f002 fe88 	bl	800937e <HAL_NVIC_EnableIRQ>

}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40023800 	.word	0x40023800

0800667c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006682:	f107 0314 	add.w	r3, r7, #20
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	609a      	str	r2, [r3, #8]
 800668e:	60da      	str	r2, [r3, #12]
 8006690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	4b3e      	ldr	r3, [pc, #248]	; (8006790 <MX_GPIO_Init+0x114>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a3d      	ldr	r2, [pc, #244]	; (8006790 <MX_GPIO_Init+0x114>)
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b3b      	ldr	r3, [pc, #236]	; (8006790 <MX_GPIO_Init+0x114>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	4b37      	ldr	r3, [pc, #220]	; (8006790 <MX_GPIO_Init+0x114>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a36      	ldr	r2, [pc, #216]	; (8006790 <MX_GPIO_Init+0x114>)
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	6313      	str	r3, [r2, #48]	; 0x30
 80066be:	4b34      	ldr	r3, [pc, #208]	; (8006790 <MX_GPIO_Init+0x114>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	4b30      	ldr	r3, [pc, #192]	; (8006790 <MX_GPIO_Init+0x114>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4a2f      	ldr	r2, [pc, #188]	; (8006790 <MX_GPIO_Init+0x114>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30
 80066da:	4b2d      	ldr	r3, [pc, #180]	; (8006790 <MX_GPIO_Init+0x114>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	4b29      	ldr	r3, [pc, #164]	; (8006790 <MX_GPIO_Init+0x114>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	4a28      	ldr	r2, [pc, #160]	; (8006790 <MX_GPIO_Init+0x114>)
 80066f0:	f043 0308 	orr.w	r3, r3, #8
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4b26      	ldr	r3, [pc, #152]	; (8006790 <MX_GPIO_Init+0x114>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4b22      	ldr	r3, [pc, #136]	; (8006790 <MX_GPIO_Init+0x114>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	4a21      	ldr	r2, [pc, #132]	; (8006790 <MX_GPIO_Init+0x114>)
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	6313      	str	r3, [r2, #48]	; 0x30
 8006712:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <MX_GPIO_Init+0x114>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006724:	481b      	ldr	r0, [pc, #108]	; (8006794 <MX_GPIO_Init+0x118>)
 8006726:	f003 fcf7 	bl	800a118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800672a:	2200      	movs	r2, #0
 800672c:	2101      	movs	r1, #1
 800672e:	481a      	ldr	r0, [pc, #104]	; (8006798 <MX_GPIO_Init+0x11c>)
 8006730:	f003 fcf2 	bl	800a118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800673e:	2302      	movs	r3, #2
 8006740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006742:	f107 0314 	add.w	r3, r7, #20
 8006746:	4619      	mov	r1, r3
 8006748:	4814      	ldr	r0, [pc, #80]	; (800679c <MX_GPIO_Init+0x120>)
 800674a:	f003 fa35 	bl	8009bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800674e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006754:	2301      	movs	r3, #1
 8006756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800675c:	2300      	movs	r3, #0
 800675e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4619      	mov	r1, r3
 8006766:	480b      	ldr	r0, [pc, #44]	; (8006794 <MX_GPIO_Init+0x118>)
 8006768:	f003 fa26 	bl	8009bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006770:	2301      	movs	r3, #1
 8006772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006778:	2300      	movs	r3, #0
 800677a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	4619      	mov	r1, r3
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_GPIO_Init+0x11c>)
 8006784:	f003 fa18 	bl	8009bb8 <HAL_GPIO_Init>

}
 8006788:	bf00      	nop
 800678a:	3728      	adds	r7, #40	; 0x28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40023800 	.word	0x40023800
 8006794:	40020800 	.word	0x40020800
 8006798:	40020c00 	.word	0x40020c00
 800679c:	40020000 	.word	0x40020000

080067a0 <HAL_TIM_PeriodElapsedCallback>:
    	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

	WatchdogRefresh();		// STM32 Watchdog - NEVER DISABLE THIS (for safety!)
 80067a8:	f7fb fad4 	bl	8001d54 <WatchdogRefresh>
	SendInfoStatus = 1;		// Ready to send Serial Console info
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]

}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000097c 	.word	0x2000097c

080067c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;


	if (huart == &huart1) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <HAL_UART_RxCpltCallback+0x80>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d117      	bne.n	8006814 <HAL_UART_RxCpltCallback+0x40>

		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {					// Check if it is an "Idle Interrupt"
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d110      	bne.n	8006814 <HAL_UART_RxCpltCallback+0x40>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);								// clear the interrupt
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <HAL_UART_RxCpltCallback+0x80>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	4b15      	ldr	r3, [pc, #84]	; (8006854 <HAL_UART_RxCpltCallback+0x80>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart1);
 8006808:	4812      	ldr	r0, [pc, #72]	; (8006854 <HAL_UART_RxCpltCallback+0x80>)
 800680a:	f007 fcd2 	bl	800e1b2 <HAL_UART_DMAStop>
			UART1_ready = 1;												// Serial Console data is now ready to be processed
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_UART_RxCpltCallback+0x84>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]

		}
	}
	if (huart == &huart2) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a11      	ldr	r2, [pc, #68]	; (800685c <HAL_UART_RxCpltCallback+0x88>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d117      	bne.n	800684c <HAL_UART_RxCpltCallback+0x78>

		if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {					// Check if it is an "Idle Interrupt"
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b10      	cmp	r3, #16
 8006828:	d110      	bne.n	800684c <HAL_UART_RxCpltCallback+0x78>
			__HAL_UART_CLEAR_IDLEFLAG(&huart2);								// clear the interrupt
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_UART_RxCpltCallback+0x88>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_UART_RxCpltCallback+0x88>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	68bb      	ldr	r3, [r7, #8]
			HAL_UART_DMAStop(&huart2);
 8006840:	4806      	ldr	r0, [pc, #24]	; (800685c <HAL_UART_RxCpltCallback+0x88>)
 8006842:	f007 fcb6 	bl	800e1b2 <HAL_UART_DMAStop>
			UART2_ready = 1;												// // Raspberry Pi data is now ready to be processed
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_UART_RxCpltCallback+0x8c>)
 8006848:	2201      	movs	r2, #1
 800684a:	701a      	strb	r2, [r3, #0]

		}
	}


}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20002354 	.word	0x20002354
 8006858:	2000097e 	.word	0x2000097e
 800685c:	200031bc 	.word	0x200031bc
 8006860:	2000097f 	.word	0x2000097f

08006864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006868:	b672      	cpsid	i
}
 800686a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800686c:	e7fe      	b.n	800686c <Error_Handler+0x8>
	...

08006870 <Init6050>:
uint8_t roll_limit_idx = 0;
float a,b;
float move_array[20] = {1.0};
uint8_t move_index = 0;

void Init6050() {
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 50);
 8006876:	2332      	movs	r3, #50	; 0x32
 8006878:	9302      	str	r3, [sp, #8]
 800687a:	2301      	movs	r3, #1
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	1dfb      	adds	r3, r7, #7
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	2301      	movs	r3, #1
 8006884:	2275      	movs	r2, #117	; 0x75
 8006886:	21d0      	movs	r1, #208	; 0xd0
 8006888:	481e      	ldr	r0, [pc, #120]	; (8006904 <Init6050+0x94>)
 800688a:	f004 f9f1 	bl	800ac70 <HAL_I2C_Mem_Read>
	HAL_Delay(20);
 800688e:	2014      	movs	r0, #20
 8006890:	f001 fefe 	bl	8008690 <HAL_Delay>

	Data = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 50);
 8006898:	2332      	movs	r3, #50	; 0x32
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	2301      	movs	r3, #1
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2301      	movs	r3, #1
 80068a6:	226b      	movs	r2, #107	; 0x6b
 80068a8:	21d0      	movs	r1, #208	; 0xd0
 80068aa:	4816      	ldr	r0, [pc, #88]	; (8006904 <Init6050+0x94>)
 80068ac:	f004 f8e6 	bl	800aa7c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80068b0:	2014      	movs	r0, #20
 80068b2:	f001 feed 	bl	8008690 <HAL_Delay>

	Data = 0x07;
 80068b6:	2307      	movs	r3, #7
 80068b8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 50);
 80068ba:	2332      	movs	r3, #50	; 0x32
 80068bc:	9302      	str	r3, [sp, #8]
 80068be:	2301      	movs	r3, #1
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	1dbb      	adds	r3, r7, #6
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	2301      	movs	r3, #1
 80068c8:	2219      	movs	r2, #25
 80068ca:	21d0      	movs	r1, #208	; 0xd0
 80068cc:	480d      	ldr	r0, [pc, #52]	; (8006904 <Init6050+0x94>)
 80068ce:	f004 f8d5 	bl	800aa7c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80068d2:	2014      	movs	r0, #20
 80068d4:	f001 fedc 	bl	8008690 <HAL_Delay>

	Data = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 50);
 80068dc:	2332      	movs	r3, #50	; 0x32
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	1dbb      	adds	r3, r7, #6
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2301      	movs	r3, #1
 80068ea:	221b      	movs	r2, #27
 80068ec:	21d0      	movs	r1, #208	; 0xd0
 80068ee:	4805      	ldr	r0, [pc, #20]	; (8006904 <Init6050+0x94>)
 80068f0:	f004 f8c4 	bl	800aa7c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80068f4:	2014      	movs	r0, #20
 80068f6:	f001 fecb 	bl	8008690 <HAL_Delay>

}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000d60 	.word	0x20000d60

08006908 <ProcessIMUData>:

void ProcessIMUData(sram_settings settings) {
 8006908:	b084      	sub	sp, #16
 800690a:	b590      	push	{r4, r7, lr}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	pitch_limit[pitch_limit_idx] = raw_pitch;
 8006918:	4b77      	ldr	r3, [pc, #476]	; (8006af8 <ProcessIMUData+0x1f0>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	4b77      	ldr	r3, [pc, #476]	; (8006afc <ProcessIMUData+0x1f4>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4977      	ldr	r1, [pc, #476]	; (8006b00 <ProcessIMUData+0x1f8>)
 8006924:	0083      	lsls	r3, r0, #2
 8006926:	440b      	add	r3, r1
 8006928:	601a      	str	r2, [r3, #0]
	roll_limit[roll_limit_idx] = raw_roll;
 800692a:	4b76      	ldr	r3, [pc, #472]	; (8006b04 <ProcessIMUData+0x1fc>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	4b75      	ldr	r3, [pc, #468]	; (8006b08 <ProcessIMUData+0x200>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4975      	ldr	r1, [pc, #468]	; (8006b0c <ProcessIMUData+0x204>)
 8006936:	0083      	lsls	r3, r0, #2
 8006938:	440b      	add	r3, r1
 800693a:	601a      	str	r2, [r3, #0]

	pitch_limit_idx++;
 800693c:	4b6e      	ldr	r3, [pc, #440]	; (8006af8 <ProcessIMUData+0x1f0>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <ProcessIMUData+0x1f0>)
 8006946:	701a      	strb	r2, [r3, #0]
	roll_limit_idx++;
 8006948:	4b6e      	ldr	r3, [pc, #440]	; (8006b04 <ProcessIMUData+0x1fc>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b6c      	ldr	r3, [pc, #432]	; (8006b04 <ProcessIMUData+0x1fc>)
 8006952:	701a      	strb	r2, [r3, #0]

	if (pitch_limit_idx == 20) pitch_limit_idx = 0;
 8006954:	4b68      	ldr	r3, [pc, #416]	; (8006af8 <ProcessIMUData+0x1f0>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b14      	cmp	r3, #20
 800695a:	d102      	bne.n	8006962 <ProcessIMUData+0x5a>
 800695c:	4b66      	ldr	r3, [pc, #408]	; (8006af8 <ProcessIMUData+0x1f0>)
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
	if (roll_limit_idx == 20) roll_limit_idx = 0;
 8006962:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <ProcessIMUData+0x1fc>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b14      	cmp	r3, #20
 8006968:	d102      	bne.n	8006970 <ProcessIMUData+0x68>
 800696a:	4b66      	ldr	r3, [pc, #408]	; (8006b04 <ProcessIMUData+0x1fc>)
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]

	int p = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
	int r = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]

	for (int x = 0; x < 20; x++) {
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e026      	b.n	80069cc <ProcessIMUData+0xc4>

		p += pitch_limit[x];
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006988:	4a5d      	ldr	r2, [pc, #372]	; (8006b00 <ProcessIMUData+0x1f8>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	edd3 7a00 	vldr	s15, [r3]
 8006994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800699c:	ee17 3a90 	vmov	r3, s15
 80069a0:	617b      	str	r3, [r7, #20]
		r += roll_limit[x];
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069ac:	4a57      	ldr	r2, [pc, #348]	; (8006b0c <ProcessIMUData+0x204>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	edd3 7a00 	vldr	s15, [r3]
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c0:	ee17 3a90 	vmov	r3, s15
 80069c4:	613b      	str	r3, [r7, #16]
	for (int x = 0; x < 20; x++) {
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b13      	cmp	r3, #19
 80069d0:	ddd5      	ble.n	800697e <ProcessIMUData+0x76>

	}

	move_array[move_index] = sqrtf(a + b);
 80069d2:	4b4f      	ldr	r3, [pc, #316]	; (8006b10 <ProcessIMUData+0x208>)
 80069d4:	ed93 7a00 	vldr	s14, [r3]
 80069d8:	4b4e      	ldr	r3, [pc, #312]	; (8006b14 <ProcessIMUData+0x20c>)
 80069da:	edd3 7a00 	vldr	s15, [r3]
 80069de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e2:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <ProcessIMUData+0x210>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	461c      	mov	r4, r3
 80069e8:	eeb0 0a67 	vmov.f32	s0, s15
 80069ec:	f00d fece 	bl	801478c <sqrtf>
 80069f0:	eef0 7a40 	vmov.f32	s15, s0
 80069f4:	4a49      	ldr	r2, [pc, #292]	; (8006b1c <ProcessIMUData+0x214>)
 80069f6:	00a3      	lsls	r3, r4, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	edc3 7a00 	vstr	s15, [r3]
	move_index++;
 80069fe:	4b46      	ldr	r3, [pc, #280]	; (8006b18 <ProcessIMUData+0x210>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4b44      	ldr	r3, [pc, #272]	; (8006b18 <ProcessIMUData+0x210>)
 8006a08:	701a      	strb	r2, [r3, #0]
	if (move_index == 20) move_index = 0;
 8006a0a:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <ProcessIMUData+0x210>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b14      	cmp	r3, #20
 8006a10:	d102      	bne.n	8006a18 <ProcessIMUData+0x110>
 8006a12:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <ProcessIMUData+0x210>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
	float sum = 0;
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
	for (int x = 0; x < 20; x++) {
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00e      	b.n	8006a42 <ProcessIMUData+0x13a>
		sum += move_array[x];
 8006a24:	4a3d      	ldr	r2, [pc, #244]	; (8006b1c <ProcessIMUData+0x214>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	edd3 7a00 	vldr	s15, [r3]
 8006a30:	ed97 7a02 	vldr	s14, [r7, #8]
 8006a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a38:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int x = 0; x < 20; x++) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b13      	cmp	r3, #19
 8006a46:	dded      	ble.n	8006a24 <ProcessIMUData+0x11c>
	}
	mpu.movement = sum / 20;
 8006a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8006a4c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a54:	4b32      	ldr	r3, [pc, #200]	; (8006b20 <ProcessIMUData+0x218>)
 8006a56:	edc3 7a08 	vstr	s15, [r3, #32]

	mpu.roll = (r / 20) + settings.roll_comp;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	4a31      	ldr	r2, [pc, #196]	; (8006b24 <ProcessIMUData+0x21c>)
 8006a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8006a62:	10d2      	asrs	r2, r2, #3
 8006a64:	17db      	asrs	r3, r3, #31
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a70:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a78:	4b29      	ldr	r3, [pc, #164]	; (8006b20 <ProcessIMUData+0x218>)
 8006a7a:	edc3 7a02 	vstr	s15, [r3, #8]
	mpu.pitch = (p / 20) + settings.pitch_comp;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	4a28      	ldr	r2, [pc, #160]	; (8006b24 <ProcessIMUData+0x21c>)
 8006a82:	fb82 1203 	smull	r1, r2, r2, r3
 8006a86:	10d2      	asrs	r2, r2, #3
 8006a88:	17db      	asrs	r3, r3, #31
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a94:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a9c:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <ProcessIMUData+0x218>)
 8006a9e:	edc3 7a03 	vstr	s15, [r3, #12]

	if (mpu.yaw > 359.9) mpu.yaw = 0;
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	; (8006b20 <ProcessIMUData+0x218>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 fd5e 	bl	8000568 <__aeabi_f2d>
 8006aac:	a310      	add	r3, pc, #64	; (adr r3, 8006af0 <ProcessIMUData+0x1e8>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7fa f841 	bl	8000b38 <__aeabi_dcmpgt>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <ProcessIMUData+0x1bc>
 8006abc:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <ProcessIMUData+0x218>)
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	605a      	str	r2, [r3, #4]
	if (mpu.yaw < 0) mpu.yaw = 359.9;
 8006ac4:	4b16      	ldr	r3, [pc, #88]	; (8006b20 <ProcessIMUData+0x218>)
 8006ac6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad2:	d502      	bpl.n	8006ada <ProcessIMUData+0x1d2>
 8006ad4:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <ProcessIMUData+0x218>)
 8006ad6:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <ProcessIMUData+0x220>)
 8006ad8:	605a      	str	r2, [r3, #4]

	mpu.heading = mpu.yaw;
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <ProcessIMUData+0x218>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <ProcessIMUData+0x218>)
 8006ae0:	6013      	str	r3, [r2, #0]

}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006aec:	b004      	add	sp, #16
 8006aee:	4770      	bx	lr
 8006af0:	66666666 	.word	0x66666666
 8006af4:	40767e66 	.word	0x40767e66
 8006af8:	20000a58 	.word	0x20000a58
 8006afc:	20000c74 	.word	0x20000c74
 8006b00:	200009b8 	.word	0x200009b8
 8006b04:	20000a59 	.word	0x20000a59
 8006b08:	20003264 	.word	0x20003264
 8006b0c:	20000a08 	.word	0x20000a08
 8006b10:	2000326c 	.word	0x2000326c
 8006b14:	20003268 	.word	0x20003268
 8006b18:	20000a5a 	.word	0x20000a5a
 8006b1c:	20000218 	.word	0x20000218
 8006b20:	2000239c 	.word	0x2000239c
 8006b24:	66666667 	.word	0x66666667
 8006b28:	43b3f333 	.word	0x43b3f333
 8006b2c:	00000000 	.word	0x00000000

08006b30 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8006b30:	b5b0      	push	{r4, r5, r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];
	int16_t Accel_X_RAW = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	82fb      	strh	r3, [r7, #22]
	int16_t Accel_Y_RAW = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	82bb      	strh	r3, [r7, #20]
	int16_t Accel_Z_RAW = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	827b      	strh	r3, [r7, #18]

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if (HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 50) != HAL_OK) {
 8006b42:	2332      	movs	r3, #50	; 0x32
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	2306      	movs	r3, #6
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2301      	movs	r3, #1
 8006b50:	223b      	movs	r2, #59	; 0x3b
 8006b52:	21d0      	movs	r1, #208	; 0xd0
 8006b54:	488e      	ldr	r0, [pc, #568]	; (8006d90 <MPU6050_Read_Accel+0x260>)
 8006b56:	f004 f88b 	bl	800ac70 <HAL_I2C_Mem_Read>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <MPU6050_Read_Accel+0x36>
		reInitIMU();		// if the MPU-6050 does not respond within 50ms, re-init
 8006b60:	f7fa fe5e 	bl	8001820 <reInitIMU>
 8006b64:	e109      	b.n	8006d7a <MPU6050_Read_Accel+0x24a>
		return;
	}

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8006b66:	783b      	ldrb	r3, [r7, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	b21a      	sxth	r2, r3
 8006b6c:	787b      	ldrb	r3, [r7, #1]
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	4313      	orrs	r3, r2
 8006b72:	82fb      	strh	r3, [r7, #22]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8006b74:	78bb      	ldrb	r3, [r7, #2]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	b21b      	sxth	r3, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	82bb      	strh	r3, [r7, #20]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8006b82:	793b      	ldrb	r3, [r7, #4]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b21a      	sxth	r2, r3
 8006b88:	797b      	ldrb	r3, [r7, #5]
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	827b      	strh	r3, [r7, #18]

	Ax = Accel_X_RAW/16384.0;
 8006b90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fcd5 	bl	8000544 <__aeabi_i2d>
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	4b7d      	ldr	r3, [pc, #500]	; (8006d94 <MPU6050_Read_Accel+0x264>)
 8006ba0:	f7f9 fe64 	bl	800086c <__aeabi_ddiv>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f7fa f82c 	bl	8000c08 <__aeabi_d2f>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	4a79      	ldr	r2, [pc, #484]	; (8006d98 <MPU6050_Read_Accel+0x268>)
 8006bb4:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8006bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7f9 fcc2 	bl	8000544 <__aeabi_i2d>
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	4b73      	ldr	r3, [pc, #460]	; (8006d94 <MPU6050_Read_Accel+0x264>)
 8006bc6:	f7f9 fe51 	bl	800086c <__aeabi_ddiv>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	f7fa f819 	bl	8000c08 <__aeabi_d2f>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4a70      	ldr	r2, [pc, #448]	; (8006d9c <MPU6050_Read_Accel+0x26c>)
 8006bda:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8006bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7f9 fcaf 	bl	8000544 <__aeabi_i2d>
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	4b6a      	ldr	r3, [pc, #424]	; (8006d94 <MPU6050_Read_Accel+0x264>)
 8006bec:	f7f9 fe3e 	bl	800086c <__aeabi_ddiv>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	f7fa f806 	bl	8000c08 <__aeabi_d2f>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4a68      	ldr	r2, [pc, #416]	; (8006da0 <MPU6050_Read_Accel+0x270>)
 8006c00:	6013      	str	r3, [r2, #0]

	b = (fabs(Ax) + fabs(Ay) + fabs(Az))* 0.02;
 8006c02:	4b65      	ldr	r3, [pc, #404]	; (8006d98 <MPU6050_Read_Accel+0x268>)
 8006c04:	edd3 7a00 	vldr	s15, [r3]
 8006c08:	eef0 7ae7 	vabs.f32	s15, s15
 8006c0c:	ee17 0a90 	vmov	r0, s15
 8006c10:	f7f9 fcaa 	bl	8000568 <__aeabi_f2d>
 8006c14:	4604      	mov	r4, r0
 8006c16:	460d      	mov	r5, r1
 8006c18:	4b60      	ldr	r3, [pc, #384]	; (8006d9c <MPU6050_Read_Accel+0x26c>)
 8006c1a:	edd3 7a00 	vldr	s15, [r3]
 8006c1e:	eef0 7ae7 	vabs.f32	s15, s15
 8006c22:	ee17 0a90 	vmov	r0, s15
 8006c26:	f7f9 fc9f 	bl	8000568 <__aeabi_f2d>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 fb3b 	bl	80002ac <__adddf3>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	4b58      	ldr	r3, [pc, #352]	; (8006da0 <MPU6050_Read_Accel+0x270>)
 8006c40:	edd3 7a00 	vldr	s15, [r3]
 8006c44:	eef0 7ae7 	vabs.f32	s15, s15
 8006c48:	ee17 0a90 	vmov	r0, s15
 8006c4c:	f7f9 fc8c 	bl	8000568 <__aeabi_f2d>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 fb28 	bl	80002ac <__adddf3>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	a346      	add	r3, pc, #280	; (adr r3, 8006d80 <MPU6050_Read_Accel+0x250>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fcd5 	bl	8000618 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	f7f9 ffc7 	bl	8000c08 <__aeabi_d2f>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4a49      	ldr	r2, [pc, #292]	; (8006da4 <MPU6050_Read_Accel+0x274>)
 8006c7e:	6013      	str	r3, [r2, #0]

	float r, p;
	p = atan2(Ax , Ay) * 57.3;										// Ay, Az
 8006c80:	4b45      	ldr	r3, [pc, #276]	; (8006d98 <MPU6050_Read_Accel+0x268>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7f9 fc6f 	bl	8000568 <__aeabi_f2d>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <MPU6050_Read_Accel+0x26c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7f9 fc68 	bl	8000568 <__aeabi_f2d>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	ec43 2b11 	vmov	d1, r2, r3
 8006ca0:	ec45 4b10 	vmov	d0, r4, r5
 8006ca4:	f00d fd70 	bl	8014788 <atan2>
 8006ca8:	ec51 0b10 	vmov	r0, r1, d0
 8006cac:	a336      	add	r3, pc, #216	; (adr r3, 8006d88 <MPU6050_Read_Accel+0x258>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 fcb1 	bl	8000618 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f7f9 ffa3 	bl	8000c08 <__aeabi_d2f>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	60fb      	str	r3, [r7, #12]
	r = atan2((- Az) , sqrtf(Ay * Ay + Ax * Ax)) * 57.3;			// Ax, Ay, Az, Az
 8006cc6:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <MPU6050_Read_Accel+0x270>)
 8006cc8:	edd3 7a00 	vldr	s15, [r3]
 8006ccc:	eef1 7a67 	vneg.f32	s15, s15
 8006cd0:	ee17 3a90 	vmov	r3, s15
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7f9 fc47 	bl	8000568 <__aeabi_f2d>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	460d      	mov	r5, r1
 8006cde:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <MPU6050_Read_Accel+0x26c>)
 8006ce0:	ed93 7a00 	vldr	s14, [r3]
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <MPU6050_Read_Accel+0x26c>)
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cee:	4b2a      	ldr	r3, [pc, #168]	; (8006d98 <MPU6050_Read_Accel+0x268>)
 8006cf0:	edd3 6a00 	vldr	s13, [r3]
 8006cf4:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <MPU6050_Read_Accel+0x268>)
 8006cf6:	edd3 7a00 	vldr	s15, [r3]
 8006cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d02:	eeb0 0a67 	vmov.f32	s0, s15
 8006d06:	f00d fd41 	bl	801478c <sqrtf>
 8006d0a:	ee10 3a10 	vmov	r3, s0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7f9 fc2a 	bl	8000568 <__aeabi_f2d>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	ec43 2b11 	vmov	d1, r2, r3
 8006d1c:	ec45 4b10 	vmov	d0, r4, r5
 8006d20:	f00d fd32 	bl	8014788 <atan2>
 8006d24:	ec51 0b10 	vmov	r0, r1, d0
 8006d28:	a317      	add	r3, pc, #92	; (adr r3, 8006d88 <MPU6050_Read_Accel+0x258>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fc73 	bl	8000618 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f7f9 ff65 	bl	8000c08 <__aeabi_d2f>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	60bb      	str	r3, [r7, #8]

	p -= 90;
 8006d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d46:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006da8 <MPU6050_Read_Accel+0x278>
 8006d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d4e:	edc7 7a03 	vstr	s15, [r7, #12]
//	r -= 8.0;

	raw_roll = r + mpu.roll_error;
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <MPU6050_Read_Accel+0x27c>)
 8006d54:	ed93 7a06 	vldr	s14, [r3, #24]
 8006d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <MPU6050_Read_Accel+0x280>)
 8006d62:	edc3 7a00 	vstr	s15, [r3]
	raw_pitch = p + mpu.pitch_error;
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <MPU6050_Read_Accel+0x27c>)
 8006d68:	ed93 7a07 	vldr	s14, [r3, #28]
 8006d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <MPU6050_Read_Accel+0x284>)
 8006d76:	edc3 7a00 	vstr	s15, [r3]


}
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d80:	47ae147b 	.word	0x47ae147b
 8006d84:	3f947ae1 	.word	0x3f947ae1
 8006d88:	66666666 	.word	0x66666666
 8006d8c:	404ca666 	.word	0x404ca666
 8006d90:	20000d60 	.word	0x20000d60
 8006d94:	40d00000 	.word	0x40d00000
 8006d98:	20002440 	.word	0x20002440
 8006d9c:	200012a4 	.word	0x200012a4
 8006da0:	20003170 	.word	0x20003170
 8006da4:	20003268 	.word	0x20003268
 8006da8:	42b40000 	.word	0x42b40000
 8006dac:	2000239c 	.word	0x2000239c
 8006db0:	20003264 	.word	0x20003264
 8006db4:	20000c74 	.word	0x20000c74

08006db8 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro(void) {
 8006db8:	b5b0      	push	{r4, r5, r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];
	int16_t Gyro_X_RAW = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	817b      	strh	r3, [r7, #10]

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	if (HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 50) != HAL_OK) {
 8006dca:	2332      	movs	r3, #50	; 0x32
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	2306      	movs	r3, #6
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	2243      	movs	r2, #67	; 0x43
 8006dda:	21d0      	movs	r1, #208	; 0xd0
 8006ddc:	487c      	ldr	r0, [pc, #496]	; (8006fd0 <MPU6050_Read_Gyro+0x218>)
 8006dde:	f003 ff47 	bl	800ac70 <HAL_I2C_Mem_Read>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <MPU6050_Read_Gyro+0x36>
		reInitIMU();	// if the MPU-6050 does not respond within 50ms, re-init
 8006de8:	f7fa fd1a 	bl	8001820 <reInitIMU>
 8006dec:	e0e3      	b.n	8006fb6 <MPU6050_Read_Gyro+0x1fe>
		return;
	}

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8006dee:	793b      	ldrb	r3, [r7, #4]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	b21a      	sxth	r2, r3
 8006df4:	797b      	ldrb	r3, [r7, #5]
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8006dfc:	79bb      	ldrb	r3, [r7, #6]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8006e0a:	7a3b      	ldrb	r3, [r7, #8]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	7a7b      	ldrb	r3, [r7, #9]
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	4313      	orrs	r3, r2
 8006e16:	817b      	strh	r3, [r7, #10]

	Gx = Gyro_X_RAW/131.0;
 8006e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fb91 	bl	8000544 <__aeabi_i2d>
 8006e22:	a367      	add	r3, pc, #412	; (adr r3, 8006fc0 <MPU6050_Read_Gyro+0x208>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fd20 	bl	800086c <__aeabi_ddiv>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	f7f9 fee8 	bl	8000c08 <__aeabi_d2f>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4a66      	ldr	r2, [pc, #408]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006e3c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8006e3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fb7e 	bl	8000544 <__aeabi_i2d>
 8006e48:	a35d      	add	r3, pc, #372	; (adr r3, 8006fc0 <MPU6050_Read_Gyro+0x208>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 fd0d 	bl	800086c <__aeabi_ddiv>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7f9 fed5 	bl	8000c08 <__aeabi_d2f>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4a5d      	ldr	r2, [pc, #372]	; (8006fd8 <MPU6050_Read_Gyro+0x220>)
 8006e62:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8006e64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 fb6b 	bl	8000544 <__aeabi_i2d>
 8006e6e:	a354      	add	r3, pc, #336	; (adr r3, 8006fc0 <MPU6050_Read_Gyro+0x208>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fcfa 	bl	800086c <__aeabi_ddiv>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f7f9 fec2 	bl	8000c08 <__aeabi_d2f>
 8006e84:	4603      	mov	r3, r0
 8006e86:	4a55      	ldr	r2, [pc, #340]	; (8006fdc <MPU6050_Read_Gyro+0x224>)
 8006e88:	6013      	str	r3, [r2, #0]

	a = (fabs(Gx) + fabs(Gy) + fabs(Gz))* 0.02;
 8006e8a:	4b52      	ldr	r3, [pc, #328]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006e8c:	edd3 7a00 	vldr	s15, [r3]
 8006e90:	eef0 7ae7 	vabs.f32	s15, s15
 8006e94:	ee17 0a90 	vmov	r0, s15
 8006e98:	f7f9 fb66 	bl	8000568 <__aeabi_f2d>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	4b4d      	ldr	r3, [pc, #308]	; (8006fd8 <MPU6050_Read_Gyro+0x220>)
 8006ea2:	edd3 7a00 	vldr	s15, [r3]
 8006ea6:	eef0 7ae7 	vabs.f32	s15, s15
 8006eaa:	ee17 0a90 	vmov	r0, s15
 8006eae:	f7f9 fb5b 	bl	8000568 <__aeabi_f2d>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 f9f7 	bl	80002ac <__adddf3>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	4b45      	ldr	r3, [pc, #276]	; (8006fdc <MPU6050_Read_Gyro+0x224>)
 8006ec8:	edd3 7a00 	vldr	s15, [r3]
 8006ecc:	eef0 7ae7 	vabs.f32	s15, s15
 8006ed0:	ee17 0a90 	vmov	r0, s15
 8006ed4:	f7f9 fb48 	bl	8000568 <__aeabi_f2d>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 f9e4 	bl	80002ac <__adddf3>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4619      	mov	r1, r3
 8006eec:	a336      	add	r3, pc, #216	; (adr r3, 8006fc8 <MPU6050_Read_Gyro+0x210>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 fb91 	bl	8000618 <__aeabi_dmul>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4610      	mov	r0, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	f7f9 fe83 	bl	8000c08 <__aeabi_d2f>
 8006f02:	4603      	mov	r3, r0
 8006f04:	4a36      	ldr	r2, [pc, #216]	; (8006fe0 <MPU6050_Read_Gyro+0x228>)
 8006f06:	6013      	str	r3, [r2, #0]

	if (Initial_Start == 0) {
 8006f08:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <MPU6050_Read_Gyro+0x22c>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d113      	bne.n	8006f38 <MPU6050_Read_Gyro+0x180>
		if (fabs(Gx) < 5.0) {
 8006f10:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f12:	edd3 7a00 	vldr	s15, [r3]
 8006f16:	eef0 7ae7 	vabs.f32	s15, s15
 8006f1a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f26:	d507      	bpl.n	8006f38 <MPU6050_Read_Gyro+0x180>
			mpu.yaw_error = fabs(Gx);		// Auto calibrate the Gyro error at startup
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f2a:	edd3 7a00 	vldr	s15, [r3]
 8006f2e:	eef0 7ae7 	vabs.f32	s15, s15
 8006f32:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <MPU6050_Read_Gyro+0x230>)
 8006f34:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}
	Gx += mpu.yaw_error;					//Cancel out error
 8006f38:	4b2b      	ldr	r3, [pc, #172]	; (8006fe8 <MPU6050_Read_Gyro+0x230>)
 8006f3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f3e:	4b25      	ldr	r3, [pc, #148]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f40:	edd3 7a00 	vldr	s15, [r3]
 8006f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f48:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f4a:	edc3 7a00 	vstr	s15, [r3]

	if (Gx < -5.00 || Gx > 5.00) {		//if not moving, do not change
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f50:	edd3 7a00 	vldr	s15, [r3]
 8006f54:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8006f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f60:	d409      	bmi.n	8006f76 <MPU6050_Read_Gyro+0x1be>
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f64:	edd3 7a00 	vldr	s15, [r3]
 8006f68:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f74:	dd1f      	ble.n	8006fb6 <MPU6050_Read_Gyro+0x1fe>
		mpu.yaw = mpu.yaw - (Gx * 0.02);
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <MPU6050_Read_Gyro+0x230>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7f9 faf4 	bl	8000568 <__aeabi_f2d>
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <MPU6050_Read_Gyro+0x21c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7f9 faed 	bl	8000568 <__aeabi_f2d>
 8006f8e:	a30e      	add	r3, pc, #56	; (adr r3, 8006fc8 <MPU6050_Read_Gyro+0x210>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 fb40 	bl	8000618 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f982 	bl	80002a8 <__aeabi_dsub>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	f7f9 fe2c 	bl	8000c08 <__aeabi_d2f>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4a0d      	ldr	r2, [pc, #52]	; (8006fe8 <MPU6050_Read_Gyro+0x230>)
 8006fb4:	6053      	str	r3, [r2, #4]
	}

}
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bdb0      	pop	{r4, r5, r7, pc}
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	40606000 	.word	0x40606000
 8006fc8:	47ae147b 	.word	0x47ae147b
 8006fcc:	3f947ae1 	.word	0x3f947ae1
 8006fd0:	20000d60 	.word	0x20000d60
 8006fd4:	20000b6c 	.word	0x20000b6c
 8006fd8:	200012a8 	.word	0x200012a8
 8006fdc:	20003260 	.word	0x20003260
 8006fe0:	2000326c 	.word	0x2000326c
 8006fe4:	2000092e 	.word	0x2000092e
 8006fe8:	2000239c 	.word	0x2000239c

08006fec <read_sram_errorlog>:
#include <stdlib.h>

extern RTC_HandleTypeDef hrtc;

uint8_t read_sram_errorlog(uint16_t addr)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	80fb      	strh	r3, [r7, #6]
   uint8_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <read_sram_errorlog+0x50>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	4a0f      	ldr	r2, [pc, #60]	; (800703c <read_sram_errorlog+0x50>)
 8007000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007004:	6313      	str	r3, [r2, #48]	; 0x30
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <read_sram_errorlog+0x50>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint16_t*) (BKPSRAM_BASE + addr);
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8007018:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	73fb      	strb	r3, [r7, #15]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <read_sram_errorlog+0x50>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	4a05      	ldr	r2, [pc, #20]	; (800703c <read_sram_errorlog+0x50>)
 8007026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800702a:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800

08007040 <write_sram_errorlog>:

void write_sram_errorlog(uint8_t l_data, uint16_t addr)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	460a      	mov	r2, r1
 800704a:	71fb      	strb	r3, [r7, #7]
 800704c:	4613      	mov	r3, r2
 800704e:	80bb      	strh	r3, [r7, #4]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <write_sram_errorlog+0x54>)
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <write_sram_errorlog+0x54>)
 800705a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800705e:	6313      	str	r3, [r2, #48]	; 0x30
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <write_sram_errorlog+0x54>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint16_t *) (BKPSRAM_BASE + addr) = l_data;
 800706c:	88bb      	ldrh	r3, [r7, #4]
 800706e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8007072:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007076:	79fa      	ldrb	r2, [r7, #7]
 8007078:	b292      	uxth	r2, r2
 800707a:	801a      	strh	r2, [r3, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <write_sram_errorlog+0x54>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4a04      	ldr	r2, [pc, #16]	; (8007094 <write_sram_errorlog+0x54>)
 8007082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007086:	6313      	str	r3, [r2, #48]	; 0x30
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40023800 	.word	0x40023800

08007098 <read_sram_uint8>:


uint8_t read_sram_uint8(uint8_t addr)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	71fb      	strb	r3, [r7, #7]
   uint8_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <read_sram_uint8+0x50>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	4a0f      	ldr	r2, [pc, #60]	; (80070e8 <read_sram_uint8+0x50>)
 80070ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070b0:	6313      	str	r3, [r2, #48]	; 0x30
 80070b2:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <read_sram_uint8+0x50>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint8_t*) (BKPSRAM_BASE + addr);
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 80070c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	73fb      	strb	r3, [r7, #15]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <read_sram_uint8+0x50>)
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	4a05      	ldr	r2, [pc, #20]	; (80070e8 <read_sram_uint8+0x50>)
 80070d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070d6:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800

080070ec <write_sram_uint8>:

void write_sram_uint8(uint8_t l_data, uint8_t addr)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	460a      	mov	r2, r1
 80070f6:	71fb      	strb	r3, [r7, #7]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71bb      	strb	r3, [r7, #6]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <write_sram_uint8+0x54>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	4a0e      	ldr	r2, [pc, #56]	; (8007140 <write_sram_uint8+0x54>)
 8007106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800710a:	6313      	str	r3, [r2, #48]	; 0x30
 800710c:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <write_sram_uint8+0x54>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint8_t *) (BKPSRAM_BASE + addr) = l_data;
 8007118:	79bb      	ldrb	r3, [r7, #6]
 800711a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 800711e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007122:	461a      	mov	r2, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	7013      	strb	r3, [r2, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <write_sram_uint8+0x54>)
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <write_sram_uint8+0x54>)
 800712e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007132:	6313      	str	r3, [r2, #48]	; 0x30
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40023800 	.word	0x40023800

08007144 <read_sram_uint16>:

uint16_t read_sram_uint16(uint8_t addr)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
   uint16_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	4b10      	ldr	r3, [pc, #64]	; (8007194 <read_sram_uint16+0x50>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	4a0f      	ldr	r2, [pc, #60]	; (8007194 <read_sram_uint16+0x50>)
 8007158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800715c:	6313      	str	r3, [r2, #48]	; 0x30
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <read_sram_uint16+0x50>)
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint16_t*) (BKPSRAM_BASE + addr);
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8007170:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	81fb      	strh	r3, [r7, #14]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8007178:	4b06      	ldr	r3, [pc, #24]	; (8007194 <read_sram_uint16+0x50>)
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	4a05      	ldr	r2, [pc, #20]	; (8007194 <read_sram_uint16+0x50>)
 800717e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007182:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 8007184:	89fb      	ldrh	r3, [r7, #14]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800

08007198 <write_sram_uint16>:

void write_sram_uint16(uint16_t l_data, uint8_t addr)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	460a      	mov	r2, r1
 80071a2:	80fb      	strh	r3, [r7, #6]
 80071a4:	4613      	mov	r3, r2
 80071a6:	717b      	strb	r3, [r7, #5]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <write_sram_uint16+0x54>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <write_sram_uint16+0x54>)
 80071b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b6:	6313      	str	r3, [r2, #48]	; 0x30
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <write_sram_uint16+0x54>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint16_t *) (BKPSRAM_BASE + addr) = l_data;
 80071c4:	797b      	ldrb	r3, [r7, #5]
 80071c6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 80071ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80071ce:	461a      	mov	r2, r3
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	8013      	strh	r3, [r2, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <write_sram_uint16+0x54>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	4a04      	ldr	r2, [pc, #16]	; (80071ec <write_sram_uint16+0x54>)
 80071da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40023800 	.word	0x40023800

080071f0 <read_sram_uint32>:

uint32_t read_sram_uint32(uint8_t addr)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
   uint32_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <read_sram_uint32+0x50>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <read_sram_uint32+0x50>)
 8007204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007208:	6313      	str	r3, [r2, #48]	; 0x30
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <read_sram_uint32+0x50>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint32_t*) (BKPSRAM_BASE + addr);
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 800721c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <read_sram_uint32+0x50>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007228:	4a05      	ldr	r2, [pc, #20]	; (8007240 <read_sram_uint32+0x50>)
 800722a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800722e:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 8007230:	68fb      	ldr	r3, [r7, #12]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40023800 	.word	0x40023800

08007244 <read_sram_float>:
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
}

float read_sram_float(uint8_t addr)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
   uint32_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <read_sram_float+0x58>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	4a11      	ldr	r2, [pc, #68]	; (800729c <read_sram_float+0x58>)
 8007258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800725c:	6313      	str	r3, [r2, #48]	; 0x30
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <read_sram_float+0x58>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval = *(uint32_t*) (BKPSRAM_BASE + addr);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8007270:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <read_sram_float+0x58>)
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	4a07      	ldr	r2, [pc, #28]	; (800729c <read_sram_float+0x58>)
 800727e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007282:	6313      	str	r3, [r2, #48]	; 0x30
  return *(float *) &i_retval;
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	ee07 3a90 	vmov	s15, r3
}
 800728e:	eeb0 0a67 	vmov.f32	s0, s15
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40023800 	.word	0x40023800

080072a0 <write_sram_float>:

void write_sram_float(float l_data, uint8_t addr)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80072aa:	4603      	mov	r3, r0
 80072ac:	70fb      	strb	r3, [r7, #3]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <write_sram_float+0x54>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	4a0f      	ldr	r2, [pc, #60]	; (80072f4 <write_sram_float+0x54>)
 80072b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072bc:	6313      	str	r3, [r2, #48]	; 0x30
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <write_sram_float+0x54>)
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint32_t *) (BKPSRAM_BASE + addr) = *(uint32_t *) &l_data;
 80072ca:	1d3a      	adds	r2, r7, #4
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 80072d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80072d6:	4619      	mov	r1, r3
 80072d8:	6813      	ldr	r3, [r2, #0]
 80072da:	600b      	str	r3, [r1, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <write_sram_float+0x54>)
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <write_sram_float+0x54>)
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40023800 	.word	0x40023800

080072f8 <enable_backup_sram>:

void enable_backup_sram(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
    /*DBP : Enable access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80072fe:	f004 fbdb 	bl	800bab8 <HAL_PWR_EnableBkUpAccess>
    /*PWREN : Enable backup domain access  */
    __HAL_RCC_PWR_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <enable_backup_sram+0x34>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <enable_backup_sram+0x34>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007310:	6413      	str	r3, [r2, #64]	; 0x40
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <enable_backup_sram+0x34>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
    /*BRE : Enable backup regulator
      BRR : Wait for backup regulator to stabilize */
    HAL_PWREx_EnableBkUpReg();
 800731e:	f004 fbf9 	bl	800bb14 <HAL_PWREx_EnableBkUpReg>
   /*DBP : Disable access to Backup domain */
//    HAL_PWR_DisableBkUpAccess();
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800

08007330 <clear_errors>:

void clear_errors(void) {
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	f6ad 3dc4 	subw	sp, sp, #3012	; 0xbc4
 8007336:	aff8      	add	r7, sp, #992	; 0x3e0

	sram_error errors;
	errors = read_error_log();
 8007338:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 800733c:	463b      	mov	r3, r7
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f916 	bl	8007570 <read_error_log>
 8007344:	463b      	mov	r3, r7
 8007346:	4620      	mov	r0, r4
 8007348:	4619      	mov	r1, r3
 800734a:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800734e:	461a      	mov	r2, r3
 8007350:	f008 f964 	bl	800f61c <memcpy>

	for (int x = 0; x < 20; x++) {
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800735a:	e011      	b.n	8007380 <clear_errors+0x50>
		sprintf(errors.elog[x], " ");
 800735c:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8007360:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8007364:	2132      	movs	r1, #50	; 0x32
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	4413      	add	r3, r2
 800736c:	3301      	adds	r3, #1
 800736e:	4912      	ldr	r1, [pc, #72]	; (80073b8 <clear_errors+0x88>)
 8007370:	4618      	mov	r0, r3
 8007372:	f008 ffe9 	bl	8010348 <siprintf>
	for (int x = 0; x < 20; x++) {
 8007376:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8007380:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8007384:	2b13      	cmp	r3, #19
 8007386:	dde9      	ble.n	800735c <clear_errors+0x2c>
	}
	errors.index = 0;
 8007388:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]

	write_error_log(errors);
 8007390:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8007394:	4668      	mov	r0, sp
 8007396:	f104 0310 	add.w	r3, r4, #16
 800739a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800739e:	4619      	mov	r1, r3
 80073a0:	f008 f93c 	bl	800f61c <memcpy>
 80073a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073a8:	f000 fa13 	bl	80077d2 <write_error_log>


}
 80073ac:	bf00      	nop
 80073ae:	f207 77e4 	addw	r7, r7, #2020	; 0x7e4
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	080169a4 	.word	0x080169a4

080073bc <scroll_error_list>:

void scroll_error_list(void) {
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	f6ad 3dc4 	subw	sp, sp, #3012	; 0xbc4
 80073c2:	aff8      	add	r7, sp, #992	; 0x3e0

	sram_error errors;
	errors = read_error_log();
 80073c4:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 80073c8:	463b      	mov	r3, r7
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f8d0 	bl	8007570 <read_error_log>
 80073d0:	463b      	mov	r3, r7
 80073d2:	4620      	mov	r0, r4
 80073d4:	4619      	mov	r1, r3
 80073d6:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80073da:	461a      	mov	r2, r3
 80073dc:	f008 f91e 	bl	800f61c <memcpy>

	for (int x = 0; x < 19; x++) {
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 80073e6:	e01a      	b.n	800741e <scroll_error_list+0x62>
		strcpy(errors.elog[x], errors.elog[x+1]);
 80073e8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80073ec:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80073f0:	2132      	movs	r1, #50	; 0x32
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	1c58      	adds	r0, r3, #1
 80073fa:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80073fe:	3301      	adds	r3, #1
 8007400:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8007404:	2132      	movs	r1, #50	; 0x32
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	3301      	adds	r3, #1
 800740e:	4619      	mov	r1, r3
 8007410:	f009 f82b 	bl	801046a <strcpy>
	for (int x = 0; x < 19; x++) {
 8007414:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8007418:	3301      	adds	r3, #1
 800741a:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800741e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8007422:	2b12      	cmp	r3, #18
 8007424:	dde0      	ble.n	80073e8 <scroll_error_list+0x2c>
	}

	write_error_log(errors);
 8007426:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 800742a:	4668      	mov	r0, sp
 800742c:	f104 0310 	add.w	r3, r4, #16
 8007430:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007434:	4619      	mov	r1, r3
 8007436:	f008 f8f1 	bl	800f61c <memcpy>
 800743a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800743e:	f000 f9c8 	bl	80077d2 <write_error_log>

}
 8007442:	bf00      	nop
 8007444:	f207 77e4 	addw	r7, r7, #2020	; 0x7e4
 8007448:	46bd      	mov	sp, r7
 800744a:	bd90      	pop	{r4, r7, pc}

0800744c <add_error_event>:

void add_error_event(char *errormsg) {
 800744c:	b590      	push	{r4, r7, lr}
 800744e:	f6ad 3de4 	subw	sp, sp, #3044	; 0xbe4
 8007452:	aff8      	add	r7, sp, #992	; 0x3e0
 8007454:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8007458:	6018      	str	r0, [r3, #0]

	sram_error errors;
	errors = read_error_log();
 800745a:	f207 4414 	addw	r4, r7, #1044	; 0x414
 800745e:	463b      	mov	r3, r7
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f885 	bl	8007570 <read_error_log>
 8007466:	463b      	mov	r3, r7
 8007468:	4620      	mov	r0, r4
 800746a:	4619      	mov	r1, r3
 800746c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007470:	461a      	mov	r2, r3
 8007472:	f008 f8d3 	bl	800f61c <memcpy>

	if (errors.index < 0 || errors.index > 20) errors.index = 0;
 8007476:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b14      	cmp	r3, #20
 800747e:	d903      	bls.n	8007488 <add_error_event+0x3c>
 8007480:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]

	if (errors.index >= 20) {
 8007488:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b13      	cmp	r3, #19
 8007490:	d913      	bls.n	80074ba <add_error_event+0x6e>

		scroll_error_list();
 8007492:	f7ff ff93 	bl	80073bc <scroll_error_list>
		errors = read_error_log();
 8007496:	f207 4414 	addw	r4, r7, #1044	; 0x414
 800749a:	463b      	mov	r3, r7
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f867 	bl	8007570 <read_error_log>
 80074a2:	463b      	mov	r3, r7
 80074a4:	4620      	mov	r0, r4
 80074a6:	4619      	mov	r1, r3
 80074a8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80074ac:	461a      	mov	r2, r3
 80074ae:	f008 f8b5 	bl	800f61c <memcpy>
		errors.index = 19;
 80074b2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80074b6:	2213      	movs	r2, #19
 80074b8:	701a      	strb	r2, [r3, #0]

	}

	RTC_TimeTypeDef currTime = {0};
 80074ba:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80074be:	461a      	mov	r2, r3
 80074c0:	2300      	movs	r3, #0
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	6053      	str	r3, [r2, #4]
 80074c6:	6093      	str	r3, [r2, #8]
 80074c8:	60d3      	str	r3, [r2, #12]
 80074ca:	6113      	str	r3, [r2, #16]
	RTC_DateTypeDef currDate = {0};
 80074cc:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80074d4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80074d8:	2200      	movs	r2, #0
 80074da:	4619      	mov	r1, r3
 80074dc:	4822      	ldr	r0, [pc, #136]	; (8007568 <add_error_event+0x11c>)
 80074de:	f005 fada 	bl	800ca96 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80074e2:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80074e6:	2200      	movs	r2, #0
 80074e8:	4619      	mov	r1, r3
 80074ea:	481f      	ldr	r0, [pc, #124]	; (8007568 <add_error_event+0x11c>)
 80074ec:	f005 fbd8 	bl	800cca0 <HAL_RTC_GetDate>

	sprintf(errors.elog[errors.index], "<%d:%d:%d> %s", currTime.Hours, currTime.Minutes, currTime.Seconds, errormsg);
 80074f0:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80074fc:	2332      	movs	r3, #50	; 0x32
 80074fe:	fb03 f301 	mul.w	r3, r3, r1
 8007502:	4413      	add	r3, r2
 8007504:	1c58      	adds	r0, r3, #1
 8007506:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	461c      	mov	r4, r3
 8007516:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800751a:	789b      	ldrb	r3, [r3, #2]
 800751c:	461a      	mov	r2, r3
 800751e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	9200      	str	r2, [sp, #0]
 8007528:	4623      	mov	r3, r4
 800752a:	460a      	mov	r2, r1
 800752c:	490f      	ldr	r1, [pc, #60]	; (800756c <add_error_event+0x120>)
 800752e:	f008 ff0b 	bl	8010348 <siprintf>

	errors.index++;
 8007532:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8007540:	701a      	strb	r2, [r3, #0]

	write_error_log(errors);
 8007542:	f207 4414 	addw	r4, r7, #1044	; 0x414
 8007546:	4668      	mov	r0, sp
 8007548:	f104 0310 	add.w	r3, r4, #16
 800754c:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007550:	4619      	mov	r1, r3
 8007552:	f008 f863 	bl	800f61c <memcpy>
 8007556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800755a:	f000 f93a 	bl	80077d2 <write_error_log>
}
 800755e:	bf00      	nop
 8007560:	f607 0704 	addw	r7, r7, #2052	; 0x804
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}
 8007568:	20002420 	.word	0x20002420
 800756c:	080169a8 	.word	0x080169a8

08007570 <read_error_log>:

sram_error read_error_log(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8007576:	af00      	add	r7, sp, #0
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	6018      	str	r0, [r3, #0]

	sram_error errors;

	uint16_t index = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
	for (int line = 0; line < 20; line++) {
 8007582:	2300      	movs	r3, #0
 8007584:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8007588:	e02e      	b.n	80075e8 <read_error_log+0x78>
		for (int ch = 0; ch < 50; ch++) {
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8007590:	e021      	b.n	80075d6 <read_error_log+0x66>
			errors.elog[line][ch] = read_sram_errorlog(ERRORLOG_ADDR + (index + 1));
 8007592:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 8007596:	f203 2301 	addw	r3, r3, #513	; 0x201
 800759a:	b29b      	uxth	r3, r3
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fd25 	bl	8006fec <read_sram_errorlog>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f107 0208 	add.w	r2, r7, #8
 80075aa:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80075ae:	2132      	movs	r1, #50	; 0x32
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	441a      	add	r2, r3
 80075b6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80075ba:	4413      	add	r3, r2
 80075bc:	3301      	adds	r3, #1
 80075be:	4602      	mov	r2, r0
 80075c0:	701a      	strb	r2, [r3, #0]
			index++;
 80075c2:	f8b7 33fe 	ldrh.w	r3, [r7, #1022]	; 0x3fe
 80075c6:	3301      	adds	r3, #1
 80075c8:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
		for (int ch = 0; ch < 50; ch++) {
 80075cc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80075d0:	3301      	adds	r3, #1
 80075d2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80075d6:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80075da:	2b31      	cmp	r3, #49	; 0x31
 80075dc:	ddd9      	ble.n	8007592 <read_error_log+0x22>
	for (int line = 0; line < 20; line++) {
 80075de:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80075e2:	3301      	adds	r3, #1
 80075e4:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80075e8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80075ec:	2b13      	cmp	r3, #19
 80075ee:	ddcc      	ble.n	800758a <read_error_log+0x1a>
		}
	}

	errors.index = read_sram_errorlog(ERRORLOG_INDEX_ADDR);
 80075f0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075f4:	f7ff fcfa 	bl	8006fec <read_sram_errorlog>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	f107 0308 	add.w	r3, r7, #8
 8007600:	701a      	strb	r2, [r3, #0]

	return errors;
 8007602:	1d3b      	adds	r3, r7, #4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	f107 0308 	add.w	r3, r7, #8
 800760a:	4610      	mov	r0, r2
 800760c:	4619      	mov	r1, r3
 800760e:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007612:	461a      	mov	r2, r3
 8007614:	f008 f802 	bl	800f61c <memcpy>

}
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <read_all_settings>:

sram_settings read_all_settings(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b098      	sub	sp, #96	; 0x60
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	sram_settings settings;

	settings.Config_Set = read_sram_uint8(CONFIG_SET_ADDR);
 800762c:	2001      	movs	r0, #1
 800762e:	f7ff fd33 	bl	8007098 <read_sram_uint8>
 8007632:	4603      	mov	r3, r0
 8007634:	723b      	strb	r3, [r7, #8]
	settings.Go_Home_Direction = read_sram_uint8(GO_GOME_DIRECTION_ADDR);
 8007636:	2002      	movs	r0, #2
 8007638:	f7ff fd2e 	bl	8007098 <read_sram_uint8>
 800763c:	4603      	mov	r3, r0
 800763e:	727b      	strb	r3, [r7, #9]
	settings.Boundary_Timeout = read_sram_uint32(BOUNDARY_TIMEOUT_ADDR);
 8007640:	2003      	movs	r0, #3
 8007642:	f7ff fdd5 	bl	80071f0 <read_sram_uint32>
 8007646:	4603      	mov	r3, r0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	72bb      	strb	r3, [r7, #10]
	settings.WorkingHourStart = read_sram_uint8(WORKINGHOURSTART_ADDR);
 800764c:	2004      	movs	r0, #4
 800764e:	f7ff fd23 	bl	8007098 <read_sram_uint8>
 8007652:	4603      	mov	r3, r0
 8007654:	72fb      	strb	r3, [r7, #11]
	settings.WorkingHourEnd = read_sram_uint32(WORKINGHOUREND_ADDR);
 8007656:	2005      	movs	r0, #5
 8007658:	f7ff fdca 	bl	80071f0 <read_sram_uint32>
 800765c:	4603      	mov	r3, r0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	733b      	strb	r3, [r7, #12]
	settings.Overturn_Limit = read_sram_uint8(OVERTURN_LIMIT_ADDR);
 8007662:	2006      	movs	r0, #6
 8007664:	f7ff fd18 	bl	8007098 <read_sram_uint8>
 8007668:	4603      	mov	r3, r0
 800766a:	737b      	strb	r3, [r7, #13]
	settings.MotorSpeedUpdateFreq = read_sram_uint8(MOTORSPEEDUPDATEFREQ_ADDR);
 800766c:	2007      	movs	r0, #7
 800766e:	f7ff fd13 	bl	8007098 <read_sram_uint8>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]
	settings.Outside_Threshold = read_sram_uint8(OUTSIDE_THRESHOLD_ADDR);
 8007676:	2008      	movs	r0, #8
 8007678:	f7ff fd0e 	bl	8007098 <read_sram_uint8>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]
	settings.move_count_limit = read_sram_uint8(MOVE_COUNT_ADDR);
 8007680:	2009      	movs	r0, #9
 8007682:	f7ff fd09 	bl	8007098 <read_sram_uint8>
 8007686:	4603      	mov	r3, r0
 8007688:	743b      	strb	r3, [r7, #16]
	settings.bumber_count_limit = read_sram_uint8(BUMPER_COUNT_ADDR);
 800768a:	200a      	movs	r0, #10
 800768c:	f7ff fd04 	bl	8007098 <read_sram_uint8>
 8007690:	4603      	mov	r3, r0
 8007692:	747b      	strb	r3, [r7, #17]

	settings.HoldChargeDetection = read_sram_uint16(HOLDCHARGEDETECTION_ADDR);
 8007694:	2032      	movs	r0, #50	; 0x32
 8007696:	f7ff fd55 	bl	8007144 <read_sram_uint16>
 800769a:	4603      	mov	r3, r0
 800769c:	827b      	strh	r3, [r7, #18]
	settings.magValue = read_sram_uint16(MAGVALUE_ADDR);
 800769e:	2034      	movs	r0, #52	; 0x34
 80076a0:	f7ff fd50 	bl	8007144 <read_sram_uint16>
 80076a4:	4603      	mov	r3, r0
 80076a6:	82bb      	strh	r3, [r7, #20]
	settings.magMinValue = read_sram_uint16(MAGMINVALUE_ADDR);
 80076a8:	2036      	movs	r0, #54	; 0x36
 80076aa:	f7ff fd4b 	bl	8007144 <read_sram_uint16>
 80076ae:	4603      	mov	r3, r0
 80076b0:	82fb      	strh	r3, [r7, #22]
	settings.motorMaxSpeed = read_sram_uint16(MOTORMAXSPEED_ADDR);
 80076b2:	2038      	movs	r0, #56	; 0x38
 80076b4:	f7ff fd46 	bl	8007144 <read_sram_uint16>
 80076b8:	4603      	mov	r3, r0
 80076ba:	833b      	strh	r3, [r7, #24]
	settings.motorMinSpeed = read_sram_uint16(MOTORMINSPEED_ADDR);
 80076bc:	203a      	movs	r0, #58	; 0x3a
 80076be:	f7ff fd41 	bl	8007144 <read_sram_uint16>
 80076c2:	4603      	mov	r3, r0
 80076c4:	837b      	strh	r3, [r7, #26]
	settings.cutterSpeed = read_sram_uint16(CUTTERSPEED_ADDR);
 80076c6:	203c      	movs	r0, #60	; 0x3c
 80076c8:	f7ff fd3c 	bl	8007144 <read_sram_uint16>
 80076cc:	4603      	mov	r3, r0
 80076ce:	83bb      	strh	r3, [r7, #28]
	settings.adcLevel = read_sram_uint16(ADC_LEVEL_ADDR);
 80076d0:	203e      	movs	r0, #62	; 0x3e
 80076d2:	f7ff fd37 	bl	8007144 <read_sram_uint16>
 80076d6:	4603      	mov	r3, r0
 80076d8:	83fb      	strh	r3, [r7, #30]

	settings.Battery_High_Limit = read_sram_float(BATTERY_HIGH_LIMIT_ADDR);
 80076da:	2068      	movs	r0, #104	; 0x68
 80076dc:	f7ff fdb2 	bl	8007244 <read_sram_float>
 80076e0:	eef0 7a40 	vmov.f32	s15, s0
 80076e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	settings.Battery_Low_Limit = read_sram_float(BATTERY_LOW_LIMIT_ADDR);
 80076e8:	2064      	movs	r0, #100	; 0x64
 80076ea:	f7ff fdab 	bl	8007244 <read_sram_float>
 80076ee:	eef0 7a40 	vmov.f32	s15, s0
 80076f2:	edc7 7a08 	vstr	s15, [r7, #32]

	settings.Signal_Integrity_IN = read_sram_float(SIGNAL_INTEGRITY_IN_ADDR);
 80076f6:	206c      	movs	r0, #108	; 0x6c
 80076f8:	f7ff fda4 	bl	8007244 <read_sram_float>
 80076fc:	eef0 7a40 	vmov.f32	s15, s0
 8007700:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	settings.Signal_Integrity_OUT = read_sram_float(SIGNAL_INTEGRITY_OUT_ADDR);
 8007704:	2070      	movs	r0, #112	; 0x70
 8007706:	f7ff fd9d 	bl	8007244 <read_sram_float>
 800770a:	eef0 7a40 	vmov.f32	s15, s0
 800770e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	settings.Motor_Limit = read_sram_float(MOTOR_LIMIT_ADDR);
 8007712:	2074      	movs	r0, #116	; 0x74
 8007714:	f7ff fd96 	bl	8007244 <read_sram_float>
 8007718:	eef0 7a40 	vmov.f32	s15, s0
 800771c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	settings.Cutter_Limit = read_sram_float(CUTTER_LIMIT_ADDR);
 8007720:	2078      	movs	r0, #120	; 0x78
 8007722:	f7ff fd8f 	bl	8007244 <read_sram_float>
 8007726:	eef0 7a40 	vmov.f32	s15, s0
 800772a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	settings.kp = read_sram_float(KP_ADDR);
 800772e:	207c      	movs	r0, #124	; 0x7c
 8007730:	f7ff fd88 	bl	8007244 <read_sram_float>
 8007734:	eef0 7a40 	vmov.f32	s15, s0
 8007738:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	settings.ki = read_sram_float(KI_ADDR);
 800773c:	2080      	movs	r0, #128	; 0x80
 800773e:	f7ff fd81 	bl	8007244 <read_sram_float>
 8007742:	eef0 7a40 	vmov.f32	s15, s0
 8007746:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	settings.kd = read_sram_float(KD_ADDR);
 800774a:	2084      	movs	r0, #132	; 0x84
 800774c:	f7ff fd7a 	bl	8007244 <read_sram_float>
 8007750:	eef0 7a40 	vmov.f32	s15, s0
 8007754:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	settings.Motor_Max_Limit = read_sram_float(Motor_Max_Limit_ADDR);
 8007758:	2090      	movs	r0, #144	; 0x90
 800775a:	f7ff fd73 	bl	8007244 <read_sram_float>
 800775e:	eef0 7a40 	vmov.f32	s15, s0
 8007762:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	settings.Motor_Min_Limit = read_sram_float(Motor_Min_Limit_ADDR);
 8007766:	209c      	movs	r0, #156	; 0x9c
 8007768:	f7ff fd6c 	bl	8007244 <read_sram_float>
 800776c:	eef0 7a40 	vmov.f32	s15, s0
 8007770:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	settings.voltageMultiply = read_sram_float(voltageMultiply_ADDR);
 8007774:	2094      	movs	r0, #148	; 0x94
 8007776:	f7ff fd65 	bl	8007244 <read_sram_float>
 800777a:	eef0 7a40 	vmov.f32	s15, s0
 800777e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	settings.proximitySpeed = read_sram_float(proximitySpeed_ADDR);
 8007782:	2098      	movs	r0, #152	; 0x98
 8007784:	f7ff fd5e 	bl	8007244 <read_sram_float>
 8007788:	eef0 7a40 	vmov.f32	s15, s0
 800778c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	settings.movement = read_sram_float(MOVEMENT_ADDR);
 8007790:	2088      	movs	r0, #136	; 0x88
 8007792:	f7ff fd57 	bl	8007244 <read_sram_float>
 8007796:	eef0 7a40 	vmov.f32	s15, s0
 800779a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	settings.pitch_comp = read_sram_float(PITCH_COMP_ADDR);
 800779e:	20a4      	movs	r0, #164	; 0xa4
 80077a0:	f7ff fd50 	bl	8007244 <read_sram_float>
 80077a4:	eef0 7a40 	vmov.f32	s15, s0
 80077a8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	settings.roll_comp = read_sram_float(ROLL_COMP_ADDR);
 80077ac:	20a0      	movs	r0, #160	; 0xa0
 80077ae:	f7ff fd49 	bl	8007244 <read_sram_float>
 80077b2:	eef0 7a40 	vmov.f32	s15, s0
 80077b6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	return settings;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	2258      	movs	r2, #88	; 0x58
 80077c4:	4619      	mov	r1, r3
 80077c6:	f007 ff29 	bl	800f61c <memcpy>
}
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	3760      	adds	r7, #96	; 0x60
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <write_error_log>:
void write_error_log(sram_error errors) {
 80077d2:	b084      	sub	sp, #16
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	f107 0c18 	add.w	ip, r7, #24
 80077de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint16_t index = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	81fb      	strh	r3, [r7, #14]
	for (int line = 0; line < 20; line++) {
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	e021      	b.n	8007830 <write_error_log+0x5e>
		for (int ch = 0; ch < 50; ch++) {
 80077ec:	2300      	movs	r3, #0
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e018      	b.n	8007824 <write_error_log+0x52>
			write_sram_errorlog(errors.elog[line][ch], (ERRORLOG_ADDR + (index + 1)));
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2232      	movs	r2, #50	; 0x32
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	f107 0218 	add.w	r2, r7, #24
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3301      	adds	r3, #1
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	89fb      	ldrh	r3, [r7, #14]
 800780a:	f203 2301 	addw	r3, r3, #513	; 0x201
 800780e:	b29b      	uxth	r3, r3
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7ff fc14 	bl	8007040 <write_sram_errorlog>
			index++;
 8007818:	89fb      	ldrh	r3, [r7, #14]
 800781a:	3301      	adds	r3, #1
 800781c:	81fb      	strh	r3, [r7, #14]
		for (int ch = 0; ch < 50; ch++) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3301      	adds	r3, #1
 8007822:	607b      	str	r3, [r7, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b31      	cmp	r3, #49	; 0x31
 8007828:	dde3      	ble.n	80077f2 <write_error_log+0x20>
	for (int line = 0; line < 20; line++) {
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3301      	adds	r3, #1
 800782e:	60bb      	str	r3, [r7, #8]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b13      	cmp	r3, #19
 8007834:	ddda      	ble.n	80077ec <write_error_log+0x1a>
		}
	}
	write_sram_errorlog(errors.index, ERRORLOG_INDEX_ADDR);
 8007836:	7e3b      	ldrb	r3, [r7, #24]
 8007838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fbff 	bl	8007040 <write_sram_errorlog>

}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800784c:	b004      	add	sp, #16
 800784e:	4770      	bx	lr

08007850 <write_all_settings>:
void write_all_settings(sram_settings settings)
{
 8007850:	b084      	sub	sp, #16
 8007852:	b580      	push	{r7, lr}
 8007854:	af00      	add	r7, sp, #0
 8007856:	f107 0c08 	add.w	ip, r7, #8
 800785a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// uint16_t = 2 byte
	//uint32_t = 4 byte
	//float = 4 byte

	// uint8_t & int8_t
	settings.Config_Set = 42;
 800785e:	232a      	movs	r3, #42	; 0x2a
 8007860:	723b      	strb	r3, [r7, #8]
	write_sram_uint8(settings.Config_Set, CONFIG_SET_ADDR);
 8007862:	7a3b      	ldrb	r3, [r7, #8]
 8007864:	2101      	movs	r1, #1
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fc40 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.Go_Home_Direction, GO_GOME_DIRECTION_ADDR);
 800786c:	7a7b      	ldrb	r3, [r7, #9]
 800786e:	2102      	movs	r1, #2
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff fc3b 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.Boundary_Timeout, BOUNDARY_TIMEOUT_ADDR);
 8007876:	7abb      	ldrb	r3, [r7, #10]
 8007878:	2103      	movs	r1, #3
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fc36 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.WorkingHourStart, WORKINGHOURSTART_ADDR);
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	2104      	movs	r1, #4
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fc31 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.WorkingHourEnd, WORKINGHOUREND_ADDR);
 800788a:	7b3b      	ldrb	r3, [r7, #12]
 800788c:	2105      	movs	r1, #5
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fc2c 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.Overturn_Limit, OVERTURN_LIMIT_ADDR);
 8007894:	7b7b      	ldrb	r3, [r7, #13]
 8007896:	2106      	movs	r1, #6
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fc27 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.MotorSpeedUpdateFreq, MOTORSPEEDUPDATEFREQ_ADDR);
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2107      	movs	r1, #7
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fc22 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.Outside_Threshold, OUTSIDE_THRESHOLD_ADDR);
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2108      	movs	r1, #8
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fc1d 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.move_count_limit, MOVE_COUNT_ADDR);
 80078b2:	7c3b      	ldrb	r3, [r7, #16]
 80078b4:	2109      	movs	r1, #9
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fc18 	bl	80070ec <write_sram_uint8>
	write_sram_uint8(settings.bumber_count_limit, BUMPER_COUNT_ADDR);
 80078bc:	7c7b      	ldrb	r3, [r7, #17]
 80078be:	210a      	movs	r1, #10
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fc13 	bl	80070ec <write_sram_uint8>


	// uint16_t
	write_sram_uint16(settings.HoldChargeDetection, HOLDCHARGEDETECTION_ADDR);
 80078c6:	8a7b      	ldrh	r3, [r7, #18]
 80078c8:	2132      	movs	r1, #50	; 0x32
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fc64 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.magValue, MAGVALUE_ADDR);
 80078d0:	8abb      	ldrh	r3, [r7, #20]
 80078d2:	2134      	movs	r1, #52	; 0x34
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fc5f 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.magMinValue, MAGMINVALUE_ADDR);
 80078da:	8afb      	ldrh	r3, [r7, #22]
 80078dc:	2136      	movs	r1, #54	; 0x36
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fc5a 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.motorMaxSpeed, MOTORMAXSPEED_ADDR);
 80078e4:	8b3b      	ldrh	r3, [r7, #24]
 80078e6:	2138      	movs	r1, #56	; 0x38
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fc55 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.motorMinSpeed, MOTORMINSPEED_ADDR);
 80078ee:	8b7b      	ldrh	r3, [r7, #26]
 80078f0:	213a      	movs	r1, #58	; 0x3a
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fc50 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.cutterSpeed, CUTTERSPEED_ADDR);
 80078f8:	8bbb      	ldrh	r3, [r7, #28]
 80078fa:	213c      	movs	r1, #60	; 0x3c
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff fc4b 	bl	8007198 <write_sram_uint16>
	write_sram_uint16(settings.adcLevel, ADC_LEVEL_ADDR);
 8007902:	8bfb      	ldrh	r3, [r7, #30]
 8007904:	213e      	movs	r1, #62	; 0x3e
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fc46 	bl	8007198 <write_sram_uint16>


	// uint32_t & float
	write_sram_float(settings.Battery_High_Limit, BATTERY_HIGH_LIMIT_ADDR);
 800790c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007910:	2068      	movs	r0, #104	; 0x68
 8007912:	eeb0 0a67 	vmov.f32	s0, s15
 8007916:	f7ff fcc3 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Battery_Low_Limit, BATTERY_LOW_LIMIT_ADDR);
 800791a:	edd7 7a08 	vldr	s15, [r7, #32]
 800791e:	2064      	movs	r0, #100	; 0x64
 8007920:	eeb0 0a67 	vmov.f32	s0, s15
 8007924:	f7ff fcbc 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Signal_Integrity_IN, SIGNAL_INTEGRITY_IN_ADDR);
 8007928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800792c:	206c      	movs	r0, #108	; 0x6c
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	f7ff fcb5 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Signal_Integrity_OUT, SIGNAL_INTEGRITY_OUT_ADDR);
 8007936:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800793a:	2070      	movs	r0, #112	; 0x70
 800793c:	eeb0 0a67 	vmov.f32	s0, s15
 8007940:	f7ff fcae 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Motor_Limit, MOTOR_LIMIT_ADDR);
 8007944:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007948:	2074      	movs	r0, #116	; 0x74
 800794a:	eeb0 0a67 	vmov.f32	s0, s15
 800794e:	f7ff fca7 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Cutter_Limit, CUTTER_LIMIT_ADDR);
 8007952:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007956:	2078      	movs	r0, #120	; 0x78
 8007958:	eeb0 0a67 	vmov.f32	s0, s15
 800795c:	f7ff fca0 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.kp, KP_ADDR);
 8007960:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007964:	207c      	movs	r0, #124	; 0x7c
 8007966:	eeb0 0a67 	vmov.f32	s0, s15
 800796a:	f7ff fc99 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.ki, KI_ADDR);
 800796e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007972:	2080      	movs	r0, #128	; 0x80
 8007974:	eeb0 0a67 	vmov.f32	s0, s15
 8007978:	f7ff fc92 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.kd, KD_ADDR);
 800797c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007980:	2084      	movs	r0, #132	; 0x84
 8007982:	eeb0 0a67 	vmov.f32	s0, s15
 8007986:	f7ff fc8b 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Motor_Max_Limit, Motor_Max_Limit_ADDR);
 800798a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800798e:	2090      	movs	r0, #144	; 0x90
 8007990:	eeb0 0a67 	vmov.f32	s0, s15
 8007994:	f7ff fc84 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.Motor_Min_Limit, Motor_Min_Limit_ADDR);
 8007998:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800799c:	209c      	movs	r0, #156	; 0x9c
 800799e:	eeb0 0a67 	vmov.f32	s0, s15
 80079a2:	f7ff fc7d 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.voltageMultiply, voltageMultiply_ADDR);
 80079a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80079aa:	2094      	movs	r0, #148	; 0x94
 80079ac:	eeb0 0a67 	vmov.f32	s0, s15
 80079b0:	f7ff fc76 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.proximitySpeed, proximitySpeed_ADDR);
 80079b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80079b8:	2098      	movs	r0, #152	; 0x98
 80079ba:	eeb0 0a67 	vmov.f32	s0, s15
 80079be:	f7ff fc6f 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.movement, MOVEMENT_ADDR);
 80079c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80079c6:	2088      	movs	r0, #136	; 0x88
 80079c8:	eeb0 0a67 	vmov.f32	s0, s15
 80079cc:	f7ff fc68 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.pitch_comp, PITCH_COMP_ADDR);
 80079d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80079d4:	20a4      	movs	r0, #164	; 0xa4
 80079d6:	eeb0 0a67 	vmov.f32	s0, s15
 80079da:	f7ff fc61 	bl	80072a0 <write_sram_float>
	write_sram_float(settings.roll_comp, ROLL_COMP_ADDR);
 80079de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80079e2:	20a0      	movs	r0, #160	; 0xa0
 80079e4:	eeb0 0a67 	vmov.f32	s0, s15
 80079e8:	f7ff fc5a 	bl	80072a0 <write_sram_float>

}
 80079ec:	bf00      	nop
 80079ee:	46bd      	mov	sp, r7
 80079f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f4:	b004      	add	sp, #16
 80079f6:	4770      	bx	lr

080079f8 <save_default_settings>:

void save_default_settings(void) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0a8      	sub	sp, #160	; 0xa0
 80079fc:	af12      	add	r7, sp, #72	; 0x48

	sram_settings settings;

	settings.Config_Set = 42;
 80079fe:	232a      	movs	r3, #42	; 0x2a
 8007a00:	703b      	strb	r3, [r7, #0]
	settings.Go_Home_Direction = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	707b      	strb	r3, [r7, #1]
	settings.Battery_Low_Limit = 22.00;
 8007a06:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <save_default_settings+0xc4>)
 8007a08:	61bb      	str	r3, [r7, #24]
	settings.Battery_High_Limit = 25.00;
 8007a0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <save_default_settings+0xc8>)
 8007a0c:	61fb      	str	r3, [r7, #28]
	settings.Boundary_Timeout = 6;
 8007a0e:	2306      	movs	r3, #6
 8007a10:	70bb      	strb	r3, [r7, #2]
	settings.Cutter_Limit = 2.0;
 8007a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
	settings.HoldChargeDetection = 350;
 8007a18:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007a1c:	817b      	strh	r3, [r7, #10]
	settings.MotorSpeedUpdateFreq = 100;
 8007a1e:	2364      	movs	r3, #100	; 0x64
 8007a20:	71bb      	strb	r3, [r7, #6]
	settings.Outside_Threshold = 8;
 8007a22:	2308      	movs	r3, #8
 8007a24:	71fb      	strb	r3, [r7, #7]
	settings.Motor_Limit = 4.0;
 8007a26:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	settings.Overturn_Limit = 35;
 8007a2c:	2323      	movs	r3, #35	; 0x23
 8007a2e:	717b      	strb	r3, [r7, #5]
	settings.Signal_Integrity_IN = 0.80;
 8007a30:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <save_default_settings+0xcc>)
 8007a32:	623b      	str	r3, [r7, #32]
	settings.Signal_Integrity_OUT = -0.80;
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <save_default_settings+0xd0>)
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
	settings.WorkingHourStart = 10;
 8007a38:	230a      	movs	r3, #10
 8007a3a:	70fb      	strb	r3, [r7, #3]
	settings.WorkingHourEnd = 20;
 8007a3c:	2314      	movs	r3, #20
 8007a3e:	713b      	strb	r3, [r7, #4]
	settings.kp = 0.20;
 8007a40:	4b22      	ldr	r3, [pc, #136]	; (8007acc <save_default_settings+0xd4>)
 8007a42:	63bb      	str	r3, [r7, #56]	; 0x38
	settings.ki = 0.0;
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
	settings.kd = 0.4;
 8007a4a:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <save_default_settings+0xd8>)
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
	settings.Motor_Max_Limit = 0.3;
 8007a4e:	4b21      	ldr	r3, [pc, #132]	; (8007ad4 <save_default_settings+0xdc>)
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	settings.Motor_Min_Limit = 0.1;
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <save_default_settings+0xe0>)
 8007a54:	633b      	str	r3, [r7, #48]	; 0x30
	settings.magValue = 400;
 8007a56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007a5a:	81bb      	strh	r3, [r7, #12]
	settings.magMinValue = 370;
 8007a5c:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8007a60:	81fb      	strh	r3, [r7, #14]
	settings.voltageMultiply = 5.0;
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <save_default_settings+0xe4>)
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
	settings.proximitySpeed = 0.80;
 8007a66:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <save_default_settings+0xcc>)
 8007a68:	64bb      	str	r3, [r7, #72]	; 0x48
	settings.movement = 0.5;
 8007a6a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8007a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	settings.motorMaxSpeed = 3360 -1;
 8007a70:	f640 531f 	movw	r3, #3359	; 0xd1f
 8007a74:	823b      	strh	r3, [r7, #16]
	settings.motorMinSpeed = 2000;
 8007a76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007a7a:	827b      	strh	r3, [r7, #18]
	settings.cutterSpeed = 3000;
 8007a7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a80:	82bb      	strh	r3, [r7, #20]
	settings.adcLevel = 2050;
 8007a82:	f640 0302 	movw	r3, #2050	; 0x802
 8007a86:	82fb      	strh	r3, [r7, #22]
	settings.move_count_limit = 5;
 8007a88:	2305      	movs	r3, #5
 8007a8a:	723b      	strb	r3, [r7, #8]
	settings.bumber_count_limit = 10;
 8007a8c:	230a      	movs	r3, #10
 8007a8e:	727b      	strb	r3, [r7, #9]
	settings.pitch_comp = 0.0;
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	657b      	str	r3, [r7, #84]	; 0x54
	settings.roll_comp = 0.0;
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50

	write_all_settings(settings);
 8007a9c:	4668      	mov	r0, sp
 8007a9e:	f107 0310 	add.w	r3, r7, #16
 8007aa2:	2248      	movs	r2, #72	; 0x48
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f007 fdb9 	bl	800f61c <memcpy>
 8007aaa:	463b      	mov	r3, r7
 8007aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007aae:	f7ff fecf 	bl	8007850 <write_all_settings>

}
 8007ab2:	bf00      	nop
 8007ab4:	3758      	adds	r7, #88	; 0x58
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	41b00000 	.word	0x41b00000
 8007ac0:	41c80000 	.word	0x41c80000
 8007ac4:	3f4ccccd 	.word	0x3f4ccccd
 8007ac8:	bf4ccccd 	.word	0xbf4ccccd
 8007acc:	3e4ccccd 	.word	0x3e4ccccd
 8007ad0:	3ecccccd 	.word	0x3ecccccd
 8007ad4:	3e99999a 	.word	0x3e99999a
 8007ad8:	3dcccccd 	.word	0x3dcccccd
 8007adc:	40a00000 	.word	0x40a00000

08007ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <HAL_MspInit+0x58>)
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <HAL_MspInit+0x58>)
 8007af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007af4:	6453      	str	r3, [r2, #68]	; 0x44
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_MspInit+0x58>)
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b02:	2300      	movs	r3, #0
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <HAL_MspInit+0x58>)
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	4a0b      	ldr	r2, [pc, #44]	; (8007b38 <HAL_MspInit+0x58>)
 8007b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b10:	6413      	str	r3, [r2, #64]	; 0x40
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <HAL_MspInit+0x58>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	2001      	movs	r0, #1
 8007b24:	f001 fc0f 	bl	8009346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8007b28:	2001      	movs	r0, #1
 8007b2a:	f001 fc28 	bl	800937e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800

08007b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08c      	sub	sp, #48	; 0x30
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b44:	f107 031c 	add.w	r3, r7, #28
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	60da      	str	r2, [r3, #12]
 8007b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a66      	ldr	r2, [pc, #408]	; (8007cf4 <HAL_ADC_MspInit+0x1b8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d160      	bne.n	8007c20 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	4b65      	ldr	r3, [pc, #404]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	4a64      	ldr	r2, [pc, #400]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b6e:	4b62      	ldr	r3, [pc, #392]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	4b5e      	ldr	r3, [pc, #376]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b82:	4a5d      	ldr	r2, [pc, #372]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b84:	f043 0304 	orr.w	r3, r3, #4
 8007b88:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8a:	4b5b      	ldr	r3, [pc, #364]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007b96:	230c      	movs	r3, #12
 8007b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ba2:	f107 031c 	add.w	r3, r7, #28
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4854      	ldr	r0, [pc, #336]	; (8007cfc <HAL_ADC_MspInit+0x1c0>)
 8007baa:	f002 f805 	bl	8009bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007bae:	4b54      	ldr	r3, [pc, #336]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bb0:	4a54      	ldr	r2, [pc, #336]	; (8007d04 <HAL_ADC_MspInit+0x1c8>)
 8007bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007bb4:	4b52      	ldr	r3, [pc, #328]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007bba:	4b51      	ldr	r3, [pc, #324]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bc0:	4b4f      	ldr	r3, [pc, #316]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007bc6:	4b4e      	ldr	r3, [pc, #312]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007bce:	4b4c      	ldr	r3, [pc, #304]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007bd6:	4b4a      	ldr	r3, [pc, #296]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007bde:	4b48      	ldr	r3, [pc, #288]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007be4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007be6:	4b46      	ldr	r3, [pc, #280]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bec:	4b44      	ldr	r3, [pc, #272]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007bf2:	4843      	ldr	r0, [pc, #268]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007bf4:	f001 fbde 	bl	80093b4 <HAL_DMA_Init>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007bfe:	f7fe fe31 	bl	8006864 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a3e      	ldr	r2, [pc, #248]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
 8007c08:	4a3d      	ldr	r2, [pc, #244]	; (8007d00 <HAL_ADC_MspInit+0x1c4>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	2012      	movs	r0, #18
 8007c14:	f001 fb97 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007c18:	2012      	movs	r0, #18
 8007c1a:	f001 fbb0 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007c1e:	e065      	b.n	8007cec <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <HAL_ADC_MspInit+0x1cc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d160      	bne.n	8007cec <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	4a31      	ldr	r2, [pc, #196]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c38:	6453      	str	r3, [r2, #68]	; 0x44
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4b2b      	ldr	r3, [pc, #172]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	4a2a      	ldr	r2, [pc, #168]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c50:	f043 0304 	orr.w	r3, r3, #4
 8007c54:	6313      	str	r3, [r2, #48]	; 0x30
 8007c56:	4b28      	ldr	r3, [pc, #160]	; (8007cf8 <HAL_ADC_MspInit+0x1bc>)
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007c62:	2303      	movs	r3, #3
 8007c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c66:	2303      	movs	r3, #3
 8007c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c6e:	f107 031c 	add.w	r3, r7, #28
 8007c72:	4619      	mov	r1, r3
 8007c74:	4821      	ldr	r0, [pc, #132]	; (8007cfc <HAL_ADC_MspInit+0x1c0>)
 8007c76:	f001 ff9f 	bl	8009bb8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8007c7a:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c7c:	4a24      	ldr	r2, [pc, #144]	; (8007d10 <HAL_ADC_MspInit+0x1d4>)
 8007c7e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007c80:	4b22      	ldr	r3, [pc, #136]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c86:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c88:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c8e:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007c94:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c9a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ca2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007caa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007cac:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cb2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007cb4:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cba:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007cc0:	4812      	ldr	r0, [pc, #72]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cc2:	f001 fb77 	bl	80093b4 <HAL_DMA_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8007ccc:	f7fe fdca 	bl	8006864 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a0e      	ldr	r2, [pc, #56]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8007cd6:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <HAL_ADC_MspInit+0x1d0>)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2012      	movs	r0, #18
 8007ce2:	f001 fb30 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007ce6:	2012      	movs	r0, #18
 8007ce8:	f001 fb49 	bl	800937e <HAL_NVIC_EnableIRQ>
}
 8007cec:	bf00      	nop
 8007cee:	3730      	adds	r7, #48	; 0x30
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40012000 	.word	0x40012000
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40020800 	.word	0x40020800
 8007d00:	200023c0 	.word	0x200023c0
 8007d04:	40026410 	.word	0x40026410
 8007d08:	40012100 	.word	0x40012100
 8007d0c:	20003200 	.word	0x20003200
 8007d10:	40026458 	.word	0x40026458

08007d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	609a      	str	r2, [r3, #8]
 8007d28:	60da      	str	r2, [r3, #12]
 8007d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <HAL_I2C_MspInit+0x84>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d12b      	bne.n	8007d8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	6313      	str	r3, [r2, #48]	; 0x30
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d52:	23c0      	movs	r3, #192	; 0xc0
 8007d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d56:	2312      	movs	r3, #18
 8007d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007d62:	2304      	movs	r3, #4
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d66:	f107 0314 	add.w	r3, r7, #20
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	480c      	ldr	r0, [pc, #48]	; (8007da0 <HAL_I2C_MspInit+0x8c>)
 8007d6e:	f001 ff23 	bl	8009bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	4a08      	ldr	r2, [pc, #32]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d80:	6413      	str	r3, [r2, #64]	; 0x40
 8007d82:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <HAL_I2C_MspInit+0x88>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007d8e:	bf00      	nop
 8007d90:	3728      	adds	r7, #40	; 0x28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	40005400 	.word	0x40005400
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	40020400 	.word	0x40020400

08007da4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <HAL_I2C_MspDeInit+0x38>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d10d      	bne.n	8007dd2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007db6:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <HAL_I2C_MspDeInit+0x3c>)
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <HAL_I2C_MspDeInit+0x3c>)
 8007dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dc0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007dc2:	2140      	movs	r1, #64	; 0x40
 8007dc4:	4807      	ldr	r0, [pc, #28]	; (8007de4 <HAL_I2C_MspDeInit+0x40>)
 8007dc6:	f002 f893 	bl	8009ef0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	4805      	ldr	r0, [pc, #20]	; (8007de4 <HAL_I2C_MspDeInit+0x40>)
 8007dce:	f002 f88f 	bl	8009ef0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40005400 	.word	0x40005400
 8007de0:	40023800 	.word	0x40023800
 8007de4:	40020400 	.word	0x40020400

08007de8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a0e      	ldr	r2, [pc, #56]	; (8007e30 <HAL_RNG_MspInit+0x48>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d115      	bne.n	8007e26 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <HAL_RNG_MspInit+0x4c>)
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <HAL_RNG_MspInit+0x4c>)
 8007e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e08:	6353      	str	r3, [r2, #52]	; 0x34
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <HAL_RNG_MspInit+0x4c>)
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2050      	movs	r0, #80	; 0x50
 8007e1c:	f001 fa93 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8007e20:	2050      	movs	r0, #80	; 0x50
 8007e22:	f001 faac 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	50060800 	.word	0x50060800
 8007e34:	40023800 	.word	0x40023800

08007e38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <HAL_RTC_MspInit+0x24>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d102      	bne.n	8007e50 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <HAL_RTC_MspInit+0x28>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	40002800 	.word	0x40002800
 8007e60:	42470e3c 	.word	0x42470e3c

08007e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e74:	d116      	bne.n	8007ea4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	4a2d      	ldr	r2, [pc, #180]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6413      	str	r3, [r2, #64]	; 0x40
 8007e86:	4b2b      	ldr	r3, [pc, #172]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e92:	2200      	movs	r2, #0
 8007e94:	2100      	movs	r1, #0
 8007e96:	201c      	movs	r0, #28
 8007e98:	f001 fa55 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e9c:	201c      	movs	r0, #28
 8007e9e:	f001 fa6e 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007ea2:	e042      	b.n	8007f2a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a23      	ldr	r2, [pc, #140]	; (8007f38 <HAL_TIM_Base_MspInit+0xd4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d10e      	bne.n	8007ecc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	4b20      	ldr	r3, [pc, #128]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	4a1f      	ldr	r2, [pc, #124]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007eb8:	f043 0302 	orr.w	r3, r3, #2
 8007ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	693b      	ldr	r3, [r7, #16]
}
 8007eca:	e02e      	b.n	8007f2a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1a      	ldr	r2, [pc, #104]	; (8007f3c <HAL_TIM_Base_MspInit+0xd8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10e      	bne.n	8007ef4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	4a15      	ldr	r2, [pc, #84]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007ee0:	f043 0304 	orr.w	r3, r3, #4
 8007ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
}
 8007ef2:	e01a      	b.n	8007f2a <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <HAL_TIM_Base_MspInit+0xdc>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d115      	bne.n	8007f2a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	4a0b      	ldr	r2, [pc, #44]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007f08:	f043 0308 	orr.w	r3, r3, #8
 8007f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_TIM_Base_MspInit+0xd0>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	2032      	movs	r0, #50	; 0x32
 8007f20:	f001 fa11 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007f24:	2032      	movs	r0, #50	; 0x32
 8007f26:	f001 fa2a 	bl	800937e <HAL_NVIC_EnableIRQ>
}
 8007f2a:	bf00      	nop
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00

08007f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f4c:	f107 0314 	add.w	r3, r7, #20
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	605a      	str	r2, [r3, #4]
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	60da      	str	r2, [r3, #12]
 8007f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <HAL_TIM_MspPostInit+0xb0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d11e      	bne.n	8007fa4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6e:	4a22      	ldr	r2, [pc, #136]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007f70:	f043 0304 	orr.w	r3, r3, #4
 8007f74:	6313      	str	r3, [r2, #48]	; 0x30
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f82:	23c0      	movs	r3, #192	; 0xc0
 8007f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f86:	2302      	movs	r3, #2
 8007f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f92:	2302      	movs	r3, #2
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f96:	f107 0314 	add.w	r3, r7, #20
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4817      	ldr	r0, [pc, #92]	; (8007ffc <HAL_TIM_MspPostInit+0xb8>)
 8007f9e:	f001 fe0b 	bl	8009bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007fa2:	e023      	b.n	8007fec <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIM_MspPostInit+0xbc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d11e      	bne.n	8007fec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	4a10      	ldr	r2, [pc, #64]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007fb8:	f043 0308 	orr.w	r3, r3, #8
 8007fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <HAL_TIM_MspPostInit+0xb4>)
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007fca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4807      	ldr	r0, [pc, #28]	; (8008004 <HAL_TIM_MspPostInit+0xc0>)
 8007fe8:	f001 fde6 	bl	8009bb8 <HAL_GPIO_Init>
}
 8007fec:	bf00      	nop
 8007fee:	3728      	adds	r7, #40	; 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40020800 	.word	0x40020800
 8008000:	40000800 	.word	0x40000800
 8008004:	40020c00 	.word	0x40020c00

08008008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08c      	sub	sp, #48	; 0x30
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008010:	f107 031c 	add.w	r3, r7, #28
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	609a      	str	r2, [r3, #8]
 800801c:	60da      	str	r2, [r3, #12]
 800801e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a68      	ldr	r2, [pc, #416]	; (80081c8 <HAL_UART_MspInit+0x1c0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d163      	bne.n	80080f2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	4b67      	ldr	r3, [pc, #412]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	4a66      	ldr	r2, [pc, #408]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008034:	f043 0310 	orr.w	r3, r3, #16
 8008038:	6453      	str	r3, [r2, #68]	; 0x44
 800803a:	4b64      	ldr	r3, [pc, #400]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	4b60      	ldr	r3, [pc, #384]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	4a5f      	ldr	r2, [pc, #380]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	6313      	str	r3, [r2, #48]	; 0x30
 8008056:	4b5d      	ldr	r3, [pc, #372]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008062:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008068:	2302      	movs	r3, #2
 800806a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806c:	2300      	movs	r3, #0
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008070:	2303      	movs	r3, #3
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008074:	2307      	movs	r3, #7
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008078:	f107 031c 	add.w	r3, r7, #28
 800807c:	4619      	mov	r1, r3
 800807e:	4854      	ldr	r0, [pc, #336]	; (80081d0 <HAL_UART_MspInit+0x1c8>)
 8008080:	f001 fd9a 	bl	8009bb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008084:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 8008086:	4a54      	ldr	r2, [pc, #336]	; (80081d8 <HAL_UART_MspInit+0x1d0>)
 8008088:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800808a:	4b52      	ldr	r3, [pc, #328]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 800808c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008090:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008092:	4b50      	ldr	r3, [pc, #320]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 8008094:	2200      	movs	r2, #0
 8008096:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008098:	4b4e      	ldr	r3, [pc, #312]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 800809a:	2200      	movs	r2, #0
 800809c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800809e:	4b4d      	ldr	r3, [pc, #308]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80080a6:	4b4b      	ldr	r3, [pc, #300]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80080ac:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80080b2:	4b48      	ldr	r3, [pc, #288]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80080b8:	4b46      	ldr	r3, [pc, #280]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80080be:	4b45      	ldr	r3, [pc, #276]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80080c4:	4843      	ldr	r0, [pc, #268]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080c6:	f001 f975 	bl	80093b4 <HAL_DMA_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80080d0:	f7fe fbc8 	bl	8006864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a3f      	ldr	r2, [pc, #252]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
 80080da:	4a3e      	ldr	r2, [pc, #248]	; (80081d4 <HAL_UART_MspInit+0x1cc>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	2025      	movs	r0, #37	; 0x25
 80080e6:	f001 f92e 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80080ea:	2025      	movs	r0, #37	; 0x25
 80080ec:	f001 f947 	bl	800937e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80080f0:	e066      	b.n	80081c0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a39      	ldr	r2, [pc, #228]	; (80081dc <HAL_UART_MspInit+0x1d4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d161      	bne.n	80081c0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	4b32      	ldr	r3, [pc, #200]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	4a31      	ldr	r2, [pc, #196]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800810a:	6413      	str	r3, [r2, #64]	; 0x40
 800810c:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	4b2b      	ldr	r3, [pc, #172]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6313      	str	r3, [r2, #48]	; 0x30
 8008128:	4b28      	ldr	r3, [pc, #160]	; (80081cc <HAL_UART_MspInit+0x1c4>)
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008134:	230c      	movs	r3, #12
 8008136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008138:	2302      	movs	r3, #2
 800813a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008140:	2303      	movs	r3, #3
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008144:	2307      	movs	r3, #7
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008148:	f107 031c 	add.w	r3, r7, #28
 800814c:	4619      	mov	r1, r3
 800814e:	4820      	ldr	r0, [pc, #128]	; (80081d0 <HAL_UART_MspInit+0x1c8>)
 8008150:	f001 fd32 	bl	8009bb8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008156:	4a23      	ldr	r2, [pc, #140]	; (80081e4 <HAL_UART_MspInit+0x1dc>)
 8008158:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 800815c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008160:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008162:	4b1f      	ldr	r3, [pc, #124]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008164:	2200      	movs	r2, #0
 8008166:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 800816a:	2200      	movs	r2, #0
 800816c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800816e:	4b1c      	ldr	r3, [pc, #112]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008174:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008176:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008178:	2200      	movs	r2, #0
 800817a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800817c:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 800817e:	2200      	movs	r2, #0
 8008180:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008182:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008184:	2200      	movs	r2, #0
 8008186:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008188:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 800818a:	2200      	movs	r2, #0
 800818c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008190:	2200      	movs	r2, #0
 8008192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008194:	4812      	ldr	r0, [pc, #72]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 8008196:	f001 f90d 	bl	80093b4 <HAL_DMA_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80081a0:	f7fe fb60 	bl	8006864 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
 80081aa:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <HAL_UART_MspInit+0x1d8>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	2026      	movs	r0, #38	; 0x26
 80081b6:	f001 f8c6 	bl	8009346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80081ba:	2026      	movs	r0, #38	; 0x26
 80081bc:	f001 f8df 	bl	800937e <HAL_NVIC_EnableIRQ>
}
 80081c0:	bf00      	nop
 80081c2:	3730      	adds	r7, #48	; 0x30
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40011000 	.word	0x40011000
 80081cc:	40023800 	.word	0x40023800
 80081d0:	40020000 	.word	0x40020000
 80081d4:	20001ef4 	.word	0x20001ef4
 80081d8:	40026440 	.word	0x40026440
 80081dc:	40004400 	.word	0x40004400
 80081e0:	20000b70 	.word	0x20000b70
 80081e4:	40026088 	.word	0x40026088

080081e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80081ec:	e7fe      	b.n	80081ec <NMI_Handler+0x4>

080081ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081ee:	b480      	push	{r7}
 80081f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081f2:	e7fe      	b.n	80081f2 <HardFault_Handler+0x4>

080081f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081f8:	e7fe      	b.n	80081f8 <MemManage_Handler+0x4>

080081fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081fa:	b480      	push	{r7}
 80081fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081fe:	e7fe      	b.n	80081fe <BusFault_Handler+0x4>

08008200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008204:	e7fe      	b.n	8008204 <UsageFault_Handler+0x4>

08008206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008222:	b480      	push	{r7}
 8008224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008226:	bf00      	nop
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008234:	f000 fa0c 	bl	8008650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008238:	bf00      	nop
 800823a:	bd80      	pop	{r7, pc}

0800823c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8008240:	f003 fc4e 	bl	800bae0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8008244:	bf00      	nop
 8008246:	bd80      	pop	{r7, pc}

08008248 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800824c:	4802      	ldr	r0, [pc, #8]	; (8008258 <DMA1_Stream5_IRQHandler+0x10>)
 800824e:	f001 fa49 	bl	80096e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008252:	bf00      	nop
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000b70 	.word	0x20000b70

0800825c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008260:	4803      	ldr	r0, [pc, #12]	; (8008270 <ADC_IRQHandler+0x14>)
 8008262:	f000 fa7c 	bl	800875e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008266:	4803      	ldr	r0, [pc, #12]	; (8008274 <ADC_IRQHandler+0x18>)
 8008268:	f000 fa79 	bl	800875e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800826c:	bf00      	nop
 800826e:	bd80      	pop	{r7, pc}
 8008270:	200016ac 	.word	0x200016ac
 8008274:	20000d18 	.word	0x20000d18

08008278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800827c:	4802      	ldr	r0, [pc, #8]	; (8008288 <TIM2_IRQHandler+0x10>)
 800827e:	f005 f837 	bl	800d2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20003174 	.word	0x20003174

0800828c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008290:	4807      	ldr	r0, [pc, #28]	; (80082b0 <USART1_IRQHandler+0x24>)
 8008292:	f005 ffe9 	bl	800e268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <USART1_IRQHandler+0x24>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d102      	bne.n	80082aa <USART1_IRQHandler+0x1e>
	  HAL_UART_RxCpltCallback(&huart1);
 80082a4:	4802      	ldr	r0, [pc, #8]	; (80082b0 <USART1_IRQHandler+0x24>)
 80082a6:	f7fe fa95 	bl	80067d4 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20002354 	.word	0x20002354

080082b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80082b8:	4807      	ldr	r0, [pc, #28]	; (80082d8 <USART2_IRQHandler+0x24>)
 80082ba:	f005 ffd5 	bl	800e268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <USART2_IRQHandler+0x24>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b10      	cmp	r3, #16
 80082ca:	d102      	bne.n	80082d2 <USART2_IRQHandler+0x1e>
	  HAL_UART_RxCpltCallback(&huart2);
 80082cc:	4802      	ldr	r0, [pc, #8]	; (80082d8 <USART2_IRQHandler+0x24>)
 80082ce:	f7fe fa81 	bl	80067d4 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 80082d2:	bf00      	nop
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200031bc 	.word	0x200031bc

080082dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80082e0:	4802      	ldr	r0, [pc, #8]	; (80082ec <TIM5_IRQHandler+0x10>)
 80082e2:	f005 f805 	bl	800d2f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20001204 	.word	0x20001204

080082f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80082f4:	4802      	ldr	r0, [pc, #8]	; (8008300 <DMA2_Stream0_IRQHandler+0x10>)
 80082f6:	f001 f9f5 	bl	80096e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200023c0 	.word	0x200023c0

08008304 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008308:	4802      	ldr	r0, [pc, #8]	; (8008314 <DMA2_Stream2_IRQHandler+0x10>)
 800830a:	f001 f9eb 	bl	80096e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800830e:	bf00      	nop
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001ef4 	.word	0x20001ef4

08008318 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800831c:	4802      	ldr	r0, [pc, #8]	; (8008328 <DMA2_Stream3_IRQHandler+0x10>)
 800831e:	f001 f9e1 	bl	80096e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008322:	bf00      	nop
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20003200 	.word	0x20003200

0800832c <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8008330:	4802      	ldr	r0, [pc, #8]	; (800833c <HASH_RNG_IRQHandler+0x10>)
 8008332:	f004 f9f7 	bl	800c724 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8008336:	bf00      	nop
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20002974 	.word	0x20002974

08008340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
	return 1;
 8008344:	2301      	movs	r3, #1
}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <_kill>:

int _kill(int pid, int sig)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800835a:	f007 f935 	bl	800f5c8 <__errno>
 800835e:	4603      	mov	r3, r0
 8008360:	2216      	movs	r2, #22
 8008362:	601a      	str	r2, [r3, #0]
	return -1;
 8008364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_exit>:

void _exit (int status)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008378:	f04f 31ff 	mov.w	r1, #4294967295
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ffe7 	bl	8008350 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008382:	e7fe      	b.n	8008382 <_exit+0x12>

08008384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e00a      	b.n	80083ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008396:	f3af 8000 	nop.w
 800839a:	4601      	mov	r1, r0
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	60ba      	str	r2, [r7, #8]
 80083a2:	b2ca      	uxtb	r2, r1
 80083a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	dbf0      	blt.n	8008396 <_read+0x12>
	}

return len;
 80083b4:	687b      	ldr	r3, [r7, #4]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e009      	b.n	80083e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	60ba      	str	r2, [r7, #8]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	3301      	adds	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	dbf1      	blt.n	80083d0 <_write+0x12>
	}
	return len;
 80083ec:	687b      	ldr	r3, [r7, #4]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <_close>:

int _close(int file)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
	return -1;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800841e:	605a      	str	r2, [r3, #4]
	return 0;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <_isatty>:

int _isatty(int file)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
	return 1;
 8008436:	2301      	movs	r3, #1
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	return 0;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008468:	4a14      	ldr	r2, [pc, #80]	; (80084bc <_sbrk+0x5c>)
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <_sbrk+0x60>)
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008474:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <_sbrk+0x64>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <_sbrk+0x64>)
 800847e:	4a12      	ldr	r2, [pc, #72]	; (80084c8 <_sbrk+0x68>)
 8008480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <_sbrk+0x64>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	429a      	cmp	r2, r3
 800848e:	d207      	bcs.n	80084a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008490:	f007 f89a 	bl	800f5c8 <__errno>
 8008494:	4603      	mov	r3, r0
 8008496:	220c      	movs	r2, #12
 8008498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e009      	b.n	80084b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084a0:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <_sbrk+0x64>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <_sbrk+0x64>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	4a05      	ldr	r2, [pc, #20]	; (80084c4 <_sbrk+0x64>)
 80084b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084b2:	68fb      	ldr	r3, [r7, #12]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20020000 	.word	0x20020000
 80084c0:	00000400 	.word	0x00000400
 80084c4:	20000a5c 	.word	0x20000a5c
 80084c8:	20003288 	.word	0x20003288

080084cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084d0:	4b06      	ldr	r3, [pc, #24]	; (80084ec <SystemInit+0x20>)
 80084d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d6:	4a05      	ldr	r2, [pc, #20]	; (80084ec <SystemInit+0x20>)
 80084d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	e000ed00 	.word	0xe000ed00

080084f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80084f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084f4:	480d      	ldr	r0, [pc, #52]	; (800852c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80084f6:	490e      	ldr	r1, [pc, #56]	; (8008530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80084f8:	4a0e      	ldr	r2, [pc, #56]	; (8008534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80084fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084fc:	e002      	b.n	8008504 <LoopCopyDataInit>

080084fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008502:	3304      	adds	r3, #4

08008504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008508:	d3f9      	bcc.n	80084fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800850a:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800850c:	4c0b      	ldr	r4, [pc, #44]	; (800853c <LoopFillZerobss+0x26>)
  movs r3, #0
 800850e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008510:	e001      	b.n	8008516 <LoopFillZerobss>

08008512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008514:	3204      	adds	r2, #4

08008516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008518:	d3fb      	bcc.n	8008512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800851a:	f7ff ffd7 	bl	80084cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800851e:	f007 f859 	bl	800f5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008522:	f7fd faf5 	bl	8005b10 <main>
  bx  lr    
 8008526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800852c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008530:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 8008534:	08016f48 	.word	0x08016f48
  ldr r2, =_sbss
 8008538:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 800853c:	20003284 	.word	0x20003284

08008540 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008540:	e7fe      	b.n	8008540 <CAN1_RX0_IRQHandler>
	...

08008544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <HAL_Init+0x40>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <HAL_Init+0x40>)
 800854e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008554:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <HAL_Init+0x40>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a0a      	ldr	r2, [pc, #40]	; (8008584 <HAL_Init+0x40>)
 800855a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800855e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <HAL_Init+0x40>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a07      	ldr	r2, [pc, #28]	; (8008584 <HAL_Init+0x40>)
 8008566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800856c:	2003      	movs	r0, #3
 800856e:	f000 fedf 	bl	8009330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008572:	2000      	movs	r0, #0
 8008574:	f000 f83c 	bl	80085f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008578:	f7ff fab2 	bl	8007ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40023c00 	.word	0x40023c00

08008588 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800858c:	4b13      	ldr	r3, [pc, #76]	; (80085dc <HAL_DeInit+0x54>)
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008594:	4b11      	ldr	r3, [pc, #68]	; (80085dc <HAL_DeInit+0x54>)
 8008596:	2200      	movs	r2, #0
 8008598:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <HAL_DeInit+0x54>)
 800859c:	f04f 32ff 	mov.w	r2, #4294967295
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80085a2:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <HAL_DeInit+0x54>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <HAL_DeInit+0x54>)
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <HAL_DeInit+0x54>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <HAL_DeInit+0x54>)
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <HAL_DeInit+0x54>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_DeInit+0x54>)
 80085c6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ca:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80085cc:	4b03      	ldr	r3, [pc, #12]	; (80085dc <HAL_DeInit+0x54>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80085d2:	f000 f805 	bl	80085e0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800

080085e0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_InitTick+0x54>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <HAL_InitTick+0x58>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008606:	fbb3 f3f1 	udiv	r3, r3, r1
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fec3 	bl	800939a <HAL_SYSTICK_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e00e      	b.n	800863c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b0f      	cmp	r3, #15
 8008622:	d80a      	bhi.n	800863a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008624:	2200      	movs	r2, #0
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	f000 fe8b 	bl	8009346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008630:	4a06      	ldr	r2, [pc, #24]	; (800864c <HAL_InitTick+0x5c>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20000268 	.word	0x20000268
 8008648:	20000270 	.word	0x20000270
 800864c:	2000026c 	.word	0x2000026c

08008650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <HAL_IncTick+0x20>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	4b06      	ldr	r3, [pc, #24]	; (8008674 <HAL_IncTick+0x24>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4413      	add	r3, r2
 8008660:	4a04      	ldr	r2, [pc, #16]	; (8008674 <HAL_IncTick+0x24>)
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20000270 	.word	0x20000270
 8008674:	20003270 	.word	0x20003270

08008678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  return uwTick;
 800867c:	4b03      	ldr	r3, [pc, #12]	; (800868c <HAL_GetTick+0x14>)
 800867e:	681b      	ldr	r3, [r3, #0]
}
 8008680:	4618      	mov	r0, r3
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20003270 	.word	0x20003270

08008690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008698:	f7ff ffee 	bl	8008678 <HAL_GetTick>
 800869c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d005      	beq.n	80086b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <HAL_Delay+0x44>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80086b6:	bf00      	nop
 80086b8:	f7ff ffde 	bl	8008678 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d8f7      	bhi.n	80086b8 <HAL_Delay+0x28>
  {
  }
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000270 	.word	0x20000270

080086d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e033      	b.n	8008756 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fa20 	bl	8007b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b00      	cmp	r3, #0
 8008714:	d118      	bne.n	8008748 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800871e:	f023 0302 	bic.w	r3, r3, #2
 8008722:	f043 0202 	orr.w	r2, r3, #2
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fba8 	bl	8008e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	f043 0201 	orr.w	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	641a      	str	r2, [r3, #64]	; 0x40
 8008746:	e001      	b.n	800874c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	2300      	movs	r3, #0
 800876c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	bf0c      	ite	eq
 800877c:	2301      	moveq	r3, #1
 800877e:	2300      	movne	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b20      	cmp	r3, #32
 8008790:	bf0c      	ite	eq
 8008792:	2301      	moveq	r3, #1
 8008794:	2300      	movne	r3, #0
 8008796:	b2db      	uxtb	r3, r3
 8008798:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d049      	beq.n	8008834 <HAL_ADC_IRQHandler+0xd6>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d046      	beq.n	8008834 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d12b      	bne.n	8008824 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d127      	bne.n	8008824 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d006      	beq.n	80087f0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d119      	bne.n	8008824 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0220 	bic.w	r2, r2, #32
 80087fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d105      	bne.n	8008824 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	f043 0201 	orr.w	r2, r3, #1
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fd ffcb 	bl	80067c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f06f 0212 	mvn.w	r2, #18
 8008832:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b04      	cmp	r3, #4
 8008840:	bf0c      	ite	eq
 8008842:	2301      	moveq	r3, #1
 8008844:	2300      	movne	r3, #0
 8008846:	b2db      	uxtb	r3, r3
 8008848:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008854:	2b80      	cmp	r3, #128	; 0x80
 8008856:	bf0c      	ite	eq
 8008858:	2301      	moveq	r3, #1
 800885a:	2300      	movne	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d057      	beq.n	8008916 <HAL_ADC_IRQHandler+0x1b8>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d054      	beq.n	8008916 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d105      	bne.n	8008884 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d139      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d12b      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d124      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d11d      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d119      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	f043 0201 	orr.w	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fc38 	bl	800917c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 020c 	mvn.w	r2, #12
 8008914:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b01      	cmp	r3, #1
 8008922:	bf0c      	ite	eq
 8008924:	2301      	moveq	r3, #1
 8008926:	2300      	movne	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b40      	cmp	r3, #64	; 0x40
 8008938:	bf0c      	ite	eq
 800893a:	2301      	moveq	r3, #1
 800893c:	2300      	movne	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d017      	beq.n	8008978 <HAL_ADC_IRQHandler+0x21a>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d014      	beq.n	8008978 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10d      	bne.n	8008978 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f953 	bl	8008c14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f06f 0201 	mvn.w	r2, #1
 8008976:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	bf0c      	ite	eq
 8008986:	2301      	moveq	r3, #1
 8008988:	2300      	movne	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800899c:	bf0c      	ite	eq
 800899e:	2301      	moveq	r3, #1
 80089a0:	2300      	movne	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d015      	beq.n	80089d8 <HAL_ADC_IRQHandler+0x27a>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d012      	beq.n	80089d8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	f043 0202 	orr.w	r2, r3, #2
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f06f 0220 	mvn.w	r2, #32
 80089c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f92d 	bl	8008c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f06f 0220 	mvn.w	r2, #32
 80089d6:	601a      	str	r2, [r3, #0]
  }
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_ADC_Start_DMA+0x1e>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e0e9      	b.n	8008bd2 <HAL_ADC_Start_DMA+0x1f2>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d018      	beq.n	8008a46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0201 	orr.w	r2, r2, #1
 8008a22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008a24:	4b6d      	ldr	r3, [pc, #436]	; (8008bdc <HAL_ADC_Start_DMA+0x1fc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a6d      	ldr	r2, [pc, #436]	; (8008be0 <HAL_ADC_Start_DMA+0x200>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0c9a      	lsrs	r2, r3, #18
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008a38:	e002      	b.n	8008a40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f9      	bne.n	8008a3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a54:	d107      	bne.n	8008a66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f040 80a1 	bne.w	8008bb8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008aa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab4:	d106      	bne.n	8008ac4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aba:	f023 0206 	bic.w	r2, r3, #6
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8008ac2:	e002      	b.n	8008aca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ad2:	4b44      	ldr	r3, [pc, #272]	; (8008be4 <HAL_ADC_Start_DMA+0x204>)
 8008ad4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	4a43      	ldr	r2, [pc, #268]	; (8008be8 <HAL_ADC_Start_DMA+0x208>)
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	4a42      	ldr	r2, [pc, #264]	; (8008bec <HAL_ADC_Start_DMA+0x20c>)
 8008ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aea:	4a41      	ldr	r2, [pc, #260]	; (8008bf0 <HAL_ADC_Start_DMA+0x210>)
 8008aec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008af6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008b06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	334c      	adds	r3, #76	; 0x4c
 8008b22:	4619      	mov	r1, r3
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f000 fcf2 	bl	8009510 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f003 031f 	and.w	r3, r3, #31
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d12a      	bne.n	8008b8e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a2d      	ldr	r2, [pc, #180]	; (8008bf4 <HAL_ADC_Start_DMA+0x214>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d015      	beq.n	8008b6e <HAL_ADC_Start_DMA+0x18e>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <HAL_ADC_Start_DMA+0x218>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d105      	bne.n	8008b58 <HAL_ADC_Start_DMA+0x178>
 8008b4c:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <HAL_ADC_Start_DMA+0x204>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <HAL_ADC_Start_DMA+0x21c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d136      	bne.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
 8008b62:	4b20      	ldr	r3, [pc, #128]	; (8008be4 <HAL_ADC_Start_DMA+0x204>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d130      	bne.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d129      	bne.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	e020      	b.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a18      	ldr	r2, [pc, #96]	; (8008bf4 <HAL_ADC_Start_DMA+0x214>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d11b      	bne.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d114      	bne.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008bb4:	609a      	str	r2, [r3, #8]
 8008bb6:	e00b      	b.n	8008bd0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	f043 0210 	orr.w	r2, r3, #16
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc8:	f043 0201 	orr.w	r2, r3, #1
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000268 	.word	0x20000268
 8008be0:	431bde83 	.word	0x431bde83
 8008be4:	40012300 	.word	0x40012300
 8008be8:	08009079 	.word	0x08009079
 8008bec:	08009133 	.word	0x08009133
 8008bf0:	0800914f 	.word	0x0800914f
 8008bf4:	40012000 	.word	0x40012000
 8008bf8:	40012100 	.word	0x40012100
 8008bfc:	40012200 	.word	0x40012200

08008c00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_ADC_ConfigChannel+0x1c>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e105      	b.n	8008e64 <HAL_ADC_ConfigChannel+0x228>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d925      	bls.n	8008cb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68d9      	ldr	r1, [r3, #12]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	4613      	mov	r3, r2
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3b1e      	subs	r3, #30
 8008c7e:	2207      	movs	r2, #7
 8008c80:	fa02 f303 	lsl.w	r3, r2, r3
 8008c84:	43da      	mvns	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	400a      	ands	r2, r1
 8008c8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68d9      	ldr	r1, [r3, #12]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	4403      	add	r3, r0
 8008ca6:	3b1e      	subs	r3, #30
 8008ca8:	409a      	lsls	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	e022      	b.n	8008cfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6919      	ldr	r1, [r3, #16]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	4413      	add	r3, r2
 8008cc8:	2207      	movs	r2, #7
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43da      	mvns	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6919      	ldr	r1, [r3, #16]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4618      	mov	r0, r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	4403      	add	r3, r0
 8008cf0:	409a      	lsls	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d824      	bhi.n	8008d4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	3b05      	subs	r3, #5
 8008d14:	221f      	movs	r2, #31
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	43da      	mvns	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	400a      	ands	r2, r1
 8008d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	4618      	mov	r0, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3b05      	subs	r3, #5
 8008d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	635a      	str	r2, [r3, #52]	; 0x34
 8008d4a:	e04c      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b0c      	cmp	r3, #12
 8008d52:	d824      	bhi.n	8008d9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	3b23      	subs	r3, #35	; 0x23
 8008d66:	221f      	movs	r2, #31
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	43da      	mvns	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	400a      	ands	r2, r1
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	4618      	mov	r0, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3b23      	subs	r3, #35	; 0x23
 8008d90:	fa00 f203 	lsl.w	r2, r0, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d9c:	e023      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	3b41      	subs	r3, #65	; 0x41
 8008db0:	221f      	movs	r2, #31
 8008db2:	fa02 f303 	lsl.w	r3, r2, r3
 8008db6:	43da      	mvns	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	400a      	ands	r2, r1
 8008dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	4618      	mov	r0, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3b41      	subs	r3, #65	; 0x41
 8008dda:	fa00 f203 	lsl.w	r2, r0, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008de6:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <HAL_ADC_ConfigChannel+0x234>)
 8008de8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a21      	ldr	r2, [pc, #132]	; (8008e74 <HAL_ADC_ConfigChannel+0x238>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d109      	bne.n	8008e08 <HAL_ADC_ConfigChannel+0x1cc>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b12      	cmp	r3, #18
 8008dfa:	d105      	bne.n	8008e08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a19      	ldr	r2, [pc, #100]	; (8008e74 <HAL_ADC_ConfigChannel+0x238>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d123      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x21e>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d003      	beq.n	8008e22 <HAL_ADC_ConfigChannel+0x1e6>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b11      	cmp	r3, #17
 8008e20:	d11b      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d111      	bne.n	8008e5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <HAL_ADC_ConfigChannel+0x23c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <HAL_ADC_ConfigChannel+0x240>)
 8008e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e40:	0c9a      	lsrs	r2, r3, #18
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008e4c:	e002      	b.n	8008e54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1f9      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	40012300 	.word	0x40012300
 8008e74:	40012000 	.word	0x40012000
 8008e78:	20000268 	.word	0x20000268
 8008e7c:	431bde83 	.word	0x431bde83

08008e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e88:	4b79      	ldr	r3, [pc, #484]	; (8009070 <ADC_Init+0x1f0>)
 8008e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6859      	ldr	r1, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	021a      	lsls	r2, r3, #8
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6899      	ldr	r1, [r3, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	4a58      	ldr	r2, [pc, #352]	; (8009074 <ADC_Init+0x1f4>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d022      	beq.n	8008f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6899      	ldr	r1, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6899      	ldr	r1, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
 8008f5c:	e00f      	b.n	8008f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0202 	bic.w	r2, r2, #2
 8008f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6899      	ldr	r1, [r3, #8]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7e1b      	ldrb	r3, [r3, #24]
 8008f98:	005a      	lsls	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01b      	beq.n	8008fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6859      	ldr	r1, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	035a      	lsls	r2, r3, #13
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
 8008fe2:	e007      	b.n	8008ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	3b01      	subs	r3, #1
 8009010:	051a      	lsls	r2, r3, #20
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6899      	ldr	r1, [r3, #8]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009036:	025a      	lsls	r2, r3, #9
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6899      	ldr	r1, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	029a      	lsls	r2, r3, #10
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	609a      	str	r2, [r3, #8]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	40012300 	.word	0x40012300
 8009074:	0f000001 	.word	0x0f000001

08009078 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800908e:	2b00      	cmp	r3, #0
 8009090:	d13c      	bne.n	800910c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d12b      	bne.n	8009104 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d127      	bne.n	8009104 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d006      	beq.n	80090d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d119      	bne.n	8009104 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0220 	bic.w	r2, r2, #32
 80090de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	f043 0201 	orr.w	r2, r3, #1
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7fd fb5b 	bl	80067c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800910a:	e00e      	b.n	800912a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fd85 	bl	8008c28 <HAL_ADC_ErrorCallback>
}
 800911e:	e004      	b.n	800912a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
}
 800912a:	bf00      	nop
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f7ff fd5d 	bl	8008c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2240      	movs	r2, #64	; 0x40
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	f043 0204 	orr.w	r2, r3, #4
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fd5a 	bl	8008c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009174:	bf00      	nop
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <__NVIC_SetPriorityGrouping>:
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <__NVIC_SetPriorityGrouping+0x44>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091ac:	4013      	ands	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80091bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091c2:	4a04      	ldr	r2, [pc, #16]	; (80091d4 <__NVIC_SetPriorityGrouping+0x44>)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	60d3      	str	r3, [r2, #12]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	e000ed00 	.word	0xe000ed00

080091d8 <__NVIC_GetPriorityGrouping>:
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091dc:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <__NVIC_GetPriorityGrouping+0x18>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	f003 0307 	and.w	r3, r3, #7
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	e000ed00 	.word	0xe000ed00

080091f4 <__NVIC_EnableIRQ>:
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	db0b      	blt.n	800921e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	f003 021f 	and.w	r2, r3, #31
 800920c:	4907      	ldr	r1, [pc, #28]	; (800922c <__NVIC_EnableIRQ+0x38>)
 800920e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	2001      	movs	r0, #1
 8009216:	fa00 f202 	lsl.w	r2, r0, r2
 800921a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	e000e100 	.word	0xe000e100

08009230 <__NVIC_SetPriority>:
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800923c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009240:	2b00      	cmp	r3, #0
 8009242:	db0a      	blt.n	800925a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	490c      	ldr	r1, [pc, #48]	; (800927c <__NVIC_SetPriority+0x4c>)
 800924a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924e:	0112      	lsls	r2, r2, #4
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	440b      	add	r3, r1
 8009254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009258:	e00a      	b.n	8009270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	4908      	ldr	r1, [pc, #32]	; (8009280 <__NVIC_SetPriority+0x50>)
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	3b04      	subs	r3, #4
 8009268:	0112      	lsls	r2, r2, #4
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	440b      	add	r3, r1
 800926e:	761a      	strb	r2, [r3, #24]
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	e000e100 	.word	0xe000e100
 8009280:	e000ed00 	.word	0xe000ed00

08009284 <NVIC_EncodePriority>:
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	; 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f1c3 0307 	rsb	r3, r3, #7
 800929e:	2b04      	cmp	r3, #4
 80092a0:	bf28      	it	cs
 80092a2:	2304      	movcs	r3, #4
 80092a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3304      	adds	r3, #4
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d902      	bls.n	80092b4 <NVIC_EncodePriority+0x30>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3b03      	subs	r3, #3
 80092b2:	e000      	b.n	80092b6 <NVIC_EncodePriority+0x32>
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	fa02 f303 	lsl.w	r3, r2, r3
 80092c2:	43da      	mvns	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	401a      	ands	r2, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092cc:	f04f 31ff 	mov.w	r1, #4294967295
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	fa01 f303 	lsl.w	r3, r1, r3
 80092d6:	43d9      	mvns	r1, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092dc:	4313      	orrs	r3, r2
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3724      	adds	r7, #36	; 0x24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092fc:	d301      	bcc.n	8009302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80092fe:	2301      	movs	r3, #1
 8009300:	e00f      	b.n	8009322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009302:	4a0a      	ldr	r2, [pc, #40]	; (800932c <SysTick_Config+0x40>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3b01      	subs	r3, #1
 8009308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800930a:	210f      	movs	r1, #15
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	f7ff ff8e 	bl	8009230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <SysTick_Config+0x40>)
 8009316:	2200      	movs	r2, #0
 8009318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800931a:	4b04      	ldr	r3, [pc, #16]	; (800932c <SysTick_Config+0x40>)
 800931c:	2207      	movs	r2, #7
 800931e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	e000e010 	.word	0xe000e010

08009330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ff29 	bl	8009190 <__NVIC_SetPriorityGrouping>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	4603      	mov	r3, r0
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009358:	f7ff ff3e 	bl	80091d8 <__NVIC_GetPriorityGrouping>
 800935c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	6978      	ldr	r0, [r7, #20]
 8009364:	f7ff ff8e 	bl	8009284 <NVIC_EncodePriority>
 8009368:	4602      	mov	r2, r0
 800936a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff ff5d 	bl	8009230 <__NVIC_SetPriority>
}
 8009376:	bf00      	nop
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	4603      	mov	r3, r0
 8009386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff ff31 	bl	80091f4 <__NVIC_EnableIRQ>
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff ffa2 	bl	80092ec <SysTick_Config>
 80093a8:	4603      	mov	r3, r0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80093c0:	f7ff f95a 	bl	8008678 <HAL_GetTick>
 80093c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e099      	b.n	8009504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0201 	bic.w	r2, r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093f0:	e00f      	b.n	8009412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80093f2:	f7ff f941 	bl	8008678 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b05      	cmp	r3, #5
 80093fe:	d908      	bls.n	8009412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2203      	movs	r2, #3
 800940a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e078      	b.n	8009504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e8      	bne.n	80093f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4b38      	ldr	r3, [pc, #224]	; (800950c <HAL_DMA_Init+0x158>)
 800942c:	4013      	ands	r3, r2
 800942e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800943e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800944a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2b04      	cmp	r3, #4
 800946a:	d107      	bne.n	800947c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	4313      	orrs	r3, r2
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d117      	bne.n	80094d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fb01 	bl	8009ac0 <DMA_CheckFifoParam>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d008      	beq.n	80094d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2240      	movs	r2, #64	; 0x40
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80094d2:	2301      	movs	r3, #1
 80094d4:	e016      	b.n	8009504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fab8 	bl	8009a54 <DMA_CalcBaseAndBitshift>
 80094e4:	4603      	mov	r3, r0
 80094e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ec:	223f      	movs	r2, #63	; 0x3f
 80094ee:	409a      	lsls	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	f010803f 	.word	0xf010803f

08009510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800952e:	2b01      	cmp	r3, #1
 8009530:	d101      	bne.n	8009536 <HAL_DMA_Start_IT+0x26>
 8009532:	2302      	movs	r3, #2
 8009534:	e040      	b.n	80095b8 <HAL_DMA_Start_IT+0xa8>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b01      	cmp	r3, #1
 8009548:	d12f      	bne.n	80095aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2202      	movs	r2, #2
 800954e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fa4a 	bl	80099f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	223f      	movs	r2, #63	; 0x3f
 800956a:	409a      	lsls	r2, r3
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0216 	orr.w	r2, r2, #22
 800957e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0208 	orr.w	r2, r2, #8
 8009596:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	e005      	b.n	80095b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80095b2:	2302      	movs	r3, #2
 80095b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80095ce:	f7ff f853 	bl	8008678 <HAL_GetTick>
 80095d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d008      	beq.n	80095f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2280      	movs	r2, #128	; 0x80
 80095e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e052      	b.n	8009698 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0216 	bic.w	r2, r2, #22
 8009600:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	695a      	ldr	r2, [r3, #20]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009610:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <HAL_DMA_Abort+0x62>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961e:	2b00      	cmp	r3, #0
 8009620:	d007      	beq.n	8009632 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0208 	bic.w	r2, r2, #8
 8009630:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0201 	bic.w	r2, r2, #1
 8009640:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009642:	e013      	b.n	800966c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009644:	f7ff f818 	bl	8008678 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b05      	cmp	r3, #5
 8009650:	d90c      	bls.n	800966c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2203      	movs	r2, #3
 8009664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e015      	b.n	8009698 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e4      	bne.n	8009644 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800967e:	223f      	movs	r2, #63	; 0x3f
 8009680:	409a      	lsls	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d004      	beq.n	80096be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2280      	movs	r2, #128	; 0x80
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e00c      	b.n	80096d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2205      	movs	r2, #5
 80096c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80096f0:	4b92      	ldr	r3, [pc, #584]	; (800993c <HAL_DMA_IRQHandler+0x258>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a92      	ldr	r2, [pc, #584]	; (8009940 <HAL_DMA_IRQHandler+0x25c>)
 80096f6:	fba2 2303 	umull	r2, r3, r2, r3
 80096fa:	0a9b      	lsrs	r3, r3, #10
 80096fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009702:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800970e:	2208      	movs	r2, #8
 8009710:	409a      	lsls	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4013      	ands	r3, r2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01a      	beq.n	8009750 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d013      	beq.n	8009750 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0204 	bic.w	r2, r2, #4
 8009736:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973c:	2208      	movs	r2, #8
 800973e:	409a      	lsls	r2, r3
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	f043 0201 	orr.w	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009754:	2201      	movs	r2, #1
 8009756:	409a      	lsls	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d012      	beq.n	8009786 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009772:	2201      	movs	r2, #1
 8009774:	409a      	lsls	r2, r3
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	f043 0202 	orr.w	r2, r3, #2
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978a:	2204      	movs	r2, #4
 800978c:	409a      	lsls	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4013      	ands	r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d012      	beq.n	80097bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a8:	2204      	movs	r2, #4
 80097aa:	409a      	lsls	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	f043 0204 	orr.w	r2, r3, #4
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c0:	2210      	movs	r2, #16
 80097c2:	409a      	lsls	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4013      	ands	r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d043      	beq.n	8009854 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0308 	and.w	r3, r3, #8
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d03c      	beq.n	8009854 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097de:	2210      	movs	r2, #16
 80097e0:	409a      	lsls	r2, r3
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d018      	beq.n	8009826 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d108      	bne.n	8009814 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d024      	beq.n	8009854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
 8009812:	e01f      	b.n	8009854 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009818:	2b00      	cmp	r3, #0
 800981a:	d01b      	beq.n	8009854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	4798      	blx	r3
 8009824:	e016      	b.n	8009854 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009830:	2b00      	cmp	r3, #0
 8009832:	d107      	bne.n	8009844 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0208 	bic.w	r2, r2, #8
 8009842:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009858:	2220      	movs	r2, #32
 800985a:	409a      	lsls	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4013      	ands	r3, r2
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 808e 	beq.w	8009982 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0310 	and.w	r3, r3, #16
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 8086 	beq.w	8009982 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	2220      	movs	r2, #32
 800987c:	409a      	lsls	r2, r3
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b05      	cmp	r3, #5
 800988c:	d136      	bne.n	80098fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0216 	bic.w	r2, r2, #22
 800989c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <HAL_DMA_IRQHandler+0x1da>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0208 	bic.w	r2, r2, #8
 80098cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d2:	223f      	movs	r2, #63	; 0x3f
 80098d4:	409a      	lsls	r2, r3
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d07d      	beq.n	80099ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
        }
        return;
 80098fa:	e078      	b.n	80099ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d01c      	beq.n	8009944 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d108      	bne.n	800992a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991c:	2b00      	cmp	r3, #0
 800991e:	d030      	beq.n	8009982 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	4798      	blx	r3
 8009928:	e02b      	b.n	8009982 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d027      	beq.n	8009982 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
 800993a:	e022      	b.n	8009982 <HAL_DMA_IRQHandler+0x29e>
 800993c:	20000268 	.word	0x20000268
 8009940:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10f      	bne.n	8009972 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0210 	bic.w	r2, r2, #16
 8009960:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009986:	2b00      	cmp	r3, #0
 8009988:	d032      	beq.n	80099f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d022      	beq.n	80099dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2205      	movs	r2, #5
 800999a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60bb      	str	r3, [r7, #8]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d307      	bcc.n	80099ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f2      	bne.n	80099ae <HAL_DMA_IRQHandler+0x2ca>
 80099c8:	e000      	b.n	80099cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80099ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
 80099ec:	e000      	b.n	80099f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80099ee:	bf00      	nop
    }
  }
}
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop

080099f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	2b40      	cmp	r3, #64	; 0x40
 8009a24:	d108      	bne.n	8009a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009a36:	e007      	b.n	8009a48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	60da      	str	r2, [r3, #12]
}
 8009a48:	bf00      	nop
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	3b10      	subs	r3, #16
 8009a64:	4a14      	ldr	r2, [pc, #80]	; (8009ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8009a66:	fba2 2303 	umull	r2, r3, r2, r3
 8009a6a:	091b      	lsrs	r3, r3, #4
 8009a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009a6e:	4a13      	ldr	r2, [pc, #76]	; (8009abc <DMA_CalcBaseAndBitshift+0x68>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d909      	bls.n	8009a96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	659a      	str	r2, [r3, #88]	; 0x58
 8009a94:	e007      	b.n	8009aa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009a9e:	f023 0303 	bic.w	r3, r3, #3
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	aaaaaaab 	.word	0xaaaaaaab
 8009abc:	080169ec 	.word	0x080169ec

08009ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d11f      	bne.n	8009b1a <DMA_CheckFifoParam+0x5a>
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d856      	bhi.n	8009b8e <DMA_CheckFifoParam+0xce>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <DMA_CheckFifoParam+0x28>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b0b 	.word	0x08009b0b
 8009af0:	08009af9 	.word	0x08009af9
 8009af4:	08009b8f 	.word	0x08009b8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d046      	beq.n	8009b92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b08:	e043      	b.n	8009b92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b12:	d140      	bne.n	8009b96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b18:	e03d      	b.n	8009b96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b22:	d121      	bne.n	8009b68 <DMA_CheckFifoParam+0xa8>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d837      	bhi.n	8009b9a <DMA_CheckFifoParam+0xda>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <DMA_CheckFifoParam+0x70>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b47 	.word	0x08009b47
 8009b38:	08009b41 	.word	0x08009b41
 8009b3c:	08009b59 	.word	0x08009b59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	73fb      	strb	r3, [r7, #15]
      break;
 8009b44:	e030      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d025      	beq.n	8009b9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b56:	e022      	b.n	8009b9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b60:	d11f      	bne.n	8009ba2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009b66:	e01c      	b.n	8009ba2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d903      	bls.n	8009b76 <DMA_CheckFifoParam+0xb6>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d003      	beq.n	8009b7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009b74:	e018      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7a:	e015      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00e      	beq.n	8009ba6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b8c:	e00b      	b.n	8009ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8009b8e:	bf00      	nop
 8009b90:	e00a      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8009b92:	bf00      	nop
 8009b94:	e008      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8009b96:	bf00      	nop
 8009b98:	e006      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e004      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8009b9e:	bf00      	nop
 8009ba0:	e002      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;   
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <DMA_CheckFifoParam+0xe8>
      break;
 8009ba6:	bf00      	nop
    }
  } 
  
  return status; 
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop

08009bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b089      	sub	sp, #36	; 0x24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	e16b      	b.n	8009eac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4013      	ands	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	f040 815a 	bne.w	8009ea6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d005      	beq.n	8009c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d130      	bne.n	8009c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	2203      	movs	r2, #3
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	43db      	mvns	r3, r3
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	4013      	ands	r3, r2
 8009c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009c40:	2201      	movs	r2, #1
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	091b      	lsrs	r3, r3, #4
 8009c56:	f003 0201 	and.w	r2, r3, #1
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f003 0303 	and.w	r3, r3, #3
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d017      	beq.n	8009ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	2203      	movs	r2, #3
 8009c84:	fa02 f303 	lsl.w	r3, r2, r3
 8009c88:	43db      	mvns	r3, r3
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	689a      	ldr	r2, [r3, #8]
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d123      	bne.n	8009cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	08da      	lsrs	r2, r3, #3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3208      	adds	r2, #8
 8009cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	f003 0307 	and.w	r3, r3, #7
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	220f      	movs	r2, #15
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	08da      	lsrs	r2, r3, #3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3208      	adds	r2, #8
 8009cf6:	69b9      	ldr	r1, [r7, #24]
 8009cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	2203      	movs	r2, #3
 8009d08:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0c:	43db      	mvns	r3, r3
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	4013      	ands	r3, r2
 8009d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f003 0203 	and.w	r2, r3, #3
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 80b4 	beq.w	8009ea6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	4b60      	ldr	r3, [pc, #384]	; (8009ec4 <HAL_GPIO_Init+0x30c>)
 8009d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d46:	4a5f      	ldr	r2, [pc, #380]	; (8009ec4 <HAL_GPIO_Init+0x30c>)
 8009d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d4e:	4b5d      	ldr	r3, [pc, #372]	; (8009ec4 <HAL_GPIO_Init+0x30c>)
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009d5a:	4a5b      	ldr	r2, [pc, #364]	; (8009ec8 <HAL_GPIO_Init+0x310>)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	3302      	adds	r3, #2
 8009d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	220f      	movs	r2, #15
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	43db      	mvns	r3, r3
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a52      	ldr	r2, [pc, #328]	; (8009ecc <HAL_GPIO_Init+0x314>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d02b      	beq.n	8009dde <HAL_GPIO_Init+0x226>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a51      	ldr	r2, [pc, #324]	; (8009ed0 <HAL_GPIO_Init+0x318>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d025      	beq.n	8009dda <HAL_GPIO_Init+0x222>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a50      	ldr	r2, [pc, #320]	; (8009ed4 <HAL_GPIO_Init+0x31c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01f      	beq.n	8009dd6 <HAL_GPIO_Init+0x21e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a4f      	ldr	r2, [pc, #316]	; (8009ed8 <HAL_GPIO_Init+0x320>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d019      	beq.n	8009dd2 <HAL_GPIO_Init+0x21a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a4e      	ldr	r2, [pc, #312]	; (8009edc <HAL_GPIO_Init+0x324>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d013      	beq.n	8009dce <HAL_GPIO_Init+0x216>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a4d      	ldr	r2, [pc, #308]	; (8009ee0 <HAL_GPIO_Init+0x328>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00d      	beq.n	8009dca <HAL_GPIO_Init+0x212>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a4c      	ldr	r2, [pc, #304]	; (8009ee4 <HAL_GPIO_Init+0x32c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <HAL_GPIO_Init+0x20e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a4b      	ldr	r2, [pc, #300]	; (8009ee8 <HAL_GPIO_Init+0x330>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d101      	bne.n	8009dc2 <HAL_GPIO_Init+0x20a>
 8009dbe:	2307      	movs	r3, #7
 8009dc0:	e00e      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	e00c      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dc6:	2306      	movs	r3, #6
 8009dc8:	e00a      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dca:	2305      	movs	r3, #5
 8009dcc:	e008      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dce:	2304      	movs	r3, #4
 8009dd0:	e006      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e004      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e002      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <HAL_GPIO_Init+0x228>
 8009dde:	2300      	movs	r3, #0
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	f002 0203 	and.w	r2, r2, #3
 8009de6:	0092      	lsls	r2, r2, #2
 8009de8:	4093      	lsls	r3, r2
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009df0:	4935      	ldr	r1, [pc, #212]	; (8009ec8 <HAL_GPIO_Init+0x310>)
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	089b      	lsrs	r3, r3, #2
 8009df6:	3302      	adds	r3, #2
 8009df8:	69ba      	ldr	r2, [r7, #24]
 8009dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009dfe:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	43db      	mvns	r3, r3
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009e22:	4a32      	ldr	r2, [pc, #200]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009e28:	4b30      	ldr	r3, [pc, #192]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	43db      	mvns	r3, r3
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	4013      	ands	r3, r2
 8009e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009e4c:	4a27      	ldr	r2, [pc, #156]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009e52:	4b26      	ldr	r3, [pc, #152]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	43db      	mvns	r3, r3
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009e6e:	69ba      	ldr	r2, [r7, #24]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009e76:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009e7c:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	43db      	mvns	r3, r3
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	4013      	ands	r3, r2
 8009e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009e98:	69ba      	ldr	r2, [r7, #24]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ea0:	4a12      	ldr	r2, [pc, #72]	; (8009eec <HAL_GPIO_Init+0x334>)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	2b0f      	cmp	r3, #15
 8009eb0:	f67f ae90 	bls.w	8009bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop
 8009eb8:	3724      	adds	r7, #36	; 0x24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40023800 	.word	0x40023800
 8009ec8:	40013800 	.word	0x40013800
 8009ecc:	40020000 	.word	0x40020000
 8009ed0:	40020400 	.word	0x40020400
 8009ed4:	40020800 	.word	0x40020800
 8009ed8:	40020c00 	.word	0x40020c00
 8009edc:	40021000 	.word	0x40021000
 8009ee0:	40021400 	.word	0x40021400
 8009ee4:	40021800 	.word	0x40021800
 8009ee8:	40021c00 	.word	0x40021c00
 8009eec:	40013c00 	.word	0x40013c00

08009ef0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f06:	2300      	movs	r3, #0
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e0cd      	b.n	800a0a8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	fa02 f303 	lsl.w	r3, r2, r3
 8009f14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	f040 80bd 	bne.w	800a0a2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009f28:	4a65      	ldr	r2, [pc, #404]	; (800a0c0 <HAL_GPIO_DeInit+0x1d0>)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	089b      	lsrs	r3, r3, #2
 8009f2e:	3302      	adds	r3, #2
 8009f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f003 0303 	and.w	r3, r3, #3
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	220f      	movs	r2, #15
 8009f40:	fa02 f303 	lsl.w	r3, r2, r3
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4013      	ands	r3, r2
 8009f48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a5d      	ldr	r2, [pc, #372]	; (800a0c4 <HAL_GPIO_DeInit+0x1d4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d02b      	beq.n	8009faa <HAL_GPIO_DeInit+0xba>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a5c      	ldr	r2, [pc, #368]	; (800a0c8 <HAL_GPIO_DeInit+0x1d8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d025      	beq.n	8009fa6 <HAL_GPIO_DeInit+0xb6>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a5b      	ldr	r2, [pc, #364]	; (800a0cc <HAL_GPIO_DeInit+0x1dc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d01f      	beq.n	8009fa2 <HAL_GPIO_DeInit+0xb2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a5a      	ldr	r2, [pc, #360]	; (800a0d0 <HAL_GPIO_DeInit+0x1e0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d019      	beq.n	8009f9e <HAL_GPIO_DeInit+0xae>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a59      	ldr	r2, [pc, #356]	; (800a0d4 <HAL_GPIO_DeInit+0x1e4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d013      	beq.n	8009f9a <HAL_GPIO_DeInit+0xaa>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a58      	ldr	r2, [pc, #352]	; (800a0d8 <HAL_GPIO_DeInit+0x1e8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00d      	beq.n	8009f96 <HAL_GPIO_DeInit+0xa6>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a57      	ldr	r2, [pc, #348]	; (800a0dc <HAL_GPIO_DeInit+0x1ec>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <HAL_GPIO_DeInit+0xa2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a56      	ldr	r2, [pc, #344]	; (800a0e0 <HAL_GPIO_DeInit+0x1f0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d101      	bne.n	8009f8e <HAL_GPIO_DeInit+0x9e>
 8009f8a:	2307      	movs	r3, #7
 8009f8c:	e00e      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009f8e:	2308      	movs	r3, #8
 8009f90:	e00c      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009f92:	2306      	movs	r3, #6
 8009f94:	e00a      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009f96:	2305      	movs	r3, #5
 8009f98:	e008      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009f9a:	2304      	movs	r3, #4
 8009f9c:	e006      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e004      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e002      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e000      	b.n	8009fac <HAL_GPIO_DeInit+0xbc>
 8009faa:	2300      	movs	r3, #0
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	f002 0203 	and.w	r2, r2, #3
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	4093      	lsls	r3, r2
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d132      	bne.n	800a022 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009fbc:	4b49      	ldr	r3, [pc, #292]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	4947      	ldr	r1, [pc, #284]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009fca:	4b46      	ldr	r3, [pc, #280]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	4944      	ldr	r1, [pc, #272]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009fd8:	4b42      	ldr	r3, [pc, #264]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	43db      	mvns	r3, r3
 8009fe0:	4940      	ldr	r1, [pc, #256]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009fe6:	4b3f      	ldr	r3, [pc, #252]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	43db      	mvns	r3, r3
 8009fee:	493d      	ldr	r1, [pc, #244]	; (800a0e4 <HAL_GPIO_DeInit+0x1f4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	220f      	movs	r2, #15
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a004:	4a2e      	ldr	r2, [pc, #184]	; (800a0c0 <HAL_GPIO_DeInit+0x1d0>)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	089b      	lsrs	r3, r3, #2
 800a00a:	3302      	adds	r3, #2
 800a00c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	43da      	mvns	r2, r3
 800a014:	482a      	ldr	r0, [pc, #168]	; (800a0c0 <HAL_GPIO_DeInit+0x1d0>)
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	089b      	lsrs	r3, r3, #2
 800a01a:	400a      	ands	r2, r1
 800a01c:	3302      	adds	r3, #2
 800a01e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	2103      	movs	r1, #3
 800a02c:	fa01 f303 	lsl.w	r3, r1, r3
 800a030:	43db      	mvns	r3, r3
 800a032:	401a      	ands	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	08da      	lsrs	r2, r3, #3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3208      	adds	r2, #8
 800a040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	220f      	movs	r2, #15
 800a04e:	fa02 f303 	lsl.w	r3, r2, r3
 800a052:	43db      	mvns	r3, r3
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	08d2      	lsrs	r2, r2, #3
 800a058:	4019      	ands	r1, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3208      	adds	r2, #8
 800a05e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	005b      	lsls	r3, r3, #1
 800a06a:	2103      	movs	r1, #3
 800a06c:	fa01 f303 	lsl.w	r3, r1, r3
 800a070:	43db      	mvns	r3, r3
 800a072:	401a      	ands	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	2101      	movs	r1, #1
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	fa01 f303 	lsl.w	r3, r1, r3
 800a084:	43db      	mvns	r3, r3
 800a086:	401a      	ands	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	2103      	movs	r1, #3
 800a096:	fa01 f303 	lsl.w	r3, r1, r3
 800a09a:	43db      	mvns	r3, r3
 800a09c:	401a      	ands	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	f67f af2e 	bls.w	8009f0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	371c      	adds	r7, #28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	40013800 	.word	0x40013800
 800a0c4:	40020000 	.word	0x40020000
 800a0c8:	40020400 	.word	0x40020400
 800a0cc:	40020800 	.word	0x40020800
 800a0d0:	40020c00 	.word	0x40020c00
 800a0d4:	40021000 	.word	0x40021000
 800a0d8:	40021400 	.word	0x40021400
 800a0dc:	40021800 	.word	0x40021800
 800a0e0:	40021c00 	.word	0x40021c00
 800a0e4:	40013c00 	.word	0x40013c00

0800a0e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691a      	ldr	r2, [r3, #16]
 800a0f8:	887b      	ldrh	r3, [r7, #2]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
 800a104:	e001      	b.n	800a10a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a106:	2300      	movs	r3, #0
 800a108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	807b      	strh	r3, [r7, #2]
 800a124:	4613      	mov	r3, r2
 800a126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a128:	787b      	ldrb	r3, [r7, #1]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a12e:	887a      	ldrh	r2, [r7, #2]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a134:	e003      	b.n	800a13e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a136:	887b      	ldrh	r3, [r7, #2]
 800a138:	041a      	lsls	r2, r3, #16
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	619a      	str	r2, [r3, #24]
}
 800a13e:	bf00      	nop
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
	...

0800a14c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e12b      	b.n	800a3b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fd fdce 	bl	8007d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2224      	movs	r2, #36	; 0x24
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f022 0201 	bic.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a19e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a1b0:	f002 f920 	bl	800c3f4 <HAL_RCC_GetPCLK1Freq>
 800a1b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	4a81      	ldr	r2, [pc, #516]	; (800a3c0 <HAL_I2C_Init+0x274>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d807      	bhi.n	800a1d0 <HAL_I2C_Init+0x84>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4a80      	ldr	r2, [pc, #512]	; (800a3c4 <HAL_I2C_Init+0x278>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	bf94      	ite	ls
 800a1c8:	2301      	movls	r3, #1
 800a1ca:	2300      	movhi	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	e006      	b.n	800a1de <HAL_I2C_Init+0x92>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4a7d      	ldr	r2, [pc, #500]	; (800a3c8 <HAL_I2C_Init+0x27c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	bf94      	ite	ls
 800a1d8:	2301      	movls	r3, #1
 800a1da:	2300      	movhi	r3, #0
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e0e7      	b.n	800a3b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4a78      	ldr	r2, [pc, #480]	; (800a3cc <HAL_I2C_Init+0x280>)
 800a1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ee:	0c9b      	lsrs	r3, r3, #18
 800a1f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4a6a      	ldr	r2, [pc, #424]	; (800a3c0 <HAL_I2C_Init+0x274>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d802      	bhi.n	800a220 <HAL_I2C_Init+0xd4>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	3301      	adds	r3, #1
 800a21e:	e009      	b.n	800a234 <HAL_I2C_Init+0xe8>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a226:	fb02 f303 	mul.w	r3, r2, r3
 800a22a:	4a69      	ldr	r2, [pc, #420]	; (800a3d0 <HAL_I2C_Init+0x284>)
 800a22c:	fba2 2303 	umull	r2, r3, r2, r3
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	3301      	adds	r3, #1
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	430b      	orrs	r3, r1
 800a23a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	495c      	ldr	r1, [pc, #368]	; (800a3c0 <HAL_I2C_Init+0x274>)
 800a250:	428b      	cmp	r3, r1
 800a252:	d819      	bhi.n	800a288 <HAL_I2C_Init+0x13c>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	1e59      	subs	r1, r3, #1
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a262:	1c59      	adds	r1, r3, #1
 800a264:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a268:	400b      	ands	r3, r1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00a      	beq.n	800a284 <HAL_I2C_Init+0x138>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	1e59      	subs	r1, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	fbb1 f3f3 	udiv	r3, r1, r3
 800a27c:	3301      	adds	r3, #1
 800a27e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a282:	e051      	b.n	800a328 <HAL_I2C_Init+0x1dc>
 800a284:	2304      	movs	r3, #4
 800a286:	e04f      	b.n	800a328 <HAL_I2C_Init+0x1dc>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d111      	bne.n	800a2b4 <HAL_I2C_Init+0x168>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	1e58      	subs	r0, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6859      	ldr	r1, [r3, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	440b      	add	r3, r1
 800a29e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2301      	moveq	r3, #1
 800a2ae:	2300      	movne	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	e012      	b.n	800a2da <HAL_I2C_Init+0x18e>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	1e58      	subs	r0, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6859      	ldr	r1, [r3, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	0099      	lsls	r1, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2301      	moveq	r3, #1
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <HAL_I2C_Init+0x196>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e022      	b.n	800a328 <HAL_I2C_Init+0x1dc>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10e      	bne.n	800a308 <HAL_I2C_Init+0x1bc>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1e58      	subs	r0, r3, #1
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6859      	ldr	r1, [r3, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	440b      	add	r3, r1
 800a2f8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a306:	e00f      	b.n	800a328 <HAL_I2C_Init+0x1dc>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	1e58      	subs	r0, r3, #1
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6859      	ldr	r1, [r3, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	0099      	lsls	r1, r3, #2
 800a318:	440b      	add	r3, r1
 800a31a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a31e:	3301      	adds	r3, #1
 800a320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	6809      	ldr	r1, [r1, #0]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69da      	ldr	r2, [r3, #28]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	6911      	ldr	r1, [r2, #16]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	68d2      	ldr	r2, [r2, #12]
 800a362:	4311      	orrs	r1, r2
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	6812      	ldr	r2, [r2, #0]
 800a368:	430b      	orrs	r3, r1
 800a36a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695a      	ldr	r2, [r3, #20]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	000186a0 	.word	0x000186a0
 800a3c4:	001e847f 	.word	0x001e847f
 800a3c8:	003d08ff 	.word	0x003d08ff
 800a3cc:	431bde83 	.word	0x431bde83
 800a3d0:	10624dd3 	.word	0x10624dd3

0800a3d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e021      	b.n	800a42a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2224      	movs	r2, #36	; 0x24
 800a3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0201 	bic.w	r2, r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7fd fcd0 	bl	8007da4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b088      	sub	sp, #32
 800a438:	af02      	add	r7, sp, #8
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	607a      	str	r2, [r7, #4]
 800a43e:	461a      	mov	r2, r3
 800a440:	460b      	mov	r3, r1
 800a442:	817b      	strh	r3, [r7, #10]
 800a444:	4613      	mov	r3, r2
 800a446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a448:	f7fe f916 	bl	8008678 <HAL_GetTick>
 800a44c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b20      	cmp	r3, #32
 800a458:	f040 80e0 	bne.w	800a61c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2319      	movs	r3, #25
 800a462:	2201      	movs	r2, #1
 800a464:	4970      	ldr	r1, [pc, #448]	; (800a628 <HAL_I2C_Master_Transmit+0x1f4>)
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f001 f8f6 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a472:	2302      	movs	r3, #2
 800a474:	e0d3      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_I2C_Master_Transmit+0x50>
 800a480:	2302      	movs	r3, #2
 800a482:	e0cc      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b01      	cmp	r3, #1
 800a498:	d007      	beq.n	800a4aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f042 0201 	orr.w	r2, r2, #1
 800a4a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2221      	movs	r2, #33	; 0x21
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2210      	movs	r2, #16
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	893a      	ldrh	r2, [r7, #8]
 800a4da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4a50      	ldr	r2, [pc, #320]	; (800a62c <HAL_I2C_Master_Transmit+0x1f8>)
 800a4ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a4ec:	8979      	ldrh	r1, [r7, #10]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	6a3a      	ldr	r2, [r7, #32]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fde2 	bl	800b0bc <I2C_MasterRequestWrite>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e08d      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a518:	e066      	b.n	800a5e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	6a39      	ldr	r1, [r7, #32]
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f001 f970 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00d      	beq.n	800a546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d107      	bne.n	800a542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e06b      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56e:	3b01      	subs	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b04      	cmp	r3, #4
 800a582:	d11b      	bne.n	800a5bc <HAL_I2C_Master_Transmit+0x188>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d017      	beq.n	800a5bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	781a      	ldrb	r2, [r3, #0]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	6a39      	ldr	r1, [r7, #32]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f001 f960 	bl	800b886 <I2C_WaitOnBTFFlagUntilTimeout>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00d      	beq.n	800a5e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d107      	bne.n	800a5e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e01a      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d194      	bne.n	800a51a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	e000      	b.n	800a61e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a61c:	2302      	movs	r3, #2
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	00100002 	.word	0x00100002
 800a62c:	ffff0000 	.word	0xffff0000

0800a630 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08c      	sub	sp, #48	; 0x30
 800a634:	af02      	add	r7, sp, #8
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	607a      	str	r2, [r7, #4]
 800a63a:	461a      	mov	r2, r3
 800a63c:	460b      	mov	r3, r1
 800a63e:	817b      	strh	r3, [r7, #10]
 800a640:	4613      	mov	r3, r2
 800a642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a644:	f7fe f818 	bl	8008678 <HAL_GetTick>
 800a648:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b20      	cmp	r3, #32
 800a654:	f040 820b 	bne.w	800aa6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	2319      	movs	r3, #25
 800a65e:	2201      	movs	r2, #1
 800a660:	497c      	ldr	r1, [pc, #496]	; (800a854 <HAL_I2C_Master_Receive+0x224>)
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fff8 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a66e:	2302      	movs	r3, #2
 800a670:	e1fe      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_I2C_Master_Receive+0x50>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e1f7      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b01      	cmp	r3, #1
 800a694:	d007      	beq.n	800a6a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0201 	orr.w	r2, r2, #1
 800a6a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2222      	movs	r2, #34	; 0x22
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2210      	movs	r2, #16
 800a6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	893a      	ldrh	r2, [r7, #8]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4a5c      	ldr	r2, [pc, #368]	; (800a858 <HAL_I2C_Master_Receive+0x228>)
 800a6e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a6e8:	8979      	ldrh	r1, [r7, #10]
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 fd66 	bl	800b1c0 <I2C_MasterRequestRead>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e1b8      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d113      	bne.n	800a72e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a706:	2300      	movs	r3, #0
 800a708:	623b      	str	r3, [r7, #32]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	623b      	str	r3, [r7, #32]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	e18c      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a732:	2b01      	cmp	r3, #1
 800a734:	d11b      	bne.n	800a76e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	61fb      	str	r3, [r7, #28]
 800a75a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	e16c      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a772:	2b02      	cmp	r3, #2
 800a774:	d11b      	bne.n	800a7ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a784:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a796:	2300      	movs	r3, #0
 800a798:	61bb      	str	r3, [r7, #24]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	61bb      	str	r3, [r7, #24]
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	e14c      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a7bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a7d4:	e138      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	f200 80f1 	bhi.w	800a9c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d123      	bne.n	800a830 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f001 f88b 	bl	800b908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e139      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691a      	ldr	r2, [r3, #16]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a824:	b29b      	uxth	r3, r3
 800a826:	3b01      	subs	r3, #1
 800a828:	b29a      	uxth	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a82e:	e10b      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a834:	2b02      	cmp	r3, #2
 800a836:	d14e      	bne.n	800a8d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	2200      	movs	r2, #0
 800a840:	4906      	ldr	r1, [pc, #24]	; (800a85c <HAL_I2C_Master_Receive+0x22c>)
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 ff08 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d008      	beq.n	800a860 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e10e      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
 800a852:	bf00      	nop
 800a854:	00100002 	.word	0x00100002
 800a858:	ffff0000 	.word	0xffff0000
 800a85c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a86e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691a      	ldr	r2, [r3, #16]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	b2d2      	uxtb	r2, r2
 800a87c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	691a      	ldr	r2, [r3, #16]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	b2d2      	uxtb	r2, r2
 800a8ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a8d4:	e0b8      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4966      	ldr	r1, [pc, #408]	; (800aa78 <HAL_I2C_Master_Receive+0x448>)
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 feb9 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e0bf      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691a      	ldr	r2, [r3, #16]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a91c:	3b01      	subs	r3, #1
 800a91e:	b29a      	uxth	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	3b01      	subs	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	2200      	movs	r2, #0
 800a93a:	494f      	ldr	r1, [pc, #316]	; (800aa78 <HAL_I2C_Master_Receive+0x448>)
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fe8b 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e091      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a95a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691a      	ldr	r2, [r3, #16]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a978:	3b01      	subs	r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a984:	b29b      	uxth	r3, r3
 800a986:	3b01      	subs	r3, #1
 800a988:	b29a      	uxth	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	b2d2      	uxtb	r2, r2
 800a99a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9c0:	e042      	b.n	800aa48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 ff9e 	bl	800b908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e04c      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	f003 0304 	and.w	r3, r3, #4
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d118      	bne.n	800aa48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	691a      	ldr	r2, [r3, #16]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f47f aec2 	bne.w	800a7d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e000      	b.n	800aa70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800aa6e:	2302      	movs	r3, #2
  }
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3728      	adds	r7, #40	; 0x28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	00010004 	.word	0x00010004

0800aa7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	817b      	strh	r3, [r7, #10]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	813b      	strh	r3, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aa96:	f7fd fdef 	bl	8008678 <HAL_GetTick>
 800aa9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	f040 80d9 	bne.w	800ac5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	2319      	movs	r3, #25
 800aab0:	2201      	movs	r2, #1
 800aab2:	496d      	ldr	r1, [pc, #436]	; (800ac68 <HAL_I2C_Mem_Write+0x1ec>)
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 fdcf 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800aac0:	2302      	movs	r3, #2
 800aac2:	e0cc      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_I2C_Mem_Write+0x56>
 800aace:	2302      	movs	r3, #2
 800aad0:	e0c5      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d007      	beq.n	800aaf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2221      	movs	r2, #33	; 0x21
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2240      	movs	r2, #64	; 0x40
 800ab14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4a4d      	ldr	r2, [pc, #308]	; (800ac6c <HAL_I2C_Mem_Write+0x1f0>)
 800ab38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab3a:	88f8      	ldrh	r0, [r7, #6]
 800ab3c:	893a      	ldrh	r2, [r7, #8]
 800ab3e:	8979      	ldrh	r1, [r7, #10]
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	4603      	mov	r3, r0
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 fc06 	bl	800b35c <I2C_RequestMemoryWrite>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d052      	beq.n	800abfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e081      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fe50 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00d      	beq.n	800ab86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d107      	bne.n	800ab82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e06b      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d11b      	bne.n	800abfc <HAL_I2C_Mem_Write+0x180>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d017      	beq.n	800abfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe6:	3b01      	subs	r3, #1
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1aa      	bne.n	800ab5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 fe3c 	bl	800b886 <I2C_WaitOnBTFFlagUntilTimeout>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00d      	beq.n	800ac30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d107      	bne.n	800ac2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e016      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2220      	movs	r2, #32
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e000      	b.n	800ac5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ac5c:	2302      	movs	r3, #2
  }
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	00100002 	.word	0x00100002
 800ac6c:	ffff0000 	.word	0xffff0000

0800ac70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b08c      	sub	sp, #48	; 0x30
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	817b      	strh	r3, [r7, #10]
 800ac82:	460b      	mov	r3, r1
 800ac84:	813b      	strh	r3, [r7, #8]
 800ac86:	4613      	mov	r3, r2
 800ac88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac8a:	f7fd fcf5 	bl	8008678 <HAL_GetTick>
 800ac8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b20      	cmp	r3, #32
 800ac9a:	f040 8208 	bne.w	800b0ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	2319      	movs	r3, #25
 800aca4:	2201      	movs	r2, #1
 800aca6:	497b      	ldr	r1, [pc, #492]	; (800ae94 <HAL_I2C_Mem_Read+0x224>)
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fcd5 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800acb4:	2302      	movs	r3, #2
 800acb6:	e1fb      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d101      	bne.n	800acc6 <HAL_I2C_Mem_Read+0x56>
 800acc2:	2302      	movs	r3, #2
 800acc4:	e1f4      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d007      	beq.n	800acec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0201 	orr.w	r2, r2, #1
 800acea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2222      	movs	r2, #34	; 0x22
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2240      	movs	r2, #64	; 0x40
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800ad1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4a5b      	ldr	r2, [pc, #364]	; (800ae98 <HAL_I2C_Mem_Read+0x228>)
 800ad2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad2e:	88f8      	ldrh	r0, [r7, #6]
 800ad30:	893a      	ldrh	r2, [r7, #8]
 800ad32:	8979      	ldrh	r1, [r7, #10]
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 fba2 	bl	800b488 <I2C_RequestMemoryRead>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e1b0      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d113      	bne.n	800ad7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad56:	2300      	movs	r3, #0
 800ad58:	623b      	str	r3, [r7, #32]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	623b      	str	r3, [r7, #32]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	623b      	str	r3, [r7, #32]
 800ad6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	e184      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d11b      	bne.n	800adbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	61fb      	str	r3, [r7, #28]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	e164      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d11b      	bne.n	800adfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800add4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ade4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ade6:	2300      	movs	r3, #0
 800ade8:	61bb      	str	r3, [r7, #24]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	61bb      	str	r3, [r7, #24]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	61bb      	str	r3, [r7, #24]
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	e144      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adfe:	2300      	movs	r3, #0
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	617b      	str	r3, [r7, #20]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ae14:	e138      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	f200 80f1 	bhi.w	800b002 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d123      	bne.n	800ae70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 fd6b 	bl	800b908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e139      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691a      	ldr	r2, [r3, #16]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	b2d2      	uxtb	r2, r2
 800ae48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae6e:	e10b      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d14e      	bne.n	800af16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4906      	ldr	r1, [pc, #24]	; (800ae9c <HAL_I2C_Mem_Read+0x22c>)
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fbe8 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d008      	beq.n	800aea0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e10e      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
 800ae92:	bf00      	nop
 800ae94:	00100002 	.word	0x00100002
 800ae98:	ffff0000 	.word	0xffff0000
 800ae9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aecc:	3b01      	subs	r3, #1
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	3b01      	subs	r3, #1
 800aedc:	b29a      	uxth	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691a      	ldr	r2, [r3, #16]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	b2d2      	uxtb	r2, r2
 800aeee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aefe:	3b01      	subs	r3, #1
 800af00:	b29a      	uxth	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	3b01      	subs	r3, #1
 800af0e:	b29a      	uxth	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af14:	e0b8      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	2200      	movs	r2, #0
 800af1e:	4966      	ldr	r1, [pc, #408]	; (800b0b8 <HAL_I2C_Mem_Read+0x448>)
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 fb99 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e0bf      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5c:	3b01      	subs	r3, #1
 800af5e:	b29a      	uxth	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af68:	b29b      	uxth	r3, r3
 800af6a:	3b01      	subs	r3, #1
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	2200      	movs	r2, #0
 800af7a:	494f      	ldr	r1, [pc, #316]	; (800b0b8 <HAL_I2C_Mem_Read+0x448>)
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 fb6b 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e091      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	691a      	ldr	r2, [r3, #16]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	b2d2      	uxtb	r2, r2
 800afa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb8:	3b01      	subs	r3, #1
 800afba:	b29a      	uxth	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	b2d2      	uxtb	r2, r2
 800afda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afea:	3b01      	subs	r3, #1
 800afec:	b29a      	uxth	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	3b01      	subs	r3, #1
 800affa:	b29a      	uxth	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b000:	e042      	b.n	800b088 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fc7e 	bl	800b908 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e04c      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b032:	3b01      	subs	r3, #1
 800b034:	b29a      	uxth	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b03e:	b29b      	uxth	r3, r3
 800b040:	3b01      	subs	r3, #1
 800b042:	b29a      	uxth	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	f003 0304 	and.w	r3, r3, #4
 800b052:	2b04      	cmp	r3, #4
 800b054:	d118      	bne.n	800b088 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b072:	3b01      	subs	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3b01      	subs	r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f47f aec2 	bne.w	800ae16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	e000      	b.n	800b0b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b0ae:	2302      	movs	r3, #2
  }
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3728      	adds	r7, #40	; 0x28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	00010004 	.word	0x00010004

0800b0bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d006      	beq.n	800b0e6 <I2C_MasterRequestWrite+0x2a>
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d003      	beq.n	800b0e6 <I2C_MasterRequestWrite+0x2a>
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b0e4:	d108      	bne.n	800b0f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	e00b      	b.n	800b110 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fc:	2b12      	cmp	r3, #18
 800b0fe:	d107      	bne.n	800b110 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b10e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fa9b 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00d      	beq.n	800b144 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b136:	d103      	bne.n	800b140 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e035      	b.n	800b1b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b14c:	d108      	bne.n	800b160 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b14e:	897b      	ldrh	r3, [r7, #10]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	461a      	mov	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b15c:	611a      	str	r2, [r3, #16]
 800b15e:	e01b      	b.n	800b198 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b160:	897b      	ldrh	r3, [r7, #10]
 800b162:	11db      	asrs	r3, r3, #7
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 0306 	and.w	r3, r3, #6
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	f063 030f 	orn	r3, r3, #15
 800b170:	b2da      	uxtb	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	490e      	ldr	r1, [pc, #56]	; (800b1b8 <I2C_MasterRequestWrite+0xfc>)
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f000 fac1 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e010      	b.n	800b1b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b18e:	897b      	ldrh	r3, [r7, #10]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4907      	ldr	r1, [pc, #28]	; (800b1bc <I2C_MasterRequestWrite+0x100>)
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fab1 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e000      	b.n	800b1b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	00010008 	.word	0x00010008
 800b1bc:	00010002 	.word	0x00010002

0800b1c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b08      	cmp	r3, #8
 800b1ea:	d006      	beq.n	800b1fa <I2C_MasterRequestRead+0x3a>
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d003      	beq.n	800b1fa <I2C_MasterRequestRead+0x3a>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b1f8:	d108      	bne.n	800b20c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	e00b      	b.n	800b224 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b210:	2b11      	cmp	r3, #17
 800b212:	d107      	bne.n	800b224 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 fa11 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00d      	beq.n	800b258 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24a:	d103      	bne.n	800b254 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b254:	2303      	movs	r3, #3
 800b256:	e079      	b.n	800b34c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b260:	d108      	bne.n	800b274 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b262:	897b      	ldrh	r3, [r7, #10]
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	611a      	str	r2, [r3, #16]
 800b272:	e05f      	b.n	800b334 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b274:	897b      	ldrh	r3, [r7, #10]
 800b276:	11db      	asrs	r3, r3, #7
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	f003 0306 	and.w	r3, r3, #6
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f063 030f 	orn	r3, r3, #15
 800b284:	b2da      	uxtb	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	4930      	ldr	r1, [pc, #192]	; (800b354 <I2C_MasterRequestRead+0x194>)
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 fa37 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e054      	b.n	800b34c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b2a2:	897b      	ldrh	r3, [r7, #10]
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4929      	ldr	r1, [pc, #164]	; (800b358 <I2C_MasterRequestRead+0x198>)
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fa27 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e044      	b.n	800b34c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	613b      	str	r3, [r7, #16]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	613b      	str	r3, [r7, #16]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f9af 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b30e:	d103      	bne.n	800b318 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b316:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e017      	b.n	800b34c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b31c:	897b      	ldrh	r3, [r7, #10]
 800b31e:	11db      	asrs	r3, r3, #7
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0306 	and.w	r3, r3, #6
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f063 030e 	orn	r3, r3, #14
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	4907      	ldr	r1, [pc, #28]	; (800b358 <I2C_MasterRequestRead+0x198>)
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f000 f9e3 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	00010008 	.word	0x00010008
 800b358:	00010002 	.word	0x00010002

0800b35c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	461a      	mov	r2, r3
 800b36a:	4603      	mov	r3, r0
 800b36c:	817b      	strh	r3, [r7, #10]
 800b36e:	460b      	mov	r3, r1
 800b370:	813b      	strh	r3, [r7, #8]
 800b372:	4613      	mov	r3, r2
 800b374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 f960 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00d      	beq.n	800b3ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ac:	d103      	bne.n	800b3b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e05f      	b.n	800b47a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b3ba:	897b      	ldrh	r3, [r7, #10]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b3c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	6a3a      	ldr	r2, [r7, #32]
 800b3ce:	492d      	ldr	r1, [pc, #180]	; (800b484 <I2C_RequestMemoryWrite+0x128>)
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f998 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e04c      	b.n	800b47a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f8:	6a39      	ldr	r1, [r7, #32]
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 fa02 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00d      	beq.n	800b422 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40a:	2b04      	cmp	r3, #4
 800b40c:	d107      	bne.n	800b41e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b41c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e02b      	b.n	800b47a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b422:	88fb      	ldrh	r3, [r7, #6]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d105      	bne.n	800b434 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b428:	893b      	ldrh	r3, [r7, #8]
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	611a      	str	r2, [r3, #16]
 800b432:	e021      	b.n	800b478 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b434:	893b      	ldrh	r3, [r7, #8]
 800b436:	0a1b      	lsrs	r3, r3, #8
 800b438:	b29b      	uxth	r3, r3
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b444:	6a39      	ldr	r1, [r7, #32]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 f9dc 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00d      	beq.n	800b46e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	2b04      	cmp	r3, #4
 800b458:	d107      	bne.n	800b46a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e005      	b.n	800b47a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b46e:	893b      	ldrh	r3, [r7, #8]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	00010002 	.word	0x00010002

0800b488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	461a      	mov	r2, r3
 800b496:	4603      	mov	r3, r0
 800b498:	817b      	strh	r3, [r7, #10]
 800b49a:	460b      	mov	r3, r1
 800b49c:	813b      	strh	r3, [r7, #8]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f8c2 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00d      	beq.n	800b4f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e8:	d103      	bne.n	800b4f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e0aa      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b4f6:	897b      	ldrh	r3, [r7, #10]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	6a3a      	ldr	r2, [r7, #32]
 800b50a:	4952      	ldr	r1, [pc, #328]	; (800b654 <I2C_RequestMemoryRead+0x1cc>)
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f8fa 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e097      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	617b      	str	r3, [r7, #20]
 800b530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b534:	6a39      	ldr	r1, [r7, #32]
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 f964 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00d      	beq.n	800b55e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	2b04      	cmp	r3, #4
 800b548:	d107      	bne.n	800b55a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e076      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b55e:	88fb      	ldrh	r3, [r7, #6]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d105      	bne.n	800b570 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b564:	893b      	ldrh	r3, [r7, #8]
 800b566:	b2da      	uxtb	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	611a      	str	r2, [r3, #16]
 800b56e:	e021      	b.n	800b5b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b570:	893b      	ldrh	r3, [r7, #8]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	b29b      	uxth	r3, r3
 800b576:	b2da      	uxtb	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b580:	6a39      	ldr	r1, [r7, #32]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f93e 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b592:	2b04      	cmp	r3, #4
 800b594:	d107      	bne.n	800b5a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e050      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b5aa:	893b      	ldrh	r3, [r7, #8]
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b6:	6a39      	ldr	r1, [r7, #32]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f923 	bl	800b804 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00d      	beq.n	800b5e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d107      	bne.n	800b5dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e035      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 f82b 	bl	800b658 <I2C_WaitOnFlagUntilTimeout>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b616:	d103      	bne.n	800b620 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e013      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b624:	897b      	ldrh	r3, [r7, #10]
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f043 0301 	orr.w	r3, r3, #1
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	6a3a      	ldr	r2, [r7, #32]
 800b638:	4906      	ldr	r1, [pc, #24]	; (800b654 <I2C_RequestMemoryRead+0x1cc>)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f863 	bl	800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	00010002 	.word	0x00010002

0800b658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	4613      	mov	r3, r2
 800b666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b668:	e025      	b.n	800b6b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b670:	d021      	beq.n	800b6b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b672:	f7fd f801 	bl	8008678 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d302      	bcc.n	800b688 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d116      	bne.n	800b6b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2220      	movs	r2, #32
 800b692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	f043 0220 	orr.w	r2, r3, #32
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e023      	b.n	800b6fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	0c1b      	lsrs	r3, r3, #16
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d10d      	bne.n	800b6dc <I2C_WaitOnFlagUntilTimeout+0x84>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	43da      	mvns	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bf0c      	ite	eq
 800b6d2:	2301      	moveq	r3, #1
 800b6d4:	2300      	movne	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	e00c      	b.n	800b6f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	43da      	mvns	r2, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bf0c      	ite	eq
 800b6ee:	2301      	moveq	r3, #1
 800b6f0:	2300      	movne	r3, #0
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d0b6      	beq.n	800b66a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	60f8      	str	r0, [r7, #12]
 800b70e:	60b9      	str	r1, [r7, #8]
 800b710:	607a      	str	r2, [r7, #4]
 800b712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b714:	e051      	b.n	800b7ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b724:	d123      	bne.n	800b76e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b73e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2220      	movs	r2, #32
 800b74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75a:	f043 0204 	orr.w	r2, r3, #4
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e046      	b.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d021      	beq.n	800b7ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b776:	f7fc ff7f 	bl	8008678 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	429a      	cmp	r2, r3
 800b784:	d302      	bcc.n	800b78c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d116      	bne.n	800b7ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2220      	movs	r2, #32
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a6:	f043 0220 	orr.w	r2, r3, #32
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e020      	b.n	800b7fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	0c1b      	lsrs	r3, r3, #16
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d10c      	bne.n	800b7de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	43da      	mvns	r2, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	bf14      	ite	ne
 800b7d6:	2301      	movne	r3, #1
 800b7d8:	2300      	moveq	r3, #0
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	e00b      	b.n	800b7f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	43da      	mvns	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bf14      	ite	ne
 800b7f0:	2301      	movne	r3, #1
 800b7f2:	2300      	moveq	r3, #0
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d18d      	bne.n	800b716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b810:	e02d      	b.n	800b86e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 f8ce 	bl	800b9b4 <I2C_IsAcknowledgeFailed>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e02d      	b.n	800b87e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b828:	d021      	beq.n	800b86e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b82a:	f7fc ff25 	bl	8008678 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	429a      	cmp	r2, r3
 800b838:	d302      	bcc.n	800b840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d116      	bne.n	800b86e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2220      	movs	r2, #32
 800b84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85a:	f043 0220 	orr.w	r2, r3, #32
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e007      	b.n	800b87e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b878:	2b80      	cmp	r3, #128	; 0x80
 800b87a:	d1ca      	bne.n	800b812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	60b9      	str	r1, [r7, #8]
 800b890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b892:	e02d      	b.n	800b8f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 f88d 	bl	800b9b4 <I2C_IsAcknowledgeFailed>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e02d      	b.n	800b900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8aa:	d021      	beq.n	800b8f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ac:	f7fc fee4 	bl	8008678 <HAL_GetTick>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d302      	bcc.n	800b8c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d116      	bne.n	800b8f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8dc:	f043 0220 	orr.w	r2, r3, #32
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e007      	b.n	800b900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d1ca      	bne.n	800b894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b914:	e042      	b.n	800b99c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	f003 0310 	and.w	r3, r3, #16
 800b920:	2b10      	cmp	r3, #16
 800b922:	d119      	bne.n	800b958 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f06f 0210 	mvn.w	r2, #16
 800b92c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2220      	movs	r2, #32
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e029      	b.n	800b9ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b958:	f7fc fe8e 	bl	8008678 <HAL_GetTick>
 800b95c:	4602      	mov	r2, r0
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	429a      	cmp	r2, r3
 800b966:	d302      	bcc.n	800b96e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d116      	bne.n	800b99c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	f043 0220 	orr.w	r2, r3, #32
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e007      	b.n	800b9ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b40      	cmp	r3, #64	; 0x40
 800b9a8:	d1b5      	bne.n	800b916 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ca:	d11b      	bne.n	800ba04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	f043 0204 	orr.w	r2, r3, #4
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e034      	b.n	800ba8e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ba2c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f245 5255 	movw	r2, #21845	; 0x5555
 800ba36:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6892      	ldr	r2, [r2, #8]
 800ba4a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ba4c:	f7fc fe14 	bl	8008678 <HAL_GetTick>
 800ba50:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ba52:	e00f      	b.n	800ba74 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ba54:	f7fc fe10 	bl	8008678 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	2b30      	cmp	r3, #48	; 0x30
 800ba60:	d908      	bls.n	800ba74 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0303 	and.w	r3, r3, #3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e00c      	b.n	800ba8e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	f003 0303 	and.w	r3, r3, #3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e8      	bne.n	800ba54 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ba8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800baa6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
	...

0800bab8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <HAL_PWR_EnableBkUpAccess+0x20>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <HAL_PWR_EnableBkUpAccess+0x24>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800baca:	687b      	ldr	r3, [r7, #4]
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	420e0020 	.word	0x420e0020
 800badc:	40007000 	.word	0x40007000

0800bae0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800bae4:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <HAL_PWR_PVD_IRQHandler+0x20>)
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800baf0:	f000 f808 	bl	800bb04 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800baf4:	4b02      	ldr	r3, [pc, #8]	; (800bb00 <HAL_PWR_PVD_IRQHandler+0x20>)
 800baf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bafa:	615a      	str	r2, [r3, #20]
  }
}
 800bafc:	bf00      	nop
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	40013c00 	.word	0x40013c00

0800bb04 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800bb04:	b480      	push	{r7}
 800bb06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800bb08:	bf00      	nop
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
	...

0800bb14 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800bb1e:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <HAL_PWREx_EnableBkUpReg+0x44>)
 800bb20:	2201      	movs	r2, #1
 800bb22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb24:	f7fc fda8 	bl	8008678 <HAL_GetTick>
 800bb28:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800bb2a:	e009      	b.n	800bb40 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800bb2c:	f7fc fda4 	bl	8008678 <HAL_GetTick>
 800bb30:	4602      	mov	r2, r0
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb3a:	d901      	bls.n	800bb40 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e006      	b.n	800bb4e <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800bb40:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <HAL_PWREx_EnableBkUpReg+0x48>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f003 0308 	and.w	r3, r3, #8
 800bb48:	2b08      	cmp	r3, #8
 800bb4a:	d1ef      	bne.n	800bb2c <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	420e00a4 	.word	0x420e00a4
 800bb5c:	40007000 	.word	0x40007000

0800bb60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e264      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d075      	beq.n	800bc6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb7e:	4ba3      	ldr	r3, [pc, #652]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f003 030c 	and.w	r3, r3, #12
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d00c      	beq.n	800bba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb8a:	4ba0      	ldr	r3, [pc, #640]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	d112      	bne.n	800bbbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb96:	4b9d      	ldr	r3, [pc, #628]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba2:	d10b      	bne.n	800bbbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bba4:	4b99      	ldr	r3, [pc, #612]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d05b      	beq.n	800bc68 <HAL_RCC_OscConfig+0x108>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d157      	bne.n	800bc68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e23f      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbc4:	d106      	bne.n	800bbd4 <HAL_RCC_OscConfig+0x74>
 800bbc6:	4b91      	ldr	r3, [pc, #580]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a90      	ldr	r2, [pc, #576]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	e01d      	b.n	800bc10 <HAL_RCC_OscConfig+0xb0>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbdc:	d10c      	bne.n	800bbf8 <HAL_RCC_OscConfig+0x98>
 800bbde:	4b8b      	ldr	r3, [pc, #556]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a8a      	ldr	r2, [pc, #552]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	4b88      	ldr	r3, [pc, #544]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a87      	ldr	r2, [pc, #540]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	e00b      	b.n	800bc10 <HAL_RCC_OscConfig+0xb0>
 800bbf8:	4b84      	ldr	r3, [pc, #528]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a83      	ldr	r2, [pc, #524]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bbfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	4b81      	ldr	r3, [pc, #516]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a80      	ldr	r2, [pc, #512]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d013      	beq.n	800bc40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc18:	f7fc fd2e 	bl	8008678 <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc20:	f7fc fd2a 	bl	8008678 <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b64      	cmp	r3, #100	; 0x64
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e204      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc32:	4b76      	ldr	r3, [pc, #472]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d0f0      	beq.n	800bc20 <HAL_RCC_OscConfig+0xc0>
 800bc3e:	e014      	b.n	800bc6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc40:	f7fc fd1a 	bl	8008678 <HAL_GetTick>
 800bc44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc48:	f7fc fd16 	bl	8008678 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b64      	cmp	r3, #100	; 0x64
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e1f0      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc5a:	4b6c      	ldr	r3, [pc, #432]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f0      	bne.n	800bc48 <HAL_RCC_OscConfig+0xe8>
 800bc66:	e000      	b.n	800bc6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d063      	beq.n	800bd3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc76:	4b65      	ldr	r3, [pc, #404]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	f003 030c 	and.w	r3, r3, #12
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00b      	beq.n	800bc9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc82:	4b62      	ldr	r3, [pc, #392]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d11c      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc8e:	4b5f      	ldr	r3, [pc, #380]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d116      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc9a:	4b5c      	ldr	r3, [pc, #368]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d005      	beq.n	800bcb2 <HAL_RCC_OscConfig+0x152>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d001      	beq.n	800bcb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e1c4      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcb2:	4b56      	ldr	r3, [pc, #344]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	00db      	lsls	r3, r3, #3
 800bcc0:	4952      	ldr	r1, [pc, #328]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcc6:	e03a      	b.n	800bd3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d020      	beq.n	800bd12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcd0:	4b4f      	ldr	r3, [pc, #316]	; (800be10 <HAL_RCC_OscConfig+0x2b0>)
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd6:	f7fc fccf 	bl	8008678 <HAL_GetTick>
 800bcda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcdc:	e008      	b.n	800bcf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcde:	f7fc fccb 	bl	8008678 <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d901      	bls.n	800bcf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e1a5      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcf0:	4b46      	ldr	r3, [pc, #280]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0f0      	beq.n	800bcde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcfc:	4b43      	ldr	r3, [pc, #268]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	4940      	ldr	r1, [pc, #256]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	600b      	str	r3, [r1, #0]
 800bd10:	e015      	b.n	800bd3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd12:	4b3f      	ldr	r3, [pc, #252]	; (800be10 <HAL_RCC_OscConfig+0x2b0>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd18:	f7fc fcae 	bl	8008678 <HAL_GetTick>
 800bd1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd1e:	e008      	b.n	800bd32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd20:	f7fc fcaa 	bl	8008678 <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d901      	bls.n	800bd32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e184      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd32:	4b36      	ldr	r3, [pc, #216]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1f0      	bne.n	800bd20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0308 	and.w	r3, r3, #8
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d030      	beq.n	800bdac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d016      	beq.n	800bd80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd52:	4b30      	ldr	r3, [pc, #192]	; (800be14 <HAL_RCC_OscConfig+0x2b4>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd58:	f7fc fc8e 	bl	8008678 <HAL_GetTick>
 800bd5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd5e:	e008      	b.n	800bd72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd60:	f7fc fc8a 	bl	8008678 <HAL_GetTick>
 800bd64:	4602      	mov	r2, r0
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d901      	bls.n	800bd72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e164      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd72:	4b26      	ldr	r3, [pc, #152]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bd74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0f0      	beq.n	800bd60 <HAL_RCC_OscConfig+0x200>
 800bd7e:	e015      	b.n	800bdac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd80:	4b24      	ldr	r3, [pc, #144]	; (800be14 <HAL_RCC_OscConfig+0x2b4>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd86:	f7fc fc77 	bl	8008678 <HAL_GetTick>
 800bd8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd8c:	e008      	b.n	800bda0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd8e:	f7fc fc73 	bl	8008678 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e14d      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bda0:	4b1a      	ldr	r3, [pc, #104]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f0      	bne.n	800bd8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0304 	and.w	r3, r3, #4
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 80a0 	beq.w	800befa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdbe:	4b13      	ldr	r3, [pc, #76]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10f      	bne.n	800bdea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60bb      	str	r3, [r7, #8]
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd2:	4a0e      	ldr	r2, [pc, #56]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bdd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdd8:	6413      	str	r3, [r2, #64]	; 0x40
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <HAL_RCC_OscConfig+0x2ac>)
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde2:	60bb      	str	r3, [r7, #8]
 800bde4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bde6:	2301      	movs	r3, #1
 800bde8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdea:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <HAL_RCC_OscConfig+0x2b8>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d121      	bne.n	800be3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bdf6:	4b08      	ldr	r3, [pc, #32]	; (800be18 <HAL_RCC_OscConfig+0x2b8>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a07      	ldr	r2, [pc, #28]	; (800be18 <HAL_RCC_OscConfig+0x2b8>)
 800bdfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be02:	f7fc fc39 	bl	8008678 <HAL_GetTick>
 800be06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be08:	e011      	b.n	800be2e <HAL_RCC_OscConfig+0x2ce>
 800be0a:	bf00      	nop
 800be0c:	40023800 	.word	0x40023800
 800be10:	42470000 	.word	0x42470000
 800be14:	42470e80 	.word	0x42470e80
 800be18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be1c:	f7fc fc2c 	bl	8008678 <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e106      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be2e:	4b85      	ldr	r3, [pc, #532]	; (800c044 <HAL_RCC_OscConfig+0x4e4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0f0      	beq.n	800be1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d106      	bne.n	800be50 <HAL_RCC_OscConfig+0x2f0>
 800be42:	4b81      	ldr	r3, [pc, #516]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	4a80      	ldr	r2, [pc, #512]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be48:	f043 0301 	orr.w	r3, r3, #1
 800be4c:	6713      	str	r3, [r2, #112]	; 0x70
 800be4e:	e01c      	b.n	800be8a <HAL_RCC_OscConfig+0x32a>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	2b05      	cmp	r3, #5
 800be56:	d10c      	bne.n	800be72 <HAL_RCC_OscConfig+0x312>
 800be58:	4b7b      	ldr	r3, [pc, #492]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5c:	4a7a      	ldr	r2, [pc, #488]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be5e:	f043 0304 	orr.w	r3, r3, #4
 800be62:	6713      	str	r3, [r2, #112]	; 0x70
 800be64:	4b78      	ldr	r3, [pc, #480]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be68:	4a77      	ldr	r2, [pc, #476]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	6713      	str	r3, [r2, #112]	; 0x70
 800be70:	e00b      	b.n	800be8a <HAL_RCC_OscConfig+0x32a>
 800be72:	4b75      	ldr	r3, [pc, #468]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be76:	4a74      	ldr	r2, [pc, #464]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be78:	f023 0301 	bic.w	r3, r3, #1
 800be7c:	6713      	str	r3, [r2, #112]	; 0x70
 800be7e:	4b72      	ldr	r3, [pc, #456]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be82:	4a71      	ldr	r2, [pc, #452]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800be84:	f023 0304 	bic.w	r3, r3, #4
 800be88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d015      	beq.n	800bebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be92:	f7fc fbf1 	bl	8008678 <HAL_GetTick>
 800be96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be98:	e00a      	b.n	800beb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be9a:	f7fc fbed 	bl	8008678 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e0c5      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800beb0:	4b65      	ldr	r3, [pc, #404]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800beb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d0ee      	beq.n	800be9a <HAL_RCC_OscConfig+0x33a>
 800bebc:	e014      	b.n	800bee8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bebe:	f7fc fbdb 	bl	8008678 <HAL_GetTick>
 800bec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bec4:	e00a      	b.n	800bedc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bec6:	f7fc fbd7 	bl	8008678 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d901      	bls.n	800bedc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e0af      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bedc:	4b5a      	ldr	r3, [pc, #360]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1ee      	bne.n	800bec6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d105      	bne.n	800befa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800beee:	4b56      	ldr	r3, [pc, #344]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	4a55      	ldr	r2, [pc, #340]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 809b 	beq.w	800c03a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf04:	4b50      	ldr	r3, [pc, #320]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f003 030c 	and.w	r3, r3, #12
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d05c      	beq.n	800bfca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d141      	bne.n	800bf9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf18:	4b4c      	ldr	r3, [pc, #304]	; (800c04c <HAL_RCC_OscConfig+0x4ec>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf1e:	f7fc fbab 	bl	8008678 <HAL_GetTick>
 800bf22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf24:	e008      	b.n	800bf38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf26:	f7fc fba7 	bl	8008678 <HAL_GetTick>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d901      	bls.n	800bf38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e081      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf38:	4b43      	ldr	r3, [pc, #268]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1f0      	bne.n	800bf26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	69da      	ldr	r2, [r3, #28]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf52:	019b      	lsls	r3, r3, #6
 800bf54:	431a      	orrs	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5a:	085b      	lsrs	r3, r3, #1
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	431a      	orrs	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf66:	061b      	lsls	r3, r3, #24
 800bf68:	4937      	ldr	r1, [pc, #220]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf6e:	4b37      	ldr	r3, [pc, #220]	; (800c04c <HAL_RCC_OscConfig+0x4ec>)
 800bf70:	2201      	movs	r2, #1
 800bf72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf74:	f7fc fb80 	bl	8008678 <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf7a:	e008      	b.n	800bf8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf7c:	f7fc fb7c 	bl	8008678 <HAL_GetTick>
 800bf80:	4602      	mov	r2, r0
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d901      	bls.n	800bf8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e056      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf8e:	4b2e      	ldr	r3, [pc, #184]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0f0      	beq.n	800bf7c <HAL_RCC_OscConfig+0x41c>
 800bf9a:	e04e      	b.n	800c03a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf9c:	4b2b      	ldr	r3, [pc, #172]	; (800c04c <HAL_RCC_OscConfig+0x4ec>)
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfa2:	f7fc fb69 	bl	8008678 <HAL_GetTick>
 800bfa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfa8:	e008      	b.n	800bfbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfaa:	f7fc fb65 	bl	8008678 <HAL_GetTick>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d901      	bls.n	800bfbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e03f      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfbc:	4b22      	ldr	r3, [pc, #136]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1f0      	bne.n	800bfaa <HAL_RCC_OscConfig+0x44a>
 800bfc8:	e037      	b.n	800c03a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d101      	bne.n	800bfd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e032      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bfd6:	4b1c      	ldr	r3, [pc, #112]	; (800c048 <HAL_RCC_OscConfig+0x4e8>)
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d028      	beq.n	800c036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d121      	bne.n	800c036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d11a      	bne.n	800c036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c006:	4013      	ands	r3, r2
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c00c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c00e:	4293      	cmp	r3, r2
 800c010:	d111      	bne.n	800c036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	085b      	lsrs	r3, r3, #1
 800c01e:	3b01      	subs	r3, #1
 800c020:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c022:	429a      	cmp	r2, r3
 800c024:	d107      	bne.n	800c036 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c032:	429a      	cmp	r2, r3
 800c034:	d001      	beq.n	800c03a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	40007000 	.word	0x40007000
 800c048:	40023800 	.word	0x40023800
 800c04c:	42470060 	.word	0x42470060

0800c050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e0cc      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c064:	4b68      	ldr	r3, [pc, #416]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 0307 	and.w	r3, r3, #7
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d90c      	bls.n	800c08c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c072:	4b65      	ldr	r3, [pc, #404]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c07a:	4b63      	ldr	r3, [pc, #396]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d001      	beq.n	800c08c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e0b8      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d020      	beq.n	800c0da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0304 	and.w	r3, r3, #4
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0a4:	4b59      	ldr	r3, [pc, #356]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	4a58      	ldr	r2, [pc, #352]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d005      	beq.n	800c0c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c0bc:	4b53      	ldr	r3, [pc, #332]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	4a52      	ldr	r2, [pc, #328]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c0c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0c8:	4b50      	ldr	r3, [pc, #320]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	494d      	ldr	r1, [pc, #308]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d044      	beq.n	800c170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d107      	bne.n	800c0fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0ee:	4b47      	ldr	r3, [pc, #284]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d119      	bne.n	800c12e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e07f      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	2b02      	cmp	r3, #2
 800c104:	d003      	beq.n	800c10e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d107      	bne.n	800c11e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c10e:	4b3f      	ldr	r3, [pc, #252]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d109      	bne.n	800c12e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e06f      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c11e:	4b3b      	ldr	r3, [pc, #236]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0302 	and.w	r3, r3, #2
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e067      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c12e:	4b37      	ldr	r3, [pc, #220]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f023 0203 	bic.w	r2, r3, #3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4934      	ldr	r1, [pc, #208]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c13c:	4313      	orrs	r3, r2
 800c13e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c140:	f7fc fa9a 	bl	8008678 <HAL_GetTick>
 800c144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c146:	e00a      	b.n	800c15e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c148:	f7fc fa96 	bl	8008678 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	f241 3288 	movw	r2, #5000	; 0x1388
 800c156:	4293      	cmp	r3, r2
 800c158:	d901      	bls.n	800c15e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e04f      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c15e:	4b2b      	ldr	r3, [pc, #172]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 020c 	and.w	r2, r3, #12
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d1eb      	bne.n	800c148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c170:	4b25      	ldr	r3, [pc, #148]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 0307 	and.w	r3, r3, #7
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d20c      	bcs.n	800c198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c17e:	4b22      	ldr	r3, [pc, #136]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	b2d2      	uxtb	r2, r2
 800c184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c186:	4b20      	ldr	r3, [pc, #128]	; (800c208 <HAL_RCC_ClockConfig+0x1b8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0307 	and.w	r3, r3, #7
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d001      	beq.n	800c198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e032      	b.n	800c1fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0304 	and.w	r3, r3, #4
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d008      	beq.n	800c1b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1a4:	4b19      	ldr	r3, [pc, #100]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	4916      	ldr	r1, [pc, #88]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0308 	and.w	r3, r3, #8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d009      	beq.n	800c1d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	490e      	ldr	r1, [pc, #56]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c1d6:	f000 f821 	bl	800c21c <HAL_RCC_GetSysClockFreq>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <HAL_RCC_ClockConfig+0x1bc>)
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	091b      	lsrs	r3, r3, #4
 800c1e2:	f003 030f 	and.w	r3, r3, #15
 800c1e6:	490a      	ldr	r1, [pc, #40]	; (800c210 <HAL_RCC_ClockConfig+0x1c0>)
 800c1e8:	5ccb      	ldrb	r3, [r1, r3]
 800c1ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ee:	4a09      	ldr	r2, [pc, #36]	; (800c214 <HAL_RCC_ClockConfig+0x1c4>)
 800c1f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c1f2:	4b09      	ldr	r3, [pc, #36]	; (800c218 <HAL_RCC_ClockConfig+0x1c8>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fc f9fa 	bl	80085f0 <HAL_InitTick>

  return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	40023c00 	.word	0x40023c00
 800c20c:	40023800 	.word	0x40023800
 800c210:	080169d4 	.word	0x080169d4
 800c214:	20000268 	.word	0x20000268
 800c218:	2000026c 	.word	0x2000026c

0800c21c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c21c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c220:	b084      	sub	sp, #16
 800c222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	607b      	str	r3, [r7, #4]
 800c228:	2300      	movs	r3, #0
 800c22a:	60fb      	str	r3, [r7, #12]
 800c22c:	2300      	movs	r3, #0
 800c22e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c234:	4b67      	ldr	r3, [pc, #412]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	f003 030c 	and.w	r3, r3, #12
 800c23c:	2b08      	cmp	r3, #8
 800c23e:	d00d      	beq.n	800c25c <HAL_RCC_GetSysClockFreq+0x40>
 800c240:	2b08      	cmp	r3, #8
 800c242:	f200 80bd 	bhi.w	800c3c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <HAL_RCC_GetSysClockFreq+0x34>
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d003      	beq.n	800c256 <HAL_RCC_GetSysClockFreq+0x3a>
 800c24e:	e0b7      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c250:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c252:	60bb      	str	r3, [r7, #8]
       break;
 800c254:	e0b7      	b.n	800c3c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c256:	4b60      	ldr	r3, [pc, #384]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c258:	60bb      	str	r3, [r7, #8]
      break;
 800c25a:	e0b4      	b.n	800c3c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c25c:	4b5d      	ldr	r3, [pc, #372]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c266:	4b5b      	ldr	r3, [pc, #364]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d04d      	beq.n	800c30e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c272:	4b58      	ldr	r3, [pc, #352]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	099b      	lsrs	r3, r3, #6
 800c278:	461a      	mov	r2, r3
 800c27a:	f04f 0300 	mov.w	r3, #0
 800c27e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c282:	f04f 0100 	mov.w	r1, #0
 800c286:	ea02 0800 	and.w	r8, r2, r0
 800c28a:	ea03 0901 	and.w	r9, r3, r1
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f04f 0200 	mov.w	r2, #0
 800c296:	f04f 0300 	mov.w	r3, #0
 800c29a:	014b      	lsls	r3, r1, #5
 800c29c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c2a0:	0142      	lsls	r2, r0, #5
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	ebb0 0008 	subs.w	r0, r0, r8
 800c2aa:	eb61 0109 	sbc.w	r1, r1, r9
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	018b      	lsls	r3, r1, #6
 800c2b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c2bc:	0182      	lsls	r2, r0, #6
 800c2be:	1a12      	subs	r2, r2, r0
 800c2c0:	eb63 0301 	sbc.w	r3, r3, r1
 800c2c4:	f04f 0000 	mov.w	r0, #0
 800c2c8:	f04f 0100 	mov.w	r1, #0
 800c2cc:	00d9      	lsls	r1, r3, #3
 800c2ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c2d2:	00d0      	lsls	r0, r2, #3
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	eb12 0208 	adds.w	r2, r2, r8
 800c2dc:	eb43 0309 	adc.w	r3, r3, r9
 800c2e0:	f04f 0000 	mov.w	r0, #0
 800c2e4:	f04f 0100 	mov.w	r1, #0
 800c2e8:	0299      	lsls	r1, r3, #10
 800c2ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c2ee:	0290      	lsls	r0, r2, #10
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	f7f4 fcd2 	bl	8000ca8 <__aeabi_uldivmod>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4613      	mov	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	e04a      	b.n	800c3a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c30e:	4b31      	ldr	r3, [pc, #196]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	099b      	lsrs	r3, r3, #6
 800c314:	461a      	mov	r2, r3
 800c316:	f04f 0300 	mov.w	r3, #0
 800c31a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c31e:	f04f 0100 	mov.w	r1, #0
 800c322:	ea02 0400 	and.w	r4, r2, r0
 800c326:	ea03 0501 	and.w	r5, r3, r1
 800c32a:	4620      	mov	r0, r4
 800c32c:	4629      	mov	r1, r5
 800c32e:	f04f 0200 	mov.w	r2, #0
 800c332:	f04f 0300 	mov.w	r3, #0
 800c336:	014b      	lsls	r3, r1, #5
 800c338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c33c:	0142      	lsls	r2, r0, #5
 800c33e:	4610      	mov	r0, r2
 800c340:	4619      	mov	r1, r3
 800c342:	1b00      	subs	r0, r0, r4
 800c344:	eb61 0105 	sbc.w	r1, r1, r5
 800c348:	f04f 0200 	mov.w	r2, #0
 800c34c:	f04f 0300 	mov.w	r3, #0
 800c350:	018b      	lsls	r3, r1, #6
 800c352:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c356:	0182      	lsls	r2, r0, #6
 800c358:	1a12      	subs	r2, r2, r0
 800c35a:	eb63 0301 	sbc.w	r3, r3, r1
 800c35e:	f04f 0000 	mov.w	r0, #0
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	00d9      	lsls	r1, r3, #3
 800c368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c36c:	00d0      	lsls	r0, r2, #3
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	1912      	adds	r2, r2, r4
 800c374:	eb45 0303 	adc.w	r3, r5, r3
 800c378:	f04f 0000 	mov.w	r0, #0
 800c37c:	f04f 0100 	mov.w	r1, #0
 800c380:	0299      	lsls	r1, r3, #10
 800c382:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c386:	0290      	lsls	r0, r2, #10
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4610      	mov	r0, r2
 800c38e:	4619      	mov	r1, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	461a      	mov	r2, r3
 800c394:	f04f 0300 	mov.w	r3, #0
 800c398:	f7f4 fc86 	bl	8000ca8 <__aeabi_uldivmod>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	0c1b      	lsrs	r3, r3, #16
 800c3aa:	f003 0303 	and.w	r3, r3, #3
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3bc:	60bb      	str	r3, [r7, #8]
      break;
 800c3be:	e002      	b.n	800c3c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c3c2:	60bb      	str	r3, [r7, #8]
      break;
 800c3c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c3d2:	bf00      	nop
 800c3d4:	40023800 	.word	0x40023800
 800c3d8:	00f42400 	.word	0x00f42400

0800c3dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3e0:	4b03      	ldr	r3, [pc, #12]	; (800c3f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20000268 	.word	0x20000268

0800c3f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c3f8:	f7ff fff0 	bl	800c3dc <HAL_RCC_GetHCLKFreq>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	0a9b      	lsrs	r3, r3, #10
 800c404:	f003 0307 	and.w	r3, r3, #7
 800c408:	4903      	ldr	r1, [pc, #12]	; (800c418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c40a:	5ccb      	ldrb	r3, [r1, r3]
 800c40c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c410:	4618      	mov	r0, r3
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40023800 	.word	0x40023800
 800c418:	080169e4 	.word	0x080169e4

0800c41c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c420:	f7ff ffdc 	bl	800c3dc <HAL_RCC_GetHCLKFreq>
 800c424:	4602      	mov	r2, r0
 800c426:	4b05      	ldr	r3, [pc, #20]	; (800c43c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	0b5b      	lsrs	r3, r3, #13
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	4903      	ldr	r1, [pc, #12]	; (800c440 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c432:	5ccb      	ldrb	r3, [r1, r3]
 800c434:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c438:	4618      	mov	r0, r3
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	40023800 	.word	0x40023800
 800c440:	080169e4 	.word	0x080169e4

0800c444 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c450:	2300      	movs	r3, #0
 800c452:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d105      	bne.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d035      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c46c:	4b62      	ldr	r3, [pc, #392]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c472:	f7fc f901 	bl	8008678 <HAL_GetTick>
 800c476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c478:	e008      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c47a:	f7fc f8fd 	bl	8008678 <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e0b0      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c48c:	4b5b      	ldr	r3, [pc, #364]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1f0      	bne.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	019a      	lsls	r2, r3, #6
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	071b      	lsls	r3, r3, #28
 800c4a4:	4955      	ldr	r1, [pc, #340]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c4ac:	4b52      	ldr	r3, [pc, #328]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4b2:	f7fc f8e1 	bl	8008678 <HAL_GetTick>
 800c4b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4b8:	e008      	b.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c4ba:	f7fc f8dd 	bl	8008678 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e090      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4cc:	4b4b      	ldr	r3, [pc, #300]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0f0      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 8083 	beq.w	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	4b44      	ldr	r3, [pc, #272]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ee:	4a43      	ldr	r2, [pc, #268]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c4f6:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c502:	4b3f      	ldr	r3, [pc, #252]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a3e      	ldr	r2, [pc, #248]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c50c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c50e:	f7fc f8b3 	bl	8008678 <HAL_GetTick>
 800c512:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c514:	e008      	b.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c516:	f7fc f8af 	bl	8008678 <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b02      	cmp	r3, #2
 800c522:	d901      	bls.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e062      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c528:	4b35      	ldr	r3, [pc, #212]	; (800c600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0f0      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c534:	4b31      	ldr	r3, [pc, #196]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c53c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d02f      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d028      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c552:	4b2a      	ldr	r3, [pc, #168]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c55a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c55c:	4b29      	ldr	r3, [pc, #164]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c562:	4b28      	ldr	r3, [pc, #160]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c568:	4a24      	ldr	r2, [pc, #144]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c56e:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b01      	cmp	r3, #1
 800c578:	d114      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c57a:	f7fc f87d 	bl	8008678 <HAL_GetTick>
 800c57e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c580:	e00a      	b.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c582:	f7fc f879 	bl	8008678 <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c590:	4293      	cmp	r3, r2
 800c592:	d901      	bls.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e02a      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c598:	4b18      	ldr	r3, [pc, #96]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0ee      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5b0:	d10d      	bne.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c5b2:	4b12      	ldr	r3, [pc, #72]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5c6:	490d      	ldr	r1, [pc, #52]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	608b      	str	r3, [r1, #8]
 800c5cc:	e005      	b.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c5ce:	4b0b      	ldr	r3, [pc, #44]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c5d8:	6093      	str	r3, [r2, #8]
 800c5da:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5e6:	4905      	ldr	r1, [pc, #20]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	42470068 	.word	0x42470068
 800c5fc:	40023800 	.word	0x40023800
 800c600:	40007000 	.word	0x40007000
 800c604:	42470e40 	.word	0x42470e40

0800c608 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e01c      	b.n	800c654 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	795b      	ldrb	r3, [r3, #5]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7fb fbdc 	bl	8007de8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0204 	orr.w	r2, r2, #4
 800c644:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	791b      	ldrb	r3, [r3, #4]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d101      	bne.n	800c676 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c672:	2302      	movs	r3, #2
 800c674:	e03d      	b.n	800c6f2 <HAL_RNG_GenerateRandomNumber+0x96>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2201      	movs	r2, #1
 800c67a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	795b      	ldrb	r3, [r3, #5]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b01      	cmp	r3, #1
 800c684:	d12c      	bne.n	800c6e0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2202      	movs	r2, #2
 800c68a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c68c:	f7fb fff4 	bl	8008678 <HAL_GetTick>
 800c690:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c692:	e011      	b.n	800c6b8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c694:	f7fb fff0 	bl	8008678 <HAL_GetTick>
 800c698:	4602      	mov	r2, r0
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d90a      	bls.n	800c6b8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e01c      	b.n	800c6f2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d1e6      	bne.n	800c694 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68da      	ldr	r2, [r3, #12]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	715a      	strb	r2, [r3, #5]
 800c6de:	e004      	b.n	800c6ea <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2204      	movs	r2, #4
 800c6e4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	711a      	strb	r2, [r3, #4]

  return status;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	330c      	adds	r3, #12
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff ffa7 	bl	800c65c <HAL_RNG_GenerateRandomNumber>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	e000      	b.n	800c71c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800c71a:	2300      	movs	r3, #0
  }
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f003 0320 	and.w	r3, r3, #32
 800c73a:	2b20      	cmp	r3, #32
 800c73c:	d105      	bne.n	800c74a <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2210      	movs	r2, #16
 800c742:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800c744:	2301      	movs	r3, #1
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e00b      	b.n	800c762 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c754:	2b40      	cmp	r3, #64	; 0x40
 800c756:	d104      	bne.n	800c762 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2208      	movs	r2, #8
 800c75c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800c75e:	2301      	movs	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d10a      	bne.n	800c77e <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2204      	movs	r2, #4
 800c76c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f839 	bl	800c7e6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800c77c:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d11d      	bne.n	800c7c8 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f022 0208 	bic.w	r2, r2, #8
 800c79a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	795b      	ldrb	r3, [r3, #5]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d00b      	beq.n	800c7c8 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f804 	bl	800c7d0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800c7da:	bf00      	nop
 800c7dc:	370c      	adds	r7, #12
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b083      	sub	sp, #12
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800c7ee:	bf00      	nop
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	e083      	b.n	800c914 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7f5b      	ldrb	r3, [r3, #29]
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d105      	bne.n	800c822 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7fb fb0b 	bl	8007e38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2202      	movs	r2, #2
 800c826:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	22ca      	movs	r2, #202	; 0xca
 800c82e:	625a      	str	r2, [r3, #36]	; 0x24
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2253      	movs	r2, #83	; 0x53
 800c836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 faa8 	bl	800cd8e <RTC_EnterInitMode>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d008      	beq.n	800c856 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	22ff      	movs	r2, #255	; 0xff
 800c84a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2204      	movs	r2, #4
 800c850:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	e05e      	b.n	800c914 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	6812      	ldr	r2, [r2, #0]
 800c860:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c868:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6899      	ldr	r1, [r3, #8]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	431a      	orrs	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	68d2      	ldr	r2, [r2, #12]
 800c890:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6919      	ldr	r1, [r3, #16]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	041a      	lsls	r2, r3, #16
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8b4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10e      	bne.n	800c8e2 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fa3a 	bl	800cd3e <HAL_RTC_WaitForSynchro>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d008      	beq.n	800c8e2 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	22ff      	movs	r2, #255	; 0xff
 800c8d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2204      	movs	r2, #4
 800c8dc:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e018      	b.n	800c914 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c8f0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	699a      	ldr	r2, [r3, #24]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	22ff      	movs	r2, #255	; 0xff
 800c90a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c912:	2300      	movs	r3, #0
  }
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c91c:	b590      	push	{r4, r7, lr}
 800c91e:	b087      	sub	sp, #28
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c928:	2300      	movs	r3, #0
 800c92a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	7f1b      	ldrb	r3, [r3, #28]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d101      	bne.n	800c938 <HAL_RTC_SetTime+0x1c>
 800c934:	2302      	movs	r3, #2
 800c936:	e0aa      	b.n	800ca8e <HAL_RTC_SetTime+0x172>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2201      	movs	r2, #1
 800c93c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2202      	movs	r2, #2
 800c942:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d126      	bne.n	800c998 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	d102      	bne.n	800c95e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fa3f 	bl	800cde6 <RTC_ByteToBcd2>
 800c968:	4603      	mov	r3, r0
 800c96a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	785b      	ldrb	r3, [r3, #1]
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fa38 	bl	800cde6 <RTC_ByteToBcd2>
 800c976:	4603      	mov	r3, r0
 800c978:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c97a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	789b      	ldrb	r3, [r3, #2]
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fa30 	bl	800cde6 <RTC_ByteToBcd2>
 800c986:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c988:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	78db      	ldrb	r3, [r3, #3]
 800c990:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	e018      	b.n	800c9ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d102      	bne.n	800c9ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c9b8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c9be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	78db      	ldrb	r3, [r3, #3]
 800c9c4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	22ca      	movs	r2, #202	; 0xca
 800c9d0:	625a      	str	r2, [r3, #36]	; 0x24
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2253      	movs	r2, #83	; 0x53
 800c9d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f000 f9d7 	bl	800cd8e <RTC_EnterInitMode>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	22ff      	movs	r2, #255	; 0xff
 800c9ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e047      	b.n	800ca8e <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca0c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca1c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	6899      	ldr	r1, [r3, #8]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	68da      	ldr	r2, [r3, #12]
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	430a      	orrs	r2, r1
 800ca34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca44:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f003 0320 	and.w	r3, r3, #32
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d111      	bne.n	800ca78 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 f972 	bl	800cd3e <HAL_RTC_WaitForSynchro>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00b      	beq.n	800ca78 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	22ff      	movs	r2, #255	; 0xff
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2204      	movs	r2, #4
 800ca6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e00a      	b.n	800ca8e <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	22ff      	movs	r2, #255	; 0xff
 800ca7e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2201      	movs	r2, #1
 800ca84:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
  }
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	371c      	adds	r7, #28
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd90      	pop	{r4, r7, pc}

0800ca96 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b086      	sub	sp, #24
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cac8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cacc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	0c1b      	lsrs	r3, r3, #16
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	0a1b      	lsrs	r3, r3, #8
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	0c1b      	lsrs	r3, r3, #16
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d11a      	bne.n	800cb48 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 f983 	bl	800ce22 <RTC_Bcd2ToByte>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 f97a 	bl	800ce22 <RTC_Bcd2ToByte>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	789b      	ldrb	r3, [r3, #2]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 f971 	bl	800ce22 <RTC_Bcd2ToByte>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb52:	b590      	push	{r4, r7, lr}
 800cb54:	b087      	sub	sp, #28
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	60f8      	str	r0, [r7, #12]
 800cb5a:	60b9      	str	r1, [r7, #8]
 800cb5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	7f1b      	ldrb	r3, [r3, #28]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d101      	bne.n	800cb6e <HAL_RTC_SetDate+0x1c>
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	e094      	b.n	800cc98 <HAL_RTC_SetDate+0x146>
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2201      	movs	r2, #1
 800cb72:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2202      	movs	r2, #2
 800cb78:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10e      	bne.n	800cb9e <HAL_RTC_SetDate+0x4c>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	785b      	ldrb	r3, [r3, #1]
 800cb84:	f003 0310 	and.w	r3, r3, #16
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d008      	beq.n	800cb9e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	785b      	ldrb	r3, [r3, #1]
 800cb90:	f023 0310 	bic.w	r3, r3, #16
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	330a      	adds	r3, #10
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11c      	bne.n	800cbde <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	78db      	ldrb	r3, [r3, #3]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 f91c 	bl	800cde6 <RTC_ByteToBcd2>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	785b      	ldrb	r3, [r3, #1]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f915 	bl	800cde6 <RTC_ByteToBcd2>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cbc0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	789b      	ldrb	r3, [r3, #2]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 f90d 	bl	800cde6 <RTC_ByteToBcd2>
 800cbcc:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cbce:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e00e      	b.n	800cbfc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	78db      	ldrb	r3, [r3, #3]
 800cbe2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cbea:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800cbf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	22ca      	movs	r2, #202	; 0xca
 800cc02:	625a      	str	r2, [r3, #36]	; 0x24
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2253      	movs	r2, #83	; 0x53
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f8be 	bl	800cd8e <RTC_EnterInitMode>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00b      	beq.n	800cc30 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	22ff      	movs	r2, #255	; 0xff
 800cc1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2204      	movs	r2, #4
 800cc24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e033      	b.n	800cc98 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc3e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68da      	ldr	r2, [r3, #12]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 0320 	and.w	r3, r3, #32
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d111      	bne.n	800cc82 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 f86d 	bl	800cd3e <HAL_RTC_WaitForSynchro>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00b      	beq.n	800cc82 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	22ff      	movs	r2, #255	; 0xff
 800cc70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2204      	movs	r2, #4
 800cc76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e00a      	b.n	800cc98 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	22ff      	movs	r2, #255	; 0xff
 800cc88:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800cc96:	2300      	movs	r3, #0
  }
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	371c      	adds	r7, #28
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd90      	pop	{r4, r7, pc}

0800cca0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ccba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ccbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	0c1b      	lsrs	r3, r3, #16
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	0a1b      	lsrs	r3, r3, #8
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	f003 031f 	and.w	r3, r3, #31
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	0b5b      	lsrs	r3, r3, #13
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d11a      	bne.n	800cd34 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	78db      	ldrb	r3, [r3, #3]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f88d 	bl	800ce22 <RTC_Bcd2ToByte>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	785b      	ldrb	r3, [r3, #1]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 f884 	bl	800ce22 <RTC_Bcd2ToByte>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	789b      	ldrb	r3, [r3, #2]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f87b 	bl	800ce22 <RTC_Bcd2ToByte>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	461a      	mov	r2, r3
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68da      	ldr	r2, [r3, #12]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd5a:	f7fb fc8d 	bl	8008678 <HAL_GetTick>
 800cd5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cd60:	e009      	b.n	800cd76 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cd62:	f7fb fc89 	bl	8008678 <HAL_GetTick>
 800cd66:	4602      	mov	r2, r0
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd70:	d901      	bls.n	800cd76 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e007      	b.n	800cd86 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f003 0320 	and.w	r3, r3, #32
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0ee      	beq.n	800cd62 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d119      	bne.n	800cddc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cdb2:	f7fb fc61 	bl	8008678 <HAL_GetTick>
 800cdb6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cdb8:	e009      	b.n	800cdce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cdba:	f7fb fc5d 	bl	8008678 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdc8:	d901      	bls.n	800cdce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e007      	b.n	800cdde <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d0ee      	beq.n	800cdba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b085      	sub	sp, #20
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	4603      	mov	r3, r0
 800cdee:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800cdf4:	e005      	b.n	800ce02 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	3b0a      	subs	r3, #10
 800ce00:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800ce02:	79fb      	ldrb	r3, [r7, #7]
 800ce04:	2b09      	cmp	r3, #9
 800ce06:	d8f6      	bhi.n	800cdf6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	b2db      	uxtb	r3, r3
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	4603      	mov	r3, r0
 800ce2a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ce30:	79fb      	ldrb	r3, [r7, #7]
 800ce32:	091b      	lsrs	r3, r3, #4
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	f003 030f 	and.w	r3, r3, #15
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	4413      	add	r3, r2
 800ce50:	b2db      	uxtb	r3, r3
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3714      	adds	r7, #20
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr

0800ce5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b082      	sub	sp, #8
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e041      	b.n	800cef4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d106      	bne.n	800ce8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7fa ffed 	bl	8007e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f000 fcd9 	bl	800d854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d001      	beq.n	800cf14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e046      	b.n	800cfa2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2202      	movs	r2, #2
 800cf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a23      	ldr	r2, [pc, #140]	; (800cfb0 <HAL_TIM_Base_Start+0xb4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d022      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf2e:	d01d      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a1f      	ldr	r2, [pc, #124]	; (800cfb4 <HAL_TIM_Base_Start+0xb8>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d018      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a1e      	ldr	r2, [pc, #120]	; (800cfb8 <HAL_TIM_Base_Start+0xbc>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d013      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a1c      	ldr	r2, [pc, #112]	; (800cfbc <HAL_TIM_Base_Start+0xc0>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00e      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a1b      	ldr	r2, [pc, #108]	; (800cfc0 <HAL_TIM_Base_Start+0xc4>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d009      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a19      	ldr	r2, [pc, #100]	; (800cfc4 <HAL_TIM_Base_Start+0xc8>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d004      	beq.n	800cf6c <HAL_TIM_Base_Start+0x70>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a18      	ldr	r2, [pc, #96]	; (800cfc8 <HAL_TIM_Base_Start+0xcc>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d111      	bne.n	800cf90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f003 0307 	and.w	r3, r3, #7
 800cf76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b06      	cmp	r3, #6
 800cf7c:	d010      	beq.n	800cfa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f042 0201 	orr.w	r2, r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf8e:	e007      	b.n	800cfa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f042 0201 	orr.w	r2, r2, #1
 800cf9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	40010000 	.word	0x40010000
 800cfb4:	40000400 	.word	0x40000400
 800cfb8:	40000800 	.word	0x40000800
 800cfbc:	40000c00 	.word	0x40000c00
 800cfc0:	40010400 	.word	0x40010400
 800cfc4:	40014000 	.word	0x40014000
 800cfc8:	40001800 	.word	0x40001800

0800cfcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b085      	sub	sp, #20
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d001      	beq.n	800cfe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e04e      	b.n	800d082 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68da      	ldr	r2, [r3, #12]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f042 0201 	orr.w	r2, r2, #1
 800cffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a23      	ldr	r2, [pc, #140]	; (800d090 <HAL_TIM_Base_Start_IT+0xc4>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d022      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d00e:	d01d      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1f      	ldr	r2, [pc, #124]	; (800d094 <HAL_TIM_Base_Start_IT+0xc8>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d018      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a1e      	ldr	r2, [pc, #120]	; (800d098 <HAL_TIM_Base_Start_IT+0xcc>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d013      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a1c      	ldr	r2, [pc, #112]	; (800d09c <HAL_TIM_Base_Start_IT+0xd0>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00e      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a1b      	ldr	r2, [pc, #108]	; (800d0a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d009      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a19      	ldr	r2, [pc, #100]	; (800d0a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d004      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x80>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a18      	ldr	r2, [pc, #96]	; (800d0a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d111      	bne.n	800d070 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	f003 0307 	and.w	r3, r3, #7
 800d056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b06      	cmp	r3, #6
 800d05c:	d010      	beq.n	800d080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f042 0201 	orr.w	r2, r2, #1
 800d06c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d06e:	e007      	b.n	800d080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f042 0201 	orr.w	r2, r2, #1
 800d07e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	40010000 	.word	0x40010000
 800d094:	40000400 	.word	0x40000400
 800d098:	40000800 	.word	0x40000800
 800d09c:	40000c00 	.word	0x40000c00
 800d0a0:	40010400 	.word	0x40010400
 800d0a4:	40014000 	.word	0x40014000
 800d0a8:	40001800 	.word	0x40001800

0800d0ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e041      	b.n	800d142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f839 	bl	800d14a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	f000 fbb2 	bl	800d854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d152:	bf00      	nop
 800d154:	370c      	adds	r7, #12
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
	...

0800d160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d109      	bne.n	800d184 <HAL_TIM_PWM_Start+0x24>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b01      	cmp	r3, #1
 800d17a:	bf14      	ite	ne
 800d17c:	2301      	movne	r3, #1
 800d17e:	2300      	moveq	r3, #0
 800d180:	b2db      	uxtb	r3, r3
 800d182:	e022      	b.n	800d1ca <HAL_TIM_PWM_Start+0x6a>
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	2b04      	cmp	r3, #4
 800d188:	d109      	bne.n	800d19e <HAL_TIM_PWM_Start+0x3e>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b01      	cmp	r3, #1
 800d194:	bf14      	ite	ne
 800d196:	2301      	movne	r3, #1
 800d198:	2300      	moveq	r3, #0
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	e015      	b.n	800d1ca <HAL_TIM_PWM_Start+0x6a>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b08      	cmp	r3, #8
 800d1a2:	d109      	bne.n	800d1b8 <HAL_TIM_PWM_Start+0x58>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	bf14      	ite	ne
 800d1b0:	2301      	movne	r3, #1
 800d1b2:	2300      	moveq	r3, #0
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	e008      	b.n	800d1ca <HAL_TIM_PWM_Start+0x6a>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	bf14      	ite	ne
 800d1c4:	2301      	movne	r3, #1
 800d1c6:	2300      	moveq	r3, #0
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e07c      	b.n	800d2cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <HAL_TIM_PWM_Start+0x82>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1e0:	e013      	b.n	800d20a <HAL_TIM_PWM_Start+0xaa>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b04      	cmp	r3, #4
 800d1e6:	d104      	bne.n	800d1f2 <HAL_TIM_PWM_Start+0x92>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1f0:	e00b      	b.n	800d20a <HAL_TIM_PWM_Start+0xaa>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b08      	cmp	r3, #8
 800d1f6:	d104      	bne.n	800d202 <HAL_TIM_PWM_Start+0xa2>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d200:	e003      	b.n	800d20a <HAL_TIM_PWM_Start+0xaa>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2202      	movs	r2, #2
 800d206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2201      	movs	r2, #1
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fe08 	bl	800de28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a2d      	ldr	r2, [pc, #180]	; (800d2d4 <HAL_TIM_PWM_Start+0x174>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d004      	beq.n	800d22c <HAL_TIM_PWM_Start+0xcc>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a2c      	ldr	r2, [pc, #176]	; (800d2d8 <HAL_TIM_PWM_Start+0x178>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d101      	bne.n	800d230 <HAL_TIM_PWM_Start+0xd0>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e000      	b.n	800d232 <HAL_TIM_PWM_Start+0xd2>
 800d230:	2300      	movs	r3, #0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d007      	beq.n	800d246 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a22      	ldr	r2, [pc, #136]	; (800d2d4 <HAL_TIM_PWM_Start+0x174>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d022      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d258:	d01d      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a1f      	ldr	r2, [pc, #124]	; (800d2dc <HAL_TIM_PWM_Start+0x17c>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d018      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a1d      	ldr	r2, [pc, #116]	; (800d2e0 <HAL_TIM_PWM_Start+0x180>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d013      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a1c      	ldr	r2, [pc, #112]	; (800d2e4 <HAL_TIM_PWM_Start+0x184>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d00e      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a16      	ldr	r2, [pc, #88]	; (800d2d8 <HAL_TIM_PWM_Start+0x178>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d009      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <HAL_TIM_PWM_Start+0x188>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d004      	beq.n	800d296 <HAL_TIM_PWM_Start+0x136>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a16      	ldr	r2, [pc, #88]	; (800d2ec <HAL_TIM_PWM_Start+0x18c>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d111      	bne.n	800d2ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	f003 0307 	and.w	r3, r3, #7
 800d2a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b06      	cmp	r3, #6
 800d2a6:	d010      	beq.n	800d2ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f042 0201 	orr.w	r2, r2, #1
 800d2b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2b8:	e007      	b.n	800d2ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f042 0201 	orr.w	r2, r2, #1
 800d2c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	40010000 	.word	0x40010000
 800d2d8:	40010400 	.word	0x40010400
 800d2dc:	40000400 	.word	0x40000400
 800d2e0:	40000800 	.word	0x40000800
 800d2e4:	40000c00 	.word	0x40000c00
 800d2e8:	40014000 	.word	0x40014000
 800d2ec:	40001800 	.word	0x40001800

0800d2f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b02      	cmp	r3, #2
 800d304:	d122      	bne.n	800d34c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	2b02      	cmp	r3, #2
 800d312:	d11b      	bne.n	800d34c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f06f 0202 	mvn.w	r2, #2
 800d31c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	f003 0303 	and.w	r3, r3, #3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fa70 	bl	800d818 <HAL_TIM_IC_CaptureCallback>
 800d338:	e005      	b.n	800d346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fa62 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fa73 	bl	800d82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	2b04      	cmp	r3, #4
 800d358:	d122      	bne.n	800d3a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b04      	cmp	r3, #4
 800d366:	d11b      	bne.n	800d3a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f06f 0204 	mvn.w	r2, #4
 800d370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2202      	movs	r2, #2
 800d376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fa46 	bl	800d818 <HAL_TIM_IC_CaptureCallback>
 800d38c:	e005      	b.n	800d39a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 fa38 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fa49 	bl	800d82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0308 	and.w	r3, r3, #8
 800d3aa:	2b08      	cmp	r3, #8
 800d3ac:	d122      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f003 0308 	and.w	r3, r3, #8
 800d3b8:	2b08      	cmp	r3, #8
 800d3ba:	d11b      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f06f 0208 	mvn.w	r2, #8
 800d3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	f003 0303 	and.w	r3, r3, #3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa1c 	bl	800d818 <HAL_TIM_IC_CaptureCallback>
 800d3e0:	e005      	b.n	800d3ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa0e 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fa1f 	bl	800d82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	f003 0310 	and.w	r3, r3, #16
 800d3fe:	2b10      	cmp	r3, #16
 800d400:	d122      	bne.n	800d448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f003 0310 	and.w	r3, r3, #16
 800d40c:	2b10      	cmp	r3, #16
 800d40e:	d11b      	bne.n	800d448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f06f 0210 	mvn.w	r2, #16
 800d418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2208      	movs	r2, #8
 800d41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	69db      	ldr	r3, [r3, #28]
 800d426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d003      	beq.n	800d436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f9f2 	bl	800d818 <HAL_TIM_IC_CaptureCallback>
 800d434:	e005      	b.n	800d442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f9e4 	bl	800d804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f9f5 	bl	800d82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	2b01      	cmp	r3, #1
 800d454:	d10e      	bne.n	800d474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	f003 0301 	and.w	r3, r3, #1
 800d460:	2b01      	cmp	r3, #1
 800d462:	d107      	bne.n	800d474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f06f 0201 	mvn.w	r2, #1
 800d46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7f9 f996 	bl	80067a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d47e:	2b80      	cmp	r3, #128	; 0x80
 800d480:	d10e      	bne.n	800d4a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d48c:	2b80      	cmp	r3, #128	; 0x80
 800d48e:	d107      	bne.n	800d4a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fd70 	bl	800df80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4aa:	2b40      	cmp	r3, #64	; 0x40
 800d4ac:	d10e      	bne.n	800d4cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b8:	2b40      	cmp	r3, #64	; 0x40
 800d4ba:	d107      	bne.n	800d4cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f9ba 	bl	800d840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	f003 0320 	and.w	r3, r3, #32
 800d4d6:	2b20      	cmp	r3, #32
 800d4d8:	d10e      	bne.n	800d4f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f003 0320 	and.w	r3, r3, #32
 800d4e4:	2b20      	cmp	r3, #32
 800d4e6:	d107      	bne.n	800d4f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f06f 0220 	mvn.w	r2, #32
 800d4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fd3a 	bl	800df6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d512:	2b01      	cmp	r3, #1
 800d514:	d101      	bne.n	800d51a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d516:	2302      	movs	r3, #2
 800d518:	e0ac      	b.n	800d674 <HAL_TIM_PWM_ConfigChannel+0x174>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b0c      	cmp	r3, #12
 800d526:	f200 809f 	bhi.w	800d668 <HAL_TIM_PWM_ConfigChannel+0x168>
 800d52a:	a201      	add	r2, pc, #4	; (adr r2, 800d530 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d530:	0800d565 	.word	0x0800d565
 800d534:	0800d669 	.word	0x0800d669
 800d538:	0800d669 	.word	0x0800d669
 800d53c:	0800d669 	.word	0x0800d669
 800d540:	0800d5a5 	.word	0x0800d5a5
 800d544:	0800d669 	.word	0x0800d669
 800d548:	0800d669 	.word	0x0800d669
 800d54c:	0800d669 	.word	0x0800d669
 800d550:	0800d5e7 	.word	0x0800d5e7
 800d554:	0800d669 	.word	0x0800d669
 800d558:	0800d669 	.word	0x0800d669
 800d55c:	0800d669 	.word	0x0800d669
 800d560:	0800d627 	.word	0x0800d627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 fa12 	bl	800d994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699a      	ldr	r2, [r3, #24]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f042 0208 	orr.w	r2, r2, #8
 800d57e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	699a      	ldr	r2, [r3, #24]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f022 0204 	bic.w	r2, r2, #4
 800d58e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6999      	ldr	r1, [r3, #24]
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	691a      	ldr	r2, [r3, #16]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	619a      	str	r2, [r3, #24]
      break;
 800d5a2:	e062      	b.n	800d66a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 fa62 	bl	800da74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	699a      	ldr	r2, [r3, #24]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	699a      	ldr	r2, [r3, #24]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6999      	ldr	r1, [r3, #24]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	021a      	lsls	r2, r3, #8
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	619a      	str	r2, [r3, #24]
      break;
 800d5e4:	e041      	b.n	800d66a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 fab7 	bl	800db60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	69da      	ldr	r2, [r3, #28]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f042 0208 	orr.w	r2, r2, #8
 800d600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	69da      	ldr	r2, [r3, #28]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 0204 	bic.w	r2, r2, #4
 800d610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	69d9      	ldr	r1, [r3, #28]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	691a      	ldr	r2, [r3, #16]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	430a      	orrs	r2, r1
 800d622:	61da      	str	r2, [r3, #28]
      break;
 800d624:	e021      	b.n	800d66a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 fb0b 	bl	800dc48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	69da      	ldr	r2, [r3, #28]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	69da      	ldr	r2, [r3, #28]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	69d9      	ldr	r1, [r3, #28]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	021a      	lsls	r2, r3, #8
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	430a      	orrs	r2, r1
 800d664:	61da      	str	r2, [r3, #28]
      break;
 800d666:	e000      	b.n	800d66a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800d668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d101      	bne.n	800d694 <HAL_TIM_ConfigClockSource+0x18>
 800d690:	2302      	movs	r3, #2
 800d692:	e0b3      	b.n	800d7fc <HAL_TIM_ConfigClockSource+0x180>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d6b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6cc:	d03e      	beq.n	800d74c <HAL_TIM_ConfigClockSource+0xd0>
 800d6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6d2:	f200 8087 	bhi.w	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6da:	f000 8085 	beq.w	800d7e8 <HAL_TIM_ConfigClockSource+0x16c>
 800d6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6e2:	d87f      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d6e4:	2b70      	cmp	r3, #112	; 0x70
 800d6e6:	d01a      	beq.n	800d71e <HAL_TIM_ConfigClockSource+0xa2>
 800d6e8:	2b70      	cmp	r3, #112	; 0x70
 800d6ea:	d87b      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d6ec:	2b60      	cmp	r3, #96	; 0x60
 800d6ee:	d050      	beq.n	800d792 <HAL_TIM_ConfigClockSource+0x116>
 800d6f0:	2b60      	cmp	r3, #96	; 0x60
 800d6f2:	d877      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d6f4:	2b50      	cmp	r3, #80	; 0x50
 800d6f6:	d03c      	beq.n	800d772 <HAL_TIM_ConfigClockSource+0xf6>
 800d6f8:	2b50      	cmp	r3, #80	; 0x50
 800d6fa:	d873      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d6fc:	2b40      	cmp	r3, #64	; 0x40
 800d6fe:	d058      	beq.n	800d7b2 <HAL_TIM_ConfigClockSource+0x136>
 800d700:	2b40      	cmp	r3, #64	; 0x40
 800d702:	d86f      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d704:	2b30      	cmp	r3, #48	; 0x30
 800d706:	d064      	beq.n	800d7d2 <HAL_TIM_ConfigClockSource+0x156>
 800d708:	2b30      	cmp	r3, #48	; 0x30
 800d70a:	d86b      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	d060      	beq.n	800d7d2 <HAL_TIM_ConfigClockSource+0x156>
 800d710:	2b20      	cmp	r3, #32
 800d712:	d867      	bhi.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d05c      	beq.n	800d7d2 <HAL_TIM_ConfigClockSource+0x156>
 800d718:	2b10      	cmp	r3, #16
 800d71a:	d05a      	beq.n	800d7d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d71c:	e062      	b.n	800d7e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6818      	ldr	r0, [r3, #0]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	6899      	ldr	r1, [r3, #8]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	f000 fb5b 	bl	800dde8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d740:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	609a      	str	r2, [r3, #8]
      break;
 800d74a:	e04e      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	6899      	ldr	r1, [r3, #8]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f000 fb44 	bl	800dde8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	689a      	ldr	r2, [r3, #8]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d76e:	609a      	str	r2, [r3, #8]
      break;
 800d770:	e03b      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6818      	ldr	r0, [r3, #0]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	6859      	ldr	r1, [r3, #4]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	461a      	mov	r2, r3
 800d780:	f000 fab8 	bl	800dcf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2150      	movs	r1, #80	; 0x50
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 fb11 	bl	800ddb2 <TIM_ITRx_SetConfig>
      break;
 800d790:	e02b      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6818      	ldr	r0, [r3, #0]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	6859      	ldr	r1, [r3, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	f000 fad7 	bl	800dd52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2160      	movs	r1, #96	; 0x60
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fb01 	bl	800ddb2 <TIM_ITRx_SetConfig>
      break;
 800d7b0:	e01b      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	6859      	ldr	r1, [r3, #4]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f000 fa98 	bl	800dcf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2140      	movs	r1, #64	; 0x40
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 faf1 	bl	800ddb2 <TIM_ITRx_SetConfig>
      break;
 800d7d0:	e00b      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4610      	mov	r0, r2
 800d7de:	f000 fae8 	bl	800ddb2 <TIM_ITRx_SetConfig>
        break;
 800d7e2:	e002      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d7e4:	bf00      	nop
 800d7e6:	e000      	b.n	800d7ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d7e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d834:	bf00      	nop
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d848:	bf00      	nop
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a40      	ldr	r2, [pc, #256]	; (800d968 <TIM_Base_SetConfig+0x114>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d013      	beq.n	800d894 <TIM_Base_SetConfig+0x40>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d872:	d00f      	beq.n	800d894 <TIM_Base_SetConfig+0x40>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a3d      	ldr	r2, [pc, #244]	; (800d96c <TIM_Base_SetConfig+0x118>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d00b      	beq.n	800d894 <TIM_Base_SetConfig+0x40>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a3c      	ldr	r2, [pc, #240]	; (800d970 <TIM_Base_SetConfig+0x11c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d007      	beq.n	800d894 <TIM_Base_SetConfig+0x40>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a3b      	ldr	r2, [pc, #236]	; (800d974 <TIM_Base_SetConfig+0x120>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d003      	beq.n	800d894 <TIM_Base_SetConfig+0x40>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a3a      	ldr	r2, [pc, #232]	; (800d978 <TIM_Base_SetConfig+0x124>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d108      	bne.n	800d8a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d89a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a2f      	ldr	r2, [pc, #188]	; (800d968 <TIM_Base_SetConfig+0x114>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d02b      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8b4:	d027      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a2c      	ldr	r2, [pc, #176]	; (800d96c <TIM_Base_SetConfig+0x118>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d023      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4a2b      	ldr	r2, [pc, #172]	; (800d970 <TIM_Base_SetConfig+0x11c>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d01f      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a2a      	ldr	r2, [pc, #168]	; (800d974 <TIM_Base_SetConfig+0x120>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d01b      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4a29      	ldr	r2, [pc, #164]	; (800d978 <TIM_Base_SetConfig+0x124>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d017      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4a28      	ldr	r2, [pc, #160]	; (800d97c <TIM_Base_SetConfig+0x128>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d013      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a27      	ldr	r2, [pc, #156]	; (800d980 <TIM_Base_SetConfig+0x12c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d00f      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4a26      	ldr	r2, [pc, #152]	; (800d984 <TIM_Base_SetConfig+0x130>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d00b      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4a25      	ldr	r2, [pc, #148]	; (800d988 <TIM_Base_SetConfig+0x134>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d007      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4a24      	ldr	r2, [pc, #144]	; (800d98c <TIM_Base_SetConfig+0x138>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d003      	beq.n	800d906 <TIM_Base_SetConfig+0xb2>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4a23      	ldr	r2, [pc, #140]	; (800d990 <TIM_Base_SetConfig+0x13c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d108      	bne.n	800d918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d90c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4313      	orrs	r3, r2
 800d916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	4313      	orrs	r3, r2
 800d924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	4a0a      	ldr	r2, [pc, #40]	; (800d968 <TIM_Base_SetConfig+0x114>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d003      	beq.n	800d94c <TIM_Base_SetConfig+0xf8>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	4a0c      	ldr	r2, [pc, #48]	; (800d978 <TIM_Base_SetConfig+0x124>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d103      	bne.n	800d954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	691a      	ldr	r2, [r3, #16]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	615a      	str	r2, [r3, #20]
}
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	40010000 	.word	0x40010000
 800d96c:	40000400 	.word	0x40000400
 800d970:	40000800 	.word	0x40000800
 800d974:	40000c00 	.word	0x40000c00
 800d978:	40010400 	.word	0x40010400
 800d97c:	40014000 	.word	0x40014000
 800d980:	40014400 	.word	0x40014400
 800d984:	40014800 	.word	0x40014800
 800d988:	40001800 	.word	0x40001800
 800d98c:	40001c00 	.word	0x40001c00
 800d990:	40002000 	.word	0x40002000

0800d994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d994:	b480      	push	{r7}
 800d996:	b087      	sub	sp, #28
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	f023 0201 	bic.w	r2, r3, #1
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f023 0303 	bic.w	r3, r3, #3
 800d9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f023 0302 	bic.w	r3, r3, #2
 800d9dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	697a      	ldr	r2, [r7, #20]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a20      	ldr	r2, [pc, #128]	; (800da6c <TIM_OC1_SetConfig+0xd8>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d003      	beq.n	800d9f8 <TIM_OC1_SetConfig+0x64>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a1f      	ldr	r2, [pc, #124]	; (800da70 <TIM_OC1_SetConfig+0xdc>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d10c      	bne.n	800da12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f023 0308 	bic.w	r3, r3, #8
 800d9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	4313      	orrs	r3, r2
 800da08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f023 0304 	bic.w	r3, r3, #4
 800da10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a15      	ldr	r2, [pc, #84]	; (800da6c <TIM_OC1_SetConfig+0xd8>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d003      	beq.n	800da22 <TIM_OC1_SetConfig+0x8e>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a14      	ldr	r2, [pc, #80]	; (800da70 <TIM_OC1_SetConfig+0xdc>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d111      	bne.n	800da46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	4313      	orrs	r3, r2
 800da3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	699b      	ldr	r3, [r3, #24]
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	4313      	orrs	r3, r2
 800da44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	685a      	ldr	r2, [r3, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	621a      	str	r2, [r3, #32]
}
 800da60:	bf00      	nop
 800da62:	371c      	adds	r7, #28
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	40010000 	.word	0x40010000
 800da70:	40010400 	.word	0x40010400

0800da74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da74:	b480      	push	{r7}
 800da76:	b087      	sub	sp, #28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a1b      	ldr	r3, [r3, #32]
 800da82:	f023 0210 	bic.w	r2, r3, #16
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	699b      	ldr	r3, [r3, #24]
 800da9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f023 0320 	bic.w	r3, r3, #32
 800dabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	011b      	lsls	r3, r3, #4
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	4313      	orrs	r3, r2
 800daca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a22      	ldr	r2, [pc, #136]	; (800db58 <TIM_OC2_SetConfig+0xe4>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d003      	beq.n	800dadc <TIM_OC2_SetConfig+0x68>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a21      	ldr	r2, [pc, #132]	; (800db5c <TIM_OC2_SetConfig+0xe8>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d10d      	bne.n	800daf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	011b      	lsls	r3, r3, #4
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	4313      	orrs	r3, r2
 800daee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a17      	ldr	r2, [pc, #92]	; (800db58 <TIM_OC2_SetConfig+0xe4>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d003      	beq.n	800db08 <TIM_OC2_SetConfig+0x94>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a16      	ldr	r2, [pc, #88]	; (800db5c <TIM_OC2_SetConfig+0xe8>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d113      	bne.n	800db30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	4313      	orrs	r3, r2
 800db22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	621a      	str	r2, [r3, #32]
}
 800db4a:	bf00      	nop
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	40010000 	.word	0x40010000
 800db5c:	40010400 	.word	0x40010400

0800db60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db60:	b480      	push	{r7}
 800db62:	b087      	sub	sp, #28
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f023 0303 	bic.w	r3, r3, #3
 800db96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	4313      	orrs	r3, r2
 800dba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	021b      	lsls	r3, r3, #8
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a21      	ldr	r2, [pc, #132]	; (800dc40 <TIM_OC3_SetConfig+0xe0>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d003      	beq.n	800dbc6 <TIM_OC3_SetConfig+0x66>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a20      	ldr	r2, [pc, #128]	; (800dc44 <TIM_OC3_SetConfig+0xe4>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d10d      	bne.n	800dbe2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	021b      	lsls	r3, r3, #8
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4a16      	ldr	r2, [pc, #88]	; (800dc40 <TIM_OC3_SetConfig+0xe0>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d003      	beq.n	800dbf2 <TIM_OC3_SetConfig+0x92>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a15      	ldr	r2, [pc, #84]	; (800dc44 <TIM_OC3_SetConfig+0xe4>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d113      	bne.n	800dc1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	011b      	lsls	r3, r3, #4
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	011b      	lsls	r3, r3, #4
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	621a      	str	r2, [r3, #32]
}
 800dc34:	bf00      	nop
 800dc36:	371c      	adds	r7, #28
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	40010000 	.word	0x40010000
 800dc44:	40010400 	.word	0x40010400

0800dc48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	021b      	lsls	r3, r3, #8
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	031b      	lsls	r3, r3, #12
 800dc9a:	693a      	ldr	r2, [r7, #16]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a12      	ldr	r2, [pc, #72]	; (800dcec <TIM_OC4_SetConfig+0xa4>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d003      	beq.n	800dcb0 <TIM_OC4_SetConfig+0x68>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a11      	ldr	r2, [pc, #68]	; (800dcf0 <TIM_OC4_SetConfig+0xa8>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d109      	bne.n	800dcc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dcb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	019b      	lsls	r3, r3, #6
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	685a      	ldr	r2, [r3, #4]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	621a      	str	r2, [r3, #32]
}
 800dcde:	bf00      	nop
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	40010000 	.word	0x40010000
 800dcf0:	40010400 	.word	0x40010400

0800dcf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	f023 0201 	bic.w	r2, r3, #1
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	699b      	ldr	r3, [r3, #24]
 800dd16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	011b      	lsls	r3, r3, #4
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f023 030a 	bic.w	r3, r3, #10
 800dd30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd32:	697a      	ldr	r2, [r7, #20]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	693a      	ldr	r2, [r7, #16]
 800dd3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	621a      	str	r2, [r3, #32]
}
 800dd46:	bf00      	nop
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b087      	sub	sp, #28
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	f023 0210 	bic.w	r2, r3, #16
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	699b      	ldr	r3, [r3, #24]
 800dd6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6a1b      	ldr	r3, [r3, #32]
 800dd74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	031b      	lsls	r3, r3, #12
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	011b      	lsls	r3, r3, #4
 800dd94:	693a      	ldr	r2, [r7, #16]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	697a      	ldr	r2, [r7, #20]
 800dd9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	621a      	str	r2, [r3, #32]
}
 800dda6:	bf00      	nop
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b085      	sub	sp, #20
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	f043 0307 	orr.w	r3, r3, #7
 800ddd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	609a      	str	r2, [r3, #8]
}
 800dddc:	bf00      	nop
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	021a      	lsls	r2, r3, #8
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	431a      	orrs	r2, r3
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	4313      	orrs	r3, r2
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	4313      	orrs	r3, r2
 800de14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	609a      	str	r2, [r3, #8]
}
 800de1c:	bf00      	nop
 800de1e:	371c      	adds	r7, #28
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	f003 031f 	and.w	r3, r3, #31
 800de3a:	2201      	movs	r2, #1
 800de3c:	fa02 f303 	lsl.w	r3, r2, r3
 800de40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6a1a      	ldr	r2, [r3, #32]
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	43db      	mvns	r3, r3
 800de4a:	401a      	ands	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6a1a      	ldr	r2, [r3, #32]
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f003 031f 	and.w	r3, r3, #31
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	fa01 f303 	lsl.w	r3, r1, r3
 800de60:	431a      	orrs	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	621a      	str	r2, [r3, #32]
}
 800de66:	bf00      	nop
 800de68:	371c      	adds	r7, #28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
	...

0800de74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de84:	2b01      	cmp	r3, #1
 800de86:	d101      	bne.n	800de8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de88:	2302      	movs	r3, #2
 800de8a:	e05a      	b.n	800df42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2202      	movs	r2, #2
 800de98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800deb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4313      	orrs	r3, r2
 800debc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a21      	ldr	r2, [pc, #132]	; (800df50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d022      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ded8:	d01d      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a1d      	ldr	r2, [pc, #116]	; (800df54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d018      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a1b      	ldr	r2, [pc, #108]	; (800df58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d013      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a1a      	ldr	r2, [pc, #104]	; (800df5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d00e      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a18      	ldr	r2, [pc, #96]	; (800df60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d009      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a17      	ldr	r2, [pc, #92]	; (800df64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d004      	beq.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a15      	ldr	r2, [pc, #84]	; (800df68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d10c      	bne.n	800df30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	4313      	orrs	r3, r2
 800df26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	40010000 	.word	0x40010000
 800df54:	40000400 	.word	0x40000400
 800df58:	40000800 	.word	0x40000800
 800df5c:	40000c00 	.word	0x40000c00
 800df60:	40010400 	.word	0x40010400
 800df64:	40014000 	.word	0x40014000
 800df68:	40001800 	.word	0x40001800

0800df6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e03f      	b.n	800e026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7fa f824 	bl	8008008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2224      	movs	r2, #36	; 0x24
 800dfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dfd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fdcf 	bl	800eb7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	691a      	ldr	r2, [r3, #16]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dfec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	695a      	ldr	r2, [r3, #20]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68da      	ldr	r2, [r3, #12]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e00c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2220      	movs	r2, #32
 800e018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2220      	movs	r2, #32
 800e020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b08a      	sub	sp, #40	; 0x28
 800e032:	af02      	add	r7, sp, #8
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	603b      	str	r3, [r7, #0]
 800e03a:	4613      	mov	r3, r2
 800e03c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e03e:	2300      	movs	r3, #0
 800e040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b20      	cmp	r3, #32
 800e04c:	d17c      	bne.n	800e148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <HAL_UART_Transmit+0x2c>
 800e054:	88fb      	ldrh	r3, [r7, #6]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d101      	bne.n	800e05e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e075      	b.n	800e14a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e064:	2b01      	cmp	r3, #1
 800e066:	d101      	bne.n	800e06c <HAL_UART_Transmit+0x3e>
 800e068:	2302      	movs	r3, #2
 800e06a:	e06e      	b.n	800e14a <HAL_UART_Transmit+0x11c>
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2221      	movs	r2, #33	; 0x21
 800e07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e082:	f7fa faf9 	bl	8008678 <HAL_GetTick>
 800e086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	88fa      	ldrh	r2, [r7, #6]
 800e08c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	88fa      	ldrh	r2, [r7, #6]
 800e092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e09c:	d108      	bne.n	800e0b0 <HAL_UART_Transmit+0x82>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d104      	bne.n	800e0b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	61bb      	str	r3, [r7, #24]
 800e0ae:	e003      	b.n	800e0b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e0c0:	e02a      	b.n	800e118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2180      	movs	r1, #128	; 0x80
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f000 fb51 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e036      	b.n	800e14a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d10b      	bne.n	800e0fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	3302      	adds	r3, #2
 800e0f6:	61bb      	str	r3, [r7, #24]
 800e0f8:	e007      	b.n	800e10a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	781a      	ldrb	r2, [r3, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	3301      	adds	r3, #1
 800e108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e10e:	b29b      	uxth	r3, r3
 800e110:	3b01      	subs	r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1cf      	bne.n	800e0c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2200      	movs	r2, #0
 800e12a:	2140      	movs	r1, #64	; 0x40
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 fb21 	bl	800e774 <UART_WaitOnFlagUntilTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e006      	b.n	800e14a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2220      	movs	r2, #32
 800e140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	e000      	b.n	800e14a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e148:	2302      	movs	r3, #2
  }
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3720      	adds	r7, #32
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b084      	sub	sp, #16
 800e156:	af00      	add	r7, sp, #0
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	4613      	mov	r3, r2
 800e15e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b20      	cmp	r3, #32
 800e16a:	d11d      	bne.n	800e1a8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <HAL_UART_Receive_DMA+0x26>
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e016      	b.n	800e1aa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e182:	2b01      	cmp	r3, #1
 800e184:	d101      	bne.n	800e18a <HAL_UART_Receive_DMA+0x38>
 800e186:	2302      	movs	r3, #2
 800e188:	e00f      	b.n	800e1aa <HAL_UART_Receive_DMA+0x58>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800e198:	88fb      	ldrh	r3, [r7, #6]
 800e19a:	461a      	mov	r2, r3
 800e19c:	68b9      	ldr	r1, [r7, #8]
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fb32 	bl	800e808 <UART_Start_Receive_DMA>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	e000      	b.n	800e1aa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e1a8:	2302      	movs	r3, #2
  }
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b084      	sub	sp, #16
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1c8:	2b80      	cmp	r3, #128	; 0x80
 800e1ca:	bf0c      	ite	eq
 800e1cc:	2301      	moveq	r3, #1
 800e1ce:	2300      	movne	r3, #0
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	2b21      	cmp	r3, #33	; 0x21
 800e1de:	d116      	bne.n	800e20e <HAL_UART_DMAStop+0x5c>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d013      	beq.n	800e20e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	695a      	ldr	r2, [r3, #20]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d004      	beq.n	800e208 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e202:	4618      	mov	r0, r3
 800e204:	f7fb f9dc 	bl	80095c0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 fb61 	bl	800e8d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	695b      	ldr	r3, [r3, #20]
 800e214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e218:	2b40      	cmp	r3, #64	; 0x40
 800e21a:	bf0c      	ite	eq
 800e21c:	2301      	moveq	r3, #1
 800e21e:	2300      	movne	r3, #0
 800e220:	b2db      	uxtb	r3, r3
 800e222:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b22      	cmp	r3, #34	; 0x22
 800e22e:	d116      	bne.n	800e25e <HAL_UART_DMAStop+0xac>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d013      	beq.n	800e25e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	695a      	ldr	r2, [r3, #20]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e244:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d004      	beq.n	800e258 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e252:	4618      	mov	r0, r3
 800e254:	f7fb f9b4 	bl	80095c0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fb4f 	bl	800e8fc <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800e288:	2300      	movs	r3, #0
 800e28a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800e28c:	2300      	movs	r3, #0
 800e28e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	f003 030f 	and.w	r3, r3, #15
 800e296:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d10d      	bne.n	800e2ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	f003 0320 	and.w	r3, r3, #32
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d008      	beq.n	800e2ba <HAL_UART_IRQHandler+0x52>
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	f003 0320 	and.w	r3, r3, #32
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fbcb 	bl	800ea4e <UART_Receive_IT>
      return;
 800e2b8:	e17c      	b.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 80b1 	beq.w	800e424 <HAL_UART_IRQHandler+0x1bc>
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d105      	bne.n	800e2d8 <HAL_UART_IRQHandler+0x70>
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f000 80a6 	beq.w	800e424 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_UART_IRQHandler+0x90>
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d005      	beq.n	800e2f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f0:	f043 0201 	orr.w	r2, r3, #1
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	f003 0304 	and.w	r3, r3, #4
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00a      	beq.n	800e318 <HAL_UART_IRQHandler+0xb0>
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d005      	beq.n	800e318 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e310:	f043 0202 	orr.w	r2, r3, #2
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	f003 0302 	and.w	r3, r3, #2
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00a      	beq.n	800e338 <HAL_UART_IRQHandler+0xd0>
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	f003 0301 	and.w	r3, r3, #1
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e330:	f043 0204 	orr.w	r2, r3, #4
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	f003 0308 	and.w	r3, r3, #8
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00f      	beq.n	800e362 <HAL_UART_IRQHandler+0xfa>
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	f003 0320 	and.w	r3, r3, #32
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d104      	bne.n	800e356 <HAL_UART_IRQHandler+0xee>
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	2b00      	cmp	r3, #0
 800e354:	d005      	beq.n	800e362 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35a:	f043 0208 	orr.w	r2, r3, #8
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 811f 	beq.w	800e5aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	f003 0320 	and.w	r3, r3, #32
 800e372:	2b00      	cmp	r3, #0
 800e374:	d007      	beq.n	800e386 <HAL_UART_IRQHandler+0x11e>
 800e376:	6a3b      	ldr	r3, [r7, #32]
 800e378:	f003 0320 	and.w	r3, r3, #32
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fb64 	bl	800ea4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	695b      	ldr	r3, [r3, #20]
 800e38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e390:	2b40      	cmp	r3, #64	; 0x40
 800e392:	bf0c      	ite	eq
 800e394:	2301      	moveq	r3, #1
 800e396:	2300      	movne	r3, #0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a0:	f003 0308 	and.w	r3, r3, #8
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <HAL_UART_IRQHandler+0x146>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d031      	beq.n	800e412 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 faa4 	bl	800e8fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3be:	2b40      	cmp	r3, #64	; 0x40
 800e3c0:	d123      	bne.n	800e40a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	695a      	ldr	r2, [r3, #20]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d013      	beq.n	800e402 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3de:	4a77      	ldr	r2, [pc, #476]	; (800e5bc <HAL_UART_IRQHandler+0x354>)
 800e3e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fb f95a 	bl	80096a0 <HAL_DMA_Abort_IT>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d016      	beq.n	800e420 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e400:	e00e      	b.n	800e420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f8f0 	bl	800e5e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e408:	e00a      	b.n	800e420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f8ec 	bl	800e5e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e410:	e006      	b.n	800e420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f8e8 	bl	800e5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e41e:	e0c4      	b.n	800e5aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	bf00      	nop
    return;
 800e422:	e0c2      	b.n	800e5aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e428:	2b01      	cmp	r3, #1
 800e42a:	f040 80a2 	bne.w	800e572 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 809c 	beq.w	800e572 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 8096 	beq.w	800e572 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e446:	2300      	movs	r3, #0
 800e448:	60fb      	str	r3, [r7, #12]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	60fb      	str	r3, [r7, #12]
 800e45a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e466:	2b40      	cmp	r3, #64	; 0x40
 800e468:	d14f      	bne.n	800e50a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800e474:	8a3b      	ldrh	r3, [r7, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	f000 8099 	beq.w	800e5ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e480:	8a3a      	ldrh	r2, [r7, #16]
 800e482:	429a      	cmp	r2, r3
 800e484:	f080 8093 	bcs.w	800e5ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8a3a      	ldrh	r2, [r7, #16]
 800e48c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e492:	69db      	ldr	r3, [r3, #28]
 800e494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e498:	d02b      	beq.n	800e4f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68da      	ldr	r2, [r3, #12]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	695a      	ldr	r2, [r3, #20]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f022 0201 	bic.w	r2, r2, #1
 800e4b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	695a      	ldr	r2, [r3, #20]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2220      	movs	r2, #32
 800e4ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68da      	ldr	r2, [r3, #12]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f022 0210 	bic.w	r2, r2, #16
 800e4e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fb f867 	bl	80095c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	4619      	mov	r1, r3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f87a 	bl	800e5fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e508:	e051      	b.n	800e5ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e512:	b29b      	uxth	r3, r3
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d047      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800e522:	8a7b      	ldrh	r3, [r7, #18]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d044      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e536:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695a      	ldr	r2, [r3, #20]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f022 0201 	bic.w	r2, r2, #1
 800e546:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2220      	movs	r2, #32
 800e54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68da      	ldr	r2, [r3, #12]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f022 0210 	bic.w	r2, r2, #16
 800e564:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e566:	8a7b      	ldrh	r3, [r7, #18]
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f846 	bl	800e5fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800e570:	e01f      	b.n	800e5b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d008      	beq.n	800e58e <HAL_UART_IRQHandler+0x326>
 800e57c:	6a3b      	ldr	r3, [r7, #32]
 800e57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e582:	2b00      	cmp	r3, #0
 800e584:	d003      	beq.n	800e58e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f9f9 	bl	800e97e <UART_Transmit_IT>
    return;
 800e58c:	e012      	b.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00d      	beq.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d008      	beq.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa3b 	bl	800ea1e <UART_EndTransmit_IT>
    return;
 800e5a8:	e004      	b.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
    return;
 800e5aa:	bf00      	nop
 800e5ac:	e002      	b.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
      return;
 800e5ae:	bf00      	nop
 800e5b0:	e000      	b.n	800e5b4 <HAL_UART_IRQHandler+0x34c>
      return;
 800e5b2:	bf00      	nop
  }
}
 800e5b4:	3728      	adds	r7, #40	; 0x28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0800e957 	.word	0x0800e957

0800e5c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e5dc:	bf00      	nop
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d12a      	bne.n	800e686 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e644:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	695a      	ldr	r2, [r3, #20]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f022 0201 	bic.w	r2, r2, #1
 800e654:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	695a      	ldr	r2, [r3, #20]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e664:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2220      	movs	r2, #32
 800e66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e672:	2b01      	cmp	r3, #1
 800e674:	d107      	bne.n	800e686 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68da      	ldr	r2, [r3, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f022 0210 	bic.w	r2, r2, #16
 800e684:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d106      	bne.n	800e69c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e692:	4619      	mov	r1, r3
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff ffb1 	bl	800e5fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e69a:	e002      	b.n	800e6a2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f7f8 f899 	bl	80067d4 <HAL_UART_RxCpltCallback>
}
 800e6a2:	bf00      	nop
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d108      	bne.n	800e6d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e6c4:	085b      	lsrs	r3, r3, #1
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f7ff ff96 	bl	800e5fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6d0:	e002      	b.n	800e6d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7ff ff7e 	bl	800e5d4 <HAL_UART_RxHalfCpltCallback>
}
 800e6d8:	bf00      	nop
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6fc:	2b80      	cmp	r3, #128	; 0x80
 800e6fe:	bf0c      	ite	eq
 800e700:	2301      	moveq	r3, #1
 800e702:	2300      	movne	r3, #0
 800e704:	b2db      	uxtb	r3, r3
 800e706:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	2b21      	cmp	r3, #33	; 0x21
 800e712:	d108      	bne.n	800e726 <UART_DMAError+0x46>
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d005      	beq.n	800e726 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2200      	movs	r2, #0
 800e71e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e720:	68b8      	ldr	r0, [r7, #8]
 800e722:	f000 f8d5 	bl	800e8d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	695b      	ldr	r3, [r3, #20]
 800e72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e730:	2b40      	cmp	r3, #64	; 0x40
 800e732:	bf0c      	ite	eq
 800e734:	2301      	moveq	r3, #1
 800e736:	2300      	movne	r3, #0
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b22      	cmp	r3, #34	; 0x22
 800e746:	d108      	bne.n	800e75a <UART_DMAError+0x7a>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d005      	beq.n	800e75a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2200      	movs	r2, #0
 800e752:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e754:	68b8      	ldr	r0, [r7, #8]
 800e756:	f000 f8d1 	bl	800e8fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75e:	f043 0210 	orr.w	r2, r3, #16
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e766:	68b8      	ldr	r0, [r7, #8]
 800e768:	f7ff ff3e 	bl	800e5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e76c:	bf00      	nop
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	4613      	mov	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e784:	e02c      	b.n	800e7e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e78c:	d028      	beq.n	800e7e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d007      	beq.n	800e7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e794:	f7f9 ff70 	bl	8008678 <HAL_GetTick>
 800e798:	4602      	mov	r2, r0
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d21d      	bcs.n	800e7e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68da      	ldr	r2, [r3, #12]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e7b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	695a      	ldr	r2, [r3, #20]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0201 	bic.w	r2, r2, #1
 800e7c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2220      	movs	r2, #32
 800e7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	e00f      	b.n	800e800 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	bf0c      	ite	eq
 800e7f0:	2301      	moveq	r3, #1
 800e7f2:	2300      	movne	r3, #0
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d0c3      	beq.n	800e786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	4613      	mov	r3, r2
 800e814:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	88fa      	ldrh	r2, [r7, #6]
 800e820:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2222      	movs	r2, #34	; 0x22
 800e82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e834:	4a23      	ldr	r2, [pc, #140]	; (800e8c4 <UART_Start_Receive_DMA+0xbc>)
 800e836:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83c:	4a22      	ldr	r2, [pc, #136]	; (800e8c8 <UART_Start_Receive_DMA+0xc0>)
 800e83e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	4a21      	ldr	r2, [pc, #132]	; (800e8cc <UART_Start_Receive_DMA+0xc4>)
 800e846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84c:	2200      	movs	r2, #0
 800e84e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3304      	adds	r3, #4
 800e860:	4619      	mov	r1, r3
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	88fb      	ldrh	r3, [r7, #6]
 800e868:	f7fa fe52 	bl	8009510 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e86c:	2300      	movs	r3, #0
 800e86e:	613b      	str	r3, [r7, #16]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	613b      	str	r3, [r7, #16]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	613b      	str	r3, [r7, #16]
 800e880:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68da      	ldr	r2, [r3, #12]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e898:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	695a      	ldr	r2, [r3, #20]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f042 0201 	orr.w	r2, r2, #1
 800e8a8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	695a      	ldr	r2, [r3, #20]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	0800e615 	.word	0x0800e615
 800e8c8:	0800e6ab 	.word	0x0800e6ab
 800e8cc:	0800e6e1 	.word	0x0800e6e1

0800e8d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68da      	ldr	r2, [r3, #12]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e8e6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68da      	ldr	r2, [r3, #12]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e912:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	695a      	ldr	r2, [r3, #20]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f022 0201 	bic.w	r2, r2, #1
 800e922:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d107      	bne.n	800e93c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68da      	ldr	r2, [r3, #12]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f022 0210 	bic.w	r2, r2, #16
 800e93a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2220      	movs	r2, #32
 800e940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e94a:	bf00      	nop
 800e94c:	370c      	adds	r7, #12
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b084      	sub	sp, #16
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2200      	movs	r2, #0
 800e968:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7ff fe39 	bl	800e5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e976:	bf00      	nop
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e97e:	b480      	push	{r7}
 800e980:	b085      	sub	sp, #20
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b21      	cmp	r3, #33	; 0x21
 800e990:	d13e      	bne.n	800ea10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e99a:	d114      	bne.n	800e9c6 <UART_Transmit_IT+0x48>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d110      	bne.n	800e9c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	1c9a      	adds	r2, r3, #2
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	621a      	str	r2, [r3, #32]
 800e9c4:	e008      	b.n	800e9d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	1c59      	adds	r1, r3, #1
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	6211      	str	r1, [r2, #32]
 800e9d0:	781a      	ldrb	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10f      	bne.n	800ea0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68da      	ldr	r2, [r3, #12]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68da      	ldr	r2, [r3, #12]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	e000      	b.n	800ea12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ea10:	2302      	movs	r3, #2
  }
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3714      	adds	r7, #20
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	68da      	ldr	r2, [r3, #12]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2220      	movs	r2, #32
 800ea3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff fdbe 	bl	800e5c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b22      	cmp	r3, #34	; 0x22
 800ea60:	f040 8087 	bne.w	800eb72 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea6c:	d117      	bne.n	800ea9e <UART_Receive_IT+0x50>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d113      	bne.n	800ea9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea96:	1c9a      	adds	r2, r3, #2
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ea9c:	e026      	b.n	800eaec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eab0:	d007      	beq.n	800eac2 <UART_Receive_IT+0x74>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10a      	bne.n	800ead0 <UART_Receive_IT+0x82>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	b2da      	uxtb	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	701a      	strb	r2, [r3, #0]
 800eace:	e008      	b.n	800eae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d136      	bne.n	800eb6e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68da      	ldr	r2, [r3, #12]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f022 0220 	bic.w	r2, r2, #32
 800eb0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	68da      	ldr	r2, [r3, #12]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	695a      	ldr	r2, [r3, #20]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0201 	bic.w	r2, r2, #1
 800eb2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2220      	movs	r2, #32
 800eb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d10e      	bne.n	800eb5e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	68da      	ldr	r2, [r3, #12]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f022 0210 	bic.w	r2, r2, #16
 800eb4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fd50 	bl	800e5fc <HAL_UARTEx_RxEventCallback>
 800eb5c:	e002      	b.n	800eb64 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7f7 fe38 	bl	80067d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e002      	b.n	800eb74 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e000      	b.n	800eb74 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800eb72:	2302      	movs	r3, #2
  }
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb80:	b09f      	sub	sp, #124	; 0x7c
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800eb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb92:	68d9      	ldr	r1, [r3, #12]
 800eb94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	ea40 0301 	orr.w	r3, r0, r1
 800eb9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba0:	689a      	ldr	r2, [r3, #8]
 800eba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	431a      	orrs	r2, r3
 800eba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	431a      	orrs	r2, r3
 800ebae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ebb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ebc0:	f021 010c 	bic.w	r1, r1, #12
 800ebc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ebce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ebd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebda:	6999      	ldr	r1, [r3, #24]
 800ebdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	ea40 0301 	orr.w	r3, r0, r1
 800ebe4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ebe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	4bc5      	ldr	r3, [pc, #788]	; (800ef00 <UART_SetConfig+0x384>)
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d004      	beq.n	800ebfa <UART_SetConfig+0x7e>
 800ebf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	4bc3      	ldr	r3, [pc, #780]	; (800ef04 <UART_SetConfig+0x388>)
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d103      	bne.n	800ec02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ebfa:	f7fd fc0f 	bl	800c41c <HAL_RCC_GetPCLK2Freq>
 800ebfe:	6778      	str	r0, [r7, #116]	; 0x74
 800ec00:	e002      	b.n	800ec08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ec02:	f7fd fbf7 	bl	800c3f4 <HAL_RCC_GetPCLK1Freq>
 800ec06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec0a:	69db      	ldr	r3, [r3, #28]
 800ec0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec10:	f040 80b6 	bne.w	800ed80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ec14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec16:	461c      	mov	r4, r3
 800ec18:	f04f 0500 	mov.w	r5, #0
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	462b      	mov	r3, r5
 800ec20:	1891      	adds	r1, r2, r2
 800ec22:	6439      	str	r1, [r7, #64]	; 0x40
 800ec24:	415b      	adcs	r3, r3
 800ec26:	647b      	str	r3, [r7, #68]	; 0x44
 800ec28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ec2c:	1912      	adds	r2, r2, r4
 800ec2e:	eb45 0303 	adc.w	r3, r5, r3
 800ec32:	f04f 0000 	mov.w	r0, #0
 800ec36:	f04f 0100 	mov.w	r1, #0
 800ec3a:	00d9      	lsls	r1, r3, #3
 800ec3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ec40:	00d0      	lsls	r0, r2, #3
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	1911      	adds	r1, r2, r4
 800ec48:	6639      	str	r1, [r7, #96]	; 0x60
 800ec4a:	416b      	adcs	r3, r5
 800ec4c:	667b      	str	r3, [r7, #100]	; 0x64
 800ec4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	461a      	mov	r2, r3
 800ec54:	f04f 0300 	mov.w	r3, #0
 800ec58:	1891      	adds	r1, r2, r2
 800ec5a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ec5c:	415b      	adcs	r3, r3
 800ec5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ec64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ec68:	f7f2 f81e 	bl	8000ca8 <__aeabi_uldivmod>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	460b      	mov	r3, r1
 800ec70:	4ba5      	ldr	r3, [pc, #660]	; (800ef08 <UART_SetConfig+0x38c>)
 800ec72:	fba3 2302 	umull	r2, r3, r3, r2
 800ec76:	095b      	lsrs	r3, r3, #5
 800ec78:	011e      	lsls	r6, r3, #4
 800ec7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec7c:	461c      	mov	r4, r3
 800ec7e:	f04f 0500 	mov.w	r5, #0
 800ec82:	4622      	mov	r2, r4
 800ec84:	462b      	mov	r3, r5
 800ec86:	1891      	adds	r1, r2, r2
 800ec88:	6339      	str	r1, [r7, #48]	; 0x30
 800ec8a:	415b      	adcs	r3, r3
 800ec8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ec92:	1912      	adds	r2, r2, r4
 800ec94:	eb45 0303 	adc.w	r3, r5, r3
 800ec98:	f04f 0000 	mov.w	r0, #0
 800ec9c:	f04f 0100 	mov.w	r1, #0
 800eca0:	00d9      	lsls	r1, r3, #3
 800eca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eca6:	00d0      	lsls	r0, r2, #3
 800eca8:	4602      	mov	r2, r0
 800ecaa:	460b      	mov	r3, r1
 800ecac:	1911      	adds	r1, r2, r4
 800ecae:	65b9      	str	r1, [r7, #88]	; 0x58
 800ecb0:	416b      	adcs	r3, r5
 800ecb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	f04f 0300 	mov.w	r3, #0
 800ecbe:	1891      	adds	r1, r2, r2
 800ecc0:	62b9      	str	r1, [r7, #40]	; 0x28
 800ecc2:	415b      	adcs	r3, r3
 800ecc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ecca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ecce:	f7f1 ffeb 	bl	8000ca8 <__aeabi_uldivmod>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4b8c      	ldr	r3, [pc, #560]	; (800ef08 <UART_SetConfig+0x38c>)
 800ecd8:	fba3 1302 	umull	r1, r3, r3, r2
 800ecdc:	095b      	lsrs	r3, r3, #5
 800ecde:	2164      	movs	r1, #100	; 0x64
 800ece0:	fb01 f303 	mul.w	r3, r1, r3
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	3332      	adds	r3, #50	; 0x32
 800ecea:	4a87      	ldr	r2, [pc, #540]	; (800ef08 <UART_SetConfig+0x38c>)
 800ecec:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf0:	095b      	lsrs	r3, r3, #5
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ecf8:	441e      	add	r6, r3
 800ecfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f04f 0100 	mov.w	r1, #0
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	1894      	adds	r4, r2, r2
 800ed08:	623c      	str	r4, [r7, #32]
 800ed0a:	415b      	adcs	r3, r3
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed12:	1812      	adds	r2, r2, r0
 800ed14:	eb41 0303 	adc.w	r3, r1, r3
 800ed18:	f04f 0400 	mov.w	r4, #0
 800ed1c:	f04f 0500 	mov.w	r5, #0
 800ed20:	00dd      	lsls	r5, r3, #3
 800ed22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ed26:	00d4      	lsls	r4, r2, #3
 800ed28:	4622      	mov	r2, r4
 800ed2a:	462b      	mov	r3, r5
 800ed2c:	1814      	adds	r4, r2, r0
 800ed2e:	653c      	str	r4, [r7, #80]	; 0x50
 800ed30:	414b      	adcs	r3, r1
 800ed32:	657b      	str	r3, [r7, #84]	; 0x54
 800ed34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	f04f 0300 	mov.w	r3, #0
 800ed3e:	1891      	adds	r1, r2, r2
 800ed40:	61b9      	str	r1, [r7, #24]
 800ed42:	415b      	adcs	r3, r3
 800ed44:	61fb      	str	r3, [r7, #28]
 800ed46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ed4e:	f7f1 ffab 	bl	8000ca8 <__aeabi_uldivmod>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4b6c      	ldr	r3, [pc, #432]	; (800ef08 <UART_SetConfig+0x38c>)
 800ed58:	fba3 1302 	umull	r1, r3, r3, r2
 800ed5c:	095b      	lsrs	r3, r3, #5
 800ed5e:	2164      	movs	r1, #100	; 0x64
 800ed60:	fb01 f303 	mul.w	r3, r1, r3
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	00db      	lsls	r3, r3, #3
 800ed68:	3332      	adds	r3, #50	; 0x32
 800ed6a:	4a67      	ldr	r2, [pc, #412]	; (800ef08 <UART_SetConfig+0x38c>)
 800ed6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ed70:	095b      	lsrs	r3, r3, #5
 800ed72:	f003 0207 	and.w	r2, r3, #7
 800ed76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4432      	add	r2, r6
 800ed7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ed7e:	e0b9      	b.n	800eef4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ed80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed82:	461c      	mov	r4, r3
 800ed84:	f04f 0500 	mov.w	r5, #0
 800ed88:	4622      	mov	r2, r4
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	1891      	adds	r1, r2, r2
 800ed8e:	6139      	str	r1, [r7, #16]
 800ed90:	415b      	adcs	r3, r3
 800ed92:	617b      	str	r3, [r7, #20]
 800ed94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed98:	1912      	adds	r2, r2, r4
 800ed9a:	eb45 0303 	adc.w	r3, r5, r3
 800ed9e:	f04f 0000 	mov.w	r0, #0
 800eda2:	f04f 0100 	mov.w	r1, #0
 800eda6:	00d9      	lsls	r1, r3, #3
 800eda8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800edac:	00d0      	lsls	r0, r2, #3
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	eb12 0804 	adds.w	r8, r2, r4
 800edb6:	eb43 0905 	adc.w	r9, r3, r5
 800edba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f04f 0100 	mov.w	r1, #0
 800edc4:	f04f 0200 	mov.w	r2, #0
 800edc8:	f04f 0300 	mov.w	r3, #0
 800edcc:	008b      	lsls	r3, r1, #2
 800edce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800edd2:	0082      	lsls	r2, r0, #2
 800edd4:	4640      	mov	r0, r8
 800edd6:	4649      	mov	r1, r9
 800edd8:	f7f1 ff66 	bl	8000ca8 <__aeabi_uldivmod>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4b49      	ldr	r3, [pc, #292]	; (800ef08 <UART_SetConfig+0x38c>)
 800ede2:	fba3 2302 	umull	r2, r3, r3, r2
 800ede6:	095b      	lsrs	r3, r3, #5
 800ede8:	011e      	lsls	r6, r3, #4
 800edea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edec:	4618      	mov	r0, r3
 800edee:	f04f 0100 	mov.w	r1, #0
 800edf2:	4602      	mov	r2, r0
 800edf4:	460b      	mov	r3, r1
 800edf6:	1894      	adds	r4, r2, r2
 800edf8:	60bc      	str	r4, [r7, #8]
 800edfa:	415b      	adcs	r3, r3
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee02:	1812      	adds	r2, r2, r0
 800ee04:	eb41 0303 	adc.w	r3, r1, r3
 800ee08:	f04f 0400 	mov.w	r4, #0
 800ee0c:	f04f 0500 	mov.w	r5, #0
 800ee10:	00dd      	lsls	r5, r3, #3
 800ee12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ee16:	00d4      	lsls	r4, r2, #3
 800ee18:	4622      	mov	r2, r4
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	1814      	adds	r4, r2, r0
 800ee1e:	64bc      	str	r4, [r7, #72]	; 0x48
 800ee20:	414b      	adcs	r3, r1
 800ee22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f04f 0100 	mov.w	r1, #0
 800ee2e:	f04f 0200 	mov.w	r2, #0
 800ee32:	f04f 0300 	mov.w	r3, #0
 800ee36:	008b      	lsls	r3, r1, #2
 800ee38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ee3c:	0082      	lsls	r2, r0, #2
 800ee3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ee42:	f7f1 ff31 	bl	8000ca8 <__aeabi_uldivmod>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4b2f      	ldr	r3, [pc, #188]	; (800ef08 <UART_SetConfig+0x38c>)
 800ee4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ee50:	095b      	lsrs	r3, r3, #5
 800ee52:	2164      	movs	r1, #100	; 0x64
 800ee54:	fb01 f303 	mul.w	r3, r1, r3
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	011b      	lsls	r3, r3, #4
 800ee5c:	3332      	adds	r3, #50	; 0x32
 800ee5e:	4a2a      	ldr	r2, [pc, #168]	; (800ef08 <UART_SetConfig+0x38c>)
 800ee60:	fba2 2303 	umull	r2, r3, r2, r3
 800ee64:	095b      	lsrs	r3, r3, #5
 800ee66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee6a:	441e      	add	r6, r3
 800ee6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f04f 0100 	mov.w	r1, #0
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	1894      	adds	r4, r2, r2
 800ee7a:	603c      	str	r4, [r7, #0]
 800ee7c:	415b      	adcs	r3, r3
 800ee7e:	607b      	str	r3, [r7, #4]
 800ee80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee84:	1812      	adds	r2, r2, r0
 800ee86:	eb41 0303 	adc.w	r3, r1, r3
 800ee8a:	f04f 0400 	mov.w	r4, #0
 800ee8e:	f04f 0500 	mov.w	r5, #0
 800ee92:	00dd      	lsls	r5, r3, #3
 800ee94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ee98:	00d4      	lsls	r4, r2, #3
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	462b      	mov	r3, r5
 800ee9e:	eb12 0a00 	adds.w	sl, r2, r0
 800eea2:	eb43 0b01 	adc.w	fp, r3, r1
 800eea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f04f 0100 	mov.w	r1, #0
 800eeb0:	f04f 0200 	mov.w	r2, #0
 800eeb4:	f04f 0300 	mov.w	r3, #0
 800eeb8:	008b      	lsls	r3, r1, #2
 800eeba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eebe:	0082      	lsls	r2, r0, #2
 800eec0:	4650      	mov	r0, sl
 800eec2:	4659      	mov	r1, fp
 800eec4:	f7f1 fef0 	bl	8000ca8 <__aeabi_uldivmod>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <UART_SetConfig+0x38c>)
 800eece:	fba3 1302 	umull	r1, r3, r3, r2
 800eed2:	095b      	lsrs	r3, r3, #5
 800eed4:	2164      	movs	r1, #100	; 0x64
 800eed6:	fb01 f303 	mul.w	r3, r1, r3
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	011b      	lsls	r3, r3, #4
 800eede:	3332      	adds	r3, #50	; 0x32
 800eee0:	4a09      	ldr	r2, [pc, #36]	; (800ef08 <UART_SetConfig+0x38c>)
 800eee2:	fba2 2303 	umull	r2, r3, r2, r3
 800eee6:	095b      	lsrs	r3, r3, #5
 800eee8:	f003 020f 	and.w	r2, r3, #15
 800eeec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4432      	add	r2, r6
 800eef2:	609a      	str	r2, [r3, #8]
}
 800eef4:	bf00      	nop
 800eef6:	377c      	adds	r7, #124	; 0x7c
 800eef8:	46bd      	mov	sp, r7
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	bf00      	nop
 800ef00:	40011000 	.word	0x40011000
 800ef04:	40011400 	.word	0x40011400
 800ef08:	51eb851f 	.word	0x51eb851f

0800ef0c <arm_fir_init_f32>:
 800ef0c:	b570      	push	{r4, r5, r6, lr}
 800ef0e:	9c04      	ldr	r4, [sp, #16]
 800ef10:	6082      	str	r2, [r0, #8]
 800ef12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800ef16:	3c01      	subs	r4, #1
 800ef18:	4605      	mov	r5, r0
 800ef1a:	440c      	add	r4, r1
 800ef1c:	8001      	strh	r1, [r0, #0]
 800ef1e:	461e      	mov	r6, r3
 800ef20:	00a2      	lsls	r2, r4, #2
 800ef22:	4618      	mov	r0, r3
 800ef24:	2100      	movs	r1, #0
 800ef26:	f000 fb87 	bl	800f638 <memset>
 800ef2a:	606e      	str	r6, [r5, #4]
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	bf00      	nop

0800ef30 <arm_fir_f32>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	ed2d 8b10 	vpush	{d8-d15}
 800ef38:	b089      	sub	sp, #36	; 0x24
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	9003      	str	r0, [sp, #12]
 800ef3e:	8800      	ldrh	r0, [r0, #0]
 800ef40:	9304      	str	r3, [sp, #16]
 800ef42:	461e      	mov	r6, r3
 800ef44:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800ef48:	9001      	str	r0, [sp, #4]
 800ef4a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800ef54:	08f3      	lsrs	r3, r6, #3
 800ef56:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800ef5a:	9400      	str	r4, [sp, #0]
 800ef5c:	9302      	str	r3, [sp, #8]
 800ef5e:	f000 81ef 	beq.w	800f340 <arm_fir_f32+0x410>
 800ef62:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800ef66:	469e      	mov	lr, r3
 800ef68:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800ef6c:	1f1e      	subs	r6, r3, #4
 800ef6e:	4625      	mov	r5, r4
 800ef70:	9605      	str	r6, [sp, #20]
 800ef72:	4604      	mov	r4, r0
 800ef74:	eb08 0003 	add.w	r0, r8, r3
 800ef78:	f004 0a07 	and.w	sl, r4, #7
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	f10c 0420 	add.w	r4, ip, #32
 800ef82:	f8cd c018 	str.w	ip, [sp, #24]
 800ef86:	4684      	mov	ip, r0
 800ef88:	4648      	mov	r0, r9
 800ef8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ef8e:	9107      	str	r1, [sp, #28]
 800ef90:	f105 0720 	add.w	r7, r5, #32
 800ef94:	f101 0620 	add.w	r6, r1, #32
 800ef98:	f102 0520 	add.w	r5, r2, #32
 800ef9c:	4652      	mov	r2, sl
 800ef9e:	469a      	mov	sl, r3
 800efa0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800efa4:	f847 3c20 	str.w	r3, [r7, #-32]
 800efa8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800efac:	f847 3c1c 	str.w	r3, [r7, #-28]
 800efb0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800efb4:	f847 3c18 	str.w	r3, [r7, #-24]
 800efb8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800efbc:	f847 3c14 	str.w	r3, [r7, #-20]
 800efc0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800efc4:	f847 3c10 	str.w	r3, [r7, #-16]
 800efc8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800efcc:	f847 3c0c 	str.w	r3, [r7, #-12]
 800efd0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800efd4:	f847 3c08 	str.w	r3, [r7, #-8]
 800efd8:	eddf 3af1 	vldr	s7, [pc, #964]	; 800f3a0 <arm_fir_f32+0x470>
 800efdc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800efe0:	f847 3c04 	str.w	r3, [r7, #-4]
 800efe4:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 800efe8:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800efec:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800eff0:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 800eff4:	ed14 1a04 	vldr	s2, [r4, #-16]
 800eff8:	ed54 0a03 	vldr	s1, [r4, #-12]
 800effc:	ed14 0a02 	vldr	s0, [r4, #-8]
 800f000:	1f21      	subs	r1, r4, #4
 800f002:	eef0 8a63 	vmov.f32	s17, s7
 800f006:	eef0 9a63 	vmov.f32	s19, s7
 800f00a:	eef0 aa63 	vmov.f32	s21, s7
 800f00e:	eef0 ba63 	vmov.f32	s23, s7
 800f012:	eeb0 ca63 	vmov.f32	s24, s7
 800f016:	eef0 ca63 	vmov.f32	s25, s7
 800f01a:	eeb0 da63 	vmov.f32	s26, s7
 800f01e:	2800      	cmp	r0, #0
 800f020:	f000 81e8 	beq.w	800f3f4 <arm_fir_f32+0x4c4>
 800f024:	f108 0120 	add.w	r1, r8, #32
 800f028:	f104 031c 	add.w	r3, r4, #28
 800f02c:	4683      	mov	fp, r0
 800f02e:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 800f032:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 800f036:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800f03a:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800f03e:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 800f042:	ed11 6a04 	vldr	s12, [r1, #-16]
 800f046:	ed51 6a03 	vldr	s13, [r1, #-12]
 800f04a:	ed11 7a02 	vldr	s14, [r1, #-8]
 800f04e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f052:	ee24 fa03 	vmul.f32	s30, s8, s6
 800f056:	ee64 ea22 	vmul.f32	s29, s8, s5
 800f05a:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800f05e:	ee24 ea02 	vmul.f32	s28, s8, s4
 800f062:	ee64 da21 	vmul.f32	s27, s8, s3
 800f066:	ee24 ba01 	vmul.f32	s22, s8, s2
 800f06a:	ee24 aa20 	vmul.f32	s20, s8, s1
 800f06e:	ee24 9a00 	vmul.f32	s18, s8, s0
 800f072:	ee24 4a08 	vmul.f32	s8, s8, s16
 800f076:	ee3f da0d 	vadd.f32	s26, s30, s26
 800f07a:	ee74 3a23 	vadd.f32	s7, s8, s7
 800f07e:	ee24 faa2 	vmul.f32	s30, s9, s5
 800f082:	ee7e caac 	vadd.f32	s25, s29, s25
 800f086:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800f08a:	ee64 ea82 	vmul.f32	s29, s9, s4
 800f08e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f092:	ee7d baab 	vadd.f32	s23, s27, s23
 800f096:	ee24 eaa1 	vmul.f32	s28, s9, s3
 800f09a:	ee64 da81 	vmul.f32	s27, s9, s2
 800f09e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f0a2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f0a6:	ee24 baa0 	vmul.f32	s22, s9, s1
 800f0aa:	ee24 aa80 	vmul.f32	s20, s9, s0
 800f0ae:	ee79 8a28 	vadd.f32	s17, s18, s17
 800f0b2:	ee28 9a24 	vmul.f32	s18, s16, s9
 800f0b6:	ee64 4a83 	vmul.f32	s9, s9, s6
 800f0ba:	ee25 4a02 	vmul.f32	s8, s10, s4
 800f0be:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800f0c2:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800f0c6:	ee7e caac 	vadd.f32	s25, s29, s25
 800f0ca:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f0ce:	ee65 ea21 	vmul.f32	s29, s10, s3
 800f0d2:	ee25 ea01 	vmul.f32	s28, s10, s2
 800f0d6:	ee7d baab 	vadd.f32	s23, s27, s23
 800f0da:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f0de:	ee65 da20 	vmul.f32	s27, s10, s1
 800f0e2:	ee25 ba00 	vmul.f32	s22, s10, s0
 800f0e6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f0ea:	ee79 8a28 	vadd.f32	s17, s18, s17
 800f0ee:	ee28 aa05 	vmul.f32	s20, s16, s10
 800f0f2:	ee23 9a05 	vmul.f32	s18, s6, s10
 800f0f6:	ee3d da0f 	vadd.f32	s26, s26, s30
 800f0fa:	ee25 5a22 	vmul.f32	s10, s10, s5
 800f0fe:	ee65 3aa1 	vmul.f32	s7, s11, s3
 800f102:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f106:	ed53 1a04 	vldr	s3, [r3, #-16]
 800f10a:	ee7e caac 	vadd.f32	s25, s29, s25
 800f10e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f112:	ee65 ea81 	vmul.f32	s29, s11, s2
 800f116:	ee25 eaa0 	vmul.f32	s28, s11, s1
 800f11a:	ee7d baab 	vadd.f32	s23, s27, s23
 800f11e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f122:	ee65 da80 	vmul.f32	s27, s11, s0
 800f126:	ee28 ba25 	vmul.f32	s22, s16, s11
 800f12a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f12e:	ee79 8a28 	vadd.f32	s17, s18, s17
 800f132:	ee23 aa25 	vmul.f32	s20, s6, s11
 800f136:	ee22 9aa5 	vmul.f32	s18, s5, s11
 800f13a:	ee3d da04 	vadd.f32	s26, s26, s8
 800f13e:	ee65 5a82 	vmul.f32	s11, s11, s4
 800f142:	ee66 4a01 	vmul.f32	s9, s12, s2
 800f146:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f14a:	ed13 1a03 	vldr	s2, [r3, #-12]
 800f14e:	ee75 5a85 	vadd.f32	s11, s11, s10
 800f152:	ee3d da23 	vadd.f32	s26, s26, s7
 800f156:	ee22 5a06 	vmul.f32	s10, s4, s12
 800f15a:	ee7e caac 	vadd.f32	s25, s29, s25
 800f15e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f162:	ee66 ea20 	vmul.f32	s29, s12, s1
 800f166:	ee26 ea00 	vmul.f32	s28, s12, s0
 800f16a:	ee7d baab 	vadd.f32	s23, s27, s23
 800f16e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f172:	ee68 da06 	vmul.f32	s27, s16, s12
 800f176:	ee23 ba06 	vmul.f32	s22, s6, s12
 800f17a:	ee22 aa86 	vmul.f32	s20, s5, s12
 800f17e:	ee79 8a28 	vadd.f32	s17, s18, s17
 800f182:	ee26 6a21 	vmul.f32	s12, s12, s3
 800f186:	ee26 9aa0 	vmul.f32	s18, s13, s1
 800f18a:	ee36 6a25 	vadd.f32	s12, s12, s11
 800f18e:	ed53 0a02 	vldr	s1, [r3, #-8]
 800f192:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800f196:	ee3d da24 	vadd.f32	s26, s26, s9
 800f19a:	ee7e caac 	vadd.f32	s25, s29, s25
 800f19e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f1a2:	ee66 ea80 	vmul.f32	s29, s13, s0
 800f1a6:	ee28 ea26 	vmul.f32	s28, s16, s13
 800f1aa:	ee7d baab 	vadd.f32	s23, s27, s23
 800f1ae:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f1b2:	ee63 da26 	vmul.f32	s27, s6, s13
 800f1b6:	ee22 baa6 	vmul.f32	s22, s5, s13
 800f1ba:	ee3a aa29 	vadd.f32	s20, s20, s19
 800f1be:	ee75 8a28 	vadd.f32	s17, s10, s17
 800f1c2:	ee62 9a26 	vmul.f32	s19, s4, s13
 800f1c6:	ee66 6a81 	vmul.f32	s13, s13, s2
 800f1ca:	ee27 5a00 	vmul.f32	s10, s14, s0
 800f1ce:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800f1d2:	ee75 8aa8 	vadd.f32	s17, s11, s17
 800f1d6:	ee7e caac 	vadd.f32	s25, s29, s25
 800f1da:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f1de:	ee68 ea07 	vmul.f32	s29, s16, s14
 800f1e2:	ee23 ea07 	vmul.f32	s28, s6, s14
 800f1e6:	ee7d baab 	vadd.f32	s23, s27, s23
 800f1ea:	ee22 ba07 	vmul.f32	s22, s4, s14
 800f1ee:	ee62 da87 	vmul.f32	s27, s5, s14
 800f1f2:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800f1f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f1fa:	ee61 9a87 	vmul.f32	s19, s3, s14
 800f1fe:	ee67 3a20 	vmul.f32	s7, s14, s1
 800f202:	ed13 0a01 	vldr	s0, [r3, #-4]
 800f206:	ee3d da09 	vadd.f32	s26, s26, s18
 800f20a:	ee21 6a07 	vmul.f32	s12, s2, s14
 800f20e:	ee3d da05 	vadd.f32	s26, s26, s10
 800f212:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f216:	ee63 5a27 	vmul.f32	s11, s6, s15
 800f21a:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800f21e:	ee62 4a27 	vmul.f32	s9, s4, s15
 800f222:	ee3b ba2a 	vadd.f32	s22, s22, s21
 800f226:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800f22a:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800f22e:	ee61 9a27 	vmul.f32	s19, s2, s15
 800f232:	ee36 7a28 	vadd.f32	s14, s12, s17
 800f236:	ee7e caac 	vadd.f32	s25, s29, s25
 800f23a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800f23e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800f242:	ee7d baab 	vadd.f32	s23, s27, s23
 800f246:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800f24a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f24e:	f1bb 0b01 	subs.w	fp, fp, #1
 800f252:	f101 0120 	add.w	r1, r1, #32
 800f256:	ee38 da0d 	vadd.f32	s26, s16, s26
 800f25a:	ee75 caac 	vadd.f32	s25, s11, s25
 800f25e:	ee35 ca0c 	vadd.f32	s24, s10, s24
 800f262:	ee74 baab 	vadd.f32	s23, s9, s23
 800f266:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800f26a:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800f26e:	ee78 8a87 	vadd.f32	s17, s17, s14
 800f272:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800f276:	f103 0320 	add.w	r3, r3, #32
 800f27a:	f47f aed8 	bne.w	800f02e <arm_fir_f32+0xfe>
 800f27e:	eb09 0104 	add.w	r1, r9, r4
 800f282:	46e3      	mov	fp, ip
 800f284:	b3a2      	cbz	r2, 800f2f0 <arm_fir_f32+0x3c0>
 800f286:	4613      	mov	r3, r2
 800f288:	ecbb 6a01 	vldmia	fp!, {s12}
 800f28c:	ecf1 7a01 	vldmia	r1!, {s15}
 800f290:	ee26 3a03 	vmul.f32	s6, s12, s6
 800f294:	ee26 4a22 	vmul.f32	s8, s12, s5
 800f298:	ee66 4a02 	vmul.f32	s9, s12, s4
 800f29c:	ee26 5a21 	vmul.f32	s10, s12, s3
 800f2a0:	ee66 5a01 	vmul.f32	s11, s12, s2
 800f2a4:	ee66 6a20 	vmul.f32	s13, s12, s1
 800f2a8:	ee26 7a00 	vmul.f32	s14, s12, s0
 800f2ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	ee3d da03 	vadd.f32	s26, s26, s6
 800f2b6:	ee7c ca84 	vadd.f32	s25, s25, s8
 800f2ba:	eeb0 3a62 	vmov.f32	s6, s5
 800f2be:	ee3c ca24 	vadd.f32	s24, s24, s9
 800f2c2:	eef0 2a42 	vmov.f32	s5, s4
 800f2c6:	ee7b ba85 	vadd.f32	s23, s23, s10
 800f2ca:	eeb0 2a61 	vmov.f32	s4, s3
 800f2ce:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800f2d2:	eef0 1a41 	vmov.f32	s3, s2
 800f2d6:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800f2da:	eeb0 1a60 	vmov.f32	s2, s1
 800f2de:	ee78 8a87 	vadd.f32	s17, s17, s14
 800f2e2:	eef0 0a40 	vmov.f32	s1, s0
 800f2e6:	ee73 3a86 	vadd.f32	s7, s7, s12
 800f2ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f2ee:	d1cb      	bne.n	800f288 <arm_fir_f32+0x358>
 800f2f0:	f1be 0e01 	subs.w	lr, lr, #1
 800f2f4:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 800f2f8:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800f2fc:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 800f300:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 800f304:	ed45 aa04 	vstr	s21, [r5, #-16]
 800f308:	ed45 9a03 	vstr	s19, [r5, #-12]
 800f30c:	ed45 8a02 	vstr	s17, [r5, #-8]
 800f310:	ed45 3a01 	vstr	s7, [r5, #-4]
 800f314:	f107 0720 	add.w	r7, r7, #32
 800f318:	f106 0620 	add.w	r6, r6, #32
 800f31c:	f104 0420 	add.w	r4, r4, #32
 800f320:	f105 0520 	add.w	r5, r5, #32
 800f324:	f47f ae3c 	bne.w	800efa0 <arm_fir_f32+0x70>
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	9800      	ldr	r0, [sp, #0]
 800f32c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f330:	9907      	ldr	r1, [sp, #28]
 800f332:	015b      	lsls	r3, r3, #5
 800f334:	4652      	mov	r2, sl
 800f336:	4418      	add	r0, r3
 800f338:	9000      	str	r0, [sp, #0]
 800f33a:	4419      	add	r1, r3
 800f33c:	449c      	add	ip, r3
 800f33e:	441a      	add	r2, r3
 800f340:	9b04      	ldr	r3, [sp, #16]
 800f342:	f013 0e07 	ands.w	lr, r3, #7
 800f346:	d01f      	beq.n	800f388 <arm_fir_f32+0x458>
 800f348:	9f00      	ldr	r7, [sp, #0]
 800f34a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f34e:	4676      	mov	r6, lr
 800f350:	4665      	mov	r5, ip
 800f352:	f851 3b04 	ldr.w	r3, [r1], #4
 800f356:	eddf 6a12 	vldr	s13, [pc, #72]	; 800f3a0 <arm_fir_f32+0x470>
 800f35a:	f847 3b04 	str.w	r3, [r7], #4
 800f35e:	4644      	mov	r4, r8
 800f360:	464b      	mov	r3, r9
 800f362:	4628      	mov	r0, r5
 800f364:	ecb0 7a01 	vldmia	r0!, {s14}
 800f368:	ecf4 7a01 	vldmia	r4!, {s15}
 800f36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f370:	3b01      	subs	r3, #1
 800f372:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f376:	d1f5      	bne.n	800f364 <arm_fir_f32+0x434>
 800f378:	3e01      	subs	r6, #1
 800f37a:	ece2 6a01 	vstmia	r2!, {s13}
 800f37e:	f105 0504 	add.w	r5, r5, #4
 800f382:	d1e6      	bne.n	800f352 <arm_fir_f32+0x422>
 800f384:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800f388:	9b01      	ldr	r3, [sp, #4]
 800f38a:	1e59      	subs	r1, r3, #1
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	088e      	lsrs	r6, r1, #2
 800f390:	685c      	ldr	r4, [r3, #4]
 800f392:	d020      	beq.n	800f3d6 <arm_fir_f32+0x4a6>
 800f394:	f104 0210 	add.w	r2, r4, #16
 800f398:	f10c 0310 	add.w	r3, ip, #16
 800f39c:	4630      	mov	r0, r6
 800f39e:	e001      	b.n	800f3a4 <arm_fir_f32+0x474>
 800f3a0:	00000000 	.word	0x00000000
 800f3a4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800f3a8:	f842 5c10 	str.w	r5, [r2, #-16]
 800f3ac:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800f3b0:	f842 5c0c 	str.w	r5, [r2, #-12]
 800f3b4:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800f3b8:	f842 5c08 	str.w	r5, [r2, #-8]
 800f3bc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800f3c0:	f842 5c04 	str.w	r5, [r2, #-4]
 800f3c4:	3801      	subs	r0, #1
 800f3c6:	f103 0310 	add.w	r3, r3, #16
 800f3ca:	f102 0210 	add.w	r2, r2, #16
 800f3ce:	d1e9      	bne.n	800f3a4 <arm_fir_f32+0x474>
 800f3d0:	0133      	lsls	r3, r6, #4
 800f3d2:	441c      	add	r4, r3
 800f3d4:	449c      	add	ip, r3
 800f3d6:	f011 0303 	ands.w	r3, r1, #3
 800f3da:	d006      	beq.n	800f3ea <arm_fir_f32+0x4ba>
 800f3dc:	4622      	mov	r2, r4
 800f3de:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3e2:	f842 1b04 	str.w	r1, [r2], #4
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	d1f9      	bne.n	800f3de <arm_fir_f32+0x4ae>
 800f3ea:	b009      	add	sp, #36	; 0x24
 800f3ec:	ecbd 8b10 	vpop	{d8-d15}
 800f3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f4:	46c3      	mov	fp, r8
 800f3f6:	e745      	b.n	800f284 <arm_fir_f32+0x354>

0800f3f8 <arm_cmplx_mag_f32>:
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800f400:	b084      	sub	sp, #16
 800f402:	d07f      	beq.n	800f504 <arm_cmplx_mag_f32+0x10c>
 800f404:	2700      	movs	r7, #0
 800f406:	f100 0420 	add.w	r4, r0, #32
 800f40a:	f101 0510 	add.w	r5, r1, #16
 800f40e:	4646      	mov	r6, r8
 800f410:	e05a      	b.n	800f4c8 <arm_cmplx_mag_f32+0xd0>
 800f412:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f416:	eeb4 0a40 	vcmp.f32	s0, s0
 800f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41e:	f040 80a4 	bne.w	800f56a <arm_cmplx_mag_f32+0x172>
 800f422:	ed05 0a04 	vstr	s0, [r5, #-16]
 800f426:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800f42a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800f42e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f432:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f436:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f43a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	f2c0 808f 	blt.w	800f564 <arm_cmplx_mag_f32+0x16c>
 800f446:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f44a:	eeb4 0a40 	vcmp.f32	s0, s0
 800f44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f452:	f040 80af 	bne.w	800f5b4 <arm_cmplx_mag_f32+0x1bc>
 800f456:	ed05 0a03 	vstr	s0, [r5, #-12]
 800f45a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800f45e:	ed14 0a03 	vldr	s0, [r4, #-12]
 800f462:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f466:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f46a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f46e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	db72      	blt.n	800f55e <arm_cmplx_mag_f32+0x166>
 800f478:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f47c:	eeb4 0a40 	vcmp.f32	s0, s0
 800f480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f484:	f040 808c 	bne.w	800f5a0 <arm_cmplx_mag_f32+0x1a8>
 800f488:	ed05 0a02 	vstr	s0, [r5, #-8]
 800f48c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f490:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f494:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f498:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f49c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f4a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a8:	db20      	blt.n	800f4ec <arm_cmplx_mag_f32+0xf4>
 800f4aa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f4ae:	eeb4 0a40 	vcmp.f32	s0, s0
 800f4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b6:	d169      	bne.n	800f58c <arm_cmplx_mag_f32+0x194>
 800f4b8:	3e01      	subs	r6, #1
 800f4ba:	ed05 0a01 	vstr	s0, [r5, #-4]
 800f4be:	f104 0420 	add.w	r4, r4, #32
 800f4c2:	f105 0510 	add.w	r5, r5, #16
 800f4c6:	d019      	beq.n	800f4fc <arm_cmplx_mag_f32+0x104>
 800f4c8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800f4cc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800f4d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f4d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f4d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f4dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	da95      	bge.n	800f412 <arm_cmplx_mag_f32+0x1a>
 800f4e6:	f845 7c10 	str.w	r7, [r5, #-16]
 800f4ea:	e79c      	b.n	800f426 <arm_cmplx_mag_f32+0x2e>
 800f4ec:	3e01      	subs	r6, #1
 800f4ee:	f845 7c04 	str.w	r7, [r5, #-4]
 800f4f2:	f104 0420 	add.w	r4, r4, #32
 800f4f6:	f105 0510 	add.w	r5, r5, #16
 800f4fa:	d1e5      	bne.n	800f4c8 <arm_cmplx_mag_f32+0xd0>
 800f4fc:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800f500:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800f504:	f012 0503 	ands.w	r5, r2, #3
 800f508:	d026      	beq.n	800f558 <arm_cmplx_mag_f32+0x160>
 800f50a:	2600      	movs	r6, #0
 800f50c:	f100 0408 	add.w	r4, r0, #8
 800f510:	e00c      	b.n	800f52c <arm_cmplx_mag_f32+0x134>
 800f512:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f516:	eeb4 0a40 	vcmp.f32	s0, s0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	d12e      	bne.n	800f57e <arm_cmplx_mag_f32+0x186>
 800f520:	3d01      	subs	r5, #1
 800f522:	ed01 0a01 	vstr	s0, [r1, #-4]
 800f526:	f104 0408 	add.w	r4, r4, #8
 800f52a:	d015      	beq.n	800f558 <arm_cmplx_mag_f32+0x160>
 800f52c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f530:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f534:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f538:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f53c:	3104      	adds	r1, #4
 800f53e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54a:	dae2      	bge.n	800f512 <arm_cmplx_mag_f32+0x11a>
 800f54c:	3d01      	subs	r5, #1
 800f54e:	f841 6c04 	str.w	r6, [r1, #-4]
 800f552:	f104 0408 	add.w	r4, r4, #8
 800f556:	d1e9      	bne.n	800f52c <arm_cmplx_mag_f32+0x134>
 800f558:	b004      	add	sp, #16
 800f55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55e:	f845 7c08 	str.w	r7, [r5, #-8]
 800f562:	e793      	b.n	800f48c <arm_cmplx_mag_f32+0x94>
 800f564:	f845 7c0c 	str.w	r7, [r5, #-12]
 800f568:	e777      	b.n	800f45a <arm_cmplx_mag_f32+0x62>
 800f56a:	eeb0 0a67 	vmov.f32	s0, s15
 800f56e:	9203      	str	r2, [sp, #12]
 800f570:	9102      	str	r1, [sp, #8]
 800f572:	9001      	str	r0, [sp, #4]
 800f574:	f005 f90a 	bl	801478c <sqrtf>
 800f578:	a801      	add	r0, sp, #4
 800f57a:	c807      	ldmia	r0, {r0, r1, r2}
 800f57c:	e751      	b.n	800f422 <arm_cmplx_mag_f32+0x2a>
 800f57e:	eeb0 0a67 	vmov.f32	s0, s15
 800f582:	9101      	str	r1, [sp, #4]
 800f584:	f005 f902 	bl	801478c <sqrtf>
 800f588:	9901      	ldr	r1, [sp, #4]
 800f58a:	e7c9      	b.n	800f520 <arm_cmplx_mag_f32+0x128>
 800f58c:	eeb0 0a67 	vmov.f32	s0, s15
 800f590:	9203      	str	r2, [sp, #12]
 800f592:	9102      	str	r1, [sp, #8]
 800f594:	9001      	str	r0, [sp, #4]
 800f596:	f005 f8f9 	bl	801478c <sqrtf>
 800f59a:	a801      	add	r0, sp, #4
 800f59c:	c807      	ldmia	r0, {r0, r1, r2}
 800f59e:	e78b      	b.n	800f4b8 <arm_cmplx_mag_f32+0xc0>
 800f5a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f5a4:	9203      	str	r2, [sp, #12]
 800f5a6:	9102      	str	r1, [sp, #8]
 800f5a8:	9001      	str	r0, [sp, #4]
 800f5aa:	f005 f8ef 	bl	801478c <sqrtf>
 800f5ae:	a801      	add	r0, sp, #4
 800f5b0:	c807      	ldmia	r0, {r0, r1, r2}
 800f5b2:	e769      	b.n	800f488 <arm_cmplx_mag_f32+0x90>
 800f5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f5b8:	9203      	str	r2, [sp, #12]
 800f5ba:	9102      	str	r1, [sp, #8]
 800f5bc:	9001      	str	r0, [sp, #4]
 800f5be:	f005 f8e5 	bl	801478c <sqrtf>
 800f5c2:	a801      	add	r0, sp, #4
 800f5c4:	c807      	ldmia	r0, {r0, r1, r2}
 800f5c6:	e746      	b.n	800f456 <arm_cmplx_mag_f32+0x5e>

0800f5c8 <__errno>:
 800f5c8:	4b01      	ldr	r3, [pc, #4]	; (800f5d0 <__errno+0x8>)
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	20000274 	.word	0x20000274

0800f5d4 <__libc_init_array>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	4d0d      	ldr	r5, [pc, #52]	; (800f60c <__libc_init_array+0x38>)
 800f5d8:	4c0d      	ldr	r4, [pc, #52]	; (800f610 <__libc_init_array+0x3c>)
 800f5da:	1b64      	subs	r4, r4, r5
 800f5dc:	10a4      	asrs	r4, r4, #2
 800f5de:	2600      	movs	r6, #0
 800f5e0:	42a6      	cmp	r6, r4
 800f5e2:	d109      	bne.n	800f5f8 <__libc_init_array+0x24>
 800f5e4:	4d0b      	ldr	r5, [pc, #44]	; (800f614 <__libc_init_array+0x40>)
 800f5e6:	4c0c      	ldr	r4, [pc, #48]	; (800f618 <__libc_init_array+0x44>)
 800f5e8:	f005 fb70 	bl	8014ccc <_init>
 800f5ec:	1b64      	subs	r4, r4, r5
 800f5ee:	10a4      	asrs	r4, r4, #2
 800f5f0:	2600      	movs	r6, #0
 800f5f2:	42a6      	cmp	r6, r4
 800f5f4:	d105      	bne.n	800f602 <__libc_init_array+0x2e>
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5fc:	4798      	blx	r3
 800f5fe:	3601      	adds	r6, #1
 800f600:	e7ee      	b.n	800f5e0 <__libc_init_array+0xc>
 800f602:	f855 3b04 	ldr.w	r3, [r5], #4
 800f606:	4798      	blx	r3
 800f608:	3601      	adds	r6, #1
 800f60a:	e7f2      	b.n	800f5f2 <__libc_init_array+0x1e>
 800f60c:	08016f40 	.word	0x08016f40
 800f610:	08016f40 	.word	0x08016f40
 800f614:	08016f40 	.word	0x08016f40
 800f618:	08016f44 	.word	0x08016f44

0800f61c <memcpy>:
 800f61c:	440a      	add	r2, r1
 800f61e:	4291      	cmp	r1, r2
 800f620:	f100 33ff 	add.w	r3, r0, #4294967295
 800f624:	d100      	bne.n	800f628 <memcpy+0xc>
 800f626:	4770      	bx	lr
 800f628:	b510      	push	{r4, lr}
 800f62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f632:	4291      	cmp	r1, r2
 800f634:	d1f9      	bne.n	800f62a <memcpy+0xe>
 800f636:	bd10      	pop	{r4, pc}

0800f638 <memset>:
 800f638:	4402      	add	r2, r0
 800f63a:	4603      	mov	r3, r0
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d100      	bne.n	800f642 <memset+0xa>
 800f640:	4770      	bx	lr
 800f642:	f803 1b01 	strb.w	r1, [r3], #1
 800f646:	e7f9      	b.n	800f63c <memset+0x4>

0800f648 <__cvt>:
 800f648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f64c:	ec55 4b10 	vmov	r4, r5, d0
 800f650:	2d00      	cmp	r5, #0
 800f652:	460e      	mov	r6, r1
 800f654:	4619      	mov	r1, r3
 800f656:	462b      	mov	r3, r5
 800f658:	bfbb      	ittet	lt
 800f65a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f65e:	461d      	movlt	r5, r3
 800f660:	2300      	movge	r3, #0
 800f662:	232d      	movlt	r3, #45	; 0x2d
 800f664:	700b      	strb	r3, [r1, #0]
 800f666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f668:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f66c:	4691      	mov	r9, r2
 800f66e:	f023 0820 	bic.w	r8, r3, #32
 800f672:	bfbc      	itt	lt
 800f674:	4622      	movlt	r2, r4
 800f676:	4614      	movlt	r4, r2
 800f678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f67c:	d005      	beq.n	800f68a <__cvt+0x42>
 800f67e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f682:	d100      	bne.n	800f686 <__cvt+0x3e>
 800f684:	3601      	adds	r6, #1
 800f686:	2102      	movs	r1, #2
 800f688:	e000      	b.n	800f68c <__cvt+0x44>
 800f68a:	2103      	movs	r1, #3
 800f68c:	ab03      	add	r3, sp, #12
 800f68e:	9301      	str	r3, [sp, #4]
 800f690:	ab02      	add	r3, sp, #8
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	ec45 4b10 	vmov	d0, r4, r5
 800f698:	4653      	mov	r3, sl
 800f69a:	4632      	mov	r2, r6
 800f69c:	f001 fe60 	bl	8011360 <_dtoa_r>
 800f6a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f6a4:	4607      	mov	r7, r0
 800f6a6:	d102      	bne.n	800f6ae <__cvt+0x66>
 800f6a8:	f019 0f01 	tst.w	r9, #1
 800f6ac:	d022      	beq.n	800f6f4 <__cvt+0xac>
 800f6ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f6b2:	eb07 0906 	add.w	r9, r7, r6
 800f6b6:	d110      	bne.n	800f6da <__cvt+0x92>
 800f6b8:	783b      	ldrb	r3, [r7, #0]
 800f6ba:	2b30      	cmp	r3, #48	; 0x30
 800f6bc:	d10a      	bne.n	800f6d4 <__cvt+0x8c>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	f7f1 fa0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6ca:	b918      	cbnz	r0, 800f6d4 <__cvt+0x8c>
 800f6cc:	f1c6 0601 	rsb	r6, r6, #1
 800f6d0:	f8ca 6000 	str.w	r6, [sl]
 800f6d4:	f8da 3000 	ldr.w	r3, [sl]
 800f6d8:	4499      	add	r9, r3
 800f6da:	2200      	movs	r2, #0
 800f6dc:	2300      	movs	r3, #0
 800f6de:	4620      	mov	r0, r4
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	f7f1 fa01 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6e6:	b108      	cbz	r0, 800f6ec <__cvt+0xa4>
 800f6e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f6ec:	2230      	movs	r2, #48	; 0x30
 800f6ee:	9b03      	ldr	r3, [sp, #12]
 800f6f0:	454b      	cmp	r3, r9
 800f6f2:	d307      	bcc.n	800f704 <__cvt+0xbc>
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6f8:	1bdb      	subs	r3, r3, r7
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	6013      	str	r3, [r2, #0]
 800f6fe:	b004      	add	sp, #16
 800f700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f704:	1c59      	adds	r1, r3, #1
 800f706:	9103      	str	r1, [sp, #12]
 800f708:	701a      	strb	r2, [r3, #0]
 800f70a:	e7f0      	b.n	800f6ee <__cvt+0xa6>

0800f70c <__exponent>:
 800f70c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f70e:	4603      	mov	r3, r0
 800f710:	2900      	cmp	r1, #0
 800f712:	bfb8      	it	lt
 800f714:	4249      	neglt	r1, r1
 800f716:	f803 2b02 	strb.w	r2, [r3], #2
 800f71a:	bfb4      	ite	lt
 800f71c:	222d      	movlt	r2, #45	; 0x2d
 800f71e:	222b      	movge	r2, #43	; 0x2b
 800f720:	2909      	cmp	r1, #9
 800f722:	7042      	strb	r2, [r0, #1]
 800f724:	dd2a      	ble.n	800f77c <__exponent+0x70>
 800f726:	f10d 0407 	add.w	r4, sp, #7
 800f72a:	46a4      	mov	ip, r4
 800f72c:	270a      	movs	r7, #10
 800f72e:	46a6      	mov	lr, r4
 800f730:	460a      	mov	r2, r1
 800f732:	fb91 f6f7 	sdiv	r6, r1, r7
 800f736:	fb07 1516 	mls	r5, r7, r6, r1
 800f73a:	3530      	adds	r5, #48	; 0x30
 800f73c:	2a63      	cmp	r2, #99	; 0x63
 800f73e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f746:	4631      	mov	r1, r6
 800f748:	dcf1      	bgt.n	800f72e <__exponent+0x22>
 800f74a:	3130      	adds	r1, #48	; 0x30
 800f74c:	f1ae 0502 	sub.w	r5, lr, #2
 800f750:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f754:	1c44      	adds	r4, r0, #1
 800f756:	4629      	mov	r1, r5
 800f758:	4561      	cmp	r1, ip
 800f75a:	d30a      	bcc.n	800f772 <__exponent+0x66>
 800f75c:	f10d 0209 	add.w	r2, sp, #9
 800f760:	eba2 020e 	sub.w	r2, r2, lr
 800f764:	4565      	cmp	r5, ip
 800f766:	bf88      	it	hi
 800f768:	2200      	movhi	r2, #0
 800f76a:	4413      	add	r3, r2
 800f76c:	1a18      	subs	r0, r3, r0
 800f76e:	b003      	add	sp, #12
 800f770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f77a:	e7ed      	b.n	800f758 <__exponent+0x4c>
 800f77c:	2330      	movs	r3, #48	; 0x30
 800f77e:	3130      	adds	r1, #48	; 0x30
 800f780:	7083      	strb	r3, [r0, #2]
 800f782:	70c1      	strb	r1, [r0, #3]
 800f784:	1d03      	adds	r3, r0, #4
 800f786:	e7f1      	b.n	800f76c <__exponent+0x60>

0800f788 <_printf_float>:
 800f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	ed2d 8b02 	vpush	{d8}
 800f790:	b08d      	sub	sp, #52	; 0x34
 800f792:	460c      	mov	r4, r1
 800f794:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f798:	4616      	mov	r6, r2
 800f79a:	461f      	mov	r7, r3
 800f79c:	4605      	mov	r5, r0
 800f79e:	f002 ff3b 	bl	8012618 <_localeconv_r>
 800f7a2:	f8d0 a000 	ldr.w	sl, [r0]
 800f7a6:	4650      	mov	r0, sl
 800f7a8:	f7f0 fd1c 	bl	80001e4 <strlen>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	9305      	str	r3, [sp, #20]
 800f7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f7b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f7bc:	3307      	adds	r3, #7
 800f7be:	f023 0307 	bic.w	r3, r3, #7
 800f7c2:	f103 0208 	add.w	r2, r3, #8
 800f7c6:	f8c8 2000 	str.w	r2, [r8]
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f7d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f7d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7da:	9307      	str	r3, [sp, #28]
 800f7dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f7e0:	ee08 0a10 	vmov	s16, r0
 800f7e4:	4b9f      	ldr	r3, [pc, #636]	; (800fa64 <_printf_float+0x2dc>)
 800f7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ee:	f7f1 f9ad 	bl	8000b4c <__aeabi_dcmpun>
 800f7f2:	bb88      	cbnz	r0, 800f858 <_printf_float+0xd0>
 800f7f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7f8:	4b9a      	ldr	r3, [pc, #616]	; (800fa64 <_printf_float+0x2dc>)
 800f7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fe:	f7f1 f987 	bl	8000b10 <__aeabi_dcmple>
 800f802:	bb48      	cbnz	r0, 800f858 <_printf_float+0xd0>
 800f804:	2200      	movs	r2, #0
 800f806:	2300      	movs	r3, #0
 800f808:	4640      	mov	r0, r8
 800f80a:	4649      	mov	r1, r9
 800f80c:	f7f1 f976 	bl	8000afc <__aeabi_dcmplt>
 800f810:	b110      	cbz	r0, 800f818 <_printf_float+0x90>
 800f812:	232d      	movs	r3, #45	; 0x2d
 800f814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f818:	4b93      	ldr	r3, [pc, #588]	; (800fa68 <_printf_float+0x2e0>)
 800f81a:	4894      	ldr	r0, [pc, #592]	; (800fa6c <_printf_float+0x2e4>)
 800f81c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f820:	bf94      	ite	ls
 800f822:	4698      	movls	r8, r3
 800f824:	4680      	movhi	r8, r0
 800f826:	2303      	movs	r3, #3
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	9b05      	ldr	r3, [sp, #20]
 800f82c:	f023 0204 	bic.w	r2, r3, #4
 800f830:	6022      	str	r2, [r4, #0]
 800f832:	f04f 0900 	mov.w	r9, #0
 800f836:	9700      	str	r7, [sp, #0]
 800f838:	4633      	mov	r3, r6
 800f83a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f83c:	4621      	mov	r1, r4
 800f83e:	4628      	mov	r0, r5
 800f840:	f000 f9d8 	bl	800fbf4 <_printf_common>
 800f844:	3001      	adds	r0, #1
 800f846:	f040 8090 	bne.w	800f96a <_printf_float+0x1e2>
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	b00d      	add	sp, #52	; 0x34
 800f850:	ecbd 8b02 	vpop	{d8}
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	4642      	mov	r2, r8
 800f85a:	464b      	mov	r3, r9
 800f85c:	4640      	mov	r0, r8
 800f85e:	4649      	mov	r1, r9
 800f860:	f7f1 f974 	bl	8000b4c <__aeabi_dcmpun>
 800f864:	b140      	cbz	r0, 800f878 <_printf_float+0xf0>
 800f866:	464b      	mov	r3, r9
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bfbc      	itt	lt
 800f86c:	232d      	movlt	r3, #45	; 0x2d
 800f86e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f872:	487f      	ldr	r0, [pc, #508]	; (800fa70 <_printf_float+0x2e8>)
 800f874:	4b7f      	ldr	r3, [pc, #508]	; (800fa74 <_printf_float+0x2ec>)
 800f876:	e7d1      	b.n	800f81c <_printf_float+0x94>
 800f878:	6863      	ldr	r3, [r4, #4]
 800f87a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f87e:	9206      	str	r2, [sp, #24]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	d13f      	bne.n	800f904 <_printf_float+0x17c>
 800f884:	2306      	movs	r3, #6
 800f886:	6063      	str	r3, [r4, #4]
 800f888:	9b05      	ldr	r3, [sp, #20]
 800f88a:	6861      	ldr	r1, [r4, #4]
 800f88c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f890:	2300      	movs	r3, #0
 800f892:	9303      	str	r3, [sp, #12]
 800f894:	ab0a      	add	r3, sp, #40	; 0x28
 800f896:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f89a:	ab09      	add	r3, sp, #36	; 0x24
 800f89c:	ec49 8b10 	vmov	d0, r8, r9
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	6022      	str	r2, [r4, #0]
 800f8a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7ff fecd 	bl	800f648 <__cvt>
 800f8ae:	9b06      	ldr	r3, [sp, #24]
 800f8b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b2:	2b47      	cmp	r3, #71	; 0x47
 800f8b4:	4680      	mov	r8, r0
 800f8b6:	d108      	bne.n	800f8ca <_printf_float+0x142>
 800f8b8:	1cc8      	adds	r0, r1, #3
 800f8ba:	db02      	blt.n	800f8c2 <_printf_float+0x13a>
 800f8bc:	6863      	ldr	r3, [r4, #4]
 800f8be:	4299      	cmp	r1, r3
 800f8c0:	dd41      	ble.n	800f946 <_printf_float+0x1be>
 800f8c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f8c6:	fa5f fb8b 	uxtb.w	fp, fp
 800f8ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8ce:	d820      	bhi.n	800f912 <_printf_float+0x18a>
 800f8d0:	3901      	subs	r1, #1
 800f8d2:	465a      	mov	r2, fp
 800f8d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f8da:	f7ff ff17 	bl	800f70c <__exponent>
 800f8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8e0:	1813      	adds	r3, r2, r0
 800f8e2:	2a01      	cmp	r2, #1
 800f8e4:	4681      	mov	r9, r0
 800f8e6:	6123      	str	r3, [r4, #16]
 800f8e8:	dc02      	bgt.n	800f8f0 <_printf_float+0x168>
 800f8ea:	6822      	ldr	r2, [r4, #0]
 800f8ec:	07d2      	lsls	r2, r2, #31
 800f8ee:	d501      	bpl.n	800f8f4 <_printf_float+0x16c>
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	6123      	str	r3, [r4, #16]
 800f8f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d09c      	beq.n	800f836 <_printf_float+0xae>
 800f8fc:	232d      	movs	r3, #45	; 0x2d
 800f8fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f902:	e798      	b.n	800f836 <_printf_float+0xae>
 800f904:	9a06      	ldr	r2, [sp, #24]
 800f906:	2a47      	cmp	r2, #71	; 0x47
 800f908:	d1be      	bne.n	800f888 <_printf_float+0x100>
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1bc      	bne.n	800f888 <_printf_float+0x100>
 800f90e:	2301      	movs	r3, #1
 800f910:	e7b9      	b.n	800f886 <_printf_float+0xfe>
 800f912:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f916:	d118      	bne.n	800f94a <_printf_float+0x1c2>
 800f918:	2900      	cmp	r1, #0
 800f91a:	6863      	ldr	r3, [r4, #4]
 800f91c:	dd0b      	ble.n	800f936 <_printf_float+0x1ae>
 800f91e:	6121      	str	r1, [r4, #16]
 800f920:	b913      	cbnz	r3, 800f928 <_printf_float+0x1a0>
 800f922:	6822      	ldr	r2, [r4, #0]
 800f924:	07d0      	lsls	r0, r2, #31
 800f926:	d502      	bpl.n	800f92e <_printf_float+0x1a6>
 800f928:	3301      	adds	r3, #1
 800f92a:	440b      	add	r3, r1
 800f92c:	6123      	str	r3, [r4, #16]
 800f92e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f930:	f04f 0900 	mov.w	r9, #0
 800f934:	e7de      	b.n	800f8f4 <_printf_float+0x16c>
 800f936:	b913      	cbnz	r3, 800f93e <_printf_float+0x1b6>
 800f938:	6822      	ldr	r2, [r4, #0]
 800f93a:	07d2      	lsls	r2, r2, #31
 800f93c:	d501      	bpl.n	800f942 <_printf_float+0x1ba>
 800f93e:	3302      	adds	r3, #2
 800f940:	e7f4      	b.n	800f92c <_printf_float+0x1a4>
 800f942:	2301      	movs	r3, #1
 800f944:	e7f2      	b.n	800f92c <_printf_float+0x1a4>
 800f946:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f94c:	4299      	cmp	r1, r3
 800f94e:	db05      	blt.n	800f95c <_printf_float+0x1d4>
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	6121      	str	r1, [r4, #16]
 800f954:	07d8      	lsls	r0, r3, #31
 800f956:	d5ea      	bpl.n	800f92e <_printf_float+0x1a6>
 800f958:	1c4b      	adds	r3, r1, #1
 800f95a:	e7e7      	b.n	800f92c <_printf_float+0x1a4>
 800f95c:	2900      	cmp	r1, #0
 800f95e:	bfd4      	ite	le
 800f960:	f1c1 0202 	rsble	r2, r1, #2
 800f964:	2201      	movgt	r2, #1
 800f966:	4413      	add	r3, r2
 800f968:	e7e0      	b.n	800f92c <_printf_float+0x1a4>
 800f96a:	6823      	ldr	r3, [r4, #0]
 800f96c:	055a      	lsls	r2, r3, #21
 800f96e:	d407      	bmi.n	800f980 <_printf_float+0x1f8>
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	4642      	mov	r2, r8
 800f974:	4631      	mov	r1, r6
 800f976:	4628      	mov	r0, r5
 800f978:	47b8      	blx	r7
 800f97a:	3001      	adds	r0, #1
 800f97c:	d12c      	bne.n	800f9d8 <_printf_float+0x250>
 800f97e:	e764      	b.n	800f84a <_printf_float+0xc2>
 800f980:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f984:	f240 80e0 	bls.w	800fb48 <_printf_float+0x3c0>
 800f988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f98c:	2200      	movs	r2, #0
 800f98e:	2300      	movs	r3, #0
 800f990:	f7f1 f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 800f994:	2800      	cmp	r0, #0
 800f996:	d034      	beq.n	800fa02 <_printf_float+0x27a>
 800f998:	4a37      	ldr	r2, [pc, #220]	; (800fa78 <_printf_float+0x2f0>)
 800f99a:	2301      	movs	r3, #1
 800f99c:	4631      	mov	r1, r6
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	f43f af51 	beq.w	800f84a <_printf_float+0xc2>
 800f9a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	db02      	blt.n	800f9b6 <_printf_float+0x22e>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	07d8      	lsls	r0, r3, #31
 800f9b4:	d510      	bpl.n	800f9d8 <_printf_float+0x250>
 800f9b6:	ee18 3a10 	vmov	r3, s16
 800f9ba:	4652      	mov	r2, sl
 800f9bc:	4631      	mov	r1, r6
 800f9be:	4628      	mov	r0, r5
 800f9c0:	47b8      	blx	r7
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	f43f af41 	beq.w	800f84a <_printf_float+0xc2>
 800f9c8:	f04f 0800 	mov.w	r8, #0
 800f9cc:	f104 091a 	add.w	r9, r4, #26
 800f9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	dc09      	bgt.n	800f9ec <_printf_float+0x264>
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	079b      	lsls	r3, r3, #30
 800f9dc:	f100 8105 	bmi.w	800fbea <_printf_float+0x462>
 800f9e0:	68e0      	ldr	r0, [r4, #12]
 800f9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9e4:	4298      	cmp	r0, r3
 800f9e6:	bfb8      	it	lt
 800f9e8:	4618      	movlt	r0, r3
 800f9ea:	e730      	b.n	800f84e <_printf_float+0xc6>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	464a      	mov	r2, r9
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	47b8      	blx	r7
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	f43f af27 	beq.w	800f84a <_printf_float+0xc2>
 800f9fc:	f108 0801 	add.w	r8, r8, #1
 800fa00:	e7e6      	b.n	800f9d0 <_printf_float+0x248>
 800fa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	dc39      	bgt.n	800fa7c <_printf_float+0x2f4>
 800fa08:	4a1b      	ldr	r2, [pc, #108]	; (800fa78 <_printf_float+0x2f0>)
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4628      	mov	r0, r5
 800fa10:	47b8      	blx	r7
 800fa12:	3001      	adds	r0, #1
 800fa14:	f43f af19 	beq.w	800f84a <_printf_float+0xc2>
 800fa18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	d102      	bne.n	800fa26 <_printf_float+0x29e>
 800fa20:	6823      	ldr	r3, [r4, #0]
 800fa22:	07d9      	lsls	r1, r3, #31
 800fa24:	d5d8      	bpl.n	800f9d8 <_printf_float+0x250>
 800fa26:	ee18 3a10 	vmov	r3, s16
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4628      	mov	r0, r5
 800fa30:	47b8      	blx	r7
 800fa32:	3001      	adds	r0, #1
 800fa34:	f43f af09 	beq.w	800f84a <_printf_float+0xc2>
 800fa38:	f04f 0900 	mov.w	r9, #0
 800fa3c:	f104 0a1a 	add.w	sl, r4, #26
 800fa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa42:	425b      	negs	r3, r3
 800fa44:	454b      	cmp	r3, r9
 800fa46:	dc01      	bgt.n	800fa4c <_printf_float+0x2c4>
 800fa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4a:	e792      	b.n	800f972 <_printf_float+0x1ea>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	4652      	mov	r2, sl
 800fa50:	4631      	mov	r1, r6
 800fa52:	4628      	mov	r0, r5
 800fa54:	47b8      	blx	r7
 800fa56:	3001      	adds	r0, #1
 800fa58:	f43f aef7 	beq.w	800f84a <_printf_float+0xc2>
 800fa5c:	f109 0901 	add.w	r9, r9, #1
 800fa60:	e7ee      	b.n	800fa40 <_printf_float+0x2b8>
 800fa62:	bf00      	nop
 800fa64:	7fefffff 	.word	0x7fefffff
 800fa68:	08016afc 	.word	0x08016afc
 800fa6c:	08016b00 	.word	0x08016b00
 800fa70:	08016b08 	.word	0x08016b08
 800fa74:	08016b04 	.word	0x08016b04
 800fa78:	08016e11 	.word	0x08016e11
 800fa7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa80:	429a      	cmp	r2, r3
 800fa82:	bfa8      	it	ge
 800fa84:	461a      	movge	r2, r3
 800fa86:	2a00      	cmp	r2, #0
 800fa88:	4691      	mov	r9, r2
 800fa8a:	dc37      	bgt.n	800fafc <_printf_float+0x374>
 800fa8c:	f04f 0b00 	mov.w	fp, #0
 800fa90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa94:	f104 021a 	add.w	r2, r4, #26
 800fa98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa9a:	9305      	str	r3, [sp, #20]
 800fa9c:	eba3 0309 	sub.w	r3, r3, r9
 800faa0:	455b      	cmp	r3, fp
 800faa2:	dc33      	bgt.n	800fb0c <_printf_float+0x384>
 800faa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faa8:	429a      	cmp	r2, r3
 800faaa:	db3b      	blt.n	800fb24 <_printf_float+0x39c>
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	07da      	lsls	r2, r3, #31
 800fab0:	d438      	bmi.n	800fb24 <_printf_float+0x39c>
 800fab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fab4:	9b05      	ldr	r3, [sp, #20]
 800fab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	eba2 0901 	sub.w	r9, r2, r1
 800fabe:	4599      	cmp	r9, r3
 800fac0:	bfa8      	it	ge
 800fac2:	4699      	movge	r9, r3
 800fac4:	f1b9 0f00 	cmp.w	r9, #0
 800fac8:	dc35      	bgt.n	800fb36 <_printf_float+0x3ae>
 800faca:	f04f 0800 	mov.w	r8, #0
 800face:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fad2:	f104 0a1a 	add.w	sl, r4, #26
 800fad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fada:	1a9b      	subs	r3, r3, r2
 800fadc:	eba3 0309 	sub.w	r3, r3, r9
 800fae0:	4543      	cmp	r3, r8
 800fae2:	f77f af79 	ble.w	800f9d8 <_printf_float+0x250>
 800fae6:	2301      	movs	r3, #1
 800fae8:	4652      	mov	r2, sl
 800faea:	4631      	mov	r1, r6
 800faec:	4628      	mov	r0, r5
 800faee:	47b8      	blx	r7
 800faf0:	3001      	adds	r0, #1
 800faf2:	f43f aeaa 	beq.w	800f84a <_printf_float+0xc2>
 800faf6:	f108 0801 	add.w	r8, r8, #1
 800fafa:	e7ec      	b.n	800fad6 <_printf_float+0x34e>
 800fafc:	4613      	mov	r3, r2
 800fafe:	4631      	mov	r1, r6
 800fb00:	4642      	mov	r2, r8
 800fb02:	4628      	mov	r0, r5
 800fb04:	47b8      	blx	r7
 800fb06:	3001      	adds	r0, #1
 800fb08:	d1c0      	bne.n	800fa8c <_printf_float+0x304>
 800fb0a:	e69e      	b.n	800f84a <_printf_float+0xc2>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	4631      	mov	r1, r6
 800fb10:	4628      	mov	r0, r5
 800fb12:	9205      	str	r2, [sp, #20]
 800fb14:	47b8      	blx	r7
 800fb16:	3001      	adds	r0, #1
 800fb18:	f43f ae97 	beq.w	800f84a <_printf_float+0xc2>
 800fb1c:	9a05      	ldr	r2, [sp, #20]
 800fb1e:	f10b 0b01 	add.w	fp, fp, #1
 800fb22:	e7b9      	b.n	800fa98 <_printf_float+0x310>
 800fb24:	ee18 3a10 	vmov	r3, s16
 800fb28:	4652      	mov	r2, sl
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b8      	blx	r7
 800fb30:	3001      	adds	r0, #1
 800fb32:	d1be      	bne.n	800fab2 <_printf_float+0x32a>
 800fb34:	e689      	b.n	800f84a <_printf_float+0xc2>
 800fb36:	9a05      	ldr	r2, [sp, #20]
 800fb38:	464b      	mov	r3, r9
 800fb3a:	4442      	add	r2, r8
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	d1c1      	bne.n	800faca <_printf_float+0x342>
 800fb46:	e680      	b.n	800f84a <_printf_float+0xc2>
 800fb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb4a:	2a01      	cmp	r2, #1
 800fb4c:	dc01      	bgt.n	800fb52 <_printf_float+0x3ca>
 800fb4e:	07db      	lsls	r3, r3, #31
 800fb50:	d538      	bpl.n	800fbc4 <_printf_float+0x43c>
 800fb52:	2301      	movs	r3, #1
 800fb54:	4642      	mov	r2, r8
 800fb56:	4631      	mov	r1, r6
 800fb58:	4628      	mov	r0, r5
 800fb5a:	47b8      	blx	r7
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	f43f ae74 	beq.w	800f84a <_printf_float+0xc2>
 800fb62:	ee18 3a10 	vmov	r3, s16
 800fb66:	4652      	mov	r2, sl
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	47b8      	blx	r7
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f43f ae6b 	beq.w	800f84a <_printf_float+0xc2>
 800fb74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f7f0 ffb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb80:	b9d8      	cbnz	r0, 800fbba <_printf_float+0x432>
 800fb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb84:	f108 0201 	add.w	r2, r8, #1
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	4631      	mov	r1, r6
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	47b8      	blx	r7
 800fb90:	3001      	adds	r0, #1
 800fb92:	d10e      	bne.n	800fbb2 <_printf_float+0x42a>
 800fb94:	e659      	b.n	800f84a <_printf_float+0xc2>
 800fb96:	2301      	movs	r3, #1
 800fb98:	4652      	mov	r2, sl
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	47b8      	blx	r7
 800fba0:	3001      	adds	r0, #1
 800fba2:	f43f ae52 	beq.w	800f84a <_printf_float+0xc2>
 800fba6:	f108 0801 	add.w	r8, r8, #1
 800fbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbac:	3b01      	subs	r3, #1
 800fbae:	4543      	cmp	r3, r8
 800fbb0:	dcf1      	bgt.n	800fb96 <_printf_float+0x40e>
 800fbb2:	464b      	mov	r3, r9
 800fbb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fbb8:	e6dc      	b.n	800f974 <_printf_float+0x1ec>
 800fbba:	f04f 0800 	mov.w	r8, #0
 800fbbe:	f104 0a1a 	add.w	sl, r4, #26
 800fbc2:	e7f2      	b.n	800fbaa <_printf_float+0x422>
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	4642      	mov	r2, r8
 800fbc8:	e7df      	b.n	800fb8a <_printf_float+0x402>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	464a      	mov	r2, r9
 800fbce:	4631      	mov	r1, r6
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	47b8      	blx	r7
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	f43f ae38 	beq.w	800f84a <_printf_float+0xc2>
 800fbda:	f108 0801 	add.w	r8, r8, #1
 800fbde:	68e3      	ldr	r3, [r4, #12]
 800fbe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbe2:	1a5b      	subs	r3, r3, r1
 800fbe4:	4543      	cmp	r3, r8
 800fbe6:	dcf0      	bgt.n	800fbca <_printf_float+0x442>
 800fbe8:	e6fa      	b.n	800f9e0 <_printf_float+0x258>
 800fbea:	f04f 0800 	mov.w	r8, #0
 800fbee:	f104 0919 	add.w	r9, r4, #25
 800fbf2:	e7f4      	b.n	800fbde <_printf_float+0x456>

0800fbf4 <_printf_common>:
 800fbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf8:	4616      	mov	r6, r2
 800fbfa:	4699      	mov	r9, r3
 800fbfc:	688a      	ldr	r2, [r1, #8]
 800fbfe:	690b      	ldr	r3, [r1, #16]
 800fc00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc04:	4293      	cmp	r3, r2
 800fc06:	bfb8      	it	lt
 800fc08:	4613      	movlt	r3, r2
 800fc0a:	6033      	str	r3, [r6, #0]
 800fc0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc10:	4607      	mov	r7, r0
 800fc12:	460c      	mov	r4, r1
 800fc14:	b10a      	cbz	r2, 800fc1a <_printf_common+0x26>
 800fc16:	3301      	adds	r3, #1
 800fc18:	6033      	str	r3, [r6, #0]
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	0699      	lsls	r1, r3, #26
 800fc1e:	bf42      	ittt	mi
 800fc20:	6833      	ldrmi	r3, [r6, #0]
 800fc22:	3302      	addmi	r3, #2
 800fc24:	6033      	strmi	r3, [r6, #0]
 800fc26:	6825      	ldr	r5, [r4, #0]
 800fc28:	f015 0506 	ands.w	r5, r5, #6
 800fc2c:	d106      	bne.n	800fc3c <_printf_common+0x48>
 800fc2e:	f104 0a19 	add.w	sl, r4, #25
 800fc32:	68e3      	ldr	r3, [r4, #12]
 800fc34:	6832      	ldr	r2, [r6, #0]
 800fc36:	1a9b      	subs	r3, r3, r2
 800fc38:	42ab      	cmp	r3, r5
 800fc3a:	dc26      	bgt.n	800fc8a <_printf_common+0x96>
 800fc3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc40:	1e13      	subs	r3, r2, #0
 800fc42:	6822      	ldr	r2, [r4, #0]
 800fc44:	bf18      	it	ne
 800fc46:	2301      	movne	r3, #1
 800fc48:	0692      	lsls	r2, r2, #26
 800fc4a:	d42b      	bmi.n	800fca4 <_printf_common+0xb0>
 800fc4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc50:	4649      	mov	r1, r9
 800fc52:	4638      	mov	r0, r7
 800fc54:	47c0      	blx	r8
 800fc56:	3001      	adds	r0, #1
 800fc58:	d01e      	beq.n	800fc98 <_printf_common+0xa4>
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	68e5      	ldr	r5, [r4, #12]
 800fc5e:	6832      	ldr	r2, [r6, #0]
 800fc60:	f003 0306 	and.w	r3, r3, #6
 800fc64:	2b04      	cmp	r3, #4
 800fc66:	bf08      	it	eq
 800fc68:	1aad      	subeq	r5, r5, r2
 800fc6a:	68a3      	ldr	r3, [r4, #8]
 800fc6c:	6922      	ldr	r2, [r4, #16]
 800fc6e:	bf0c      	ite	eq
 800fc70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc74:	2500      	movne	r5, #0
 800fc76:	4293      	cmp	r3, r2
 800fc78:	bfc4      	itt	gt
 800fc7a:	1a9b      	subgt	r3, r3, r2
 800fc7c:	18ed      	addgt	r5, r5, r3
 800fc7e:	2600      	movs	r6, #0
 800fc80:	341a      	adds	r4, #26
 800fc82:	42b5      	cmp	r5, r6
 800fc84:	d11a      	bne.n	800fcbc <_printf_common+0xc8>
 800fc86:	2000      	movs	r0, #0
 800fc88:	e008      	b.n	800fc9c <_printf_common+0xa8>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	4652      	mov	r2, sl
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4638      	mov	r0, r7
 800fc92:	47c0      	blx	r8
 800fc94:	3001      	adds	r0, #1
 800fc96:	d103      	bne.n	800fca0 <_printf_common+0xac>
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fca0:	3501      	adds	r5, #1
 800fca2:	e7c6      	b.n	800fc32 <_printf_common+0x3e>
 800fca4:	18e1      	adds	r1, r4, r3
 800fca6:	1c5a      	adds	r2, r3, #1
 800fca8:	2030      	movs	r0, #48	; 0x30
 800fcaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcae:	4422      	add	r2, r4
 800fcb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcb8:	3302      	adds	r3, #2
 800fcba:	e7c7      	b.n	800fc4c <_printf_common+0x58>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	4622      	mov	r2, r4
 800fcc0:	4649      	mov	r1, r9
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	47c0      	blx	r8
 800fcc6:	3001      	adds	r0, #1
 800fcc8:	d0e6      	beq.n	800fc98 <_printf_common+0xa4>
 800fcca:	3601      	adds	r6, #1
 800fccc:	e7d9      	b.n	800fc82 <_printf_common+0x8e>
	...

0800fcd0 <_printf_i>:
 800fcd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	4691      	mov	r9, r2
 800fcd8:	7e27      	ldrb	r7, [r4, #24]
 800fcda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fcdc:	2f78      	cmp	r7, #120	; 0x78
 800fcde:	4680      	mov	r8, r0
 800fce0:	469a      	mov	sl, r3
 800fce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fce6:	d807      	bhi.n	800fcf8 <_printf_i+0x28>
 800fce8:	2f62      	cmp	r7, #98	; 0x62
 800fcea:	d80a      	bhi.n	800fd02 <_printf_i+0x32>
 800fcec:	2f00      	cmp	r7, #0
 800fcee:	f000 80d8 	beq.w	800fea2 <_printf_i+0x1d2>
 800fcf2:	2f58      	cmp	r7, #88	; 0x58
 800fcf4:	f000 80a3 	beq.w	800fe3e <_printf_i+0x16e>
 800fcf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fcfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd00:	e03a      	b.n	800fd78 <_printf_i+0xa8>
 800fd02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd06:	2b15      	cmp	r3, #21
 800fd08:	d8f6      	bhi.n	800fcf8 <_printf_i+0x28>
 800fd0a:	a001      	add	r0, pc, #4	; (adr r0, 800fd10 <_printf_i+0x40>)
 800fd0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fd10:	0800fd69 	.word	0x0800fd69
 800fd14:	0800fd7d 	.word	0x0800fd7d
 800fd18:	0800fcf9 	.word	0x0800fcf9
 800fd1c:	0800fcf9 	.word	0x0800fcf9
 800fd20:	0800fcf9 	.word	0x0800fcf9
 800fd24:	0800fcf9 	.word	0x0800fcf9
 800fd28:	0800fd7d 	.word	0x0800fd7d
 800fd2c:	0800fcf9 	.word	0x0800fcf9
 800fd30:	0800fcf9 	.word	0x0800fcf9
 800fd34:	0800fcf9 	.word	0x0800fcf9
 800fd38:	0800fcf9 	.word	0x0800fcf9
 800fd3c:	0800fe89 	.word	0x0800fe89
 800fd40:	0800fdad 	.word	0x0800fdad
 800fd44:	0800fe6b 	.word	0x0800fe6b
 800fd48:	0800fcf9 	.word	0x0800fcf9
 800fd4c:	0800fcf9 	.word	0x0800fcf9
 800fd50:	0800feab 	.word	0x0800feab
 800fd54:	0800fcf9 	.word	0x0800fcf9
 800fd58:	0800fdad 	.word	0x0800fdad
 800fd5c:	0800fcf9 	.word	0x0800fcf9
 800fd60:	0800fcf9 	.word	0x0800fcf9
 800fd64:	0800fe73 	.word	0x0800fe73
 800fd68:	680b      	ldr	r3, [r1, #0]
 800fd6a:	1d1a      	adds	r2, r3, #4
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	600a      	str	r2, [r1, #0]
 800fd70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fd74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e0a3      	b.n	800fec4 <_printf_i+0x1f4>
 800fd7c:	6825      	ldr	r5, [r4, #0]
 800fd7e:	6808      	ldr	r0, [r1, #0]
 800fd80:	062e      	lsls	r6, r5, #24
 800fd82:	f100 0304 	add.w	r3, r0, #4
 800fd86:	d50a      	bpl.n	800fd9e <_printf_i+0xce>
 800fd88:	6805      	ldr	r5, [r0, #0]
 800fd8a:	600b      	str	r3, [r1, #0]
 800fd8c:	2d00      	cmp	r5, #0
 800fd8e:	da03      	bge.n	800fd98 <_printf_i+0xc8>
 800fd90:	232d      	movs	r3, #45	; 0x2d
 800fd92:	426d      	negs	r5, r5
 800fd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd98:	485e      	ldr	r0, [pc, #376]	; (800ff14 <_printf_i+0x244>)
 800fd9a:	230a      	movs	r3, #10
 800fd9c:	e019      	b.n	800fdd2 <_printf_i+0x102>
 800fd9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fda2:	6805      	ldr	r5, [r0, #0]
 800fda4:	600b      	str	r3, [r1, #0]
 800fda6:	bf18      	it	ne
 800fda8:	b22d      	sxthne	r5, r5
 800fdaa:	e7ef      	b.n	800fd8c <_printf_i+0xbc>
 800fdac:	680b      	ldr	r3, [r1, #0]
 800fdae:	6825      	ldr	r5, [r4, #0]
 800fdb0:	1d18      	adds	r0, r3, #4
 800fdb2:	6008      	str	r0, [r1, #0]
 800fdb4:	0628      	lsls	r0, r5, #24
 800fdb6:	d501      	bpl.n	800fdbc <_printf_i+0xec>
 800fdb8:	681d      	ldr	r5, [r3, #0]
 800fdba:	e002      	b.n	800fdc2 <_printf_i+0xf2>
 800fdbc:	0669      	lsls	r1, r5, #25
 800fdbe:	d5fb      	bpl.n	800fdb8 <_printf_i+0xe8>
 800fdc0:	881d      	ldrh	r5, [r3, #0]
 800fdc2:	4854      	ldr	r0, [pc, #336]	; (800ff14 <_printf_i+0x244>)
 800fdc4:	2f6f      	cmp	r7, #111	; 0x6f
 800fdc6:	bf0c      	ite	eq
 800fdc8:	2308      	moveq	r3, #8
 800fdca:	230a      	movne	r3, #10
 800fdcc:	2100      	movs	r1, #0
 800fdce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdd2:	6866      	ldr	r6, [r4, #4]
 800fdd4:	60a6      	str	r6, [r4, #8]
 800fdd6:	2e00      	cmp	r6, #0
 800fdd8:	bfa2      	ittt	ge
 800fdda:	6821      	ldrge	r1, [r4, #0]
 800fddc:	f021 0104 	bicge.w	r1, r1, #4
 800fde0:	6021      	strge	r1, [r4, #0]
 800fde2:	b90d      	cbnz	r5, 800fde8 <_printf_i+0x118>
 800fde4:	2e00      	cmp	r6, #0
 800fde6:	d04d      	beq.n	800fe84 <_printf_i+0x1b4>
 800fde8:	4616      	mov	r6, r2
 800fdea:	fbb5 f1f3 	udiv	r1, r5, r3
 800fdee:	fb03 5711 	mls	r7, r3, r1, r5
 800fdf2:	5dc7      	ldrb	r7, [r0, r7]
 800fdf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fdf8:	462f      	mov	r7, r5
 800fdfa:	42bb      	cmp	r3, r7
 800fdfc:	460d      	mov	r5, r1
 800fdfe:	d9f4      	bls.n	800fdea <_printf_i+0x11a>
 800fe00:	2b08      	cmp	r3, #8
 800fe02:	d10b      	bne.n	800fe1c <_printf_i+0x14c>
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	07df      	lsls	r7, r3, #31
 800fe08:	d508      	bpl.n	800fe1c <_printf_i+0x14c>
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	6861      	ldr	r1, [r4, #4]
 800fe0e:	4299      	cmp	r1, r3
 800fe10:	bfde      	ittt	le
 800fe12:	2330      	movle	r3, #48	; 0x30
 800fe14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe1c:	1b92      	subs	r2, r2, r6
 800fe1e:	6122      	str	r2, [r4, #16]
 800fe20:	f8cd a000 	str.w	sl, [sp]
 800fe24:	464b      	mov	r3, r9
 800fe26:	aa03      	add	r2, sp, #12
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	f7ff fee2 	bl	800fbf4 <_printf_common>
 800fe30:	3001      	adds	r0, #1
 800fe32:	d14c      	bne.n	800fece <_printf_i+0x1fe>
 800fe34:	f04f 30ff 	mov.w	r0, #4294967295
 800fe38:	b004      	add	sp, #16
 800fe3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3e:	4835      	ldr	r0, [pc, #212]	; (800ff14 <_printf_i+0x244>)
 800fe40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	680e      	ldr	r6, [r1, #0]
 800fe48:	061f      	lsls	r7, r3, #24
 800fe4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800fe4e:	600e      	str	r6, [r1, #0]
 800fe50:	d514      	bpl.n	800fe7c <_printf_i+0x1ac>
 800fe52:	07d9      	lsls	r1, r3, #31
 800fe54:	bf44      	itt	mi
 800fe56:	f043 0320 	orrmi.w	r3, r3, #32
 800fe5a:	6023      	strmi	r3, [r4, #0]
 800fe5c:	b91d      	cbnz	r5, 800fe66 <_printf_i+0x196>
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	f023 0320 	bic.w	r3, r3, #32
 800fe64:	6023      	str	r3, [r4, #0]
 800fe66:	2310      	movs	r3, #16
 800fe68:	e7b0      	b.n	800fdcc <_printf_i+0xfc>
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	f043 0320 	orr.w	r3, r3, #32
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	2378      	movs	r3, #120	; 0x78
 800fe74:	4828      	ldr	r0, [pc, #160]	; (800ff18 <_printf_i+0x248>)
 800fe76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe7a:	e7e3      	b.n	800fe44 <_printf_i+0x174>
 800fe7c:	065e      	lsls	r6, r3, #25
 800fe7e:	bf48      	it	mi
 800fe80:	b2ad      	uxthmi	r5, r5
 800fe82:	e7e6      	b.n	800fe52 <_printf_i+0x182>
 800fe84:	4616      	mov	r6, r2
 800fe86:	e7bb      	b.n	800fe00 <_printf_i+0x130>
 800fe88:	680b      	ldr	r3, [r1, #0]
 800fe8a:	6826      	ldr	r6, [r4, #0]
 800fe8c:	6960      	ldr	r0, [r4, #20]
 800fe8e:	1d1d      	adds	r5, r3, #4
 800fe90:	600d      	str	r5, [r1, #0]
 800fe92:	0635      	lsls	r5, r6, #24
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	d501      	bpl.n	800fe9c <_printf_i+0x1cc>
 800fe98:	6018      	str	r0, [r3, #0]
 800fe9a:	e002      	b.n	800fea2 <_printf_i+0x1d2>
 800fe9c:	0671      	lsls	r1, r6, #25
 800fe9e:	d5fb      	bpl.n	800fe98 <_printf_i+0x1c8>
 800fea0:	8018      	strh	r0, [r3, #0]
 800fea2:	2300      	movs	r3, #0
 800fea4:	6123      	str	r3, [r4, #16]
 800fea6:	4616      	mov	r6, r2
 800fea8:	e7ba      	b.n	800fe20 <_printf_i+0x150>
 800feaa:	680b      	ldr	r3, [r1, #0]
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	600a      	str	r2, [r1, #0]
 800feb0:	681e      	ldr	r6, [r3, #0]
 800feb2:	6862      	ldr	r2, [r4, #4]
 800feb4:	2100      	movs	r1, #0
 800feb6:	4630      	mov	r0, r6
 800feb8:	f7f0 f9a2 	bl	8000200 <memchr>
 800febc:	b108      	cbz	r0, 800fec2 <_printf_i+0x1f2>
 800febe:	1b80      	subs	r0, r0, r6
 800fec0:	6060      	str	r0, [r4, #4]
 800fec2:	6863      	ldr	r3, [r4, #4]
 800fec4:	6123      	str	r3, [r4, #16]
 800fec6:	2300      	movs	r3, #0
 800fec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fecc:	e7a8      	b.n	800fe20 <_printf_i+0x150>
 800fece:	6923      	ldr	r3, [r4, #16]
 800fed0:	4632      	mov	r2, r6
 800fed2:	4649      	mov	r1, r9
 800fed4:	4640      	mov	r0, r8
 800fed6:	47d0      	blx	sl
 800fed8:	3001      	adds	r0, #1
 800feda:	d0ab      	beq.n	800fe34 <_printf_i+0x164>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	079b      	lsls	r3, r3, #30
 800fee0:	d413      	bmi.n	800ff0a <_printf_i+0x23a>
 800fee2:	68e0      	ldr	r0, [r4, #12]
 800fee4:	9b03      	ldr	r3, [sp, #12]
 800fee6:	4298      	cmp	r0, r3
 800fee8:	bfb8      	it	lt
 800feea:	4618      	movlt	r0, r3
 800feec:	e7a4      	b.n	800fe38 <_printf_i+0x168>
 800feee:	2301      	movs	r3, #1
 800fef0:	4632      	mov	r2, r6
 800fef2:	4649      	mov	r1, r9
 800fef4:	4640      	mov	r0, r8
 800fef6:	47d0      	blx	sl
 800fef8:	3001      	adds	r0, #1
 800fefa:	d09b      	beq.n	800fe34 <_printf_i+0x164>
 800fefc:	3501      	adds	r5, #1
 800fefe:	68e3      	ldr	r3, [r4, #12]
 800ff00:	9903      	ldr	r1, [sp, #12]
 800ff02:	1a5b      	subs	r3, r3, r1
 800ff04:	42ab      	cmp	r3, r5
 800ff06:	dcf2      	bgt.n	800feee <_printf_i+0x21e>
 800ff08:	e7eb      	b.n	800fee2 <_printf_i+0x212>
 800ff0a:	2500      	movs	r5, #0
 800ff0c:	f104 0619 	add.w	r6, r4, #25
 800ff10:	e7f5      	b.n	800fefe <_printf_i+0x22e>
 800ff12:	bf00      	nop
 800ff14:	08016b0c 	.word	0x08016b0c
 800ff18:	08016b1d 	.word	0x08016b1d

0800ff1c <_scanf_float>:
 800ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff20:	b087      	sub	sp, #28
 800ff22:	4617      	mov	r7, r2
 800ff24:	9303      	str	r3, [sp, #12]
 800ff26:	688b      	ldr	r3, [r1, #8]
 800ff28:	1e5a      	subs	r2, r3, #1
 800ff2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ff2e:	bf83      	ittte	hi
 800ff30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ff34:	195b      	addhi	r3, r3, r5
 800ff36:	9302      	strhi	r3, [sp, #8]
 800ff38:	2300      	movls	r3, #0
 800ff3a:	bf86      	itte	hi
 800ff3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ff40:	608b      	strhi	r3, [r1, #8]
 800ff42:	9302      	strls	r3, [sp, #8]
 800ff44:	680b      	ldr	r3, [r1, #0]
 800ff46:	468b      	mov	fp, r1
 800ff48:	2500      	movs	r5, #0
 800ff4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ff4e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ff52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ff56:	4680      	mov	r8, r0
 800ff58:	460c      	mov	r4, r1
 800ff5a:	465e      	mov	r6, fp
 800ff5c:	46aa      	mov	sl, r5
 800ff5e:	46a9      	mov	r9, r5
 800ff60:	9501      	str	r5, [sp, #4]
 800ff62:	68a2      	ldr	r2, [r4, #8]
 800ff64:	b152      	cbz	r2, 800ff7c <_scanf_float+0x60>
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	2b4e      	cmp	r3, #78	; 0x4e
 800ff6c:	d864      	bhi.n	8010038 <_scanf_float+0x11c>
 800ff6e:	2b40      	cmp	r3, #64	; 0x40
 800ff70:	d83c      	bhi.n	800ffec <_scanf_float+0xd0>
 800ff72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ff76:	b2c8      	uxtb	r0, r1
 800ff78:	280e      	cmp	r0, #14
 800ff7a:	d93a      	bls.n	800fff2 <_scanf_float+0xd6>
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	d003      	beq.n	800ff8a <_scanf_float+0x6e>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff8e:	f1ba 0f01 	cmp.w	sl, #1
 800ff92:	f200 8113 	bhi.w	80101bc <_scanf_float+0x2a0>
 800ff96:	455e      	cmp	r6, fp
 800ff98:	f200 8105 	bhi.w	80101a6 <_scanf_float+0x28a>
 800ff9c:	2501      	movs	r5, #1
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	b007      	add	sp, #28
 800ffa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ffaa:	2a0d      	cmp	r2, #13
 800ffac:	d8e6      	bhi.n	800ff7c <_scanf_float+0x60>
 800ffae:	a101      	add	r1, pc, #4	; (adr r1, 800ffb4 <_scanf_float+0x98>)
 800ffb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ffb4:	080100f3 	.word	0x080100f3
 800ffb8:	0800ff7d 	.word	0x0800ff7d
 800ffbc:	0800ff7d 	.word	0x0800ff7d
 800ffc0:	0800ff7d 	.word	0x0800ff7d
 800ffc4:	08010153 	.word	0x08010153
 800ffc8:	0801012b 	.word	0x0801012b
 800ffcc:	0800ff7d 	.word	0x0800ff7d
 800ffd0:	0800ff7d 	.word	0x0800ff7d
 800ffd4:	08010101 	.word	0x08010101
 800ffd8:	0800ff7d 	.word	0x0800ff7d
 800ffdc:	0800ff7d 	.word	0x0800ff7d
 800ffe0:	0800ff7d 	.word	0x0800ff7d
 800ffe4:	0800ff7d 	.word	0x0800ff7d
 800ffe8:	080100b9 	.word	0x080100b9
 800ffec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fff0:	e7db      	b.n	800ffaa <_scanf_float+0x8e>
 800fff2:	290e      	cmp	r1, #14
 800fff4:	d8c2      	bhi.n	800ff7c <_scanf_float+0x60>
 800fff6:	a001      	add	r0, pc, #4	; (adr r0, 800fffc <_scanf_float+0xe0>)
 800fff8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fffc:	080100ab 	.word	0x080100ab
 8010000:	0800ff7d 	.word	0x0800ff7d
 8010004:	080100ab 	.word	0x080100ab
 8010008:	0801013f 	.word	0x0801013f
 801000c:	0800ff7d 	.word	0x0800ff7d
 8010010:	08010059 	.word	0x08010059
 8010014:	08010095 	.word	0x08010095
 8010018:	08010095 	.word	0x08010095
 801001c:	08010095 	.word	0x08010095
 8010020:	08010095 	.word	0x08010095
 8010024:	08010095 	.word	0x08010095
 8010028:	08010095 	.word	0x08010095
 801002c:	08010095 	.word	0x08010095
 8010030:	08010095 	.word	0x08010095
 8010034:	08010095 	.word	0x08010095
 8010038:	2b6e      	cmp	r3, #110	; 0x6e
 801003a:	d809      	bhi.n	8010050 <_scanf_float+0x134>
 801003c:	2b60      	cmp	r3, #96	; 0x60
 801003e:	d8b2      	bhi.n	800ffa6 <_scanf_float+0x8a>
 8010040:	2b54      	cmp	r3, #84	; 0x54
 8010042:	d077      	beq.n	8010134 <_scanf_float+0x218>
 8010044:	2b59      	cmp	r3, #89	; 0x59
 8010046:	d199      	bne.n	800ff7c <_scanf_float+0x60>
 8010048:	2d07      	cmp	r5, #7
 801004a:	d197      	bne.n	800ff7c <_scanf_float+0x60>
 801004c:	2508      	movs	r5, #8
 801004e:	e029      	b.n	80100a4 <_scanf_float+0x188>
 8010050:	2b74      	cmp	r3, #116	; 0x74
 8010052:	d06f      	beq.n	8010134 <_scanf_float+0x218>
 8010054:	2b79      	cmp	r3, #121	; 0x79
 8010056:	e7f6      	b.n	8010046 <_scanf_float+0x12a>
 8010058:	6821      	ldr	r1, [r4, #0]
 801005a:	05c8      	lsls	r0, r1, #23
 801005c:	d51a      	bpl.n	8010094 <_scanf_float+0x178>
 801005e:	9b02      	ldr	r3, [sp, #8]
 8010060:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010064:	6021      	str	r1, [r4, #0]
 8010066:	f109 0901 	add.w	r9, r9, #1
 801006a:	b11b      	cbz	r3, 8010074 <_scanf_float+0x158>
 801006c:	3b01      	subs	r3, #1
 801006e:	3201      	adds	r2, #1
 8010070:	9302      	str	r3, [sp, #8]
 8010072:	60a2      	str	r2, [r4, #8]
 8010074:	68a3      	ldr	r3, [r4, #8]
 8010076:	3b01      	subs	r3, #1
 8010078:	60a3      	str	r3, [r4, #8]
 801007a:	6923      	ldr	r3, [r4, #16]
 801007c:	3301      	adds	r3, #1
 801007e:	6123      	str	r3, [r4, #16]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3b01      	subs	r3, #1
 8010084:	2b00      	cmp	r3, #0
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	f340 8084 	ble.w	8010194 <_scanf_float+0x278>
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	3301      	adds	r3, #1
 8010090:	603b      	str	r3, [r7, #0]
 8010092:	e766      	b.n	800ff62 <_scanf_float+0x46>
 8010094:	eb1a 0f05 	cmn.w	sl, r5
 8010098:	f47f af70 	bne.w	800ff7c <_scanf_float+0x60>
 801009c:	6822      	ldr	r2, [r4, #0]
 801009e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80100a2:	6022      	str	r2, [r4, #0]
 80100a4:	f806 3b01 	strb.w	r3, [r6], #1
 80100a8:	e7e4      	b.n	8010074 <_scanf_float+0x158>
 80100aa:	6822      	ldr	r2, [r4, #0]
 80100ac:	0610      	lsls	r0, r2, #24
 80100ae:	f57f af65 	bpl.w	800ff7c <_scanf_float+0x60>
 80100b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80100b6:	e7f4      	b.n	80100a2 <_scanf_float+0x186>
 80100b8:	f1ba 0f00 	cmp.w	sl, #0
 80100bc:	d10e      	bne.n	80100dc <_scanf_float+0x1c0>
 80100be:	f1b9 0f00 	cmp.w	r9, #0
 80100c2:	d10e      	bne.n	80100e2 <_scanf_float+0x1c6>
 80100c4:	6822      	ldr	r2, [r4, #0]
 80100c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80100ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80100ce:	d108      	bne.n	80100e2 <_scanf_float+0x1c6>
 80100d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	f04f 0a01 	mov.w	sl, #1
 80100da:	e7e3      	b.n	80100a4 <_scanf_float+0x188>
 80100dc:	f1ba 0f02 	cmp.w	sl, #2
 80100e0:	d055      	beq.n	801018e <_scanf_float+0x272>
 80100e2:	2d01      	cmp	r5, #1
 80100e4:	d002      	beq.n	80100ec <_scanf_float+0x1d0>
 80100e6:	2d04      	cmp	r5, #4
 80100e8:	f47f af48 	bne.w	800ff7c <_scanf_float+0x60>
 80100ec:	3501      	adds	r5, #1
 80100ee:	b2ed      	uxtb	r5, r5
 80100f0:	e7d8      	b.n	80100a4 <_scanf_float+0x188>
 80100f2:	f1ba 0f01 	cmp.w	sl, #1
 80100f6:	f47f af41 	bne.w	800ff7c <_scanf_float+0x60>
 80100fa:	f04f 0a02 	mov.w	sl, #2
 80100fe:	e7d1      	b.n	80100a4 <_scanf_float+0x188>
 8010100:	b97d      	cbnz	r5, 8010122 <_scanf_float+0x206>
 8010102:	f1b9 0f00 	cmp.w	r9, #0
 8010106:	f47f af3c 	bne.w	800ff82 <_scanf_float+0x66>
 801010a:	6822      	ldr	r2, [r4, #0]
 801010c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010110:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010114:	f47f af39 	bne.w	800ff8a <_scanf_float+0x6e>
 8010118:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801011c:	6022      	str	r2, [r4, #0]
 801011e:	2501      	movs	r5, #1
 8010120:	e7c0      	b.n	80100a4 <_scanf_float+0x188>
 8010122:	2d03      	cmp	r5, #3
 8010124:	d0e2      	beq.n	80100ec <_scanf_float+0x1d0>
 8010126:	2d05      	cmp	r5, #5
 8010128:	e7de      	b.n	80100e8 <_scanf_float+0x1cc>
 801012a:	2d02      	cmp	r5, #2
 801012c:	f47f af26 	bne.w	800ff7c <_scanf_float+0x60>
 8010130:	2503      	movs	r5, #3
 8010132:	e7b7      	b.n	80100a4 <_scanf_float+0x188>
 8010134:	2d06      	cmp	r5, #6
 8010136:	f47f af21 	bne.w	800ff7c <_scanf_float+0x60>
 801013a:	2507      	movs	r5, #7
 801013c:	e7b2      	b.n	80100a4 <_scanf_float+0x188>
 801013e:	6822      	ldr	r2, [r4, #0]
 8010140:	0591      	lsls	r1, r2, #22
 8010142:	f57f af1b 	bpl.w	800ff7c <_scanf_float+0x60>
 8010146:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801014a:	6022      	str	r2, [r4, #0]
 801014c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010150:	e7a8      	b.n	80100a4 <_scanf_float+0x188>
 8010152:	6822      	ldr	r2, [r4, #0]
 8010154:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010158:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801015c:	d006      	beq.n	801016c <_scanf_float+0x250>
 801015e:	0550      	lsls	r0, r2, #21
 8010160:	f57f af0c 	bpl.w	800ff7c <_scanf_float+0x60>
 8010164:	f1b9 0f00 	cmp.w	r9, #0
 8010168:	f43f af0f 	beq.w	800ff8a <_scanf_float+0x6e>
 801016c:	0591      	lsls	r1, r2, #22
 801016e:	bf58      	it	pl
 8010170:	9901      	ldrpl	r1, [sp, #4]
 8010172:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010176:	bf58      	it	pl
 8010178:	eba9 0101 	subpl.w	r1, r9, r1
 801017c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010180:	bf58      	it	pl
 8010182:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010186:	6022      	str	r2, [r4, #0]
 8010188:	f04f 0900 	mov.w	r9, #0
 801018c:	e78a      	b.n	80100a4 <_scanf_float+0x188>
 801018e:	f04f 0a03 	mov.w	sl, #3
 8010192:	e787      	b.n	80100a4 <_scanf_float+0x188>
 8010194:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010198:	4639      	mov	r1, r7
 801019a:	4640      	mov	r0, r8
 801019c:	4798      	blx	r3
 801019e:	2800      	cmp	r0, #0
 80101a0:	f43f aedf 	beq.w	800ff62 <_scanf_float+0x46>
 80101a4:	e6ea      	b.n	800ff7c <_scanf_float+0x60>
 80101a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101ae:	463a      	mov	r2, r7
 80101b0:	4640      	mov	r0, r8
 80101b2:	4798      	blx	r3
 80101b4:	6923      	ldr	r3, [r4, #16]
 80101b6:	3b01      	subs	r3, #1
 80101b8:	6123      	str	r3, [r4, #16]
 80101ba:	e6ec      	b.n	800ff96 <_scanf_float+0x7a>
 80101bc:	1e6b      	subs	r3, r5, #1
 80101be:	2b06      	cmp	r3, #6
 80101c0:	d825      	bhi.n	801020e <_scanf_float+0x2f2>
 80101c2:	2d02      	cmp	r5, #2
 80101c4:	d836      	bhi.n	8010234 <_scanf_float+0x318>
 80101c6:	455e      	cmp	r6, fp
 80101c8:	f67f aee8 	bls.w	800ff9c <_scanf_float+0x80>
 80101cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101d4:	463a      	mov	r2, r7
 80101d6:	4640      	mov	r0, r8
 80101d8:	4798      	blx	r3
 80101da:	6923      	ldr	r3, [r4, #16]
 80101dc:	3b01      	subs	r3, #1
 80101de:	6123      	str	r3, [r4, #16]
 80101e0:	e7f1      	b.n	80101c6 <_scanf_float+0x2aa>
 80101e2:	9802      	ldr	r0, [sp, #8]
 80101e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80101e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80101ec:	9002      	str	r0, [sp, #8]
 80101ee:	463a      	mov	r2, r7
 80101f0:	4640      	mov	r0, r8
 80101f2:	4798      	blx	r3
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	6123      	str	r3, [r4, #16]
 80101fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101fe:	fa5f fa8a 	uxtb.w	sl, sl
 8010202:	f1ba 0f02 	cmp.w	sl, #2
 8010206:	d1ec      	bne.n	80101e2 <_scanf_float+0x2c6>
 8010208:	3d03      	subs	r5, #3
 801020a:	b2ed      	uxtb	r5, r5
 801020c:	1b76      	subs	r6, r6, r5
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	05da      	lsls	r2, r3, #23
 8010212:	d52f      	bpl.n	8010274 <_scanf_float+0x358>
 8010214:	055b      	lsls	r3, r3, #21
 8010216:	d510      	bpl.n	801023a <_scanf_float+0x31e>
 8010218:	455e      	cmp	r6, fp
 801021a:	f67f aebf 	bls.w	800ff9c <_scanf_float+0x80>
 801021e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010226:	463a      	mov	r2, r7
 8010228:	4640      	mov	r0, r8
 801022a:	4798      	blx	r3
 801022c:	6923      	ldr	r3, [r4, #16]
 801022e:	3b01      	subs	r3, #1
 8010230:	6123      	str	r3, [r4, #16]
 8010232:	e7f1      	b.n	8010218 <_scanf_float+0x2fc>
 8010234:	46aa      	mov	sl, r5
 8010236:	9602      	str	r6, [sp, #8]
 8010238:	e7df      	b.n	80101fa <_scanf_float+0x2de>
 801023a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	2965      	cmp	r1, #101	; 0x65
 8010242:	f103 33ff 	add.w	r3, r3, #4294967295
 8010246:	f106 35ff 	add.w	r5, r6, #4294967295
 801024a:	6123      	str	r3, [r4, #16]
 801024c:	d00c      	beq.n	8010268 <_scanf_float+0x34c>
 801024e:	2945      	cmp	r1, #69	; 0x45
 8010250:	d00a      	beq.n	8010268 <_scanf_float+0x34c>
 8010252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010256:	463a      	mov	r2, r7
 8010258:	4640      	mov	r0, r8
 801025a:	4798      	blx	r3
 801025c:	6923      	ldr	r3, [r4, #16]
 801025e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010262:	3b01      	subs	r3, #1
 8010264:	1eb5      	subs	r5, r6, #2
 8010266:	6123      	str	r3, [r4, #16]
 8010268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801026c:	463a      	mov	r2, r7
 801026e:	4640      	mov	r0, r8
 8010270:	4798      	blx	r3
 8010272:	462e      	mov	r6, r5
 8010274:	6825      	ldr	r5, [r4, #0]
 8010276:	f015 0510 	ands.w	r5, r5, #16
 801027a:	d158      	bne.n	801032e <_scanf_float+0x412>
 801027c:	7035      	strb	r5, [r6, #0]
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010288:	d11c      	bne.n	80102c4 <_scanf_float+0x3a8>
 801028a:	9b01      	ldr	r3, [sp, #4]
 801028c:	454b      	cmp	r3, r9
 801028e:	eba3 0209 	sub.w	r2, r3, r9
 8010292:	d124      	bne.n	80102de <_scanf_float+0x3c2>
 8010294:	2200      	movs	r2, #0
 8010296:	4659      	mov	r1, fp
 8010298:	4640      	mov	r0, r8
 801029a:	f000 ff27 	bl	80110ec <_strtod_r>
 801029e:	9b03      	ldr	r3, [sp, #12]
 80102a0:	6821      	ldr	r1, [r4, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f011 0f02 	tst.w	r1, #2
 80102a8:	ec57 6b10 	vmov	r6, r7, d0
 80102ac:	f103 0204 	add.w	r2, r3, #4
 80102b0:	d020      	beq.n	80102f4 <_scanf_float+0x3d8>
 80102b2:	9903      	ldr	r1, [sp, #12]
 80102b4:	600a      	str	r2, [r1, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	e9c3 6700 	strd	r6, r7, [r3]
 80102bc:	68e3      	ldr	r3, [r4, #12]
 80102be:	3301      	adds	r3, #1
 80102c0:	60e3      	str	r3, [r4, #12]
 80102c2:	e66c      	b.n	800ff9e <_scanf_float+0x82>
 80102c4:	9b04      	ldr	r3, [sp, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d0e4      	beq.n	8010294 <_scanf_float+0x378>
 80102ca:	9905      	ldr	r1, [sp, #20]
 80102cc:	230a      	movs	r3, #10
 80102ce:	462a      	mov	r2, r5
 80102d0:	3101      	adds	r1, #1
 80102d2:	4640      	mov	r0, r8
 80102d4:	f000 ff94 	bl	8011200 <_strtol_r>
 80102d8:	9b04      	ldr	r3, [sp, #16]
 80102da:	9e05      	ldr	r6, [sp, #20]
 80102dc:	1ac2      	subs	r2, r0, r3
 80102de:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80102e2:	429e      	cmp	r6, r3
 80102e4:	bf28      	it	cs
 80102e6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80102ea:	4912      	ldr	r1, [pc, #72]	; (8010334 <_scanf_float+0x418>)
 80102ec:	4630      	mov	r0, r6
 80102ee:	f000 f82b 	bl	8010348 <siprintf>
 80102f2:	e7cf      	b.n	8010294 <_scanf_float+0x378>
 80102f4:	f011 0f04 	tst.w	r1, #4
 80102f8:	9903      	ldr	r1, [sp, #12]
 80102fa:	600a      	str	r2, [r1, #0]
 80102fc:	d1db      	bne.n	80102b6 <_scanf_float+0x39a>
 80102fe:	f8d3 8000 	ldr.w	r8, [r3]
 8010302:	ee10 2a10 	vmov	r2, s0
 8010306:	ee10 0a10 	vmov	r0, s0
 801030a:	463b      	mov	r3, r7
 801030c:	4639      	mov	r1, r7
 801030e:	f7f0 fc1d 	bl	8000b4c <__aeabi_dcmpun>
 8010312:	b128      	cbz	r0, 8010320 <_scanf_float+0x404>
 8010314:	4808      	ldr	r0, [pc, #32]	; (8010338 <_scanf_float+0x41c>)
 8010316:	f000 f811 	bl	801033c <nanf>
 801031a:	ed88 0a00 	vstr	s0, [r8]
 801031e:	e7cd      	b.n	80102bc <_scanf_float+0x3a0>
 8010320:	4630      	mov	r0, r6
 8010322:	4639      	mov	r1, r7
 8010324:	f7f0 fc70 	bl	8000c08 <__aeabi_d2f>
 8010328:	f8c8 0000 	str.w	r0, [r8]
 801032c:	e7c6      	b.n	80102bc <_scanf_float+0x3a0>
 801032e:	2500      	movs	r5, #0
 8010330:	e635      	b.n	800ff9e <_scanf_float+0x82>
 8010332:	bf00      	nop
 8010334:	08016b2e 	.word	0x08016b2e
 8010338:	08016e63 	.word	0x08016e63

0801033c <nanf>:
 801033c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010344 <nanf+0x8>
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	7fc00000 	.word	0x7fc00000

08010348 <siprintf>:
 8010348:	b40e      	push	{r1, r2, r3}
 801034a:	b500      	push	{lr}
 801034c:	b09c      	sub	sp, #112	; 0x70
 801034e:	ab1d      	add	r3, sp, #116	; 0x74
 8010350:	9002      	str	r0, [sp, #8]
 8010352:	9006      	str	r0, [sp, #24]
 8010354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010358:	4809      	ldr	r0, [pc, #36]	; (8010380 <siprintf+0x38>)
 801035a:	9107      	str	r1, [sp, #28]
 801035c:	9104      	str	r1, [sp, #16]
 801035e:	4909      	ldr	r1, [pc, #36]	; (8010384 <siprintf+0x3c>)
 8010360:	f853 2b04 	ldr.w	r2, [r3], #4
 8010364:	9105      	str	r1, [sp, #20]
 8010366:	6800      	ldr	r0, [r0, #0]
 8010368:	9301      	str	r3, [sp, #4]
 801036a:	a902      	add	r1, sp, #8
 801036c:	f002 ff54 	bl	8013218 <_svfiprintf_r>
 8010370:	9b02      	ldr	r3, [sp, #8]
 8010372:	2200      	movs	r2, #0
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	b01c      	add	sp, #112	; 0x70
 8010378:	f85d eb04 	ldr.w	lr, [sp], #4
 801037c:	b003      	add	sp, #12
 801037e:	4770      	bx	lr
 8010380:	20000274 	.word	0x20000274
 8010384:	ffff0208 	.word	0xffff0208

08010388 <siscanf>:
 8010388:	b40e      	push	{r1, r2, r3}
 801038a:	b510      	push	{r4, lr}
 801038c:	b09f      	sub	sp, #124	; 0x7c
 801038e:	ac21      	add	r4, sp, #132	; 0x84
 8010390:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010394:	f854 2b04 	ldr.w	r2, [r4], #4
 8010398:	9201      	str	r2, [sp, #4]
 801039a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801039e:	9004      	str	r0, [sp, #16]
 80103a0:	9008      	str	r0, [sp, #32]
 80103a2:	f7ef ff1f 	bl	80001e4 <strlen>
 80103a6:	4b0c      	ldr	r3, [pc, #48]	; (80103d8 <siscanf+0x50>)
 80103a8:	9005      	str	r0, [sp, #20]
 80103aa:	9009      	str	r0, [sp, #36]	; 0x24
 80103ac:	930d      	str	r3, [sp, #52]	; 0x34
 80103ae:	480b      	ldr	r0, [pc, #44]	; (80103dc <siscanf+0x54>)
 80103b0:	9a01      	ldr	r2, [sp, #4]
 80103b2:	6800      	ldr	r0, [r0, #0]
 80103b4:	9403      	str	r4, [sp, #12]
 80103b6:	2300      	movs	r3, #0
 80103b8:	9311      	str	r3, [sp, #68]	; 0x44
 80103ba:	9316      	str	r3, [sp, #88]	; 0x58
 80103bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80103c4:	a904      	add	r1, sp, #16
 80103c6:	4623      	mov	r3, r4
 80103c8:	f003 f880 	bl	80134cc <__ssvfiscanf_r>
 80103cc:	b01f      	add	sp, #124	; 0x7c
 80103ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d2:	b003      	add	sp, #12
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	08010403 	.word	0x08010403
 80103dc:	20000274 	.word	0x20000274

080103e0 <__sread>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	460c      	mov	r4, r1
 80103e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e8:	f003 fb34 	bl	8013a54 <_read_r>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	bfab      	itete	ge
 80103f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103f2:	89a3      	ldrhlt	r3, [r4, #12]
 80103f4:	181b      	addge	r3, r3, r0
 80103f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103fa:	bfac      	ite	ge
 80103fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80103fe:	81a3      	strhlt	r3, [r4, #12]
 8010400:	bd10      	pop	{r4, pc}

08010402 <__seofread>:
 8010402:	2000      	movs	r0, #0
 8010404:	4770      	bx	lr

08010406 <__swrite>:
 8010406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040a:	461f      	mov	r7, r3
 801040c:	898b      	ldrh	r3, [r1, #12]
 801040e:	05db      	lsls	r3, r3, #23
 8010410:	4605      	mov	r5, r0
 8010412:	460c      	mov	r4, r1
 8010414:	4616      	mov	r6, r2
 8010416:	d505      	bpl.n	8010424 <__swrite+0x1e>
 8010418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801041c:	2302      	movs	r3, #2
 801041e:	2200      	movs	r2, #0
 8010420:	f002 f8fe 	bl	8012620 <_lseek_r>
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801042e:	81a3      	strh	r3, [r4, #12]
 8010430:	4632      	mov	r2, r6
 8010432:	463b      	mov	r3, r7
 8010434:	4628      	mov	r0, r5
 8010436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801043a:	f000 bee3 	b.w	8011204 <_write_r>

0801043e <__sseek>:
 801043e:	b510      	push	{r4, lr}
 8010440:	460c      	mov	r4, r1
 8010442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010446:	f002 f8eb 	bl	8012620 <_lseek_r>
 801044a:	1c43      	adds	r3, r0, #1
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	bf15      	itete	ne
 8010450:	6560      	strne	r0, [r4, #84]	; 0x54
 8010452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801045a:	81a3      	strheq	r3, [r4, #12]
 801045c:	bf18      	it	ne
 801045e:	81a3      	strhne	r3, [r4, #12]
 8010460:	bd10      	pop	{r4, pc}

08010462 <__sclose>:
 8010462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010466:	f000 bedf 	b.w	8011228 <_close_r>

0801046a <strcpy>:
 801046a:	4603      	mov	r3, r0
 801046c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010470:	f803 2b01 	strb.w	r2, [r3], #1
 8010474:	2a00      	cmp	r2, #0
 8010476:	d1f9      	bne.n	801046c <strcpy+0x2>
 8010478:	4770      	bx	lr

0801047a <strncmp>:
 801047a:	b510      	push	{r4, lr}
 801047c:	b16a      	cbz	r2, 801049a <strncmp+0x20>
 801047e:	3901      	subs	r1, #1
 8010480:	1884      	adds	r4, r0, r2
 8010482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010486:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801048a:	4293      	cmp	r3, r2
 801048c:	d103      	bne.n	8010496 <strncmp+0x1c>
 801048e:	42a0      	cmp	r0, r4
 8010490:	d001      	beq.n	8010496 <strncmp+0x1c>
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1f5      	bne.n	8010482 <strncmp+0x8>
 8010496:	1a98      	subs	r0, r3, r2
 8010498:	bd10      	pop	{r4, pc}
 801049a:	4610      	mov	r0, r2
 801049c:	e7fc      	b.n	8010498 <strncmp+0x1e>

0801049e <sulp>:
 801049e:	b570      	push	{r4, r5, r6, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	460d      	mov	r5, r1
 80104a4:	ec45 4b10 	vmov	d0, r4, r5
 80104a8:	4616      	mov	r6, r2
 80104aa:	f002 fc51 	bl	8012d50 <__ulp>
 80104ae:	ec51 0b10 	vmov	r0, r1, d0
 80104b2:	b17e      	cbz	r6, 80104d4 <sulp+0x36>
 80104b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80104b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dd09      	ble.n	80104d4 <sulp+0x36>
 80104c0:	051b      	lsls	r3, r3, #20
 80104c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80104c6:	2400      	movs	r4, #0
 80104c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80104cc:	4622      	mov	r2, r4
 80104ce:	462b      	mov	r3, r5
 80104d0:	f7f0 f8a2 	bl	8000618 <__aeabi_dmul>
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080104d8 <_strtod_l>:
 80104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104dc:	b0a3      	sub	sp, #140	; 0x8c
 80104de:	461f      	mov	r7, r3
 80104e0:	2300      	movs	r3, #0
 80104e2:	931e      	str	r3, [sp, #120]	; 0x78
 80104e4:	4ba4      	ldr	r3, [pc, #656]	; (8010778 <_strtod_l+0x2a0>)
 80104e6:	9219      	str	r2, [sp, #100]	; 0x64
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	9307      	str	r3, [sp, #28]
 80104ec:	4604      	mov	r4, r0
 80104ee:	4618      	mov	r0, r3
 80104f0:	4688      	mov	r8, r1
 80104f2:	f7ef fe77 	bl	80001e4 <strlen>
 80104f6:	f04f 0a00 	mov.w	sl, #0
 80104fa:	4605      	mov	r5, r0
 80104fc:	f04f 0b00 	mov.w	fp, #0
 8010500:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010506:	781a      	ldrb	r2, [r3, #0]
 8010508:	2a2b      	cmp	r2, #43	; 0x2b
 801050a:	d04c      	beq.n	80105a6 <_strtod_l+0xce>
 801050c:	d839      	bhi.n	8010582 <_strtod_l+0xaa>
 801050e:	2a0d      	cmp	r2, #13
 8010510:	d832      	bhi.n	8010578 <_strtod_l+0xa0>
 8010512:	2a08      	cmp	r2, #8
 8010514:	d832      	bhi.n	801057c <_strtod_l+0xa4>
 8010516:	2a00      	cmp	r2, #0
 8010518:	d03c      	beq.n	8010594 <_strtod_l+0xbc>
 801051a:	2300      	movs	r3, #0
 801051c:	930e      	str	r3, [sp, #56]	; 0x38
 801051e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010520:	7833      	ldrb	r3, [r6, #0]
 8010522:	2b30      	cmp	r3, #48	; 0x30
 8010524:	f040 80b4 	bne.w	8010690 <_strtod_l+0x1b8>
 8010528:	7873      	ldrb	r3, [r6, #1]
 801052a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801052e:	2b58      	cmp	r3, #88	; 0x58
 8010530:	d16c      	bne.n	801060c <_strtod_l+0x134>
 8010532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010534:	9301      	str	r3, [sp, #4]
 8010536:	ab1e      	add	r3, sp, #120	; 0x78
 8010538:	9702      	str	r7, [sp, #8]
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	4a8f      	ldr	r2, [pc, #572]	; (801077c <_strtod_l+0x2a4>)
 801053e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010540:	a91d      	add	r1, sp, #116	; 0x74
 8010542:	4620      	mov	r0, r4
 8010544:	f001 fd60 	bl	8012008 <__gethex>
 8010548:	f010 0707 	ands.w	r7, r0, #7
 801054c:	4605      	mov	r5, r0
 801054e:	d005      	beq.n	801055c <_strtod_l+0x84>
 8010550:	2f06      	cmp	r7, #6
 8010552:	d12a      	bne.n	80105aa <_strtod_l+0xd2>
 8010554:	3601      	adds	r6, #1
 8010556:	2300      	movs	r3, #0
 8010558:	961d      	str	r6, [sp, #116]	; 0x74
 801055a:	930e      	str	r3, [sp, #56]	; 0x38
 801055c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801055e:	2b00      	cmp	r3, #0
 8010560:	f040 8596 	bne.w	8011090 <_strtod_l+0xbb8>
 8010564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010566:	b1db      	cbz	r3, 80105a0 <_strtod_l+0xc8>
 8010568:	4652      	mov	r2, sl
 801056a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801056e:	ec43 2b10 	vmov	d0, r2, r3
 8010572:	b023      	add	sp, #140	; 0x8c
 8010574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010578:	2a20      	cmp	r2, #32
 801057a:	d1ce      	bne.n	801051a <_strtod_l+0x42>
 801057c:	3301      	adds	r3, #1
 801057e:	931d      	str	r3, [sp, #116]	; 0x74
 8010580:	e7c0      	b.n	8010504 <_strtod_l+0x2c>
 8010582:	2a2d      	cmp	r2, #45	; 0x2d
 8010584:	d1c9      	bne.n	801051a <_strtod_l+0x42>
 8010586:	2201      	movs	r2, #1
 8010588:	920e      	str	r2, [sp, #56]	; 0x38
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	921d      	str	r2, [sp, #116]	; 0x74
 801058e:	785b      	ldrb	r3, [r3, #1]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d1c4      	bne.n	801051e <_strtod_l+0x46>
 8010594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010596:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801059a:	2b00      	cmp	r3, #0
 801059c:	f040 8576 	bne.w	801108c <_strtod_l+0xbb4>
 80105a0:	4652      	mov	r2, sl
 80105a2:	465b      	mov	r3, fp
 80105a4:	e7e3      	b.n	801056e <_strtod_l+0x96>
 80105a6:	2200      	movs	r2, #0
 80105a8:	e7ee      	b.n	8010588 <_strtod_l+0xb0>
 80105aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80105ac:	b13a      	cbz	r2, 80105be <_strtod_l+0xe6>
 80105ae:	2135      	movs	r1, #53	; 0x35
 80105b0:	a820      	add	r0, sp, #128	; 0x80
 80105b2:	f002 fcd8 	bl	8012f66 <__copybits>
 80105b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80105b8:	4620      	mov	r0, r4
 80105ba:	f002 f89d 	bl	80126f8 <_Bfree>
 80105be:	3f01      	subs	r7, #1
 80105c0:	2f05      	cmp	r7, #5
 80105c2:	d807      	bhi.n	80105d4 <_strtod_l+0xfc>
 80105c4:	e8df f007 	tbb	[pc, r7]
 80105c8:	1d180b0e 	.word	0x1d180b0e
 80105cc:	030e      	.short	0x030e
 80105ce:	f04f 0b00 	mov.w	fp, #0
 80105d2:	46da      	mov	sl, fp
 80105d4:	0728      	lsls	r0, r5, #28
 80105d6:	d5c1      	bpl.n	801055c <_strtod_l+0x84>
 80105d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80105dc:	e7be      	b.n	801055c <_strtod_l+0x84>
 80105de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80105e2:	e7f7      	b.n	80105d4 <_strtod_l+0xfc>
 80105e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80105e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80105ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80105ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80105f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80105f6:	e7ed      	b.n	80105d4 <_strtod_l+0xfc>
 80105f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010780 <_strtod_l+0x2a8>
 80105fc:	f04f 0a00 	mov.w	sl, #0
 8010600:	e7e8      	b.n	80105d4 <_strtod_l+0xfc>
 8010602:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010606:	f04f 3aff 	mov.w	sl, #4294967295
 801060a:	e7e3      	b.n	80105d4 <_strtod_l+0xfc>
 801060c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801060e:	1c5a      	adds	r2, r3, #1
 8010610:	921d      	str	r2, [sp, #116]	; 0x74
 8010612:	785b      	ldrb	r3, [r3, #1]
 8010614:	2b30      	cmp	r3, #48	; 0x30
 8010616:	d0f9      	beq.n	801060c <_strtod_l+0x134>
 8010618:	2b00      	cmp	r3, #0
 801061a:	d09f      	beq.n	801055c <_strtod_l+0x84>
 801061c:	2301      	movs	r3, #1
 801061e:	f04f 0900 	mov.w	r9, #0
 8010622:	9304      	str	r3, [sp, #16]
 8010624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010626:	930a      	str	r3, [sp, #40]	; 0x28
 8010628:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801062c:	464f      	mov	r7, r9
 801062e:	220a      	movs	r2, #10
 8010630:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010632:	7806      	ldrb	r6, [r0, #0]
 8010634:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010638:	b2d9      	uxtb	r1, r3
 801063a:	2909      	cmp	r1, #9
 801063c:	d92a      	bls.n	8010694 <_strtod_l+0x1bc>
 801063e:	9907      	ldr	r1, [sp, #28]
 8010640:	462a      	mov	r2, r5
 8010642:	f7ff ff1a 	bl	801047a <strncmp>
 8010646:	b398      	cbz	r0, 80106b0 <_strtod_l+0x1d8>
 8010648:	2000      	movs	r0, #0
 801064a:	4633      	mov	r3, r6
 801064c:	463d      	mov	r5, r7
 801064e:	9007      	str	r0, [sp, #28]
 8010650:	4602      	mov	r2, r0
 8010652:	2b65      	cmp	r3, #101	; 0x65
 8010654:	d001      	beq.n	801065a <_strtod_l+0x182>
 8010656:	2b45      	cmp	r3, #69	; 0x45
 8010658:	d118      	bne.n	801068c <_strtod_l+0x1b4>
 801065a:	b91d      	cbnz	r5, 8010664 <_strtod_l+0x18c>
 801065c:	9b04      	ldr	r3, [sp, #16]
 801065e:	4303      	orrs	r3, r0
 8010660:	d098      	beq.n	8010594 <_strtod_l+0xbc>
 8010662:	2500      	movs	r5, #0
 8010664:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010668:	f108 0301 	add.w	r3, r8, #1
 801066c:	931d      	str	r3, [sp, #116]	; 0x74
 801066e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010672:	2b2b      	cmp	r3, #43	; 0x2b
 8010674:	d075      	beq.n	8010762 <_strtod_l+0x28a>
 8010676:	2b2d      	cmp	r3, #45	; 0x2d
 8010678:	d07b      	beq.n	8010772 <_strtod_l+0x29a>
 801067a:	f04f 0c00 	mov.w	ip, #0
 801067e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010682:	2909      	cmp	r1, #9
 8010684:	f240 8082 	bls.w	801078c <_strtod_l+0x2b4>
 8010688:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801068c:	2600      	movs	r6, #0
 801068e:	e09d      	b.n	80107cc <_strtod_l+0x2f4>
 8010690:	2300      	movs	r3, #0
 8010692:	e7c4      	b.n	801061e <_strtod_l+0x146>
 8010694:	2f08      	cmp	r7, #8
 8010696:	bfd8      	it	le
 8010698:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801069a:	f100 0001 	add.w	r0, r0, #1
 801069e:	bfda      	itte	le
 80106a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80106a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80106a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80106aa:	3701      	adds	r7, #1
 80106ac:	901d      	str	r0, [sp, #116]	; 0x74
 80106ae:	e7bf      	b.n	8010630 <_strtod_l+0x158>
 80106b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106b2:	195a      	adds	r2, r3, r5
 80106b4:	921d      	str	r2, [sp, #116]	; 0x74
 80106b6:	5d5b      	ldrb	r3, [r3, r5]
 80106b8:	2f00      	cmp	r7, #0
 80106ba:	d037      	beq.n	801072c <_strtod_l+0x254>
 80106bc:	9007      	str	r0, [sp, #28]
 80106be:	463d      	mov	r5, r7
 80106c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80106c4:	2a09      	cmp	r2, #9
 80106c6:	d912      	bls.n	80106ee <_strtod_l+0x216>
 80106c8:	2201      	movs	r2, #1
 80106ca:	e7c2      	b.n	8010652 <_strtod_l+0x17a>
 80106cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	921d      	str	r2, [sp, #116]	; 0x74
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	3001      	adds	r0, #1
 80106d6:	2b30      	cmp	r3, #48	; 0x30
 80106d8:	d0f8      	beq.n	80106cc <_strtod_l+0x1f4>
 80106da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80106de:	2a08      	cmp	r2, #8
 80106e0:	f200 84db 	bhi.w	801109a <_strtod_l+0xbc2>
 80106e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80106e6:	9007      	str	r0, [sp, #28]
 80106e8:	2000      	movs	r0, #0
 80106ea:	920a      	str	r2, [sp, #40]	; 0x28
 80106ec:	4605      	mov	r5, r0
 80106ee:	3b30      	subs	r3, #48	; 0x30
 80106f0:	f100 0201 	add.w	r2, r0, #1
 80106f4:	d014      	beq.n	8010720 <_strtod_l+0x248>
 80106f6:	9907      	ldr	r1, [sp, #28]
 80106f8:	4411      	add	r1, r2
 80106fa:	9107      	str	r1, [sp, #28]
 80106fc:	462a      	mov	r2, r5
 80106fe:	eb00 0e05 	add.w	lr, r0, r5
 8010702:	210a      	movs	r1, #10
 8010704:	4572      	cmp	r2, lr
 8010706:	d113      	bne.n	8010730 <_strtod_l+0x258>
 8010708:	182a      	adds	r2, r5, r0
 801070a:	2a08      	cmp	r2, #8
 801070c:	f105 0501 	add.w	r5, r5, #1
 8010710:	4405      	add	r5, r0
 8010712:	dc1c      	bgt.n	801074e <_strtod_l+0x276>
 8010714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010716:	220a      	movs	r2, #10
 8010718:	fb02 3301 	mla	r3, r2, r1, r3
 801071c:	9309      	str	r3, [sp, #36]	; 0x24
 801071e:	2200      	movs	r2, #0
 8010720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010722:	1c59      	adds	r1, r3, #1
 8010724:	911d      	str	r1, [sp, #116]	; 0x74
 8010726:	785b      	ldrb	r3, [r3, #1]
 8010728:	4610      	mov	r0, r2
 801072a:	e7c9      	b.n	80106c0 <_strtod_l+0x1e8>
 801072c:	4638      	mov	r0, r7
 801072e:	e7d2      	b.n	80106d6 <_strtod_l+0x1fe>
 8010730:	2a08      	cmp	r2, #8
 8010732:	dc04      	bgt.n	801073e <_strtod_l+0x266>
 8010734:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010736:	434e      	muls	r6, r1
 8010738:	9609      	str	r6, [sp, #36]	; 0x24
 801073a:	3201      	adds	r2, #1
 801073c:	e7e2      	b.n	8010704 <_strtod_l+0x22c>
 801073e:	f102 0c01 	add.w	ip, r2, #1
 8010742:	f1bc 0f10 	cmp.w	ip, #16
 8010746:	bfd8      	it	le
 8010748:	fb01 f909 	mulle.w	r9, r1, r9
 801074c:	e7f5      	b.n	801073a <_strtod_l+0x262>
 801074e:	2d10      	cmp	r5, #16
 8010750:	bfdc      	itt	le
 8010752:	220a      	movle	r2, #10
 8010754:	fb02 3909 	mlale	r9, r2, r9, r3
 8010758:	e7e1      	b.n	801071e <_strtod_l+0x246>
 801075a:	2300      	movs	r3, #0
 801075c:	9307      	str	r3, [sp, #28]
 801075e:	2201      	movs	r2, #1
 8010760:	e77c      	b.n	801065c <_strtod_l+0x184>
 8010762:	f04f 0c00 	mov.w	ip, #0
 8010766:	f108 0302 	add.w	r3, r8, #2
 801076a:	931d      	str	r3, [sp, #116]	; 0x74
 801076c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010770:	e785      	b.n	801067e <_strtod_l+0x1a6>
 8010772:	f04f 0c01 	mov.w	ip, #1
 8010776:	e7f6      	b.n	8010766 <_strtod_l+0x28e>
 8010778:	08016c88 	.word	0x08016c88
 801077c:	08016b34 	.word	0x08016b34
 8010780:	7ff00000 	.word	0x7ff00000
 8010784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010786:	1c59      	adds	r1, r3, #1
 8010788:	911d      	str	r1, [sp, #116]	; 0x74
 801078a:	785b      	ldrb	r3, [r3, #1]
 801078c:	2b30      	cmp	r3, #48	; 0x30
 801078e:	d0f9      	beq.n	8010784 <_strtod_l+0x2ac>
 8010790:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010794:	2908      	cmp	r1, #8
 8010796:	f63f af79 	bhi.w	801068c <_strtod_l+0x1b4>
 801079a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801079e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107a0:	9308      	str	r3, [sp, #32]
 80107a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107a4:	1c59      	adds	r1, r3, #1
 80107a6:	911d      	str	r1, [sp, #116]	; 0x74
 80107a8:	785b      	ldrb	r3, [r3, #1]
 80107aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80107ae:	2e09      	cmp	r6, #9
 80107b0:	d937      	bls.n	8010822 <_strtod_l+0x34a>
 80107b2:	9e08      	ldr	r6, [sp, #32]
 80107b4:	1b89      	subs	r1, r1, r6
 80107b6:	2908      	cmp	r1, #8
 80107b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80107bc:	dc02      	bgt.n	80107c4 <_strtod_l+0x2ec>
 80107be:	4576      	cmp	r6, lr
 80107c0:	bfa8      	it	ge
 80107c2:	4676      	movge	r6, lr
 80107c4:	f1bc 0f00 	cmp.w	ip, #0
 80107c8:	d000      	beq.n	80107cc <_strtod_l+0x2f4>
 80107ca:	4276      	negs	r6, r6
 80107cc:	2d00      	cmp	r5, #0
 80107ce:	d14f      	bne.n	8010870 <_strtod_l+0x398>
 80107d0:	9904      	ldr	r1, [sp, #16]
 80107d2:	4301      	orrs	r1, r0
 80107d4:	f47f aec2 	bne.w	801055c <_strtod_l+0x84>
 80107d8:	2a00      	cmp	r2, #0
 80107da:	f47f aedb 	bne.w	8010594 <_strtod_l+0xbc>
 80107de:	2b69      	cmp	r3, #105	; 0x69
 80107e0:	d027      	beq.n	8010832 <_strtod_l+0x35a>
 80107e2:	dc24      	bgt.n	801082e <_strtod_l+0x356>
 80107e4:	2b49      	cmp	r3, #73	; 0x49
 80107e6:	d024      	beq.n	8010832 <_strtod_l+0x35a>
 80107e8:	2b4e      	cmp	r3, #78	; 0x4e
 80107ea:	f47f aed3 	bne.w	8010594 <_strtod_l+0xbc>
 80107ee:	499e      	ldr	r1, [pc, #632]	; (8010a68 <_strtod_l+0x590>)
 80107f0:	a81d      	add	r0, sp, #116	; 0x74
 80107f2:	f001 fe61 	bl	80124b8 <__match>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	f43f aecc 	beq.w	8010594 <_strtod_l+0xbc>
 80107fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b28      	cmp	r3, #40	; 0x28
 8010802:	d12d      	bne.n	8010860 <_strtod_l+0x388>
 8010804:	4999      	ldr	r1, [pc, #612]	; (8010a6c <_strtod_l+0x594>)
 8010806:	aa20      	add	r2, sp, #128	; 0x80
 8010808:	a81d      	add	r0, sp, #116	; 0x74
 801080a:	f001 fe69 	bl	80124e0 <__hexnan>
 801080e:	2805      	cmp	r0, #5
 8010810:	d126      	bne.n	8010860 <_strtod_l+0x388>
 8010812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010814:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010818:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801081c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010820:	e69c      	b.n	801055c <_strtod_l+0x84>
 8010822:	210a      	movs	r1, #10
 8010824:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010828:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801082c:	e7b9      	b.n	80107a2 <_strtod_l+0x2ca>
 801082e:	2b6e      	cmp	r3, #110	; 0x6e
 8010830:	e7db      	b.n	80107ea <_strtod_l+0x312>
 8010832:	498f      	ldr	r1, [pc, #572]	; (8010a70 <_strtod_l+0x598>)
 8010834:	a81d      	add	r0, sp, #116	; 0x74
 8010836:	f001 fe3f 	bl	80124b8 <__match>
 801083a:	2800      	cmp	r0, #0
 801083c:	f43f aeaa 	beq.w	8010594 <_strtod_l+0xbc>
 8010840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010842:	498c      	ldr	r1, [pc, #560]	; (8010a74 <_strtod_l+0x59c>)
 8010844:	3b01      	subs	r3, #1
 8010846:	a81d      	add	r0, sp, #116	; 0x74
 8010848:	931d      	str	r3, [sp, #116]	; 0x74
 801084a:	f001 fe35 	bl	80124b8 <__match>
 801084e:	b910      	cbnz	r0, 8010856 <_strtod_l+0x37e>
 8010850:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010852:	3301      	adds	r3, #1
 8010854:	931d      	str	r3, [sp, #116]	; 0x74
 8010856:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010a84 <_strtod_l+0x5ac>
 801085a:	f04f 0a00 	mov.w	sl, #0
 801085e:	e67d      	b.n	801055c <_strtod_l+0x84>
 8010860:	4885      	ldr	r0, [pc, #532]	; (8010a78 <_strtod_l+0x5a0>)
 8010862:	f003 f909 	bl	8013a78 <nan>
 8010866:	ed8d 0b04 	vstr	d0, [sp, #16]
 801086a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801086e:	e675      	b.n	801055c <_strtod_l+0x84>
 8010870:	9b07      	ldr	r3, [sp, #28]
 8010872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010874:	1af3      	subs	r3, r6, r3
 8010876:	2f00      	cmp	r7, #0
 8010878:	bf08      	it	eq
 801087a:	462f      	moveq	r7, r5
 801087c:	2d10      	cmp	r5, #16
 801087e:	9308      	str	r3, [sp, #32]
 8010880:	46a8      	mov	r8, r5
 8010882:	bfa8      	it	ge
 8010884:	f04f 0810 	movge.w	r8, #16
 8010888:	f7ef fe4c 	bl	8000524 <__aeabi_ui2d>
 801088c:	2d09      	cmp	r5, #9
 801088e:	4682      	mov	sl, r0
 8010890:	468b      	mov	fp, r1
 8010892:	dd13      	ble.n	80108bc <_strtod_l+0x3e4>
 8010894:	4b79      	ldr	r3, [pc, #484]	; (8010a7c <_strtod_l+0x5a4>)
 8010896:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801089a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801089e:	f7ef febb 	bl	8000618 <__aeabi_dmul>
 80108a2:	4682      	mov	sl, r0
 80108a4:	4648      	mov	r0, r9
 80108a6:	468b      	mov	fp, r1
 80108a8:	f7ef fe3c 	bl	8000524 <__aeabi_ui2d>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	4650      	mov	r0, sl
 80108b2:	4659      	mov	r1, fp
 80108b4:	f7ef fcfa 	bl	80002ac <__adddf3>
 80108b8:	4682      	mov	sl, r0
 80108ba:	468b      	mov	fp, r1
 80108bc:	2d0f      	cmp	r5, #15
 80108be:	dc38      	bgt.n	8010932 <_strtod_l+0x45a>
 80108c0:	9b08      	ldr	r3, [sp, #32]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f43f ae4a 	beq.w	801055c <_strtod_l+0x84>
 80108c8:	dd24      	ble.n	8010914 <_strtod_l+0x43c>
 80108ca:	2b16      	cmp	r3, #22
 80108cc:	dc0b      	bgt.n	80108e6 <_strtod_l+0x40e>
 80108ce:	4d6b      	ldr	r5, [pc, #428]	; (8010a7c <_strtod_l+0x5a4>)
 80108d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80108d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80108d8:	4652      	mov	r2, sl
 80108da:	465b      	mov	r3, fp
 80108dc:	f7ef fe9c 	bl	8000618 <__aeabi_dmul>
 80108e0:	4682      	mov	sl, r0
 80108e2:	468b      	mov	fp, r1
 80108e4:	e63a      	b.n	801055c <_strtod_l+0x84>
 80108e6:	9a08      	ldr	r2, [sp, #32]
 80108e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80108ec:	4293      	cmp	r3, r2
 80108ee:	db20      	blt.n	8010932 <_strtod_l+0x45a>
 80108f0:	4c62      	ldr	r4, [pc, #392]	; (8010a7c <_strtod_l+0x5a4>)
 80108f2:	f1c5 050f 	rsb	r5, r5, #15
 80108f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80108fa:	4652      	mov	r2, sl
 80108fc:	465b      	mov	r3, fp
 80108fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010902:	f7ef fe89 	bl	8000618 <__aeabi_dmul>
 8010906:	9b08      	ldr	r3, [sp, #32]
 8010908:	1b5d      	subs	r5, r3, r5
 801090a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801090e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010912:	e7e3      	b.n	80108dc <_strtod_l+0x404>
 8010914:	9b08      	ldr	r3, [sp, #32]
 8010916:	3316      	adds	r3, #22
 8010918:	db0b      	blt.n	8010932 <_strtod_l+0x45a>
 801091a:	9b07      	ldr	r3, [sp, #28]
 801091c:	4a57      	ldr	r2, [pc, #348]	; (8010a7c <_strtod_l+0x5a4>)
 801091e:	1b9e      	subs	r6, r3, r6
 8010920:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010924:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010928:	4650      	mov	r0, sl
 801092a:	4659      	mov	r1, fp
 801092c:	f7ef ff9e 	bl	800086c <__aeabi_ddiv>
 8010930:	e7d6      	b.n	80108e0 <_strtod_l+0x408>
 8010932:	9b08      	ldr	r3, [sp, #32]
 8010934:	eba5 0808 	sub.w	r8, r5, r8
 8010938:	4498      	add	r8, r3
 801093a:	f1b8 0f00 	cmp.w	r8, #0
 801093e:	dd71      	ble.n	8010a24 <_strtod_l+0x54c>
 8010940:	f018 030f 	ands.w	r3, r8, #15
 8010944:	d00a      	beq.n	801095c <_strtod_l+0x484>
 8010946:	494d      	ldr	r1, [pc, #308]	; (8010a7c <_strtod_l+0x5a4>)
 8010948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801094c:	4652      	mov	r2, sl
 801094e:	465b      	mov	r3, fp
 8010950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010954:	f7ef fe60 	bl	8000618 <__aeabi_dmul>
 8010958:	4682      	mov	sl, r0
 801095a:	468b      	mov	fp, r1
 801095c:	f038 080f 	bics.w	r8, r8, #15
 8010960:	d04d      	beq.n	80109fe <_strtod_l+0x526>
 8010962:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010966:	dd22      	ble.n	80109ae <_strtod_l+0x4d6>
 8010968:	2500      	movs	r5, #0
 801096a:	462e      	mov	r6, r5
 801096c:	9509      	str	r5, [sp, #36]	; 0x24
 801096e:	9507      	str	r5, [sp, #28]
 8010970:	2322      	movs	r3, #34	; 0x22
 8010972:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010a84 <_strtod_l+0x5ac>
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	f04f 0a00 	mov.w	sl, #0
 801097c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801097e:	2b00      	cmp	r3, #0
 8010980:	f43f adec 	beq.w	801055c <_strtod_l+0x84>
 8010984:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010986:	4620      	mov	r0, r4
 8010988:	f001 feb6 	bl	80126f8 <_Bfree>
 801098c:	9907      	ldr	r1, [sp, #28]
 801098e:	4620      	mov	r0, r4
 8010990:	f001 feb2 	bl	80126f8 <_Bfree>
 8010994:	4631      	mov	r1, r6
 8010996:	4620      	mov	r0, r4
 8010998:	f001 feae 	bl	80126f8 <_Bfree>
 801099c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801099e:	4620      	mov	r0, r4
 80109a0:	f001 feaa 	bl	80126f8 <_Bfree>
 80109a4:	4629      	mov	r1, r5
 80109a6:	4620      	mov	r0, r4
 80109a8:	f001 fea6 	bl	80126f8 <_Bfree>
 80109ac:	e5d6      	b.n	801055c <_strtod_l+0x84>
 80109ae:	2300      	movs	r3, #0
 80109b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80109b4:	4650      	mov	r0, sl
 80109b6:	4659      	mov	r1, fp
 80109b8:	4699      	mov	r9, r3
 80109ba:	f1b8 0f01 	cmp.w	r8, #1
 80109be:	dc21      	bgt.n	8010a04 <_strtod_l+0x52c>
 80109c0:	b10b      	cbz	r3, 80109c6 <_strtod_l+0x4ee>
 80109c2:	4682      	mov	sl, r0
 80109c4:	468b      	mov	fp, r1
 80109c6:	4b2e      	ldr	r3, [pc, #184]	; (8010a80 <_strtod_l+0x5a8>)
 80109c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80109cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80109d0:	4652      	mov	r2, sl
 80109d2:	465b      	mov	r3, fp
 80109d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80109d8:	f7ef fe1e 	bl	8000618 <__aeabi_dmul>
 80109dc:	4b29      	ldr	r3, [pc, #164]	; (8010a84 <_strtod_l+0x5ac>)
 80109de:	460a      	mov	r2, r1
 80109e0:	400b      	ands	r3, r1
 80109e2:	4929      	ldr	r1, [pc, #164]	; (8010a88 <_strtod_l+0x5b0>)
 80109e4:	428b      	cmp	r3, r1
 80109e6:	4682      	mov	sl, r0
 80109e8:	d8be      	bhi.n	8010968 <_strtod_l+0x490>
 80109ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80109ee:	428b      	cmp	r3, r1
 80109f0:	bf86      	itte	hi
 80109f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010a8c <_strtod_l+0x5b4>
 80109f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80109fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80109fe:	2300      	movs	r3, #0
 8010a00:	9304      	str	r3, [sp, #16]
 8010a02:	e081      	b.n	8010b08 <_strtod_l+0x630>
 8010a04:	f018 0f01 	tst.w	r8, #1
 8010a08:	d007      	beq.n	8010a1a <_strtod_l+0x542>
 8010a0a:	4b1d      	ldr	r3, [pc, #116]	; (8010a80 <_strtod_l+0x5a8>)
 8010a0c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a14:	f7ef fe00 	bl	8000618 <__aeabi_dmul>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	f109 0901 	add.w	r9, r9, #1
 8010a1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a22:	e7ca      	b.n	80109ba <_strtod_l+0x4e2>
 8010a24:	d0eb      	beq.n	80109fe <_strtod_l+0x526>
 8010a26:	f1c8 0800 	rsb	r8, r8, #0
 8010a2a:	f018 020f 	ands.w	r2, r8, #15
 8010a2e:	d00a      	beq.n	8010a46 <_strtod_l+0x56e>
 8010a30:	4b12      	ldr	r3, [pc, #72]	; (8010a7c <_strtod_l+0x5a4>)
 8010a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a36:	4650      	mov	r0, sl
 8010a38:	4659      	mov	r1, fp
 8010a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3e:	f7ef ff15 	bl	800086c <__aeabi_ddiv>
 8010a42:	4682      	mov	sl, r0
 8010a44:	468b      	mov	fp, r1
 8010a46:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010a4a:	d0d8      	beq.n	80109fe <_strtod_l+0x526>
 8010a4c:	f1b8 0f1f 	cmp.w	r8, #31
 8010a50:	dd1e      	ble.n	8010a90 <_strtod_l+0x5b8>
 8010a52:	2500      	movs	r5, #0
 8010a54:	462e      	mov	r6, r5
 8010a56:	9509      	str	r5, [sp, #36]	; 0x24
 8010a58:	9507      	str	r5, [sp, #28]
 8010a5a:	2322      	movs	r3, #34	; 0x22
 8010a5c:	f04f 0a00 	mov.w	sl, #0
 8010a60:	f04f 0b00 	mov.w	fp, #0
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	e789      	b.n	801097c <_strtod_l+0x4a4>
 8010a68:	08016b09 	.word	0x08016b09
 8010a6c:	08016b48 	.word	0x08016b48
 8010a70:	08016b01 	.word	0x08016b01
 8010a74:	08016b8b 	.word	0x08016b8b
 8010a78:	08016e63 	.word	0x08016e63
 8010a7c:	08016d28 	.word	0x08016d28
 8010a80:	08016d00 	.word	0x08016d00
 8010a84:	7ff00000 	.word	0x7ff00000
 8010a88:	7ca00000 	.word	0x7ca00000
 8010a8c:	7fefffff 	.word	0x7fefffff
 8010a90:	f018 0310 	ands.w	r3, r8, #16
 8010a94:	bf18      	it	ne
 8010a96:	236a      	movne	r3, #106	; 0x6a
 8010a98:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010e50 <_strtod_l+0x978>
 8010a9c:	9304      	str	r3, [sp, #16]
 8010a9e:	4650      	mov	r0, sl
 8010aa0:	4659      	mov	r1, fp
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f018 0f01 	tst.w	r8, #1
 8010aa8:	d004      	beq.n	8010ab4 <_strtod_l+0x5dc>
 8010aaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010aae:	f7ef fdb3 	bl	8000618 <__aeabi_dmul>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010ab8:	f109 0908 	add.w	r9, r9, #8
 8010abc:	d1f2      	bne.n	8010aa4 <_strtod_l+0x5cc>
 8010abe:	b10b      	cbz	r3, 8010ac4 <_strtod_l+0x5ec>
 8010ac0:	4682      	mov	sl, r0
 8010ac2:	468b      	mov	fp, r1
 8010ac4:	9b04      	ldr	r3, [sp, #16]
 8010ac6:	b1bb      	cbz	r3, 8010af8 <_strtod_l+0x620>
 8010ac8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010acc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	4659      	mov	r1, fp
 8010ad4:	dd10      	ble.n	8010af8 <_strtod_l+0x620>
 8010ad6:	2b1f      	cmp	r3, #31
 8010ad8:	f340 8128 	ble.w	8010d2c <_strtod_l+0x854>
 8010adc:	2b34      	cmp	r3, #52	; 0x34
 8010ade:	bfde      	ittt	le
 8010ae0:	3b20      	suble	r3, #32
 8010ae2:	f04f 32ff 	movle.w	r2, #4294967295
 8010ae6:	fa02 f303 	lslle.w	r3, r2, r3
 8010aea:	f04f 0a00 	mov.w	sl, #0
 8010aee:	bfcc      	ite	gt
 8010af0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010af4:	ea03 0b01 	andle.w	fp, r3, r1
 8010af8:	2200      	movs	r2, #0
 8010afa:	2300      	movs	r3, #0
 8010afc:	4650      	mov	r0, sl
 8010afe:	4659      	mov	r1, fp
 8010b00:	f7ef fff2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1a4      	bne.n	8010a52 <_strtod_l+0x57a>
 8010b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010b0e:	462b      	mov	r3, r5
 8010b10:	463a      	mov	r2, r7
 8010b12:	4620      	mov	r0, r4
 8010b14:	f001 fe5c 	bl	80127d0 <__s2b>
 8010b18:	9009      	str	r0, [sp, #36]	; 0x24
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	f43f af24 	beq.w	8010968 <_strtod_l+0x490>
 8010b20:	9b07      	ldr	r3, [sp, #28]
 8010b22:	1b9e      	subs	r6, r3, r6
 8010b24:	9b08      	ldr	r3, [sp, #32]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfb4      	ite	lt
 8010b2a:	4633      	movlt	r3, r6
 8010b2c:	2300      	movge	r3, #0
 8010b2e:	9310      	str	r3, [sp, #64]	; 0x40
 8010b30:	9b08      	ldr	r3, [sp, #32]
 8010b32:	2500      	movs	r5, #0
 8010b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b38:	9318      	str	r3, [sp, #96]	; 0x60
 8010b3a:	462e      	mov	r6, r5
 8010b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b3e:	4620      	mov	r0, r4
 8010b40:	6859      	ldr	r1, [r3, #4]
 8010b42:	f001 fd99 	bl	8012678 <_Balloc>
 8010b46:	9007      	str	r0, [sp, #28]
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	f43f af11 	beq.w	8010970 <_strtod_l+0x498>
 8010b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b50:	691a      	ldr	r2, [r3, #16]
 8010b52:	3202      	adds	r2, #2
 8010b54:	f103 010c 	add.w	r1, r3, #12
 8010b58:	0092      	lsls	r2, r2, #2
 8010b5a:	300c      	adds	r0, #12
 8010b5c:	f7fe fd5e 	bl	800f61c <memcpy>
 8010b60:	ec4b ab10 	vmov	d0, sl, fp
 8010b64:	aa20      	add	r2, sp, #128	; 0x80
 8010b66:	a91f      	add	r1, sp, #124	; 0x7c
 8010b68:	4620      	mov	r0, r4
 8010b6a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010b6e:	f002 f96b 	bl	8012e48 <__d2b>
 8010b72:	901e      	str	r0, [sp, #120]	; 0x78
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f43f aefb 	beq.w	8010970 <_strtod_l+0x498>
 8010b7a:	2101      	movs	r1, #1
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f001 fec1 	bl	8012904 <__i2b>
 8010b82:	4606      	mov	r6, r0
 8010b84:	2800      	cmp	r0, #0
 8010b86:	f43f aef3 	beq.w	8010970 <_strtod_l+0x498>
 8010b8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b8c:	9904      	ldr	r1, [sp, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	bfab      	itete	ge
 8010b92:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010b94:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010b96:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010b98:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010b9c:	bfac      	ite	ge
 8010b9e:	eb03 0902 	addge.w	r9, r3, r2
 8010ba2:	1ad7      	sublt	r7, r2, r3
 8010ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010ba6:	eba3 0801 	sub.w	r8, r3, r1
 8010baa:	4490      	add	r8, r2
 8010bac:	4ba3      	ldr	r3, [pc, #652]	; (8010e3c <_strtod_l+0x964>)
 8010bae:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bb2:	4598      	cmp	r8, r3
 8010bb4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010bb8:	f280 80cc 	bge.w	8010d54 <_strtod_l+0x87c>
 8010bbc:	eba3 0308 	sub.w	r3, r3, r8
 8010bc0:	2b1f      	cmp	r3, #31
 8010bc2:	eba2 0203 	sub.w	r2, r2, r3
 8010bc6:	f04f 0101 	mov.w	r1, #1
 8010bca:	f300 80b6 	bgt.w	8010d3a <_strtod_l+0x862>
 8010bce:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd2:	9311      	str	r3, [sp, #68]	; 0x44
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd8:	eb09 0802 	add.w	r8, r9, r2
 8010bdc:	9b04      	ldr	r3, [sp, #16]
 8010bde:	45c1      	cmp	r9, r8
 8010be0:	4417      	add	r7, r2
 8010be2:	441f      	add	r7, r3
 8010be4:	464b      	mov	r3, r9
 8010be6:	bfa8      	it	ge
 8010be8:	4643      	movge	r3, r8
 8010bea:	42bb      	cmp	r3, r7
 8010bec:	bfa8      	it	ge
 8010bee:	463b      	movge	r3, r7
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	bfc2      	ittt	gt
 8010bf4:	eba8 0803 	subgt.w	r8, r8, r3
 8010bf8:	1aff      	subgt	r7, r7, r3
 8010bfa:	eba9 0903 	subgt.w	r9, r9, r3
 8010bfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dd17      	ble.n	8010c34 <_strtod_l+0x75c>
 8010c04:	4631      	mov	r1, r6
 8010c06:	461a      	mov	r2, r3
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f001 ff37 	bl	8012a7c <__pow5mult>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	2800      	cmp	r0, #0
 8010c12:	f43f aead 	beq.w	8010970 <_strtod_l+0x498>
 8010c16:	4601      	mov	r1, r0
 8010c18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f001 fe88 	bl	8012930 <__multiply>
 8010c20:	900f      	str	r0, [sp, #60]	; 0x3c
 8010c22:	2800      	cmp	r0, #0
 8010c24:	f43f aea4 	beq.w	8010970 <_strtod_l+0x498>
 8010c28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f001 fd64 	bl	80126f8 <_Bfree>
 8010c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c32:	931e      	str	r3, [sp, #120]	; 0x78
 8010c34:	f1b8 0f00 	cmp.w	r8, #0
 8010c38:	f300 8091 	bgt.w	8010d5e <_strtod_l+0x886>
 8010c3c:	9b08      	ldr	r3, [sp, #32]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dd08      	ble.n	8010c54 <_strtod_l+0x77c>
 8010c42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010c44:	9907      	ldr	r1, [sp, #28]
 8010c46:	4620      	mov	r0, r4
 8010c48:	f001 ff18 	bl	8012a7c <__pow5mult>
 8010c4c:	9007      	str	r0, [sp, #28]
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	f43f ae8e 	beq.w	8010970 <_strtod_l+0x498>
 8010c54:	2f00      	cmp	r7, #0
 8010c56:	dd08      	ble.n	8010c6a <_strtod_l+0x792>
 8010c58:	9907      	ldr	r1, [sp, #28]
 8010c5a:	463a      	mov	r2, r7
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f001 ff67 	bl	8012b30 <__lshift>
 8010c62:	9007      	str	r0, [sp, #28]
 8010c64:	2800      	cmp	r0, #0
 8010c66:	f43f ae83 	beq.w	8010970 <_strtod_l+0x498>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	dd08      	ble.n	8010c82 <_strtod_l+0x7aa>
 8010c70:	4631      	mov	r1, r6
 8010c72:	464a      	mov	r2, r9
 8010c74:	4620      	mov	r0, r4
 8010c76:	f001 ff5b 	bl	8012b30 <__lshift>
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	f43f ae77 	beq.w	8010970 <_strtod_l+0x498>
 8010c82:	9a07      	ldr	r2, [sp, #28]
 8010c84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c86:	4620      	mov	r0, r4
 8010c88:	f001 ffda 	bl	8012c40 <__mdiff>
 8010c8c:	4605      	mov	r5, r0
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	f43f ae6e 	beq.w	8010970 <_strtod_l+0x498>
 8010c94:	68c3      	ldr	r3, [r0, #12]
 8010c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c98:	2300      	movs	r3, #0
 8010c9a:	60c3      	str	r3, [r0, #12]
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	f001 ffb3 	bl	8012c08 <__mcmp>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	da65      	bge.n	8010d72 <_strtod_l+0x89a>
 8010ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ca8:	ea53 030a 	orrs.w	r3, r3, sl
 8010cac:	f040 8087 	bne.w	8010dbe <_strtod_l+0x8e6>
 8010cb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f040 8082 	bne.w	8010dbe <_strtod_l+0x8e6>
 8010cba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cbe:	0d1b      	lsrs	r3, r3, #20
 8010cc0:	051b      	lsls	r3, r3, #20
 8010cc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010cc6:	d97a      	bls.n	8010dbe <_strtod_l+0x8e6>
 8010cc8:	696b      	ldr	r3, [r5, #20]
 8010cca:	b913      	cbnz	r3, 8010cd2 <_strtod_l+0x7fa>
 8010ccc:	692b      	ldr	r3, [r5, #16]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	dd75      	ble.n	8010dbe <_strtod_l+0x8e6>
 8010cd2:	4629      	mov	r1, r5
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f001 ff2a 	bl	8012b30 <__lshift>
 8010cdc:	4631      	mov	r1, r6
 8010cde:	4605      	mov	r5, r0
 8010ce0:	f001 ff92 	bl	8012c08 <__mcmp>
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	dd6a      	ble.n	8010dbe <_strtod_l+0x8e6>
 8010ce8:	9904      	ldr	r1, [sp, #16]
 8010cea:	4a55      	ldr	r2, [pc, #340]	; (8010e40 <_strtod_l+0x968>)
 8010cec:	465b      	mov	r3, fp
 8010cee:	2900      	cmp	r1, #0
 8010cf0:	f000 8085 	beq.w	8010dfe <_strtod_l+0x926>
 8010cf4:	ea02 010b 	and.w	r1, r2, fp
 8010cf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010cfc:	dc7f      	bgt.n	8010dfe <_strtod_l+0x926>
 8010cfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010d02:	f77f aeaa 	ble.w	8010a5a <_strtod_l+0x582>
 8010d06:	4a4f      	ldr	r2, [pc, #316]	; (8010e44 <_strtod_l+0x96c>)
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010d0e:	4650      	mov	r0, sl
 8010d10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010d14:	4659      	mov	r1, fp
 8010d16:	f7ef fc7f 	bl	8000618 <__aeabi_dmul>
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4303      	orrs	r3, r0
 8010d1e:	bf08      	it	eq
 8010d20:	2322      	moveq	r3, #34	; 0x22
 8010d22:	4682      	mov	sl, r0
 8010d24:	468b      	mov	fp, r1
 8010d26:	bf08      	it	eq
 8010d28:	6023      	streq	r3, [r4, #0]
 8010d2a:	e62b      	b.n	8010984 <_strtod_l+0x4ac>
 8010d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d30:	fa02 f303 	lsl.w	r3, r2, r3
 8010d34:	ea03 0a0a 	and.w	sl, r3, sl
 8010d38:	e6de      	b.n	8010af8 <_strtod_l+0x620>
 8010d3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010d3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010d42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010d46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010d4a:	fa01 f308 	lsl.w	r3, r1, r8
 8010d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d50:	9111      	str	r1, [sp, #68]	; 0x44
 8010d52:	e741      	b.n	8010bd8 <_strtod_l+0x700>
 8010d54:	2300      	movs	r3, #0
 8010d56:	930c      	str	r3, [sp, #48]	; 0x30
 8010d58:	2301      	movs	r3, #1
 8010d5a:	9311      	str	r3, [sp, #68]	; 0x44
 8010d5c:	e73c      	b.n	8010bd8 <_strtod_l+0x700>
 8010d5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010d60:	4642      	mov	r2, r8
 8010d62:	4620      	mov	r0, r4
 8010d64:	f001 fee4 	bl	8012b30 <__lshift>
 8010d68:	901e      	str	r0, [sp, #120]	; 0x78
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	f47f af66 	bne.w	8010c3c <_strtod_l+0x764>
 8010d70:	e5fe      	b.n	8010970 <_strtod_l+0x498>
 8010d72:	465f      	mov	r7, fp
 8010d74:	d16e      	bne.n	8010e54 <_strtod_l+0x97c>
 8010d76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d7c:	b342      	cbz	r2, 8010dd0 <_strtod_l+0x8f8>
 8010d7e:	4a32      	ldr	r2, [pc, #200]	; (8010e48 <_strtod_l+0x970>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d128      	bne.n	8010dd6 <_strtod_l+0x8fe>
 8010d84:	9b04      	ldr	r3, [sp, #16]
 8010d86:	4650      	mov	r0, sl
 8010d88:	b1eb      	cbz	r3, 8010dc6 <_strtod_l+0x8ee>
 8010d8a:	4a2d      	ldr	r2, [pc, #180]	; (8010e40 <_strtod_l+0x968>)
 8010d8c:	403a      	ands	r2, r7
 8010d8e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010d92:	f04f 31ff 	mov.w	r1, #4294967295
 8010d96:	d819      	bhi.n	8010dcc <_strtod_l+0x8f4>
 8010d98:	0d12      	lsrs	r2, r2, #20
 8010d9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8010da2:	4298      	cmp	r0, r3
 8010da4:	d117      	bne.n	8010dd6 <_strtod_l+0x8fe>
 8010da6:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <_strtod_l+0x974>)
 8010da8:	429f      	cmp	r7, r3
 8010daa:	d102      	bne.n	8010db2 <_strtod_l+0x8da>
 8010dac:	3001      	adds	r0, #1
 8010dae:	f43f addf 	beq.w	8010970 <_strtod_l+0x498>
 8010db2:	4b23      	ldr	r3, [pc, #140]	; (8010e40 <_strtod_l+0x968>)
 8010db4:	403b      	ands	r3, r7
 8010db6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010dba:	f04f 0a00 	mov.w	sl, #0
 8010dbe:	9b04      	ldr	r3, [sp, #16]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1a0      	bne.n	8010d06 <_strtod_l+0x82e>
 8010dc4:	e5de      	b.n	8010984 <_strtod_l+0x4ac>
 8010dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dca:	e7ea      	b.n	8010da2 <_strtod_l+0x8ca>
 8010dcc:	460b      	mov	r3, r1
 8010dce:	e7e8      	b.n	8010da2 <_strtod_l+0x8ca>
 8010dd0:	ea53 030a 	orrs.w	r3, r3, sl
 8010dd4:	d088      	beq.n	8010ce8 <_strtod_l+0x810>
 8010dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dd8:	b1db      	cbz	r3, 8010e12 <_strtod_l+0x93a>
 8010dda:	423b      	tst	r3, r7
 8010ddc:	d0ef      	beq.n	8010dbe <_strtod_l+0x8e6>
 8010dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010de0:	9a04      	ldr	r2, [sp, #16]
 8010de2:	4650      	mov	r0, sl
 8010de4:	4659      	mov	r1, fp
 8010de6:	b1c3      	cbz	r3, 8010e1a <_strtod_l+0x942>
 8010de8:	f7ff fb59 	bl	801049e <sulp>
 8010dec:	4602      	mov	r2, r0
 8010dee:	460b      	mov	r3, r1
 8010df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010df4:	f7ef fa5a 	bl	80002ac <__adddf3>
 8010df8:	4682      	mov	sl, r0
 8010dfa:	468b      	mov	fp, r1
 8010dfc:	e7df      	b.n	8010dbe <_strtod_l+0x8e6>
 8010dfe:	4013      	ands	r3, r2
 8010e00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e0c:	f04f 3aff 	mov.w	sl, #4294967295
 8010e10:	e7d5      	b.n	8010dbe <_strtod_l+0x8e6>
 8010e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e14:	ea13 0f0a 	tst.w	r3, sl
 8010e18:	e7e0      	b.n	8010ddc <_strtod_l+0x904>
 8010e1a:	f7ff fb40 	bl	801049e <sulp>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	460b      	mov	r3, r1
 8010e22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e26:	f7ef fa3f 	bl	80002a8 <__aeabi_dsub>
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4682      	mov	sl, r0
 8010e30:	468b      	mov	fp, r1
 8010e32:	f7ef fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d0c1      	beq.n	8010dbe <_strtod_l+0x8e6>
 8010e3a:	e60e      	b.n	8010a5a <_strtod_l+0x582>
 8010e3c:	fffffc02 	.word	0xfffffc02
 8010e40:	7ff00000 	.word	0x7ff00000
 8010e44:	39500000 	.word	0x39500000
 8010e48:	000fffff 	.word	0x000fffff
 8010e4c:	7fefffff 	.word	0x7fefffff
 8010e50:	08016b60 	.word	0x08016b60
 8010e54:	4631      	mov	r1, r6
 8010e56:	4628      	mov	r0, r5
 8010e58:	f002 f852 	bl	8012f00 <__ratio>
 8010e5c:	ec59 8b10 	vmov	r8, r9, d0
 8010e60:	ee10 0a10 	vmov	r0, s0
 8010e64:	2200      	movs	r2, #0
 8010e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e6a:	4649      	mov	r1, r9
 8010e6c:	f7ef fe50 	bl	8000b10 <__aeabi_dcmple>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	d07c      	beq.n	8010f6e <_strtod_l+0xa96>
 8010e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d04c      	beq.n	8010f14 <_strtod_l+0xa3c>
 8010e7a:	4b95      	ldr	r3, [pc, #596]	; (80110d0 <_strtod_l+0xbf8>)
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010e82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80110d0 <_strtod_l+0xbf8>
 8010e86:	f04f 0800 	mov.w	r8, #0
 8010e8a:	4b92      	ldr	r3, [pc, #584]	; (80110d4 <_strtod_l+0xbfc>)
 8010e8c:	403b      	ands	r3, r7
 8010e8e:	9311      	str	r3, [sp, #68]	; 0x44
 8010e90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010e92:	4b91      	ldr	r3, [pc, #580]	; (80110d8 <_strtod_l+0xc00>)
 8010e94:	429a      	cmp	r2, r3
 8010e96:	f040 80b2 	bne.w	8010ffe <_strtod_l+0xb26>
 8010e9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ea2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010ea6:	ec4b ab10 	vmov	d0, sl, fp
 8010eaa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010eae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010eb2:	f001 ff4d 	bl	8012d50 <__ulp>
 8010eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010eba:	ec53 2b10 	vmov	r2, r3, d0
 8010ebe:	f7ef fbab 	bl	8000618 <__aeabi_dmul>
 8010ec2:	4652      	mov	r2, sl
 8010ec4:	465b      	mov	r3, fp
 8010ec6:	f7ef f9f1 	bl	80002ac <__adddf3>
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4981      	ldr	r1, [pc, #516]	; (80110d4 <_strtod_l+0xbfc>)
 8010ece:	4a83      	ldr	r2, [pc, #524]	; (80110dc <_strtod_l+0xc04>)
 8010ed0:	4019      	ands	r1, r3
 8010ed2:	4291      	cmp	r1, r2
 8010ed4:	4682      	mov	sl, r0
 8010ed6:	d95e      	bls.n	8010f96 <_strtod_l+0xabe>
 8010ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eda:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d103      	bne.n	8010eea <_strtod_l+0xa12>
 8010ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	f43f ad43 	beq.w	8010970 <_strtod_l+0x498>
 8010eea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80110e8 <_strtod_l+0xc10>
 8010eee:	f04f 3aff 	mov.w	sl, #4294967295
 8010ef2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f001 fbff 	bl	80126f8 <_Bfree>
 8010efa:	9907      	ldr	r1, [sp, #28]
 8010efc:	4620      	mov	r0, r4
 8010efe:	f001 fbfb 	bl	80126f8 <_Bfree>
 8010f02:	4631      	mov	r1, r6
 8010f04:	4620      	mov	r0, r4
 8010f06:	f001 fbf7 	bl	80126f8 <_Bfree>
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f001 fbf3 	bl	80126f8 <_Bfree>
 8010f12:	e613      	b.n	8010b3c <_strtod_l+0x664>
 8010f14:	f1ba 0f00 	cmp.w	sl, #0
 8010f18:	d11b      	bne.n	8010f52 <_strtod_l+0xa7a>
 8010f1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f1e:	b9f3      	cbnz	r3, 8010f5e <_strtod_l+0xa86>
 8010f20:	4b6b      	ldr	r3, [pc, #428]	; (80110d0 <_strtod_l+0xbf8>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	4640      	mov	r0, r8
 8010f26:	4649      	mov	r1, r9
 8010f28:	f7ef fde8 	bl	8000afc <__aeabi_dcmplt>
 8010f2c:	b9d0      	cbnz	r0, 8010f64 <_strtod_l+0xa8c>
 8010f2e:	4640      	mov	r0, r8
 8010f30:	4649      	mov	r1, r9
 8010f32:	4b6b      	ldr	r3, [pc, #428]	; (80110e0 <_strtod_l+0xc08>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	f7ef fb6f 	bl	8000618 <__aeabi_dmul>
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010f42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010f46:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010f4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010f50:	e79b      	b.n	8010e8a <_strtod_l+0x9b2>
 8010f52:	f1ba 0f01 	cmp.w	sl, #1
 8010f56:	d102      	bne.n	8010f5e <_strtod_l+0xa86>
 8010f58:	2f00      	cmp	r7, #0
 8010f5a:	f43f ad7e 	beq.w	8010a5a <_strtod_l+0x582>
 8010f5e:	4b61      	ldr	r3, [pc, #388]	; (80110e4 <_strtod_l+0xc0c>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	e78c      	b.n	8010e7e <_strtod_l+0x9a6>
 8010f64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80110e0 <_strtod_l+0xc08>
 8010f68:	f04f 0800 	mov.w	r8, #0
 8010f6c:	e7e7      	b.n	8010f3e <_strtod_l+0xa66>
 8010f6e:	4b5c      	ldr	r3, [pc, #368]	; (80110e0 <_strtod_l+0xc08>)
 8010f70:	4640      	mov	r0, r8
 8010f72:	4649      	mov	r1, r9
 8010f74:	2200      	movs	r2, #0
 8010f76:	f7ef fb4f 	bl	8000618 <__aeabi_dmul>
 8010f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f7c:	4680      	mov	r8, r0
 8010f7e:	4689      	mov	r9, r1
 8010f80:	b933      	cbnz	r3, 8010f90 <_strtod_l+0xab8>
 8010f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f86:	9012      	str	r0, [sp, #72]	; 0x48
 8010f88:	9313      	str	r3, [sp, #76]	; 0x4c
 8010f8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010f8e:	e7dd      	b.n	8010f4c <_strtod_l+0xa74>
 8010f90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010f94:	e7f9      	b.n	8010f8a <_strtod_l+0xab2>
 8010f96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d1a8      	bne.n	8010ef2 <_strtod_l+0xa1a>
 8010fa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fa6:	0d1b      	lsrs	r3, r3, #20
 8010fa8:	051b      	lsls	r3, r3, #20
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d1a1      	bne.n	8010ef2 <_strtod_l+0xa1a>
 8010fae:	4640      	mov	r0, r8
 8010fb0:	4649      	mov	r1, r9
 8010fb2:	f7ef fe91 	bl	8000cd8 <__aeabi_d2lz>
 8010fb6:	f7ef fb01 	bl	80005bc <__aeabi_l2d>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	4649      	mov	r1, r9
 8010fc2:	f7ef f971 	bl	80002a8 <__aeabi_dsub>
 8010fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fcc:	ea43 030a 	orr.w	r3, r3, sl
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	4680      	mov	r8, r0
 8010fd4:	4689      	mov	r9, r1
 8010fd6:	d053      	beq.n	8011080 <_strtod_l+0xba8>
 8010fd8:	a335      	add	r3, pc, #212	; (adr r3, 80110b0 <_strtod_l+0xbd8>)
 8010fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fde:	f7ef fd8d 	bl	8000afc <__aeabi_dcmplt>
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	f47f acce 	bne.w	8010984 <_strtod_l+0x4ac>
 8010fe8:	a333      	add	r3, pc, #204	; (adr r3, 80110b8 <_strtod_l+0xbe0>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	4640      	mov	r0, r8
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	f7ef fda1 	bl	8000b38 <__aeabi_dcmpgt>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f43f af7b 	beq.w	8010ef2 <_strtod_l+0xa1a>
 8010ffc:	e4c2      	b.n	8010984 <_strtod_l+0x4ac>
 8010ffe:	9b04      	ldr	r3, [sp, #16]
 8011000:	b333      	cbz	r3, 8011050 <_strtod_l+0xb78>
 8011002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011004:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011008:	d822      	bhi.n	8011050 <_strtod_l+0xb78>
 801100a:	a32d      	add	r3, pc, #180	; (adr r3, 80110c0 <_strtod_l+0xbe8>)
 801100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011010:	4640      	mov	r0, r8
 8011012:	4649      	mov	r1, r9
 8011014:	f7ef fd7c 	bl	8000b10 <__aeabi_dcmple>
 8011018:	b1a0      	cbz	r0, 8011044 <_strtod_l+0xb6c>
 801101a:	4649      	mov	r1, r9
 801101c:	4640      	mov	r0, r8
 801101e:	f7ef fdd3 	bl	8000bc8 <__aeabi_d2uiz>
 8011022:	2801      	cmp	r0, #1
 8011024:	bf38      	it	cc
 8011026:	2001      	movcc	r0, #1
 8011028:	f7ef fa7c 	bl	8000524 <__aeabi_ui2d>
 801102c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801102e:	4680      	mov	r8, r0
 8011030:	4689      	mov	r9, r1
 8011032:	bb13      	cbnz	r3, 801107a <_strtod_l+0xba2>
 8011034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011038:	9014      	str	r0, [sp, #80]	; 0x50
 801103a:	9315      	str	r3, [sp, #84]	; 0x54
 801103c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011040:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011046:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011048:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801104c:	1a9b      	subs	r3, r3, r2
 801104e:	930d      	str	r3, [sp, #52]	; 0x34
 8011050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011054:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011058:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801105c:	f001 fe78 	bl	8012d50 <__ulp>
 8011060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011064:	ec53 2b10 	vmov	r2, r3, d0
 8011068:	f7ef fad6 	bl	8000618 <__aeabi_dmul>
 801106c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011070:	f7ef f91c 	bl	80002ac <__adddf3>
 8011074:	4682      	mov	sl, r0
 8011076:	468b      	mov	fp, r1
 8011078:	e78f      	b.n	8010f9a <_strtod_l+0xac2>
 801107a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801107e:	e7dd      	b.n	801103c <_strtod_l+0xb64>
 8011080:	a311      	add	r3, pc, #68	; (adr r3, 80110c8 <_strtod_l+0xbf0>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	f7ef fd39 	bl	8000afc <__aeabi_dcmplt>
 801108a:	e7b4      	b.n	8010ff6 <_strtod_l+0xb1e>
 801108c:	2300      	movs	r3, #0
 801108e:	930e      	str	r3, [sp, #56]	; 0x38
 8011090:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011092:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011094:	6013      	str	r3, [r2, #0]
 8011096:	f7ff ba65 	b.w	8010564 <_strtod_l+0x8c>
 801109a:	2b65      	cmp	r3, #101	; 0x65
 801109c:	f43f ab5d 	beq.w	801075a <_strtod_l+0x282>
 80110a0:	2b45      	cmp	r3, #69	; 0x45
 80110a2:	f43f ab5a 	beq.w	801075a <_strtod_l+0x282>
 80110a6:	2201      	movs	r2, #1
 80110a8:	f7ff bb92 	b.w	80107d0 <_strtod_l+0x2f8>
 80110ac:	f3af 8000 	nop.w
 80110b0:	94a03595 	.word	0x94a03595
 80110b4:	3fdfffff 	.word	0x3fdfffff
 80110b8:	35afe535 	.word	0x35afe535
 80110bc:	3fe00000 	.word	0x3fe00000
 80110c0:	ffc00000 	.word	0xffc00000
 80110c4:	41dfffff 	.word	0x41dfffff
 80110c8:	94a03595 	.word	0x94a03595
 80110cc:	3fcfffff 	.word	0x3fcfffff
 80110d0:	3ff00000 	.word	0x3ff00000
 80110d4:	7ff00000 	.word	0x7ff00000
 80110d8:	7fe00000 	.word	0x7fe00000
 80110dc:	7c9fffff 	.word	0x7c9fffff
 80110e0:	3fe00000 	.word	0x3fe00000
 80110e4:	bff00000 	.word	0xbff00000
 80110e8:	7fefffff 	.word	0x7fefffff

080110ec <_strtod_r>:
 80110ec:	4b01      	ldr	r3, [pc, #4]	; (80110f4 <_strtod_r+0x8>)
 80110ee:	f7ff b9f3 	b.w	80104d8 <_strtod_l>
 80110f2:	bf00      	nop
 80110f4:	200002dc 	.word	0x200002dc

080110f8 <_strtol_l.isra.0>:
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110fe:	d001      	beq.n	8011104 <_strtol_l.isra.0+0xc>
 8011100:	2b24      	cmp	r3, #36	; 0x24
 8011102:	d906      	bls.n	8011112 <_strtol_l.isra.0+0x1a>
 8011104:	f7fe fa60 	bl	800f5c8 <__errno>
 8011108:	2316      	movs	r3, #22
 801110a:	6003      	str	r3, [r0, #0]
 801110c:	2000      	movs	r0, #0
 801110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011112:	4f3a      	ldr	r7, [pc, #232]	; (80111fc <_strtol_l.isra.0+0x104>)
 8011114:	468e      	mov	lr, r1
 8011116:	4676      	mov	r6, lr
 8011118:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801111c:	5de5      	ldrb	r5, [r4, r7]
 801111e:	f015 0508 	ands.w	r5, r5, #8
 8011122:	d1f8      	bne.n	8011116 <_strtol_l.isra.0+0x1e>
 8011124:	2c2d      	cmp	r4, #45	; 0x2d
 8011126:	d134      	bne.n	8011192 <_strtol_l.isra.0+0x9a>
 8011128:	f89e 4000 	ldrb.w	r4, [lr]
 801112c:	f04f 0801 	mov.w	r8, #1
 8011130:	f106 0e02 	add.w	lr, r6, #2
 8011134:	2b00      	cmp	r3, #0
 8011136:	d05c      	beq.n	80111f2 <_strtol_l.isra.0+0xfa>
 8011138:	2b10      	cmp	r3, #16
 801113a:	d10c      	bne.n	8011156 <_strtol_l.isra.0+0x5e>
 801113c:	2c30      	cmp	r4, #48	; 0x30
 801113e:	d10a      	bne.n	8011156 <_strtol_l.isra.0+0x5e>
 8011140:	f89e 4000 	ldrb.w	r4, [lr]
 8011144:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011148:	2c58      	cmp	r4, #88	; 0x58
 801114a:	d14d      	bne.n	80111e8 <_strtol_l.isra.0+0xf0>
 801114c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011150:	2310      	movs	r3, #16
 8011152:	f10e 0e02 	add.w	lr, lr, #2
 8011156:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801115a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801115e:	2600      	movs	r6, #0
 8011160:	fbbc f9f3 	udiv	r9, ip, r3
 8011164:	4635      	mov	r5, r6
 8011166:	fb03 ca19 	mls	sl, r3, r9, ip
 801116a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801116e:	2f09      	cmp	r7, #9
 8011170:	d818      	bhi.n	80111a4 <_strtol_l.isra.0+0xac>
 8011172:	463c      	mov	r4, r7
 8011174:	42a3      	cmp	r3, r4
 8011176:	dd24      	ble.n	80111c2 <_strtol_l.isra.0+0xca>
 8011178:	2e00      	cmp	r6, #0
 801117a:	db1f      	blt.n	80111bc <_strtol_l.isra.0+0xc4>
 801117c:	45a9      	cmp	r9, r5
 801117e:	d31d      	bcc.n	80111bc <_strtol_l.isra.0+0xc4>
 8011180:	d101      	bne.n	8011186 <_strtol_l.isra.0+0x8e>
 8011182:	45a2      	cmp	sl, r4
 8011184:	db1a      	blt.n	80111bc <_strtol_l.isra.0+0xc4>
 8011186:	fb05 4503 	mla	r5, r5, r3, r4
 801118a:	2601      	movs	r6, #1
 801118c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011190:	e7eb      	b.n	801116a <_strtol_l.isra.0+0x72>
 8011192:	2c2b      	cmp	r4, #43	; 0x2b
 8011194:	bf08      	it	eq
 8011196:	f89e 4000 	ldrbeq.w	r4, [lr]
 801119a:	46a8      	mov	r8, r5
 801119c:	bf08      	it	eq
 801119e:	f106 0e02 	addeq.w	lr, r6, #2
 80111a2:	e7c7      	b.n	8011134 <_strtol_l.isra.0+0x3c>
 80111a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80111a8:	2f19      	cmp	r7, #25
 80111aa:	d801      	bhi.n	80111b0 <_strtol_l.isra.0+0xb8>
 80111ac:	3c37      	subs	r4, #55	; 0x37
 80111ae:	e7e1      	b.n	8011174 <_strtol_l.isra.0+0x7c>
 80111b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80111b4:	2f19      	cmp	r7, #25
 80111b6:	d804      	bhi.n	80111c2 <_strtol_l.isra.0+0xca>
 80111b8:	3c57      	subs	r4, #87	; 0x57
 80111ba:	e7db      	b.n	8011174 <_strtol_l.isra.0+0x7c>
 80111bc:	f04f 36ff 	mov.w	r6, #4294967295
 80111c0:	e7e4      	b.n	801118c <_strtol_l.isra.0+0x94>
 80111c2:	2e00      	cmp	r6, #0
 80111c4:	da05      	bge.n	80111d2 <_strtol_l.isra.0+0xda>
 80111c6:	2322      	movs	r3, #34	; 0x22
 80111c8:	6003      	str	r3, [r0, #0]
 80111ca:	4665      	mov	r5, ip
 80111cc:	b942      	cbnz	r2, 80111e0 <_strtol_l.isra.0+0xe8>
 80111ce:	4628      	mov	r0, r5
 80111d0:	e79d      	b.n	801110e <_strtol_l.isra.0+0x16>
 80111d2:	f1b8 0f00 	cmp.w	r8, #0
 80111d6:	d000      	beq.n	80111da <_strtol_l.isra.0+0xe2>
 80111d8:	426d      	negs	r5, r5
 80111da:	2a00      	cmp	r2, #0
 80111dc:	d0f7      	beq.n	80111ce <_strtol_l.isra.0+0xd6>
 80111de:	b10e      	cbz	r6, 80111e4 <_strtol_l.isra.0+0xec>
 80111e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80111e4:	6011      	str	r1, [r2, #0]
 80111e6:	e7f2      	b.n	80111ce <_strtol_l.isra.0+0xd6>
 80111e8:	2430      	movs	r4, #48	; 0x30
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1b3      	bne.n	8011156 <_strtol_l.isra.0+0x5e>
 80111ee:	2308      	movs	r3, #8
 80111f0:	e7b1      	b.n	8011156 <_strtol_l.isra.0+0x5e>
 80111f2:	2c30      	cmp	r4, #48	; 0x30
 80111f4:	d0a4      	beq.n	8011140 <_strtol_l.isra.0+0x48>
 80111f6:	230a      	movs	r3, #10
 80111f8:	e7ad      	b.n	8011156 <_strtol_l.isra.0+0x5e>
 80111fa:	bf00      	nop
 80111fc:	080169f5 	.word	0x080169f5

08011200 <_strtol_r>:
 8011200:	f7ff bf7a 	b.w	80110f8 <_strtol_l.isra.0>

08011204 <_write_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4d07      	ldr	r5, [pc, #28]	; (8011224 <_write_r+0x20>)
 8011208:	4604      	mov	r4, r0
 801120a:	4608      	mov	r0, r1
 801120c:	4611      	mov	r1, r2
 801120e:	2200      	movs	r2, #0
 8011210:	602a      	str	r2, [r5, #0]
 8011212:	461a      	mov	r2, r3
 8011214:	f7f7 f8d3 	bl	80083be <_write>
 8011218:	1c43      	adds	r3, r0, #1
 801121a:	d102      	bne.n	8011222 <_write_r+0x1e>
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	b103      	cbz	r3, 8011222 <_write_r+0x1e>
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	bd38      	pop	{r3, r4, r5, pc}
 8011224:	20003274 	.word	0x20003274

08011228 <_close_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d06      	ldr	r5, [pc, #24]	; (8011244 <_close_r+0x1c>)
 801122c:	2300      	movs	r3, #0
 801122e:	4604      	mov	r4, r0
 8011230:	4608      	mov	r0, r1
 8011232:	602b      	str	r3, [r5, #0]
 8011234:	f7f7 f8df 	bl	80083f6 <_close>
 8011238:	1c43      	adds	r3, r0, #1
 801123a:	d102      	bne.n	8011242 <_close_r+0x1a>
 801123c:	682b      	ldr	r3, [r5, #0]
 801123e:	b103      	cbz	r3, 8011242 <_close_r+0x1a>
 8011240:	6023      	str	r3, [r4, #0]
 8011242:	bd38      	pop	{r3, r4, r5, pc}
 8011244:	20003274 	.word	0x20003274

08011248 <quorem>:
 8011248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	6903      	ldr	r3, [r0, #16]
 801124e:	690c      	ldr	r4, [r1, #16]
 8011250:	42a3      	cmp	r3, r4
 8011252:	4607      	mov	r7, r0
 8011254:	f2c0 8081 	blt.w	801135a <quorem+0x112>
 8011258:	3c01      	subs	r4, #1
 801125a:	f101 0814 	add.w	r8, r1, #20
 801125e:	f100 0514 	add.w	r5, r0, #20
 8011262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011266:	9301      	str	r3, [sp, #4]
 8011268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801126c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011270:	3301      	adds	r3, #1
 8011272:	429a      	cmp	r2, r3
 8011274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801127c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011280:	d331      	bcc.n	80112e6 <quorem+0x9e>
 8011282:	f04f 0e00 	mov.w	lr, #0
 8011286:	4640      	mov	r0, r8
 8011288:	46ac      	mov	ip, r5
 801128a:	46f2      	mov	sl, lr
 801128c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011290:	b293      	uxth	r3, r2
 8011292:	fb06 e303 	mla	r3, r6, r3, lr
 8011296:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801129a:	b29b      	uxth	r3, r3
 801129c:	ebaa 0303 	sub.w	r3, sl, r3
 80112a0:	0c12      	lsrs	r2, r2, #16
 80112a2:	f8dc a000 	ldr.w	sl, [ip]
 80112a6:	fb06 e202 	mla	r2, r6, r2, lr
 80112aa:	fa13 f38a 	uxtah	r3, r3, sl
 80112ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80112b2:	fa1f fa82 	uxth.w	sl, r2
 80112b6:	f8dc 2000 	ldr.w	r2, [ip]
 80112ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80112be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112c8:	4581      	cmp	r9, r0
 80112ca:	f84c 3b04 	str.w	r3, [ip], #4
 80112ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80112d2:	d2db      	bcs.n	801128c <quorem+0x44>
 80112d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80112d8:	b92b      	cbnz	r3, 80112e6 <quorem+0x9e>
 80112da:	9b01      	ldr	r3, [sp, #4]
 80112dc:	3b04      	subs	r3, #4
 80112de:	429d      	cmp	r5, r3
 80112e0:	461a      	mov	r2, r3
 80112e2:	d32e      	bcc.n	8011342 <quorem+0xfa>
 80112e4:	613c      	str	r4, [r7, #16]
 80112e6:	4638      	mov	r0, r7
 80112e8:	f001 fc8e 	bl	8012c08 <__mcmp>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	db24      	blt.n	801133a <quorem+0xf2>
 80112f0:	3601      	adds	r6, #1
 80112f2:	4628      	mov	r0, r5
 80112f4:	f04f 0c00 	mov.w	ip, #0
 80112f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80112fc:	f8d0 e000 	ldr.w	lr, [r0]
 8011300:	b293      	uxth	r3, r2
 8011302:	ebac 0303 	sub.w	r3, ip, r3
 8011306:	0c12      	lsrs	r2, r2, #16
 8011308:	fa13 f38e 	uxtah	r3, r3, lr
 801130c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011314:	b29b      	uxth	r3, r3
 8011316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801131a:	45c1      	cmp	r9, r8
 801131c:	f840 3b04 	str.w	r3, [r0], #4
 8011320:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011324:	d2e8      	bcs.n	80112f8 <quorem+0xb0>
 8011326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801132a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801132e:	b922      	cbnz	r2, 801133a <quorem+0xf2>
 8011330:	3b04      	subs	r3, #4
 8011332:	429d      	cmp	r5, r3
 8011334:	461a      	mov	r2, r3
 8011336:	d30a      	bcc.n	801134e <quorem+0x106>
 8011338:	613c      	str	r4, [r7, #16]
 801133a:	4630      	mov	r0, r6
 801133c:	b003      	add	sp, #12
 801133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011342:	6812      	ldr	r2, [r2, #0]
 8011344:	3b04      	subs	r3, #4
 8011346:	2a00      	cmp	r2, #0
 8011348:	d1cc      	bne.n	80112e4 <quorem+0x9c>
 801134a:	3c01      	subs	r4, #1
 801134c:	e7c7      	b.n	80112de <quorem+0x96>
 801134e:	6812      	ldr	r2, [r2, #0]
 8011350:	3b04      	subs	r3, #4
 8011352:	2a00      	cmp	r2, #0
 8011354:	d1f0      	bne.n	8011338 <quorem+0xf0>
 8011356:	3c01      	subs	r4, #1
 8011358:	e7eb      	b.n	8011332 <quorem+0xea>
 801135a:	2000      	movs	r0, #0
 801135c:	e7ee      	b.n	801133c <quorem+0xf4>
	...

08011360 <_dtoa_r>:
 8011360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	ed2d 8b02 	vpush	{d8}
 8011368:	ec57 6b10 	vmov	r6, r7, d0
 801136c:	b095      	sub	sp, #84	; 0x54
 801136e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011370:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011374:	9105      	str	r1, [sp, #20]
 8011376:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801137a:	4604      	mov	r4, r0
 801137c:	9209      	str	r2, [sp, #36]	; 0x24
 801137e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011380:	b975      	cbnz	r5, 80113a0 <_dtoa_r+0x40>
 8011382:	2010      	movs	r0, #16
 8011384:	f001 f95e 	bl	8012644 <malloc>
 8011388:	4602      	mov	r2, r0
 801138a:	6260      	str	r0, [r4, #36]	; 0x24
 801138c:	b920      	cbnz	r0, 8011398 <_dtoa_r+0x38>
 801138e:	4bb2      	ldr	r3, [pc, #712]	; (8011658 <_dtoa_r+0x2f8>)
 8011390:	21ea      	movs	r1, #234	; 0xea
 8011392:	48b2      	ldr	r0, [pc, #712]	; (801165c <_dtoa_r+0x2fc>)
 8011394:	f002 fc88 	bl	8013ca8 <__assert_func>
 8011398:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801139c:	6005      	str	r5, [r0, #0]
 801139e:	60c5      	str	r5, [r0, #12]
 80113a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113a2:	6819      	ldr	r1, [r3, #0]
 80113a4:	b151      	cbz	r1, 80113bc <_dtoa_r+0x5c>
 80113a6:	685a      	ldr	r2, [r3, #4]
 80113a8:	604a      	str	r2, [r1, #4]
 80113aa:	2301      	movs	r3, #1
 80113ac:	4093      	lsls	r3, r2
 80113ae:	608b      	str	r3, [r1, #8]
 80113b0:	4620      	mov	r0, r4
 80113b2:	f001 f9a1 	bl	80126f8 <_Bfree>
 80113b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	1e3b      	subs	r3, r7, #0
 80113be:	bfb9      	ittee	lt
 80113c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80113c4:	9303      	strlt	r3, [sp, #12]
 80113c6:	2300      	movge	r3, #0
 80113c8:	f8c8 3000 	strge.w	r3, [r8]
 80113cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80113d0:	4ba3      	ldr	r3, [pc, #652]	; (8011660 <_dtoa_r+0x300>)
 80113d2:	bfbc      	itt	lt
 80113d4:	2201      	movlt	r2, #1
 80113d6:	f8c8 2000 	strlt.w	r2, [r8]
 80113da:	ea33 0309 	bics.w	r3, r3, r9
 80113de:	d11b      	bne.n	8011418 <_dtoa_r+0xb8>
 80113e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80113e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80113e6:	6013      	str	r3, [r2, #0]
 80113e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113ec:	4333      	orrs	r3, r6
 80113ee:	f000 857a 	beq.w	8011ee6 <_dtoa_r+0xb86>
 80113f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113f4:	b963      	cbnz	r3, 8011410 <_dtoa_r+0xb0>
 80113f6:	4b9b      	ldr	r3, [pc, #620]	; (8011664 <_dtoa_r+0x304>)
 80113f8:	e024      	b.n	8011444 <_dtoa_r+0xe4>
 80113fa:	4b9b      	ldr	r3, [pc, #620]	; (8011668 <_dtoa_r+0x308>)
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	3308      	adds	r3, #8
 8011400:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	9800      	ldr	r0, [sp, #0]
 8011406:	b015      	add	sp, #84	; 0x54
 8011408:	ecbd 8b02 	vpop	{d8}
 801140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011410:	4b94      	ldr	r3, [pc, #592]	; (8011664 <_dtoa_r+0x304>)
 8011412:	9300      	str	r3, [sp, #0]
 8011414:	3303      	adds	r3, #3
 8011416:	e7f3      	b.n	8011400 <_dtoa_r+0xa0>
 8011418:	ed9d 7b02 	vldr	d7, [sp, #8]
 801141c:	2200      	movs	r2, #0
 801141e:	ec51 0b17 	vmov	r0, r1, d7
 8011422:	2300      	movs	r3, #0
 8011424:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011428:	f7ef fb5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801142c:	4680      	mov	r8, r0
 801142e:	b158      	cbz	r0, 8011448 <_dtoa_r+0xe8>
 8011430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011432:	2301      	movs	r3, #1
 8011434:	6013      	str	r3, [r2, #0]
 8011436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 8551 	beq.w	8011ee0 <_dtoa_r+0xb80>
 801143e:	488b      	ldr	r0, [pc, #556]	; (801166c <_dtoa_r+0x30c>)
 8011440:	6018      	str	r0, [r3, #0]
 8011442:	1e43      	subs	r3, r0, #1
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	e7dd      	b.n	8011404 <_dtoa_r+0xa4>
 8011448:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801144c:	aa12      	add	r2, sp, #72	; 0x48
 801144e:	a913      	add	r1, sp, #76	; 0x4c
 8011450:	4620      	mov	r0, r4
 8011452:	f001 fcf9 	bl	8012e48 <__d2b>
 8011456:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801145a:	4683      	mov	fp, r0
 801145c:	2d00      	cmp	r5, #0
 801145e:	d07c      	beq.n	801155a <_dtoa_r+0x1fa>
 8011460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011462:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801146a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801146e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011472:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801147a:	4b7d      	ldr	r3, [pc, #500]	; (8011670 <_dtoa_r+0x310>)
 801147c:	2200      	movs	r2, #0
 801147e:	4630      	mov	r0, r6
 8011480:	4639      	mov	r1, r7
 8011482:	f7ee ff11 	bl	80002a8 <__aeabi_dsub>
 8011486:	a36e      	add	r3, pc, #440	; (adr r3, 8011640 <_dtoa_r+0x2e0>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	f7ef f8c4 	bl	8000618 <__aeabi_dmul>
 8011490:	a36d      	add	r3, pc, #436	; (adr r3, 8011648 <_dtoa_r+0x2e8>)
 8011492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011496:	f7ee ff09 	bl	80002ac <__adddf3>
 801149a:	4606      	mov	r6, r0
 801149c:	4628      	mov	r0, r5
 801149e:	460f      	mov	r7, r1
 80114a0:	f7ef f850 	bl	8000544 <__aeabi_i2d>
 80114a4:	a36a      	add	r3, pc, #424	; (adr r3, 8011650 <_dtoa_r+0x2f0>)
 80114a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114aa:	f7ef f8b5 	bl	8000618 <__aeabi_dmul>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	4630      	mov	r0, r6
 80114b4:	4639      	mov	r1, r7
 80114b6:	f7ee fef9 	bl	80002ac <__adddf3>
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	f7ef fb5b 	bl	8000b78 <__aeabi_d2iz>
 80114c2:	2200      	movs	r2, #0
 80114c4:	4682      	mov	sl, r0
 80114c6:	2300      	movs	r3, #0
 80114c8:	4630      	mov	r0, r6
 80114ca:	4639      	mov	r1, r7
 80114cc:	f7ef fb16 	bl	8000afc <__aeabi_dcmplt>
 80114d0:	b148      	cbz	r0, 80114e6 <_dtoa_r+0x186>
 80114d2:	4650      	mov	r0, sl
 80114d4:	f7ef f836 	bl	8000544 <__aeabi_i2d>
 80114d8:	4632      	mov	r2, r6
 80114da:	463b      	mov	r3, r7
 80114dc:	f7ef fb04 	bl	8000ae8 <__aeabi_dcmpeq>
 80114e0:	b908      	cbnz	r0, 80114e6 <_dtoa_r+0x186>
 80114e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114e6:	f1ba 0f16 	cmp.w	sl, #22
 80114ea:	d854      	bhi.n	8011596 <_dtoa_r+0x236>
 80114ec:	4b61      	ldr	r3, [pc, #388]	; (8011674 <_dtoa_r+0x314>)
 80114ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114fa:	f7ef faff 	bl	8000afc <__aeabi_dcmplt>
 80114fe:	2800      	cmp	r0, #0
 8011500:	d04b      	beq.n	801159a <_dtoa_r+0x23a>
 8011502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011506:	2300      	movs	r3, #0
 8011508:	930e      	str	r3, [sp, #56]	; 0x38
 801150a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801150c:	1b5d      	subs	r5, r3, r5
 801150e:	1e6b      	subs	r3, r5, #1
 8011510:	9304      	str	r3, [sp, #16]
 8011512:	bf43      	ittte	mi
 8011514:	2300      	movmi	r3, #0
 8011516:	f1c5 0801 	rsbmi	r8, r5, #1
 801151a:	9304      	strmi	r3, [sp, #16]
 801151c:	f04f 0800 	movpl.w	r8, #0
 8011520:	f1ba 0f00 	cmp.w	sl, #0
 8011524:	db3b      	blt.n	801159e <_dtoa_r+0x23e>
 8011526:	9b04      	ldr	r3, [sp, #16]
 8011528:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801152c:	4453      	add	r3, sl
 801152e:	9304      	str	r3, [sp, #16]
 8011530:	2300      	movs	r3, #0
 8011532:	9306      	str	r3, [sp, #24]
 8011534:	9b05      	ldr	r3, [sp, #20]
 8011536:	2b09      	cmp	r3, #9
 8011538:	d869      	bhi.n	801160e <_dtoa_r+0x2ae>
 801153a:	2b05      	cmp	r3, #5
 801153c:	bfc4      	itt	gt
 801153e:	3b04      	subgt	r3, #4
 8011540:	9305      	strgt	r3, [sp, #20]
 8011542:	9b05      	ldr	r3, [sp, #20]
 8011544:	f1a3 0302 	sub.w	r3, r3, #2
 8011548:	bfcc      	ite	gt
 801154a:	2500      	movgt	r5, #0
 801154c:	2501      	movle	r5, #1
 801154e:	2b03      	cmp	r3, #3
 8011550:	d869      	bhi.n	8011626 <_dtoa_r+0x2c6>
 8011552:	e8df f003 	tbb	[pc, r3]
 8011556:	4e2c      	.short	0x4e2c
 8011558:	5a4c      	.short	0x5a4c
 801155a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801155e:	441d      	add	r5, r3
 8011560:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011564:	2b20      	cmp	r3, #32
 8011566:	bfc1      	itttt	gt
 8011568:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801156c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011570:	fa09 f303 	lslgt.w	r3, r9, r3
 8011574:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011578:	bfda      	itte	le
 801157a:	f1c3 0320 	rsble	r3, r3, #32
 801157e:	fa06 f003 	lslle.w	r0, r6, r3
 8011582:	4318      	orrgt	r0, r3
 8011584:	f7ee ffce 	bl	8000524 <__aeabi_ui2d>
 8011588:	2301      	movs	r3, #1
 801158a:	4606      	mov	r6, r0
 801158c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011590:	3d01      	subs	r5, #1
 8011592:	9310      	str	r3, [sp, #64]	; 0x40
 8011594:	e771      	b.n	801147a <_dtoa_r+0x11a>
 8011596:	2301      	movs	r3, #1
 8011598:	e7b6      	b.n	8011508 <_dtoa_r+0x1a8>
 801159a:	900e      	str	r0, [sp, #56]	; 0x38
 801159c:	e7b5      	b.n	801150a <_dtoa_r+0x1aa>
 801159e:	f1ca 0300 	rsb	r3, sl, #0
 80115a2:	9306      	str	r3, [sp, #24]
 80115a4:	2300      	movs	r3, #0
 80115a6:	eba8 080a 	sub.w	r8, r8, sl
 80115aa:	930d      	str	r3, [sp, #52]	; 0x34
 80115ac:	e7c2      	b.n	8011534 <_dtoa_r+0x1d4>
 80115ae:	2300      	movs	r3, #0
 80115b0:	9308      	str	r3, [sp, #32]
 80115b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	dc39      	bgt.n	801162c <_dtoa_r+0x2cc>
 80115b8:	f04f 0901 	mov.w	r9, #1
 80115bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80115c0:	464b      	mov	r3, r9
 80115c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80115c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80115c8:	2200      	movs	r2, #0
 80115ca:	6042      	str	r2, [r0, #4]
 80115cc:	2204      	movs	r2, #4
 80115ce:	f102 0614 	add.w	r6, r2, #20
 80115d2:	429e      	cmp	r6, r3
 80115d4:	6841      	ldr	r1, [r0, #4]
 80115d6:	d92f      	bls.n	8011638 <_dtoa_r+0x2d8>
 80115d8:	4620      	mov	r0, r4
 80115da:	f001 f84d 	bl	8012678 <_Balloc>
 80115de:	9000      	str	r0, [sp, #0]
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d14b      	bne.n	801167c <_dtoa_r+0x31c>
 80115e4:	4b24      	ldr	r3, [pc, #144]	; (8011678 <_dtoa_r+0x318>)
 80115e6:	4602      	mov	r2, r0
 80115e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80115ec:	e6d1      	b.n	8011392 <_dtoa_r+0x32>
 80115ee:	2301      	movs	r3, #1
 80115f0:	e7de      	b.n	80115b0 <_dtoa_r+0x250>
 80115f2:	2300      	movs	r3, #0
 80115f4:	9308      	str	r3, [sp, #32]
 80115f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f8:	eb0a 0903 	add.w	r9, sl, r3
 80115fc:	f109 0301 	add.w	r3, r9, #1
 8011600:	2b01      	cmp	r3, #1
 8011602:	9301      	str	r3, [sp, #4]
 8011604:	bfb8      	it	lt
 8011606:	2301      	movlt	r3, #1
 8011608:	e7dd      	b.n	80115c6 <_dtoa_r+0x266>
 801160a:	2301      	movs	r3, #1
 801160c:	e7f2      	b.n	80115f4 <_dtoa_r+0x294>
 801160e:	2501      	movs	r5, #1
 8011610:	2300      	movs	r3, #0
 8011612:	9305      	str	r3, [sp, #20]
 8011614:	9508      	str	r5, [sp, #32]
 8011616:	f04f 39ff 	mov.w	r9, #4294967295
 801161a:	2200      	movs	r2, #0
 801161c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011620:	2312      	movs	r3, #18
 8011622:	9209      	str	r2, [sp, #36]	; 0x24
 8011624:	e7cf      	b.n	80115c6 <_dtoa_r+0x266>
 8011626:	2301      	movs	r3, #1
 8011628:	9308      	str	r3, [sp, #32]
 801162a:	e7f4      	b.n	8011616 <_dtoa_r+0x2b6>
 801162c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011630:	f8cd 9004 	str.w	r9, [sp, #4]
 8011634:	464b      	mov	r3, r9
 8011636:	e7c6      	b.n	80115c6 <_dtoa_r+0x266>
 8011638:	3101      	adds	r1, #1
 801163a:	6041      	str	r1, [r0, #4]
 801163c:	0052      	lsls	r2, r2, #1
 801163e:	e7c6      	b.n	80115ce <_dtoa_r+0x26e>
 8011640:	636f4361 	.word	0x636f4361
 8011644:	3fd287a7 	.word	0x3fd287a7
 8011648:	8b60c8b3 	.word	0x8b60c8b3
 801164c:	3fc68a28 	.word	0x3fc68a28
 8011650:	509f79fb 	.word	0x509f79fb
 8011654:	3fd34413 	.word	0x3fd34413
 8011658:	08016b95 	.word	0x08016b95
 801165c:	08016bac 	.word	0x08016bac
 8011660:	7ff00000 	.word	0x7ff00000
 8011664:	08016b91 	.word	0x08016b91
 8011668:	08016b88 	.word	0x08016b88
 801166c:	08016e12 	.word	0x08016e12
 8011670:	3ff80000 	.word	0x3ff80000
 8011674:	08016d28 	.word	0x08016d28
 8011678:	08016c0b 	.word	0x08016c0b
 801167c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801167e:	9a00      	ldr	r2, [sp, #0]
 8011680:	601a      	str	r2, [r3, #0]
 8011682:	9b01      	ldr	r3, [sp, #4]
 8011684:	2b0e      	cmp	r3, #14
 8011686:	f200 80ad 	bhi.w	80117e4 <_dtoa_r+0x484>
 801168a:	2d00      	cmp	r5, #0
 801168c:	f000 80aa 	beq.w	80117e4 <_dtoa_r+0x484>
 8011690:	f1ba 0f00 	cmp.w	sl, #0
 8011694:	dd36      	ble.n	8011704 <_dtoa_r+0x3a4>
 8011696:	4ac3      	ldr	r2, [pc, #780]	; (80119a4 <_dtoa_r+0x644>)
 8011698:	f00a 030f 	and.w	r3, sl, #15
 801169c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80116a0:	ed93 7b00 	vldr	d7, [r3]
 80116a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80116a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80116ac:	eeb0 8a47 	vmov.f32	s16, s14
 80116b0:	eef0 8a67 	vmov.f32	s17, s15
 80116b4:	d016      	beq.n	80116e4 <_dtoa_r+0x384>
 80116b6:	4bbc      	ldr	r3, [pc, #752]	; (80119a8 <_dtoa_r+0x648>)
 80116b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80116c0:	f7ef f8d4 	bl	800086c <__aeabi_ddiv>
 80116c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116c8:	f007 070f 	and.w	r7, r7, #15
 80116cc:	2503      	movs	r5, #3
 80116ce:	4eb6      	ldr	r6, [pc, #728]	; (80119a8 <_dtoa_r+0x648>)
 80116d0:	b957      	cbnz	r7, 80116e8 <_dtoa_r+0x388>
 80116d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116d6:	ec53 2b18 	vmov	r2, r3, d8
 80116da:	f7ef f8c7 	bl	800086c <__aeabi_ddiv>
 80116de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116e2:	e029      	b.n	8011738 <_dtoa_r+0x3d8>
 80116e4:	2502      	movs	r5, #2
 80116e6:	e7f2      	b.n	80116ce <_dtoa_r+0x36e>
 80116e8:	07f9      	lsls	r1, r7, #31
 80116ea:	d508      	bpl.n	80116fe <_dtoa_r+0x39e>
 80116ec:	ec51 0b18 	vmov	r0, r1, d8
 80116f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80116f4:	f7ee ff90 	bl	8000618 <__aeabi_dmul>
 80116f8:	ec41 0b18 	vmov	d8, r0, r1
 80116fc:	3501      	adds	r5, #1
 80116fe:	107f      	asrs	r7, r7, #1
 8011700:	3608      	adds	r6, #8
 8011702:	e7e5      	b.n	80116d0 <_dtoa_r+0x370>
 8011704:	f000 80a6 	beq.w	8011854 <_dtoa_r+0x4f4>
 8011708:	f1ca 0600 	rsb	r6, sl, #0
 801170c:	4ba5      	ldr	r3, [pc, #660]	; (80119a4 <_dtoa_r+0x644>)
 801170e:	4fa6      	ldr	r7, [pc, #664]	; (80119a8 <_dtoa_r+0x648>)
 8011710:	f006 020f 	and.w	r2, r6, #15
 8011714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011720:	f7ee ff7a 	bl	8000618 <__aeabi_dmul>
 8011724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011728:	1136      	asrs	r6, r6, #4
 801172a:	2300      	movs	r3, #0
 801172c:	2502      	movs	r5, #2
 801172e:	2e00      	cmp	r6, #0
 8011730:	f040 8085 	bne.w	801183e <_dtoa_r+0x4de>
 8011734:	2b00      	cmp	r3, #0
 8011736:	d1d2      	bne.n	80116de <_dtoa_r+0x37e>
 8011738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801173a:	2b00      	cmp	r3, #0
 801173c:	f000 808c 	beq.w	8011858 <_dtoa_r+0x4f8>
 8011740:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011744:	4b99      	ldr	r3, [pc, #612]	; (80119ac <_dtoa_r+0x64c>)
 8011746:	2200      	movs	r2, #0
 8011748:	4630      	mov	r0, r6
 801174a:	4639      	mov	r1, r7
 801174c:	f7ef f9d6 	bl	8000afc <__aeabi_dcmplt>
 8011750:	2800      	cmp	r0, #0
 8011752:	f000 8081 	beq.w	8011858 <_dtoa_r+0x4f8>
 8011756:	9b01      	ldr	r3, [sp, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d07d      	beq.n	8011858 <_dtoa_r+0x4f8>
 801175c:	f1b9 0f00 	cmp.w	r9, #0
 8011760:	dd3c      	ble.n	80117dc <_dtoa_r+0x47c>
 8011762:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011766:	9307      	str	r3, [sp, #28]
 8011768:	2200      	movs	r2, #0
 801176a:	4b91      	ldr	r3, [pc, #580]	; (80119b0 <_dtoa_r+0x650>)
 801176c:	4630      	mov	r0, r6
 801176e:	4639      	mov	r1, r7
 8011770:	f7ee ff52 	bl	8000618 <__aeabi_dmul>
 8011774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011778:	3501      	adds	r5, #1
 801177a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801177e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011782:	4628      	mov	r0, r5
 8011784:	f7ee fede 	bl	8000544 <__aeabi_i2d>
 8011788:	4632      	mov	r2, r6
 801178a:	463b      	mov	r3, r7
 801178c:	f7ee ff44 	bl	8000618 <__aeabi_dmul>
 8011790:	4b88      	ldr	r3, [pc, #544]	; (80119b4 <_dtoa_r+0x654>)
 8011792:	2200      	movs	r2, #0
 8011794:	f7ee fd8a 	bl	80002ac <__adddf3>
 8011798:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801179c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117a0:	9303      	str	r3, [sp, #12]
 80117a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d15c      	bne.n	8011862 <_dtoa_r+0x502>
 80117a8:	4b83      	ldr	r3, [pc, #524]	; (80119b8 <_dtoa_r+0x658>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	4630      	mov	r0, r6
 80117ae:	4639      	mov	r1, r7
 80117b0:	f7ee fd7a 	bl	80002a8 <__aeabi_dsub>
 80117b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117b8:	4606      	mov	r6, r0
 80117ba:	460f      	mov	r7, r1
 80117bc:	f7ef f9bc 	bl	8000b38 <__aeabi_dcmpgt>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	f040 8296 	bne.w	8011cf2 <_dtoa_r+0x992>
 80117c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80117ca:	4630      	mov	r0, r6
 80117cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117d0:	4639      	mov	r1, r7
 80117d2:	f7ef f993 	bl	8000afc <__aeabi_dcmplt>
 80117d6:	2800      	cmp	r0, #0
 80117d8:	f040 8288 	bne.w	8011cec <_dtoa_r+0x98c>
 80117dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80117e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f2c0 8158 	blt.w	8011a9c <_dtoa_r+0x73c>
 80117ec:	f1ba 0f0e 	cmp.w	sl, #14
 80117f0:	f300 8154 	bgt.w	8011a9c <_dtoa_r+0x73c>
 80117f4:	4b6b      	ldr	r3, [pc, #428]	; (80119a4 <_dtoa_r+0x644>)
 80117f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80117fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011800:	2b00      	cmp	r3, #0
 8011802:	f280 80e3 	bge.w	80119cc <_dtoa_r+0x66c>
 8011806:	9b01      	ldr	r3, [sp, #4]
 8011808:	2b00      	cmp	r3, #0
 801180a:	f300 80df 	bgt.w	80119cc <_dtoa_r+0x66c>
 801180e:	f040 826d 	bne.w	8011cec <_dtoa_r+0x98c>
 8011812:	4b69      	ldr	r3, [pc, #420]	; (80119b8 <_dtoa_r+0x658>)
 8011814:	2200      	movs	r2, #0
 8011816:	4640      	mov	r0, r8
 8011818:	4649      	mov	r1, r9
 801181a:	f7ee fefd 	bl	8000618 <__aeabi_dmul>
 801181e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011822:	f7ef f97f 	bl	8000b24 <__aeabi_dcmpge>
 8011826:	9e01      	ldr	r6, [sp, #4]
 8011828:	4637      	mov	r7, r6
 801182a:	2800      	cmp	r0, #0
 801182c:	f040 8243 	bne.w	8011cb6 <_dtoa_r+0x956>
 8011830:	9d00      	ldr	r5, [sp, #0]
 8011832:	2331      	movs	r3, #49	; 0x31
 8011834:	f805 3b01 	strb.w	r3, [r5], #1
 8011838:	f10a 0a01 	add.w	sl, sl, #1
 801183c:	e23f      	b.n	8011cbe <_dtoa_r+0x95e>
 801183e:	07f2      	lsls	r2, r6, #31
 8011840:	d505      	bpl.n	801184e <_dtoa_r+0x4ee>
 8011842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011846:	f7ee fee7 	bl	8000618 <__aeabi_dmul>
 801184a:	3501      	adds	r5, #1
 801184c:	2301      	movs	r3, #1
 801184e:	1076      	asrs	r6, r6, #1
 8011850:	3708      	adds	r7, #8
 8011852:	e76c      	b.n	801172e <_dtoa_r+0x3ce>
 8011854:	2502      	movs	r5, #2
 8011856:	e76f      	b.n	8011738 <_dtoa_r+0x3d8>
 8011858:	9b01      	ldr	r3, [sp, #4]
 801185a:	f8cd a01c 	str.w	sl, [sp, #28]
 801185e:	930c      	str	r3, [sp, #48]	; 0x30
 8011860:	e78d      	b.n	801177e <_dtoa_r+0x41e>
 8011862:	9900      	ldr	r1, [sp, #0]
 8011864:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011868:	4b4e      	ldr	r3, [pc, #312]	; (80119a4 <_dtoa_r+0x644>)
 801186a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801186e:	4401      	add	r1, r0
 8011870:	9102      	str	r1, [sp, #8]
 8011872:	9908      	ldr	r1, [sp, #32]
 8011874:	eeb0 8a47 	vmov.f32	s16, s14
 8011878:	eef0 8a67 	vmov.f32	s17, s15
 801187c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011884:	2900      	cmp	r1, #0
 8011886:	d045      	beq.n	8011914 <_dtoa_r+0x5b4>
 8011888:	494c      	ldr	r1, [pc, #304]	; (80119bc <_dtoa_r+0x65c>)
 801188a:	2000      	movs	r0, #0
 801188c:	f7ee ffee 	bl	800086c <__aeabi_ddiv>
 8011890:	ec53 2b18 	vmov	r2, r3, d8
 8011894:	f7ee fd08 	bl	80002a8 <__aeabi_dsub>
 8011898:	9d00      	ldr	r5, [sp, #0]
 801189a:	ec41 0b18 	vmov	d8, r0, r1
 801189e:	4639      	mov	r1, r7
 80118a0:	4630      	mov	r0, r6
 80118a2:	f7ef f969 	bl	8000b78 <__aeabi_d2iz>
 80118a6:	900c      	str	r0, [sp, #48]	; 0x30
 80118a8:	f7ee fe4c 	bl	8000544 <__aeabi_i2d>
 80118ac:	4602      	mov	r2, r0
 80118ae:	460b      	mov	r3, r1
 80118b0:	4630      	mov	r0, r6
 80118b2:	4639      	mov	r1, r7
 80118b4:	f7ee fcf8 	bl	80002a8 <__aeabi_dsub>
 80118b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118ba:	3330      	adds	r3, #48	; 0x30
 80118bc:	f805 3b01 	strb.w	r3, [r5], #1
 80118c0:	ec53 2b18 	vmov	r2, r3, d8
 80118c4:	4606      	mov	r6, r0
 80118c6:	460f      	mov	r7, r1
 80118c8:	f7ef f918 	bl	8000afc <__aeabi_dcmplt>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	d165      	bne.n	801199c <_dtoa_r+0x63c>
 80118d0:	4632      	mov	r2, r6
 80118d2:	463b      	mov	r3, r7
 80118d4:	4935      	ldr	r1, [pc, #212]	; (80119ac <_dtoa_r+0x64c>)
 80118d6:	2000      	movs	r0, #0
 80118d8:	f7ee fce6 	bl	80002a8 <__aeabi_dsub>
 80118dc:	ec53 2b18 	vmov	r2, r3, d8
 80118e0:	f7ef f90c 	bl	8000afc <__aeabi_dcmplt>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	f040 80b9 	bne.w	8011a5c <_dtoa_r+0x6fc>
 80118ea:	9b02      	ldr	r3, [sp, #8]
 80118ec:	429d      	cmp	r5, r3
 80118ee:	f43f af75 	beq.w	80117dc <_dtoa_r+0x47c>
 80118f2:	4b2f      	ldr	r3, [pc, #188]	; (80119b0 <_dtoa_r+0x650>)
 80118f4:	ec51 0b18 	vmov	r0, r1, d8
 80118f8:	2200      	movs	r2, #0
 80118fa:	f7ee fe8d 	bl	8000618 <__aeabi_dmul>
 80118fe:	4b2c      	ldr	r3, [pc, #176]	; (80119b0 <_dtoa_r+0x650>)
 8011900:	ec41 0b18 	vmov	d8, r0, r1
 8011904:	2200      	movs	r2, #0
 8011906:	4630      	mov	r0, r6
 8011908:	4639      	mov	r1, r7
 801190a:	f7ee fe85 	bl	8000618 <__aeabi_dmul>
 801190e:	4606      	mov	r6, r0
 8011910:	460f      	mov	r7, r1
 8011912:	e7c4      	b.n	801189e <_dtoa_r+0x53e>
 8011914:	ec51 0b17 	vmov	r0, r1, d7
 8011918:	f7ee fe7e 	bl	8000618 <__aeabi_dmul>
 801191c:	9b02      	ldr	r3, [sp, #8]
 801191e:	9d00      	ldr	r5, [sp, #0]
 8011920:	930c      	str	r3, [sp, #48]	; 0x30
 8011922:	ec41 0b18 	vmov	d8, r0, r1
 8011926:	4639      	mov	r1, r7
 8011928:	4630      	mov	r0, r6
 801192a:	f7ef f925 	bl	8000b78 <__aeabi_d2iz>
 801192e:	9011      	str	r0, [sp, #68]	; 0x44
 8011930:	f7ee fe08 	bl	8000544 <__aeabi_i2d>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	4630      	mov	r0, r6
 801193a:	4639      	mov	r1, r7
 801193c:	f7ee fcb4 	bl	80002a8 <__aeabi_dsub>
 8011940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011942:	3330      	adds	r3, #48	; 0x30
 8011944:	f805 3b01 	strb.w	r3, [r5], #1
 8011948:	9b02      	ldr	r3, [sp, #8]
 801194a:	429d      	cmp	r5, r3
 801194c:	4606      	mov	r6, r0
 801194e:	460f      	mov	r7, r1
 8011950:	f04f 0200 	mov.w	r2, #0
 8011954:	d134      	bne.n	80119c0 <_dtoa_r+0x660>
 8011956:	4b19      	ldr	r3, [pc, #100]	; (80119bc <_dtoa_r+0x65c>)
 8011958:	ec51 0b18 	vmov	r0, r1, d8
 801195c:	f7ee fca6 	bl	80002ac <__adddf3>
 8011960:	4602      	mov	r2, r0
 8011962:	460b      	mov	r3, r1
 8011964:	4630      	mov	r0, r6
 8011966:	4639      	mov	r1, r7
 8011968:	f7ef f8e6 	bl	8000b38 <__aeabi_dcmpgt>
 801196c:	2800      	cmp	r0, #0
 801196e:	d175      	bne.n	8011a5c <_dtoa_r+0x6fc>
 8011970:	ec53 2b18 	vmov	r2, r3, d8
 8011974:	4911      	ldr	r1, [pc, #68]	; (80119bc <_dtoa_r+0x65c>)
 8011976:	2000      	movs	r0, #0
 8011978:	f7ee fc96 	bl	80002a8 <__aeabi_dsub>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4630      	mov	r0, r6
 8011982:	4639      	mov	r1, r7
 8011984:	f7ef f8ba 	bl	8000afc <__aeabi_dcmplt>
 8011988:	2800      	cmp	r0, #0
 801198a:	f43f af27 	beq.w	80117dc <_dtoa_r+0x47c>
 801198e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011990:	1e6b      	subs	r3, r5, #1
 8011992:	930c      	str	r3, [sp, #48]	; 0x30
 8011994:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011998:	2b30      	cmp	r3, #48	; 0x30
 801199a:	d0f8      	beq.n	801198e <_dtoa_r+0x62e>
 801199c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80119a0:	e04a      	b.n	8011a38 <_dtoa_r+0x6d8>
 80119a2:	bf00      	nop
 80119a4:	08016d28 	.word	0x08016d28
 80119a8:	08016d00 	.word	0x08016d00
 80119ac:	3ff00000 	.word	0x3ff00000
 80119b0:	40240000 	.word	0x40240000
 80119b4:	401c0000 	.word	0x401c0000
 80119b8:	40140000 	.word	0x40140000
 80119bc:	3fe00000 	.word	0x3fe00000
 80119c0:	4baf      	ldr	r3, [pc, #700]	; (8011c80 <_dtoa_r+0x920>)
 80119c2:	f7ee fe29 	bl	8000618 <__aeabi_dmul>
 80119c6:	4606      	mov	r6, r0
 80119c8:	460f      	mov	r7, r1
 80119ca:	e7ac      	b.n	8011926 <_dtoa_r+0x5c6>
 80119cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80119d0:	9d00      	ldr	r5, [sp, #0]
 80119d2:	4642      	mov	r2, r8
 80119d4:	464b      	mov	r3, r9
 80119d6:	4630      	mov	r0, r6
 80119d8:	4639      	mov	r1, r7
 80119da:	f7ee ff47 	bl	800086c <__aeabi_ddiv>
 80119de:	f7ef f8cb 	bl	8000b78 <__aeabi_d2iz>
 80119e2:	9002      	str	r0, [sp, #8]
 80119e4:	f7ee fdae 	bl	8000544 <__aeabi_i2d>
 80119e8:	4642      	mov	r2, r8
 80119ea:	464b      	mov	r3, r9
 80119ec:	f7ee fe14 	bl	8000618 <__aeabi_dmul>
 80119f0:	4602      	mov	r2, r0
 80119f2:	460b      	mov	r3, r1
 80119f4:	4630      	mov	r0, r6
 80119f6:	4639      	mov	r1, r7
 80119f8:	f7ee fc56 	bl	80002a8 <__aeabi_dsub>
 80119fc:	9e02      	ldr	r6, [sp, #8]
 80119fe:	9f01      	ldr	r7, [sp, #4]
 8011a00:	3630      	adds	r6, #48	; 0x30
 8011a02:	f805 6b01 	strb.w	r6, [r5], #1
 8011a06:	9e00      	ldr	r6, [sp, #0]
 8011a08:	1bae      	subs	r6, r5, r6
 8011a0a:	42b7      	cmp	r7, r6
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	d137      	bne.n	8011a82 <_dtoa_r+0x722>
 8011a12:	f7ee fc4b 	bl	80002ac <__adddf3>
 8011a16:	4642      	mov	r2, r8
 8011a18:	464b      	mov	r3, r9
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	460f      	mov	r7, r1
 8011a1e:	f7ef f88b 	bl	8000b38 <__aeabi_dcmpgt>
 8011a22:	b9c8      	cbnz	r0, 8011a58 <_dtoa_r+0x6f8>
 8011a24:	4642      	mov	r2, r8
 8011a26:	464b      	mov	r3, r9
 8011a28:	4630      	mov	r0, r6
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	f7ef f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a30:	b110      	cbz	r0, 8011a38 <_dtoa_r+0x6d8>
 8011a32:	9b02      	ldr	r3, [sp, #8]
 8011a34:	07d9      	lsls	r1, r3, #31
 8011a36:	d40f      	bmi.n	8011a58 <_dtoa_r+0x6f8>
 8011a38:	4620      	mov	r0, r4
 8011a3a:	4659      	mov	r1, fp
 8011a3c:	f000 fe5c 	bl	80126f8 <_Bfree>
 8011a40:	2300      	movs	r3, #0
 8011a42:	702b      	strb	r3, [r5, #0]
 8011a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a46:	f10a 0001 	add.w	r0, sl, #1
 8011a4a:	6018      	str	r0, [r3, #0]
 8011a4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f43f acd8 	beq.w	8011404 <_dtoa_r+0xa4>
 8011a54:	601d      	str	r5, [r3, #0]
 8011a56:	e4d5      	b.n	8011404 <_dtoa_r+0xa4>
 8011a58:	f8cd a01c 	str.w	sl, [sp, #28]
 8011a5c:	462b      	mov	r3, r5
 8011a5e:	461d      	mov	r5, r3
 8011a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a64:	2a39      	cmp	r2, #57	; 0x39
 8011a66:	d108      	bne.n	8011a7a <_dtoa_r+0x71a>
 8011a68:	9a00      	ldr	r2, [sp, #0]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d1f7      	bne.n	8011a5e <_dtoa_r+0x6fe>
 8011a6e:	9a07      	ldr	r2, [sp, #28]
 8011a70:	9900      	ldr	r1, [sp, #0]
 8011a72:	3201      	adds	r2, #1
 8011a74:	9207      	str	r2, [sp, #28]
 8011a76:	2230      	movs	r2, #48	; 0x30
 8011a78:	700a      	strb	r2, [r1, #0]
 8011a7a:	781a      	ldrb	r2, [r3, #0]
 8011a7c:	3201      	adds	r2, #1
 8011a7e:	701a      	strb	r2, [r3, #0]
 8011a80:	e78c      	b.n	801199c <_dtoa_r+0x63c>
 8011a82:	4b7f      	ldr	r3, [pc, #508]	; (8011c80 <_dtoa_r+0x920>)
 8011a84:	2200      	movs	r2, #0
 8011a86:	f7ee fdc7 	bl	8000618 <__aeabi_dmul>
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	4606      	mov	r6, r0
 8011a90:	460f      	mov	r7, r1
 8011a92:	f7ef f829 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d09b      	beq.n	80119d2 <_dtoa_r+0x672>
 8011a9a:	e7cd      	b.n	8011a38 <_dtoa_r+0x6d8>
 8011a9c:	9a08      	ldr	r2, [sp, #32]
 8011a9e:	2a00      	cmp	r2, #0
 8011aa0:	f000 80c4 	beq.w	8011c2c <_dtoa_r+0x8cc>
 8011aa4:	9a05      	ldr	r2, [sp, #20]
 8011aa6:	2a01      	cmp	r2, #1
 8011aa8:	f300 80a8 	bgt.w	8011bfc <_dtoa_r+0x89c>
 8011aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011aae:	2a00      	cmp	r2, #0
 8011ab0:	f000 80a0 	beq.w	8011bf4 <_dtoa_r+0x894>
 8011ab4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011ab8:	9e06      	ldr	r6, [sp, #24]
 8011aba:	4645      	mov	r5, r8
 8011abc:	9a04      	ldr	r2, [sp, #16]
 8011abe:	2101      	movs	r1, #1
 8011ac0:	441a      	add	r2, r3
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	4498      	add	r8, r3
 8011ac6:	9204      	str	r2, [sp, #16]
 8011ac8:	f000 ff1c 	bl	8012904 <__i2b>
 8011acc:	4607      	mov	r7, r0
 8011ace:	2d00      	cmp	r5, #0
 8011ad0:	dd0b      	ble.n	8011aea <_dtoa_r+0x78a>
 8011ad2:	9b04      	ldr	r3, [sp, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	dd08      	ble.n	8011aea <_dtoa_r+0x78a>
 8011ad8:	42ab      	cmp	r3, r5
 8011ada:	9a04      	ldr	r2, [sp, #16]
 8011adc:	bfa8      	it	ge
 8011ade:	462b      	movge	r3, r5
 8011ae0:	eba8 0803 	sub.w	r8, r8, r3
 8011ae4:	1aed      	subs	r5, r5, r3
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	9304      	str	r3, [sp, #16]
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	b1fb      	cbz	r3, 8011b2e <_dtoa_r+0x7ce>
 8011aee:	9b08      	ldr	r3, [sp, #32]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 809f 	beq.w	8011c34 <_dtoa_r+0x8d4>
 8011af6:	2e00      	cmp	r6, #0
 8011af8:	dd11      	ble.n	8011b1e <_dtoa_r+0x7be>
 8011afa:	4639      	mov	r1, r7
 8011afc:	4632      	mov	r2, r6
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 ffbc 	bl	8012a7c <__pow5mult>
 8011b04:	465a      	mov	r2, fp
 8011b06:	4601      	mov	r1, r0
 8011b08:	4607      	mov	r7, r0
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f000 ff10 	bl	8012930 <__multiply>
 8011b10:	4659      	mov	r1, fp
 8011b12:	9007      	str	r0, [sp, #28]
 8011b14:	4620      	mov	r0, r4
 8011b16:	f000 fdef 	bl	80126f8 <_Bfree>
 8011b1a:	9b07      	ldr	r3, [sp, #28]
 8011b1c:	469b      	mov	fp, r3
 8011b1e:	9b06      	ldr	r3, [sp, #24]
 8011b20:	1b9a      	subs	r2, r3, r6
 8011b22:	d004      	beq.n	8011b2e <_dtoa_r+0x7ce>
 8011b24:	4659      	mov	r1, fp
 8011b26:	4620      	mov	r0, r4
 8011b28:	f000 ffa8 	bl	8012a7c <__pow5mult>
 8011b2c:	4683      	mov	fp, r0
 8011b2e:	2101      	movs	r1, #1
 8011b30:	4620      	mov	r0, r4
 8011b32:	f000 fee7 	bl	8012904 <__i2b>
 8011b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	dd7c      	ble.n	8011c38 <_dtoa_r+0x8d8>
 8011b3e:	461a      	mov	r2, r3
 8011b40:	4601      	mov	r1, r0
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 ff9a 	bl	8012a7c <__pow5mult>
 8011b48:	9b05      	ldr	r3, [sp, #20]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	dd76      	ble.n	8011c3e <_dtoa_r+0x8de>
 8011b50:	2300      	movs	r3, #0
 8011b52:	9306      	str	r3, [sp, #24]
 8011b54:	6933      	ldr	r3, [r6, #16]
 8011b56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011b5a:	6918      	ldr	r0, [r3, #16]
 8011b5c:	f000 fe82 	bl	8012864 <__hi0bits>
 8011b60:	f1c0 0020 	rsb	r0, r0, #32
 8011b64:	9b04      	ldr	r3, [sp, #16]
 8011b66:	4418      	add	r0, r3
 8011b68:	f010 001f 	ands.w	r0, r0, #31
 8011b6c:	f000 8086 	beq.w	8011c7c <_dtoa_r+0x91c>
 8011b70:	f1c0 0320 	rsb	r3, r0, #32
 8011b74:	2b04      	cmp	r3, #4
 8011b76:	dd7f      	ble.n	8011c78 <_dtoa_r+0x918>
 8011b78:	f1c0 001c 	rsb	r0, r0, #28
 8011b7c:	9b04      	ldr	r3, [sp, #16]
 8011b7e:	4403      	add	r3, r0
 8011b80:	4480      	add	r8, r0
 8011b82:	4405      	add	r5, r0
 8011b84:	9304      	str	r3, [sp, #16]
 8011b86:	f1b8 0f00 	cmp.w	r8, #0
 8011b8a:	dd05      	ble.n	8011b98 <_dtoa_r+0x838>
 8011b8c:	4659      	mov	r1, fp
 8011b8e:	4642      	mov	r2, r8
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 ffcd 	bl	8012b30 <__lshift>
 8011b96:	4683      	mov	fp, r0
 8011b98:	9b04      	ldr	r3, [sp, #16]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	dd05      	ble.n	8011baa <_dtoa_r+0x84a>
 8011b9e:	4631      	mov	r1, r6
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f000 ffc4 	bl	8012b30 <__lshift>
 8011ba8:	4606      	mov	r6, r0
 8011baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d069      	beq.n	8011c84 <_dtoa_r+0x924>
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4658      	mov	r0, fp
 8011bb4:	f001 f828 	bl	8012c08 <__mcmp>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	da63      	bge.n	8011c84 <_dtoa_r+0x924>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	4659      	mov	r1, fp
 8011bc0:	220a      	movs	r2, #10
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f000 fdba 	bl	801273c <__multadd>
 8011bc8:	9b08      	ldr	r3, [sp, #32]
 8011bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011bce:	4683      	mov	fp, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f000 818f 	beq.w	8011ef4 <_dtoa_r+0xb94>
 8011bd6:	4639      	mov	r1, r7
 8011bd8:	2300      	movs	r3, #0
 8011bda:	220a      	movs	r2, #10
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 fdad 	bl	801273c <__multadd>
 8011be2:	f1b9 0f00 	cmp.w	r9, #0
 8011be6:	4607      	mov	r7, r0
 8011be8:	f300 808e 	bgt.w	8011d08 <_dtoa_r+0x9a8>
 8011bec:	9b05      	ldr	r3, [sp, #20]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	dc50      	bgt.n	8011c94 <_dtoa_r+0x934>
 8011bf2:	e089      	b.n	8011d08 <_dtoa_r+0x9a8>
 8011bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011bfa:	e75d      	b.n	8011ab8 <_dtoa_r+0x758>
 8011bfc:	9b01      	ldr	r3, [sp, #4]
 8011bfe:	1e5e      	subs	r6, r3, #1
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	42b3      	cmp	r3, r6
 8011c04:	bfbf      	itttt	lt
 8011c06:	9b06      	ldrlt	r3, [sp, #24]
 8011c08:	9606      	strlt	r6, [sp, #24]
 8011c0a:	1af2      	sublt	r2, r6, r3
 8011c0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011c0e:	bfb6      	itet	lt
 8011c10:	189b      	addlt	r3, r3, r2
 8011c12:	1b9e      	subge	r6, r3, r6
 8011c14:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	bfb8      	it	lt
 8011c1a:	2600      	movlt	r6, #0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	bfb5      	itete	lt
 8011c20:	eba8 0503 	sublt.w	r5, r8, r3
 8011c24:	9b01      	ldrge	r3, [sp, #4]
 8011c26:	2300      	movlt	r3, #0
 8011c28:	4645      	movge	r5, r8
 8011c2a:	e747      	b.n	8011abc <_dtoa_r+0x75c>
 8011c2c:	9e06      	ldr	r6, [sp, #24]
 8011c2e:	9f08      	ldr	r7, [sp, #32]
 8011c30:	4645      	mov	r5, r8
 8011c32:	e74c      	b.n	8011ace <_dtoa_r+0x76e>
 8011c34:	9a06      	ldr	r2, [sp, #24]
 8011c36:	e775      	b.n	8011b24 <_dtoa_r+0x7c4>
 8011c38:	9b05      	ldr	r3, [sp, #20]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	dc18      	bgt.n	8011c70 <_dtoa_r+0x910>
 8011c3e:	9b02      	ldr	r3, [sp, #8]
 8011c40:	b9b3      	cbnz	r3, 8011c70 <_dtoa_r+0x910>
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c48:	b9a3      	cbnz	r3, 8011c74 <_dtoa_r+0x914>
 8011c4a:	9b03      	ldr	r3, [sp, #12]
 8011c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011c50:	0d1b      	lsrs	r3, r3, #20
 8011c52:	051b      	lsls	r3, r3, #20
 8011c54:	b12b      	cbz	r3, 8011c62 <_dtoa_r+0x902>
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	9304      	str	r3, [sp, #16]
 8011c5c:	f108 0801 	add.w	r8, r8, #1
 8011c60:	2301      	movs	r3, #1
 8011c62:	9306      	str	r3, [sp, #24]
 8011c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	f47f af74 	bne.w	8011b54 <_dtoa_r+0x7f4>
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	e779      	b.n	8011b64 <_dtoa_r+0x804>
 8011c70:	2300      	movs	r3, #0
 8011c72:	e7f6      	b.n	8011c62 <_dtoa_r+0x902>
 8011c74:	9b02      	ldr	r3, [sp, #8]
 8011c76:	e7f4      	b.n	8011c62 <_dtoa_r+0x902>
 8011c78:	d085      	beq.n	8011b86 <_dtoa_r+0x826>
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	301c      	adds	r0, #28
 8011c7e:	e77d      	b.n	8011b7c <_dtoa_r+0x81c>
 8011c80:	40240000 	.word	0x40240000
 8011c84:	9b01      	ldr	r3, [sp, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dc38      	bgt.n	8011cfc <_dtoa_r+0x99c>
 8011c8a:	9b05      	ldr	r3, [sp, #20]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	dd35      	ble.n	8011cfc <_dtoa_r+0x99c>
 8011c90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011c94:	f1b9 0f00 	cmp.w	r9, #0
 8011c98:	d10d      	bne.n	8011cb6 <_dtoa_r+0x956>
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	464b      	mov	r3, r9
 8011c9e:	2205      	movs	r2, #5
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f000 fd4b 	bl	801273c <__multadd>
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	4606      	mov	r6, r0
 8011caa:	4658      	mov	r0, fp
 8011cac:	f000 ffac 	bl	8012c08 <__mcmp>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f73f adbd 	bgt.w	8011830 <_dtoa_r+0x4d0>
 8011cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cb8:	9d00      	ldr	r5, [sp, #0]
 8011cba:	ea6f 0a03 	mvn.w	sl, r3
 8011cbe:	f04f 0800 	mov.w	r8, #0
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f000 fd17 	bl	80126f8 <_Bfree>
 8011cca:	2f00      	cmp	r7, #0
 8011ccc:	f43f aeb4 	beq.w	8011a38 <_dtoa_r+0x6d8>
 8011cd0:	f1b8 0f00 	cmp.w	r8, #0
 8011cd4:	d005      	beq.n	8011ce2 <_dtoa_r+0x982>
 8011cd6:	45b8      	cmp	r8, r7
 8011cd8:	d003      	beq.n	8011ce2 <_dtoa_r+0x982>
 8011cda:	4641      	mov	r1, r8
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 fd0b 	bl	80126f8 <_Bfree>
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f000 fd07 	bl	80126f8 <_Bfree>
 8011cea:	e6a5      	b.n	8011a38 <_dtoa_r+0x6d8>
 8011cec:	2600      	movs	r6, #0
 8011cee:	4637      	mov	r7, r6
 8011cf0:	e7e1      	b.n	8011cb6 <_dtoa_r+0x956>
 8011cf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011cf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011cf8:	4637      	mov	r7, r6
 8011cfa:	e599      	b.n	8011830 <_dtoa_r+0x4d0>
 8011cfc:	9b08      	ldr	r3, [sp, #32]
 8011cfe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 80fd 	beq.w	8011f02 <_dtoa_r+0xba2>
 8011d08:	2d00      	cmp	r5, #0
 8011d0a:	dd05      	ble.n	8011d18 <_dtoa_r+0x9b8>
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	462a      	mov	r2, r5
 8011d10:	4620      	mov	r0, r4
 8011d12:	f000 ff0d 	bl	8012b30 <__lshift>
 8011d16:	4607      	mov	r7, r0
 8011d18:	9b06      	ldr	r3, [sp, #24]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d05c      	beq.n	8011dd8 <_dtoa_r+0xa78>
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	4620      	mov	r0, r4
 8011d22:	f000 fca9 	bl	8012678 <_Balloc>
 8011d26:	4605      	mov	r5, r0
 8011d28:	b928      	cbnz	r0, 8011d36 <_dtoa_r+0x9d6>
 8011d2a:	4b80      	ldr	r3, [pc, #512]	; (8011f2c <_dtoa_r+0xbcc>)
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011d32:	f7ff bb2e 	b.w	8011392 <_dtoa_r+0x32>
 8011d36:	693a      	ldr	r2, [r7, #16]
 8011d38:	3202      	adds	r2, #2
 8011d3a:	0092      	lsls	r2, r2, #2
 8011d3c:	f107 010c 	add.w	r1, r7, #12
 8011d40:	300c      	adds	r0, #12
 8011d42:	f7fd fc6b 	bl	800f61c <memcpy>
 8011d46:	2201      	movs	r2, #1
 8011d48:	4629      	mov	r1, r5
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 fef0 	bl	8012b30 <__lshift>
 8011d50:	9b00      	ldr	r3, [sp, #0]
 8011d52:	3301      	adds	r3, #1
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	9b00      	ldr	r3, [sp, #0]
 8011d58:	444b      	add	r3, r9
 8011d5a:	9307      	str	r3, [sp, #28]
 8011d5c:	9b02      	ldr	r3, [sp, #8]
 8011d5e:	f003 0301 	and.w	r3, r3, #1
 8011d62:	46b8      	mov	r8, r7
 8011d64:	9306      	str	r3, [sp, #24]
 8011d66:	4607      	mov	r7, r0
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	4658      	mov	r0, fp
 8011d70:	9302      	str	r3, [sp, #8]
 8011d72:	f7ff fa69 	bl	8011248 <quorem>
 8011d76:	4603      	mov	r3, r0
 8011d78:	3330      	adds	r3, #48	; 0x30
 8011d7a:	9004      	str	r0, [sp, #16]
 8011d7c:	4641      	mov	r1, r8
 8011d7e:	4658      	mov	r0, fp
 8011d80:	9308      	str	r3, [sp, #32]
 8011d82:	f000 ff41 	bl	8012c08 <__mcmp>
 8011d86:	463a      	mov	r2, r7
 8011d88:	4681      	mov	r9, r0
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f000 ff57 	bl	8012c40 <__mdiff>
 8011d92:	68c2      	ldr	r2, [r0, #12]
 8011d94:	9b08      	ldr	r3, [sp, #32]
 8011d96:	4605      	mov	r5, r0
 8011d98:	bb02      	cbnz	r2, 8011ddc <_dtoa_r+0xa7c>
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	4658      	mov	r0, fp
 8011d9e:	f000 ff33 	bl	8012c08 <__mcmp>
 8011da2:	9b08      	ldr	r3, [sp, #32]
 8011da4:	4602      	mov	r2, r0
 8011da6:	4629      	mov	r1, r5
 8011da8:	4620      	mov	r0, r4
 8011daa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011dae:	f000 fca3 	bl	80126f8 <_Bfree>
 8011db2:	9b05      	ldr	r3, [sp, #20]
 8011db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011db6:	9d01      	ldr	r5, [sp, #4]
 8011db8:	ea43 0102 	orr.w	r1, r3, r2
 8011dbc:	9b06      	ldr	r3, [sp, #24]
 8011dbe:	430b      	orrs	r3, r1
 8011dc0:	9b08      	ldr	r3, [sp, #32]
 8011dc2:	d10d      	bne.n	8011de0 <_dtoa_r+0xa80>
 8011dc4:	2b39      	cmp	r3, #57	; 0x39
 8011dc6:	d029      	beq.n	8011e1c <_dtoa_r+0xabc>
 8011dc8:	f1b9 0f00 	cmp.w	r9, #0
 8011dcc:	dd01      	ble.n	8011dd2 <_dtoa_r+0xa72>
 8011dce:	9b04      	ldr	r3, [sp, #16]
 8011dd0:	3331      	adds	r3, #49	; 0x31
 8011dd2:	9a02      	ldr	r2, [sp, #8]
 8011dd4:	7013      	strb	r3, [r2, #0]
 8011dd6:	e774      	b.n	8011cc2 <_dtoa_r+0x962>
 8011dd8:	4638      	mov	r0, r7
 8011dda:	e7b9      	b.n	8011d50 <_dtoa_r+0x9f0>
 8011ddc:	2201      	movs	r2, #1
 8011dde:	e7e2      	b.n	8011da6 <_dtoa_r+0xa46>
 8011de0:	f1b9 0f00 	cmp.w	r9, #0
 8011de4:	db06      	blt.n	8011df4 <_dtoa_r+0xa94>
 8011de6:	9905      	ldr	r1, [sp, #20]
 8011de8:	ea41 0909 	orr.w	r9, r1, r9
 8011dec:	9906      	ldr	r1, [sp, #24]
 8011dee:	ea59 0101 	orrs.w	r1, r9, r1
 8011df2:	d120      	bne.n	8011e36 <_dtoa_r+0xad6>
 8011df4:	2a00      	cmp	r2, #0
 8011df6:	ddec      	ble.n	8011dd2 <_dtoa_r+0xa72>
 8011df8:	4659      	mov	r1, fp
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	9301      	str	r3, [sp, #4]
 8011e00:	f000 fe96 	bl	8012b30 <__lshift>
 8011e04:	4631      	mov	r1, r6
 8011e06:	4683      	mov	fp, r0
 8011e08:	f000 fefe 	bl	8012c08 <__mcmp>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	9b01      	ldr	r3, [sp, #4]
 8011e10:	dc02      	bgt.n	8011e18 <_dtoa_r+0xab8>
 8011e12:	d1de      	bne.n	8011dd2 <_dtoa_r+0xa72>
 8011e14:	07da      	lsls	r2, r3, #31
 8011e16:	d5dc      	bpl.n	8011dd2 <_dtoa_r+0xa72>
 8011e18:	2b39      	cmp	r3, #57	; 0x39
 8011e1a:	d1d8      	bne.n	8011dce <_dtoa_r+0xa6e>
 8011e1c:	9a02      	ldr	r2, [sp, #8]
 8011e1e:	2339      	movs	r3, #57	; 0x39
 8011e20:	7013      	strb	r3, [r2, #0]
 8011e22:	462b      	mov	r3, r5
 8011e24:	461d      	mov	r5, r3
 8011e26:	3b01      	subs	r3, #1
 8011e28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011e2c:	2a39      	cmp	r2, #57	; 0x39
 8011e2e:	d050      	beq.n	8011ed2 <_dtoa_r+0xb72>
 8011e30:	3201      	adds	r2, #1
 8011e32:	701a      	strb	r2, [r3, #0]
 8011e34:	e745      	b.n	8011cc2 <_dtoa_r+0x962>
 8011e36:	2a00      	cmp	r2, #0
 8011e38:	dd03      	ble.n	8011e42 <_dtoa_r+0xae2>
 8011e3a:	2b39      	cmp	r3, #57	; 0x39
 8011e3c:	d0ee      	beq.n	8011e1c <_dtoa_r+0xabc>
 8011e3e:	3301      	adds	r3, #1
 8011e40:	e7c7      	b.n	8011dd2 <_dtoa_r+0xa72>
 8011e42:	9a01      	ldr	r2, [sp, #4]
 8011e44:	9907      	ldr	r1, [sp, #28]
 8011e46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011e4a:	428a      	cmp	r2, r1
 8011e4c:	d02a      	beq.n	8011ea4 <_dtoa_r+0xb44>
 8011e4e:	4659      	mov	r1, fp
 8011e50:	2300      	movs	r3, #0
 8011e52:	220a      	movs	r2, #10
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 fc71 	bl	801273c <__multadd>
 8011e5a:	45b8      	cmp	r8, r7
 8011e5c:	4683      	mov	fp, r0
 8011e5e:	f04f 0300 	mov.w	r3, #0
 8011e62:	f04f 020a 	mov.w	r2, #10
 8011e66:	4641      	mov	r1, r8
 8011e68:	4620      	mov	r0, r4
 8011e6a:	d107      	bne.n	8011e7c <_dtoa_r+0xb1c>
 8011e6c:	f000 fc66 	bl	801273c <__multadd>
 8011e70:	4680      	mov	r8, r0
 8011e72:	4607      	mov	r7, r0
 8011e74:	9b01      	ldr	r3, [sp, #4]
 8011e76:	3301      	adds	r3, #1
 8011e78:	9301      	str	r3, [sp, #4]
 8011e7a:	e775      	b.n	8011d68 <_dtoa_r+0xa08>
 8011e7c:	f000 fc5e 	bl	801273c <__multadd>
 8011e80:	4639      	mov	r1, r7
 8011e82:	4680      	mov	r8, r0
 8011e84:	2300      	movs	r3, #0
 8011e86:	220a      	movs	r2, #10
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f000 fc57 	bl	801273c <__multadd>
 8011e8e:	4607      	mov	r7, r0
 8011e90:	e7f0      	b.n	8011e74 <_dtoa_r+0xb14>
 8011e92:	f1b9 0f00 	cmp.w	r9, #0
 8011e96:	9a00      	ldr	r2, [sp, #0]
 8011e98:	bfcc      	ite	gt
 8011e9a:	464d      	movgt	r5, r9
 8011e9c:	2501      	movle	r5, #1
 8011e9e:	4415      	add	r5, r2
 8011ea0:	f04f 0800 	mov.w	r8, #0
 8011ea4:	4659      	mov	r1, fp
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	f000 fe40 	bl	8012b30 <__lshift>
 8011eb0:	4631      	mov	r1, r6
 8011eb2:	4683      	mov	fp, r0
 8011eb4:	f000 fea8 	bl	8012c08 <__mcmp>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	dcb2      	bgt.n	8011e22 <_dtoa_r+0xac2>
 8011ebc:	d102      	bne.n	8011ec4 <_dtoa_r+0xb64>
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	07db      	lsls	r3, r3, #31
 8011ec2:	d4ae      	bmi.n	8011e22 <_dtoa_r+0xac2>
 8011ec4:	462b      	mov	r3, r5
 8011ec6:	461d      	mov	r5, r3
 8011ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ecc:	2a30      	cmp	r2, #48	; 0x30
 8011ece:	d0fa      	beq.n	8011ec6 <_dtoa_r+0xb66>
 8011ed0:	e6f7      	b.n	8011cc2 <_dtoa_r+0x962>
 8011ed2:	9a00      	ldr	r2, [sp, #0]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d1a5      	bne.n	8011e24 <_dtoa_r+0xac4>
 8011ed8:	f10a 0a01 	add.w	sl, sl, #1
 8011edc:	2331      	movs	r3, #49	; 0x31
 8011ede:	e779      	b.n	8011dd4 <_dtoa_r+0xa74>
 8011ee0:	4b13      	ldr	r3, [pc, #76]	; (8011f30 <_dtoa_r+0xbd0>)
 8011ee2:	f7ff baaf 	b.w	8011444 <_dtoa_r+0xe4>
 8011ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f47f aa86 	bne.w	80113fa <_dtoa_r+0x9a>
 8011eee:	4b11      	ldr	r3, [pc, #68]	; (8011f34 <_dtoa_r+0xbd4>)
 8011ef0:	f7ff baa8 	b.w	8011444 <_dtoa_r+0xe4>
 8011ef4:	f1b9 0f00 	cmp.w	r9, #0
 8011ef8:	dc03      	bgt.n	8011f02 <_dtoa_r+0xba2>
 8011efa:	9b05      	ldr	r3, [sp, #20]
 8011efc:	2b02      	cmp	r3, #2
 8011efe:	f73f aec9 	bgt.w	8011c94 <_dtoa_r+0x934>
 8011f02:	9d00      	ldr	r5, [sp, #0]
 8011f04:	4631      	mov	r1, r6
 8011f06:	4658      	mov	r0, fp
 8011f08:	f7ff f99e 	bl	8011248 <quorem>
 8011f0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011f10:	f805 3b01 	strb.w	r3, [r5], #1
 8011f14:	9a00      	ldr	r2, [sp, #0]
 8011f16:	1aaa      	subs	r2, r5, r2
 8011f18:	4591      	cmp	r9, r2
 8011f1a:	ddba      	ble.n	8011e92 <_dtoa_r+0xb32>
 8011f1c:	4659      	mov	r1, fp
 8011f1e:	2300      	movs	r3, #0
 8011f20:	220a      	movs	r2, #10
 8011f22:	4620      	mov	r0, r4
 8011f24:	f000 fc0a 	bl	801273c <__multadd>
 8011f28:	4683      	mov	fp, r0
 8011f2a:	e7eb      	b.n	8011f04 <_dtoa_r+0xba4>
 8011f2c:	08016c0b 	.word	0x08016c0b
 8011f30:	08016e11 	.word	0x08016e11
 8011f34:	08016b88 	.word	0x08016b88

08011f38 <rshift>:
 8011f38:	6903      	ldr	r3, [r0, #16]
 8011f3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011f46:	f100 0414 	add.w	r4, r0, #20
 8011f4a:	dd45      	ble.n	8011fd8 <rshift+0xa0>
 8011f4c:	f011 011f 	ands.w	r1, r1, #31
 8011f50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f58:	d10c      	bne.n	8011f74 <rshift+0x3c>
 8011f5a:	f100 0710 	add.w	r7, r0, #16
 8011f5e:	4629      	mov	r1, r5
 8011f60:	42b1      	cmp	r1, r6
 8011f62:	d334      	bcc.n	8011fce <rshift+0x96>
 8011f64:	1a9b      	subs	r3, r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	1eea      	subs	r2, r5, #3
 8011f6a:	4296      	cmp	r6, r2
 8011f6c:	bf38      	it	cc
 8011f6e:	2300      	movcc	r3, #0
 8011f70:	4423      	add	r3, r4
 8011f72:	e015      	b.n	8011fa0 <rshift+0x68>
 8011f74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f78:	f1c1 0820 	rsb	r8, r1, #32
 8011f7c:	40cf      	lsrs	r7, r1
 8011f7e:	f105 0e04 	add.w	lr, r5, #4
 8011f82:	46a1      	mov	r9, r4
 8011f84:	4576      	cmp	r6, lr
 8011f86:	46f4      	mov	ip, lr
 8011f88:	d815      	bhi.n	8011fb6 <rshift+0x7e>
 8011f8a:	1a9b      	subs	r3, r3, r2
 8011f8c:	009a      	lsls	r2, r3, #2
 8011f8e:	3a04      	subs	r2, #4
 8011f90:	3501      	adds	r5, #1
 8011f92:	42ae      	cmp	r6, r5
 8011f94:	bf38      	it	cc
 8011f96:	2200      	movcc	r2, #0
 8011f98:	18a3      	adds	r3, r4, r2
 8011f9a:	50a7      	str	r7, [r4, r2]
 8011f9c:	b107      	cbz	r7, 8011fa0 <rshift+0x68>
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	1b1a      	subs	r2, r3, r4
 8011fa2:	42a3      	cmp	r3, r4
 8011fa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011fa8:	bf08      	it	eq
 8011faa:	2300      	moveq	r3, #0
 8011fac:	6102      	str	r2, [r0, #16]
 8011fae:	bf08      	it	eq
 8011fb0:	6143      	streq	r3, [r0, #20]
 8011fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	f8dc c000 	ldr.w	ip, [ip]
 8011fba:	fa0c fc08 	lsl.w	ip, ip, r8
 8011fbe:	ea4c 0707 	orr.w	r7, ip, r7
 8011fc2:	f849 7b04 	str.w	r7, [r9], #4
 8011fc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011fca:	40cf      	lsrs	r7, r1
 8011fcc:	e7da      	b.n	8011f84 <rshift+0x4c>
 8011fce:	f851 cb04 	ldr.w	ip, [r1], #4
 8011fd2:	f847 cf04 	str.w	ip, [r7, #4]!
 8011fd6:	e7c3      	b.n	8011f60 <rshift+0x28>
 8011fd8:	4623      	mov	r3, r4
 8011fda:	e7e1      	b.n	8011fa0 <rshift+0x68>

08011fdc <__hexdig_fun>:
 8011fdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011fe0:	2b09      	cmp	r3, #9
 8011fe2:	d802      	bhi.n	8011fea <__hexdig_fun+0xe>
 8011fe4:	3820      	subs	r0, #32
 8011fe6:	b2c0      	uxtb	r0, r0
 8011fe8:	4770      	bx	lr
 8011fea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011fee:	2b05      	cmp	r3, #5
 8011ff0:	d801      	bhi.n	8011ff6 <__hexdig_fun+0x1a>
 8011ff2:	3847      	subs	r0, #71	; 0x47
 8011ff4:	e7f7      	b.n	8011fe6 <__hexdig_fun+0xa>
 8011ff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011ffa:	2b05      	cmp	r3, #5
 8011ffc:	d801      	bhi.n	8012002 <__hexdig_fun+0x26>
 8011ffe:	3827      	subs	r0, #39	; 0x27
 8012000:	e7f1      	b.n	8011fe6 <__hexdig_fun+0xa>
 8012002:	2000      	movs	r0, #0
 8012004:	4770      	bx	lr
	...

08012008 <__gethex>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	ed2d 8b02 	vpush	{d8}
 8012010:	b089      	sub	sp, #36	; 0x24
 8012012:	ee08 0a10 	vmov	s16, r0
 8012016:	9304      	str	r3, [sp, #16]
 8012018:	4bbc      	ldr	r3, [pc, #752]	; (801230c <__gethex+0x304>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	4618      	mov	r0, r3
 8012020:	468b      	mov	fp, r1
 8012022:	4690      	mov	r8, r2
 8012024:	f7ee f8de 	bl	80001e4 <strlen>
 8012028:	9b01      	ldr	r3, [sp, #4]
 801202a:	f8db 2000 	ldr.w	r2, [fp]
 801202e:	4403      	add	r3, r0
 8012030:	4682      	mov	sl, r0
 8012032:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012036:	9305      	str	r3, [sp, #20]
 8012038:	1c93      	adds	r3, r2, #2
 801203a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801203e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012042:	32fe      	adds	r2, #254	; 0xfe
 8012044:	18d1      	adds	r1, r2, r3
 8012046:	461f      	mov	r7, r3
 8012048:	f813 0b01 	ldrb.w	r0, [r3], #1
 801204c:	9100      	str	r1, [sp, #0]
 801204e:	2830      	cmp	r0, #48	; 0x30
 8012050:	d0f8      	beq.n	8012044 <__gethex+0x3c>
 8012052:	f7ff ffc3 	bl	8011fdc <__hexdig_fun>
 8012056:	4604      	mov	r4, r0
 8012058:	2800      	cmp	r0, #0
 801205a:	d13a      	bne.n	80120d2 <__gethex+0xca>
 801205c:	9901      	ldr	r1, [sp, #4]
 801205e:	4652      	mov	r2, sl
 8012060:	4638      	mov	r0, r7
 8012062:	f7fe fa0a 	bl	801047a <strncmp>
 8012066:	4605      	mov	r5, r0
 8012068:	2800      	cmp	r0, #0
 801206a:	d168      	bne.n	801213e <__gethex+0x136>
 801206c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012070:	eb07 060a 	add.w	r6, r7, sl
 8012074:	f7ff ffb2 	bl	8011fdc <__hexdig_fun>
 8012078:	2800      	cmp	r0, #0
 801207a:	d062      	beq.n	8012142 <__gethex+0x13a>
 801207c:	4633      	mov	r3, r6
 801207e:	7818      	ldrb	r0, [r3, #0]
 8012080:	2830      	cmp	r0, #48	; 0x30
 8012082:	461f      	mov	r7, r3
 8012084:	f103 0301 	add.w	r3, r3, #1
 8012088:	d0f9      	beq.n	801207e <__gethex+0x76>
 801208a:	f7ff ffa7 	bl	8011fdc <__hexdig_fun>
 801208e:	2301      	movs	r3, #1
 8012090:	fab0 f480 	clz	r4, r0
 8012094:	0964      	lsrs	r4, r4, #5
 8012096:	4635      	mov	r5, r6
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	463a      	mov	r2, r7
 801209c:	4616      	mov	r6, r2
 801209e:	3201      	adds	r2, #1
 80120a0:	7830      	ldrb	r0, [r6, #0]
 80120a2:	f7ff ff9b 	bl	8011fdc <__hexdig_fun>
 80120a6:	2800      	cmp	r0, #0
 80120a8:	d1f8      	bne.n	801209c <__gethex+0x94>
 80120aa:	9901      	ldr	r1, [sp, #4]
 80120ac:	4652      	mov	r2, sl
 80120ae:	4630      	mov	r0, r6
 80120b0:	f7fe f9e3 	bl	801047a <strncmp>
 80120b4:	b980      	cbnz	r0, 80120d8 <__gethex+0xd0>
 80120b6:	b94d      	cbnz	r5, 80120cc <__gethex+0xc4>
 80120b8:	eb06 050a 	add.w	r5, r6, sl
 80120bc:	462a      	mov	r2, r5
 80120be:	4616      	mov	r6, r2
 80120c0:	3201      	adds	r2, #1
 80120c2:	7830      	ldrb	r0, [r6, #0]
 80120c4:	f7ff ff8a 	bl	8011fdc <__hexdig_fun>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d1f8      	bne.n	80120be <__gethex+0xb6>
 80120cc:	1bad      	subs	r5, r5, r6
 80120ce:	00ad      	lsls	r5, r5, #2
 80120d0:	e004      	b.n	80120dc <__gethex+0xd4>
 80120d2:	2400      	movs	r4, #0
 80120d4:	4625      	mov	r5, r4
 80120d6:	e7e0      	b.n	801209a <__gethex+0x92>
 80120d8:	2d00      	cmp	r5, #0
 80120da:	d1f7      	bne.n	80120cc <__gethex+0xc4>
 80120dc:	7833      	ldrb	r3, [r6, #0]
 80120de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80120e2:	2b50      	cmp	r3, #80	; 0x50
 80120e4:	d13b      	bne.n	801215e <__gethex+0x156>
 80120e6:	7873      	ldrb	r3, [r6, #1]
 80120e8:	2b2b      	cmp	r3, #43	; 0x2b
 80120ea:	d02c      	beq.n	8012146 <__gethex+0x13e>
 80120ec:	2b2d      	cmp	r3, #45	; 0x2d
 80120ee:	d02e      	beq.n	801214e <__gethex+0x146>
 80120f0:	1c71      	adds	r1, r6, #1
 80120f2:	f04f 0900 	mov.w	r9, #0
 80120f6:	7808      	ldrb	r0, [r1, #0]
 80120f8:	f7ff ff70 	bl	8011fdc <__hexdig_fun>
 80120fc:	1e43      	subs	r3, r0, #1
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b18      	cmp	r3, #24
 8012102:	d82c      	bhi.n	801215e <__gethex+0x156>
 8012104:	f1a0 0210 	sub.w	r2, r0, #16
 8012108:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801210c:	f7ff ff66 	bl	8011fdc <__hexdig_fun>
 8012110:	1e43      	subs	r3, r0, #1
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b18      	cmp	r3, #24
 8012116:	d91d      	bls.n	8012154 <__gethex+0x14c>
 8012118:	f1b9 0f00 	cmp.w	r9, #0
 801211c:	d000      	beq.n	8012120 <__gethex+0x118>
 801211e:	4252      	negs	r2, r2
 8012120:	4415      	add	r5, r2
 8012122:	f8cb 1000 	str.w	r1, [fp]
 8012126:	b1e4      	cbz	r4, 8012162 <__gethex+0x15a>
 8012128:	9b00      	ldr	r3, [sp, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	bf14      	ite	ne
 801212e:	2700      	movne	r7, #0
 8012130:	2706      	moveq	r7, #6
 8012132:	4638      	mov	r0, r7
 8012134:	b009      	add	sp, #36	; 0x24
 8012136:	ecbd 8b02 	vpop	{d8}
 801213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213e:	463e      	mov	r6, r7
 8012140:	4625      	mov	r5, r4
 8012142:	2401      	movs	r4, #1
 8012144:	e7ca      	b.n	80120dc <__gethex+0xd4>
 8012146:	f04f 0900 	mov.w	r9, #0
 801214a:	1cb1      	adds	r1, r6, #2
 801214c:	e7d3      	b.n	80120f6 <__gethex+0xee>
 801214e:	f04f 0901 	mov.w	r9, #1
 8012152:	e7fa      	b.n	801214a <__gethex+0x142>
 8012154:	230a      	movs	r3, #10
 8012156:	fb03 0202 	mla	r2, r3, r2, r0
 801215a:	3a10      	subs	r2, #16
 801215c:	e7d4      	b.n	8012108 <__gethex+0x100>
 801215e:	4631      	mov	r1, r6
 8012160:	e7df      	b.n	8012122 <__gethex+0x11a>
 8012162:	1bf3      	subs	r3, r6, r7
 8012164:	3b01      	subs	r3, #1
 8012166:	4621      	mov	r1, r4
 8012168:	2b07      	cmp	r3, #7
 801216a:	dc0b      	bgt.n	8012184 <__gethex+0x17c>
 801216c:	ee18 0a10 	vmov	r0, s16
 8012170:	f000 fa82 	bl	8012678 <_Balloc>
 8012174:	4604      	mov	r4, r0
 8012176:	b940      	cbnz	r0, 801218a <__gethex+0x182>
 8012178:	4b65      	ldr	r3, [pc, #404]	; (8012310 <__gethex+0x308>)
 801217a:	4602      	mov	r2, r0
 801217c:	21de      	movs	r1, #222	; 0xde
 801217e:	4865      	ldr	r0, [pc, #404]	; (8012314 <__gethex+0x30c>)
 8012180:	f001 fd92 	bl	8013ca8 <__assert_func>
 8012184:	3101      	adds	r1, #1
 8012186:	105b      	asrs	r3, r3, #1
 8012188:	e7ee      	b.n	8012168 <__gethex+0x160>
 801218a:	f100 0914 	add.w	r9, r0, #20
 801218e:	f04f 0b00 	mov.w	fp, #0
 8012192:	f1ca 0301 	rsb	r3, sl, #1
 8012196:	f8cd 9008 	str.w	r9, [sp, #8]
 801219a:	f8cd b000 	str.w	fp, [sp]
 801219e:	9306      	str	r3, [sp, #24]
 80121a0:	42b7      	cmp	r7, r6
 80121a2:	d340      	bcc.n	8012226 <__gethex+0x21e>
 80121a4:	9802      	ldr	r0, [sp, #8]
 80121a6:	9b00      	ldr	r3, [sp, #0]
 80121a8:	f840 3b04 	str.w	r3, [r0], #4
 80121ac:	eba0 0009 	sub.w	r0, r0, r9
 80121b0:	1080      	asrs	r0, r0, #2
 80121b2:	0146      	lsls	r6, r0, #5
 80121b4:	6120      	str	r0, [r4, #16]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fb54 	bl	8012864 <__hi0bits>
 80121bc:	1a30      	subs	r0, r6, r0
 80121be:	f8d8 6000 	ldr.w	r6, [r8]
 80121c2:	42b0      	cmp	r0, r6
 80121c4:	dd63      	ble.n	801228e <__gethex+0x286>
 80121c6:	1b87      	subs	r7, r0, r6
 80121c8:	4639      	mov	r1, r7
 80121ca:	4620      	mov	r0, r4
 80121cc:	f000 feee 	bl	8012fac <__any_on>
 80121d0:	4682      	mov	sl, r0
 80121d2:	b1a8      	cbz	r0, 8012200 <__gethex+0x1f8>
 80121d4:	1e7b      	subs	r3, r7, #1
 80121d6:	1159      	asrs	r1, r3, #5
 80121d8:	f003 021f 	and.w	r2, r3, #31
 80121dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80121e0:	f04f 0a01 	mov.w	sl, #1
 80121e4:	fa0a f202 	lsl.w	r2, sl, r2
 80121e8:	420a      	tst	r2, r1
 80121ea:	d009      	beq.n	8012200 <__gethex+0x1f8>
 80121ec:	4553      	cmp	r3, sl
 80121ee:	dd05      	ble.n	80121fc <__gethex+0x1f4>
 80121f0:	1eb9      	subs	r1, r7, #2
 80121f2:	4620      	mov	r0, r4
 80121f4:	f000 feda 	bl	8012fac <__any_on>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d145      	bne.n	8012288 <__gethex+0x280>
 80121fc:	f04f 0a02 	mov.w	sl, #2
 8012200:	4639      	mov	r1, r7
 8012202:	4620      	mov	r0, r4
 8012204:	f7ff fe98 	bl	8011f38 <rshift>
 8012208:	443d      	add	r5, r7
 801220a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801220e:	42ab      	cmp	r3, r5
 8012210:	da4c      	bge.n	80122ac <__gethex+0x2a4>
 8012212:	ee18 0a10 	vmov	r0, s16
 8012216:	4621      	mov	r1, r4
 8012218:	f000 fa6e 	bl	80126f8 <_Bfree>
 801221c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801221e:	2300      	movs	r3, #0
 8012220:	6013      	str	r3, [r2, #0]
 8012222:	27a3      	movs	r7, #163	; 0xa3
 8012224:	e785      	b.n	8012132 <__gethex+0x12a>
 8012226:	1e73      	subs	r3, r6, #1
 8012228:	9a05      	ldr	r2, [sp, #20]
 801222a:	9303      	str	r3, [sp, #12]
 801222c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012230:	4293      	cmp	r3, r2
 8012232:	d019      	beq.n	8012268 <__gethex+0x260>
 8012234:	f1bb 0f20 	cmp.w	fp, #32
 8012238:	d107      	bne.n	801224a <__gethex+0x242>
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	9a00      	ldr	r2, [sp, #0]
 801223e:	f843 2b04 	str.w	r2, [r3], #4
 8012242:	9302      	str	r3, [sp, #8]
 8012244:	2300      	movs	r3, #0
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	469b      	mov	fp, r3
 801224a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801224e:	f7ff fec5 	bl	8011fdc <__hexdig_fun>
 8012252:	9b00      	ldr	r3, [sp, #0]
 8012254:	f000 000f 	and.w	r0, r0, #15
 8012258:	fa00 f00b 	lsl.w	r0, r0, fp
 801225c:	4303      	orrs	r3, r0
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	f10b 0b04 	add.w	fp, fp, #4
 8012264:	9b03      	ldr	r3, [sp, #12]
 8012266:	e00d      	b.n	8012284 <__gethex+0x27c>
 8012268:	9b03      	ldr	r3, [sp, #12]
 801226a:	9a06      	ldr	r2, [sp, #24]
 801226c:	4413      	add	r3, r2
 801226e:	42bb      	cmp	r3, r7
 8012270:	d3e0      	bcc.n	8012234 <__gethex+0x22c>
 8012272:	4618      	mov	r0, r3
 8012274:	9901      	ldr	r1, [sp, #4]
 8012276:	9307      	str	r3, [sp, #28]
 8012278:	4652      	mov	r2, sl
 801227a:	f7fe f8fe 	bl	801047a <strncmp>
 801227e:	9b07      	ldr	r3, [sp, #28]
 8012280:	2800      	cmp	r0, #0
 8012282:	d1d7      	bne.n	8012234 <__gethex+0x22c>
 8012284:	461e      	mov	r6, r3
 8012286:	e78b      	b.n	80121a0 <__gethex+0x198>
 8012288:	f04f 0a03 	mov.w	sl, #3
 801228c:	e7b8      	b.n	8012200 <__gethex+0x1f8>
 801228e:	da0a      	bge.n	80122a6 <__gethex+0x29e>
 8012290:	1a37      	subs	r7, r6, r0
 8012292:	4621      	mov	r1, r4
 8012294:	ee18 0a10 	vmov	r0, s16
 8012298:	463a      	mov	r2, r7
 801229a:	f000 fc49 	bl	8012b30 <__lshift>
 801229e:	1bed      	subs	r5, r5, r7
 80122a0:	4604      	mov	r4, r0
 80122a2:	f100 0914 	add.w	r9, r0, #20
 80122a6:	f04f 0a00 	mov.w	sl, #0
 80122aa:	e7ae      	b.n	801220a <__gethex+0x202>
 80122ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80122b0:	42a8      	cmp	r0, r5
 80122b2:	dd72      	ble.n	801239a <__gethex+0x392>
 80122b4:	1b45      	subs	r5, r0, r5
 80122b6:	42ae      	cmp	r6, r5
 80122b8:	dc36      	bgt.n	8012328 <__gethex+0x320>
 80122ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80122be:	2b02      	cmp	r3, #2
 80122c0:	d02a      	beq.n	8012318 <__gethex+0x310>
 80122c2:	2b03      	cmp	r3, #3
 80122c4:	d02c      	beq.n	8012320 <__gethex+0x318>
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d115      	bne.n	80122f6 <__gethex+0x2ee>
 80122ca:	42ae      	cmp	r6, r5
 80122cc:	d113      	bne.n	80122f6 <__gethex+0x2ee>
 80122ce:	2e01      	cmp	r6, #1
 80122d0:	d10b      	bne.n	80122ea <__gethex+0x2e2>
 80122d2:	9a04      	ldr	r2, [sp, #16]
 80122d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122d8:	6013      	str	r3, [r2, #0]
 80122da:	2301      	movs	r3, #1
 80122dc:	6123      	str	r3, [r4, #16]
 80122de:	f8c9 3000 	str.w	r3, [r9]
 80122e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122e4:	2762      	movs	r7, #98	; 0x62
 80122e6:	601c      	str	r4, [r3, #0]
 80122e8:	e723      	b.n	8012132 <__gethex+0x12a>
 80122ea:	1e71      	subs	r1, r6, #1
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 fe5d 	bl	8012fac <__any_on>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d1ed      	bne.n	80122d2 <__gethex+0x2ca>
 80122f6:	ee18 0a10 	vmov	r0, s16
 80122fa:	4621      	mov	r1, r4
 80122fc:	f000 f9fc 	bl	80126f8 <_Bfree>
 8012300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012302:	2300      	movs	r3, #0
 8012304:	6013      	str	r3, [r2, #0]
 8012306:	2750      	movs	r7, #80	; 0x50
 8012308:	e713      	b.n	8012132 <__gethex+0x12a>
 801230a:	bf00      	nop
 801230c:	08016c88 	.word	0x08016c88
 8012310:	08016c0b 	.word	0x08016c0b
 8012314:	08016c1c 	.word	0x08016c1c
 8012318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1eb      	bne.n	80122f6 <__gethex+0x2ee>
 801231e:	e7d8      	b.n	80122d2 <__gethex+0x2ca>
 8012320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1d5      	bne.n	80122d2 <__gethex+0x2ca>
 8012326:	e7e6      	b.n	80122f6 <__gethex+0x2ee>
 8012328:	1e6f      	subs	r7, r5, #1
 801232a:	f1ba 0f00 	cmp.w	sl, #0
 801232e:	d131      	bne.n	8012394 <__gethex+0x38c>
 8012330:	b127      	cbz	r7, 801233c <__gethex+0x334>
 8012332:	4639      	mov	r1, r7
 8012334:	4620      	mov	r0, r4
 8012336:	f000 fe39 	bl	8012fac <__any_on>
 801233a:	4682      	mov	sl, r0
 801233c:	117b      	asrs	r3, r7, #5
 801233e:	2101      	movs	r1, #1
 8012340:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012344:	f007 071f 	and.w	r7, r7, #31
 8012348:	fa01 f707 	lsl.w	r7, r1, r7
 801234c:	421f      	tst	r7, r3
 801234e:	4629      	mov	r1, r5
 8012350:	4620      	mov	r0, r4
 8012352:	bf18      	it	ne
 8012354:	f04a 0a02 	orrne.w	sl, sl, #2
 8012358:	1b76      	subs	r6, r6, r5
 801235a:	f7ff fded 	bl	8011f38 <rshift>
 801235e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012362:	2702      	movs	r7, #2
 8012364:	f1ba 0f00 	cmp.w	sl, #0
 8012368:	d048      	beq.n	80123fc <__gethex+0x3f4>
 801236a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801236e:	2b02      	cmp	r3, #2
 8012370:	d015      	beq.n	801239e <__gethex+0x396>
 8012372:	2b03      	cmp	r3, #3
 8012374:	d017      	beq.n	80123a6 <__gethex+0x39e>
 8012376:	2b01      	cmp	r3, #1
 8012378:	d109      	bne.n	801238e <__gethex+0x386>
 801237a:	f01a 0f02 	tst.w	sl, #2
 801237e:	d006      	beq.n	801238e <__gethex+0x386>
 8012380:	f8d9 0000 	ldr.w	r0, [r9]
 8012384:	ea4a 0a00 	orr.w	sl, sl, r0
 8012388:	f01a 0f01 	tst.w	sl, #1
 801238c:	d10e      	bne.n	80123ac <__gethex+0x3a4>
 801238e:	f047 0710 	orr.w	r7, r7, #16
 8012392:	e033      	b.n	80123fc <__gethex+0x3f4>
 8012394:	f04f 0a01 	mov.w	sl, #1
 8012398:	e7d0      	b.n	801233c <__gethex+0x334>
 801239a:	2701      	movs	r7, #1
 801239c:	e7e2      	b.n	8012364 <__gethex+0x35c>
 801239e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123a0:	f1c3 0301 	rsb	r3, r3, #1
 80123a4:	9315      	str	r3, [sp, #84]	; 0x54
 80123a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d0f0      	beq.n	801238e <__gethex+0x386>
 80123ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80123b0:	f104 0314 	add.w	r3, r4, #20
 80123b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80123b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80123bc:	f04f 0c00 	mov.w	ip, #0
 80123c0:	4618      	mov	r0, r3
 80123c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80123ca:	d01c      	beq.n	8012406 <__gethex+0x3fe>
 80123cc:	3201      	adds	r2, #1
 80123ce:	6002      	str	r2, [r0, #0]
 80123d0:	2f02      	cmp	r7, #2
 80123d2:	f104 0314 	add.w	r3, r4, #20
 80123d6:	d13f      	bne.n	8012458 <__gethex+0x450>
 80123d8:	f8d8 2000 	ldr.w	r2, [r8]
 80123dc:	3a01      	subs	r2, #1
 80123de:	42b2      	cmp	r2, r6
 80123e0:	d10a      	bne.n	80123f8 <__gethex+0x3f0>
 80123e2:	1171      	asrs	r1, r6, #5
 80123e4:	2201      	movs	r2, #1
 80123e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123ea:	f006 061f 	and.w	r6, r6, #31
 80123ee:	fa02 f606 	lsl.w	r6, r2, r6
 80123f2:	421e      	tst	r6, r3
 80123f4:	bf18      	it	ne
 80123f6:	4617      	movne	r7, r2
 80123f8:	f047 0720 	orr.w	r7, r7, #32
 80123fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123fe:	601c      	str	r4, [r3, #0]
 8012400:	9b04      	ldr	r3, [sp, #16]
 8012402:	601d      	str	r5, [r3, #0]
 8012404:	e695      	b.n	8012132 <__gethex+0x12a>
 8012406:	4299      	cmp	r1, r3
 8012408:	f843 cc04 	str.w	ip, [r3, #-4]
 801240c:	d8d8      	bhi.n	80123c0 <__gethex+0x3b8>
 801240e:	68a3      	ldr	r3, [r4, #8]
 8012410:	459b      	cmp	fp, r3
 8012412:	db19      	blt.n	8012448 <__gethex+0x440>
 8012414:	6861      	ldr	r1, [r4, #4]
 8012416:	ee18 0a10 	vmov	r0, s16
 801241a:	3101      	adds	r1, #1
 801241c:	f000 f92c 	bl	8012678 <_Balloc>
 8012420:	4681      	mov	r9, r0
 8012422:	b918      	cbnz	r0, 801242c <__gethex+0x424>
 8012424:	4b1a      	ldr	r3, [pc, #104]	; (8012490 <__gethex+0x488>)
 8012426:	4602      	mov	r2, r0
 8012428:	2184      	movs	r1, #132	; 0x84
 801242a:	e6a8      	b.n	801217e <__gethex+0x176>
 801242c:	6922      	ldr	r2, [r4, #16]
 801242e:	3202      	adds	r2, #2
 8012430:	f104 010c 	add.w	r1, r4, #12
 8012434:	0092      	lsls	r2, r2, #2
 8012436:	300c      	adds	r0, #12
 8012438:	f7fd f8f0 	bl	800f61c <memcpy>
 801243c:	4621      	mov	r1, r4
 801243e:	ee18 0a10 	vmov	r0, s16
 8012442:	f000 f959 	bl	80126f8 <_Bfree>
 8012446:	464c      	mov	r4, r9
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	1c5a      	adds	r2, r3, #1
 801244c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012450:	6122      	str	r2, [r4, #16]
 8012452:	2201      	movs	r2, #1
 8012454:	615a      	str	r2, [r3, #20]
 8012456:	e7bb      	b.n	80123d0 <__gethex+0x3c8>
 8012458:	6922      	ldr	r2, [r4, #16]
 801245a:	455a      	cmp	r2, fp
 801245c:	dd0b      	ble.n	8012476 <__gethex+0x46e>
 801245e:	2101      	movs	r1, #1
 8012460:	4620      	mov	r0, r4
 8012462:	f7ff fd69 	bl	8011f38 <rshift>
 8012466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801246a:	3501      	adds	r5, #1
 801246c:	42ab      	cmp	r3, r5
 801246e:	f6ff aed0 	blt.w	8012212 <__gethex+0x20a>
 8012472:	2701      	movs	r7, #1
 8012474:	e7c0      	b.n	80123f8 <__gethex+0x3f0>
 8012476:	f016 061f 	ands.w	r6, r6, #31
 801247a:	d0fa      	beq.n	8012472 <__gethex+0x46a>
 801247c:	449a      	add	sl, r3
 801247e:	f1c6 0620 	rsb	r6, r6, #32
 8012482:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012486:	f000 f9ed 	bl	8012864 <__hi0bits>
 801248a:	42b0      	cmp	r0, r6
 801248c:	dbe7      	blt.n	801245e <__gethex+0x456>
 801248e:	e7f0      	b.n	8012472 <__gethex+0x46a>
 8012490:	08016c0b 	.word	0x08016c0b

08012494 <L_shift>:
 8012494:	f1c2 0208 	rsb	r2, r2, #8
 8012498:	0092      	lsls	r2, r2, #2
 801249a:	b570      	push	{r4, r5, r6, lr}
 801249c:	f1c2 0620 	rsb	r6, r2, #32
 80124a0:	6843      	ldr	r3, [r0, #4]
 80124a2:	6804      	ldr	r4, [r0, #0]
 80124a4:	fa03 f506 	lsl.w	r5, r3, r6
 80124a8:	432c      	orrs	r4, r5
 80124aa:	40d3      	lsrs	r3, r2
 80124ac:	6004      	str	r4, [r0, #0]
 80124ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80124b2:	4288      	cmp	r0, r1
 80124b4:	d3f4      	bcc.n	80124a0 <L_shift+0xc>
 80124b6:	bd70      	pop	{r4, r5, r6, pc}

080124b8 <__match>:
 80124b8:	b530      	push	{r4, r5, lr}
 80124ba:	6803      	ldr	r3, [r0, #0]
 80124bc:	3301      	adds	r3, #1
 80124be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124c2:	b914      	cbnz	r4, 80124ca <__match+0x12>
 80124c4:	6003      	str	r3, [r0, #0]
 80124c6:	2001      	movs	r0, #1
 80124c8:	bd30      	pop	{r4, r5, pc}
 80124ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80124d2:	2d19      	cmp	r5, #25
 80124d4:	bf98      	it	ls
 80124d6:	3220      	addls	r2, #32
 80124d8:	42a2      	cmp	r2, r4
 80124da:	d0f0      	beq.n	80124be <__match+0x6>
 80124dc:	2000      	movs	r0, #0
 80124de:	e7f3      	b.n	80124c8 <__match+0x10>

080124e0 <__hexnan>:
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	680b      	ldr	r3, [r1, #0]
 80124e6:	6801      	ldr	r1, [r0, #0]
 80124e8:	115e      	asrs	r6, r3, #5
 80124ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80124ee:	f013 031f 	ands.w	r3, r3, #31
 80124f2:	b087      	sub	sp, #28
 80124f4:	bf18      	it	ne
 80124f6:	3604      	addne	r6, #4
 80124f8:	2500      	movs	r5, #0
 80124fa:	1f37      	subs	r7, r6, #4
 80124fc:	4682      	mov	sl, r0
 80124fe:	4690      	mov	r8, r2
 8012500:	9301      	str	r3, [sp, #4]
 8012502:	f846 5c04 	str.w	r5, [r6, #-4]
 8012506:	46b9      	mov	r9, r7
 8012508:	463c      	mov	r4, r7
 801250a:	9502      	str	r5, [sp, #8]
 801250c:	46ab      	mov	fp, r5
 801250e:	784a      	ldrb	r2, [r1, #1]
 8012510:	1c4b      	adds	r3, r1, #1
 8012512:	9303      	str	r3, [sp, #12]
 8012514:	b342      	cbz	r2, 8012568 <__hexnan+0x88>
 8012516:	4610      	mov	r0, r2
 8012518:	9105      	str	r1, [sp, #20]
 801251a:	9204      	str	r2, [sp, #16]
 801251c:	f7ff fd5e 	bl	8011fdc <__hexdig_fun>
 8012520:	2800      	cmp	r0, #0
 8012522:	d14f      	bne.n	80125c4 <__hexnan+0xe4>
 8012524:	9a04      	ldr	r2, [sp, #16]
 8012526:	9905      	ldr	r1, [sp, #20]
 8012528:	2a20      	cmp	r2, #32
 801252a:	d818      	bhi.n	801255e <__hexnan+0x7e>
 801252c:	9b02      	ldr	r3, [sp, #8]
 801252e:	459b      	cmp	fp, r3
 8012530:	dd13      	ble.n	801255a <__hexnan+0x7a>
 8012532:	454c      	cmp	r4, r9
 8012534:	d206      	bcs.n	8012544 <__hexnan+0x64>
 8012536:	2d07      	cmp	r5, #7
 8012538:	dc04      	bgt.n	8012544 <__hexnan+0x64>
 801253a:	462a      	mov	r2, r5
 801253c:	4649      	mov	r1, r9
 801253e:	4620      	mov	r0, r4
 8012540:	f7ff ffa8 	bl	8012494 <L_shift>
 8012544:	4544      	cmp	r4, r8
 8012546:	d950      	bls.n	80125ea <__hexnan+0x10a>
 8012548:	2300      	movs	r3, #0
 801254a:	f1a4 0904 	sub.w	r9, r4, #4
 801254e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012552:	f8cd b008 	str.w	fp, [sp, #8]
 8012556:	464c      	mov	r4, r9
 8012558:	461d      	mov	r5, r3
 801255a:	9903      	ldr	r1, [sp, #12]
 801255c:	e7d7      	b.n	801250e <__hexnan+0x2e>
 801255e:	2a29      	cmp	r2, #41	; 0x29
 8012560:	d156      	bne.n	8012610 <__hexnan+0x130>
 8012562:	3102      	adds	r1, #2
 8012564:	f8ca 1000 	str.w	r1, [sl]
 8012568:	f1bb 0f00 	cmp.w	fp, #0
 801256c:	d050      	beq.n	8012610 <__hexnan+0x130>
 801256e:	454c      	cmp	r4, r9
 8012570:	d206      	bcs.n	8012580 <__hexnan+0xa0>
 8012572:	2d07      	cmp	r5, #7
 8012574:	dc04      	bgt.n	8012580 <__hexnan+0xa0>
 8012576:	462a      	mov	r2, r5
 8012578:	4649      	mov	r1, r9
 801257a:	4620      	mov	r0, r4
 801257c:	f7ff ff8a 	bl	8012494 <L_shift>
 8012580:	4544      	cmp	r4, r8
 8012582:	d934      	bls.n	80125ee <__hexnan+0x10e>
 8012584:	f1a8 0204 	sub.w	r2, r8, #4
 8012588:	4623      	mov	r3, r4
 801258a:	f853 1b04 	ldr.w	r1, [r3], #4
 801258e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012592:	429f      	cmp	r7, r3
 8012594:	d2f9      	bcs.n	801258a <__hexnan+0xaa>
 8012596:	1b3b      	subs	r3, r7, r4
 8012598:	f023 0303 	bic.w	r3, r3, #3
 801259c:	3304      	adds	r3, #4
 801259e:	3401      	adds	r4, #1
 80125a0:	3e03      	subs	r6, #3
 80125a2:	42b4      	cmp	r4, r6
 80125a4:	bf88      	it	hi
 80125a6:	2304      	movhi	r3, #4
 80125a8:	4443      	add	r3, r8
 80125aa:	2200      	movs	r2, #0
 80125ac:	f843 2b04 	str.w	r2, [r3], #4
 80125b0:	429f      	cmp	r7, r3
 80125b2:	d2fb      	bcs.n	80125ac <__hexnan+0xcc>
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	b91b      	cbnz	r3, 80125c0 <__hexnan+0xe0>
 80125b8:	4547      	cmp	r7, r8
 80125ba:	d127      	bne.n	801260c <__hexnan+0x12c>
 80125bc:	2301      	movs	r3, #1
 80125be:	603b      	str	r3, [r7, #0]
 80125c0:	2005      	movs	r0, #5
 80125c2:	e026      	b.n	8012612 <__hexnan+0x132>
 80125c4:	3501      	adds	r5, #1
 80125c6:	2d08      	cmp	r5, #8
 80125c8:	f10b 0b01 	add.w	fp, fp, #1
 80125cc:	dd06      	ble.n	80125dc <__hexnan+0xfc>
 80125ce:	4544      	cmp	r4, r8
 80125d0:	d9c3      	bls.n	801255a <__hexnan+0x7a>
 80125d2:	2300      	movs	r3, #0
 80125d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80125d8:	2501      	movs	r5, #1
 80125da:	3c04      	subs	r4, #4
 80125dc:	6822      	ldr	r2, [r4, #0]
 80125de:	f000 000f 	and.w	r0, r0, #15
 80125e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80125e6:	6022      	str	r2, [r4, #0]
 80125e8:	e7b7      	b.n	801255a <__hexnan+0x7a>
 80125ea:	2508      	movs	r5, #8
 80125ec:	e7b5      	b.n	801255a <__hexnan+0x7a>
 80125ee:	9b01      	ldr	r3, [sp, #4]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d0df      	beq.n	80125b4 <__hexnan+0xd4>
 80125f4:	f04f 32ff 	mov.w	r2, #4294967295
 80125f8:	f1c3 0320 	rsb	r3, r3, #32
 80125fc:	fa22 f303 	lsr.w	r3, r2, r3
 8012600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012604:	401a      	ands	r2, r3
 8012606:	f846 2c04 	str.w	r2, [r6, #-4]
 801260a:	e7d3      	b.n	80125b4 <__hexnan+0xd4>
 801260c:	3f04      	subs	r7, #4
 801260e:	e7d1      	b.n	80125b4 <__hexnan+0xd4>
 8012610:	2004      	movs	r0, #4
 8012612:	b007      	add	sp, #28
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012618 <_localeconv_r>:
 8012618:	4800      	ldr	r0, [pc, #0]	; (801261c <_localeconv_r+0x4>)
 801261a:	4770      	bx	lr
 801261c:	200003cc 	.word	0x200003cc

08012620 <_lseek_r>:
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	4d07      	ldr	r5, [pc, #28]	; (8012640 <_lseek_r+0x20>)
 8012624:	4604      	mov	r4, r0
 8012626:	4608      	mov	r0, r1
 8012628:	4611      	mov	r1, r2
 801262a:	2200      	movs	r2, #0
 801262c:	602a      	str	r2, [r5, #0]
 801262e:	461a      	mov	r2, r3
 8012630:	f7f5 ff08 	bl	8008444 <_lseek>
 8012634:	1c43      	adds	r3, r0, #1
 8012636:	d102      	bne.n	801263e <_lseek_r+0x1e>
 8012638:	682b      	ldr	r3, [r5, #0]
 801263a:	b103      	cbz	r3, 801263e <_lseek_r+0x1e>
 801263c:	6023      	str	r3, [r4, #0]
 801263e:	bd38      	pop	{r3, r4, r5, pc}
 8012640:	20003274 	.word	0x20003274

08012644 <malloc>:
 8012644:	4b02      	ldr	r3, [pc, #8]	; (8012650 <malloc+0xc>)
 8012646:	4601      	mov	r1, r0
 8012648:	6818      	ldr	r0, [r3, #0]
 801264a:	f000 bd2f 	b.w	80130ac <_malloc_r>
 801264e:	bf00      	nop
 8012650:	20000274 	.word	0x20000274

08012654 <__ascii_mbtowc>:
 8012654:	b082      	sub	sp, #8
 8012656:	b901      	cbnz	r1, 801265a <__ascii_mbtowc+0x6>
 8012658:	a901      	add	r1, sp, #4
 801265a:	b142      	cbz	r2, 801266e <__ascii_mbtowc+0x1a>
 801265c:	b14b      	cbz	r3, 8012672 <__ascii_mbtowc+0x1e>
 801265e:	7813      	ldrb	r3, [r2, #0]
 8012660:	600b      	str	r3, [r1, #0]
 8012662:	7812      	ldrb	r2, [r2, #0]
 8012664:	1e10      	subs	r0, r2, #0
 8012666:	bf18      	it	ne
 8012668:	2001      	movne	r0, #1
 801266a:	b002      	add	sp, #8
 801266c:	4770      	bx	lr
 801266e:	4610      	mov	r0, r2
 8012670:	e7fb      	b.n	801266a <__ascii_mbtowc+0x16>
 8012672:	f06f 0001 	mvn.w	r0, #1
 8012676:	e7f8      	b.n	801266a <__ascii_mbtowc+0x16>

08012678 <_Balloc>:
 8012678:	b570      	push	{r4, r5, r6, lr}
 801267a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801267c:	4604      	mov	r4, r0
 801267e:	460d      	mov	r5, r1
 8012680:	b976      	cbnz	r6, 80126a0 <_Balloc+0x28>
 8012682:	2010      	movs	r0, #16
 8012684:	f7ff ffde 	bl	8012644 <malloc>
 8012688:	4602      	mov	r2, r0
 801268a:	6260      	str	r0, [r4, #36]	; 0x24
 801268c:	b920      	cbnz	r0, 8012698 <_Balloc+0x20>
 801268e:	4b18      	ldr	r3, [pc, #96]	; (80126f0 <_Balloc+0x78>)
 8012690:	4818      	ldr	r0, [pc, #96]	; (80126f4 <_Balloc+0x7c>)
 8012692:	2166      	movs	r1, #102	; 0x66
 8012694:	f001 fb08 	bl	8013ca8 <__assert_func>
 8012698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801269c:	6006      	str	r6, [r0, #0]
 801269e:	60c6      	str	r6, [r0, #12]
 80126a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80126a2:	68f3      	ldr	r3, [r6, #12]
 80126a4:	b183      	cbz	r3, 80126c8 <_Balloc+0x50>
 80126a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80126ae:	b9b8      	cbnz	r0, 80126e0 <_Balloc+0x68>
 80126b0:	2101      	movs	r1, #1
 80126b2:	fa01 f605 	lsl.w	r6, r1, r5
 80126b6:	1d72      	adds	r2, r6, #5
 80126b8:	0092      	lsls	r2, r2, #2
 80126ba:	4620      	mov	r0, r4
 80126bc:	f000 fc97 	bl	8012fee <_calloc_r>
 80126c0:	b160      	cbz	r0, 80126dc <_Balloc+0x64>
 80126c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80126c6:	e00e      	b.n	80126e6 <_Balloc+0x6e>
 80126c8:	2221      	movs	r2, #33	; 0x21
 80126ca:	2104      	movs	r1, #4
 80126cc:	4620      	mov	r0, r4
 80126ce:	f000 fc8e 	bl	8012fee <_calloc_r>
 80126d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126d4:	60f0      	str	r0, [r6, #12]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1e4      	bne.n	80126a6 <_Balloc+0x2e>
 80126dc:	2000      	movs	r0, #0
 80126de:	bd70      	pop	{r4, r5, r6, pc}
 80126e0:	6802      	ldr	r2, [r0, #0]
 80126e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126e6:	2300      	movs	r3, #0
 80126e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80126ec:	e7f7      	b.n	80126de <_Balloc+0x66>
 80126ee:	bf00      	nop
 80126f0:	08016b95 	.word	0x08016b95
 80126f4:	08016c9c 	.word	0x08016c9c

080126f8 <_Bfree>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80126fc:	4605      	mov	r5, r0
 80126fe:	460c      	mov	r4, r1
 8012700:	b976      	cbnz	r6, 8012720 <_Bfree+0x28>
 8012702:	2010      	movs	r0, #16
 8012704:	f7ff ff9e 	bl	8012644 <malloc>
 8012708:	4602      	mov	r2, r0
 801270a:	6268      	str	r0, [r5, #36]	; 0x24
 801270c:	b920      	cbnz	r0, 8012718 <_Bfree+0x20>
 801270e:	4b09      	ldr	r3, [pc, #36]	; (8012734 <_Bfree+0x3c>)
 8012710:	4809      	ldr	r0, [pc, #36]	; (8012738 <_Bfree+0x40>)
 8012712:	218a      	movs	r1, #138	; 0x8a
 8012714:	f001 fac8 	bl	8013ca8 <__assert_func>
 8012718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801271c:	6006      	str	r6, [r0, #0]
 801271e:	60c6      	str	r6, [r0, #12]
 8012720:	b13c      	cbz	r4, 8012732 <_Bfree+0x3a>
 8012722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012724:	6862      	ldr	r2, [r4, #4]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801272c:	6021      	str	r1, [r4, #0]
 801272e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012732:	bd70      	pop	{r4, r5, r6, pc}
 8012734:	08016b95 	.word	0x08016b95
 8012738:	08016c9c 	.word	0x08016c9c

0801273c <__multadd>:
 801273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012740:	690e      	ldr	r6, [r1, #16]
 8012742:	4607      	mov	r7, r0
 8012744:	4698      	mov	r8, r3
 8012746:	460c      	mov	r4, r1
 8012748:	f101 0014 	add.w	r0, r1, #20
 801274c:	2300      	movs	r3, #0
 801274e:	6805      	ldr	r5, [r0, #0]
 8012750:	b2a9      	uxth	r1, r5
 8012752:	fb02 8101 	mla	r1, r2, r1, r8
 8012756:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801275a:	0c2d      	lsrs	r5, r5, #16
 801275c:	fb02 c505 	mla	r5, r2, r5, ip
 8012760:	b289      	uxth	r1, r1
 8012762:	3301      	adds	r3, #1
 8012764:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012768:	429e      	cmp	r6, r3
 801276a:	f840 1b04 	str.w	r1, [r0], #4
 801276e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012772:	dcec      	bgt.n	801274e <__multadd+0x12>
 8012774:	f1b8 0f00 	cmp.w	r8, #0
 8012778:	d022      	beq.n	80127c0 <__multadd+0x84>
 801277a:	68a3      	ldr	r3, [r4, #8]
 801277c:	42b3      	cmp	r3, r6
 801277e:	dc19      	bgt.n	80127b4 <__multadd+0x78>
 8012780:	6861      	ldr	r1, [r4, #4]
 8012782:	4638      	mov	r0, r7
 8012784:	3101      	adds	r1, #1
 8012786:	f7ff ff77 	bl	8012678 <_Balloc>
 801278a:	4605      	mov	r5, r0
 801278c:	b928      	cbnz	r0, 801279a <__multadd+0x5e>
 801278e:	4602      	mov	r2, r0
 8012790:	4b0d      	ldr	r3, [pc, #52]	; (80127c8 <__multadd+0x8c>)
 8012792:	480e      	ldr	r0, [pc, #56]	; (80127cc <__multadd+0x90>)
 8012794:	21b5      	movs	r1, #181	; 0xb5
 8012796:	f001 fa87 	bl	8013ca8 <__assert_func>
 801279a:	6922      	ldr	r2, [r4, #16]
 801279c:	3202      	adds	r2, #2
 801279e:	f104 010c 	add.w	r1, r4, #12
 80127a2:	0092      	lsls	r2, r2, #2
 80127a4:	300c      	adds	r0, #12
 80127a6:	f7fc ff39 	bl	800f61c <memcpy>
 80127aa:	4621      	mov	r1, r4
 80127ac:	4638      	mov	r0, r7
 80127ae:	f7ff ffa3 	bl	80126f8 <_Bfree>
 80127b2:	462c      	mov	r4, r5
 80127b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80127b8:	3601      	adds	r6, #1
 80127ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80127be:	6126      	str	r6, [r4, #16]
 80127c0:	4620      	mov	r0, r4
 80127c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c6:	bf00      	nop
 80127c8:	08016c0b 	.word	0x08016c0b
 80127cc:	08016c9c 	.word	0x08016c9c

080127d0 <__s2b>:
 80127d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127d4:	460c      	mov	r4, r1
 80127d6:	4615      	mov	r5, r2
 80127d8:	461f      	mov	r7, r3
 80127da:	2209      	movs	r2, #9
 80127dc:	3308      	adds	r3, #8
 80127de:	4606      	mov	r6, r0
 80127e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80127e4:	2100      	movs	r1, #0
 80127e6:	2201      	movs	r2, #1
 80127e8:	429a      	cmp	r2, r3
 80127ea:	db09      	blt.n	8012800 <__s2b+0x30>
 80127ec:	4630      	mov	r0, r6
 80127ee:	f7ff ff43 	bl	8012678 <_Balloc>
 80127f2:	b940      	cbnz	r0, 8012806 <__s2b+0x36>
 80127f4:	4602      	mov	r2, r0
 80127f6:	4b19      	ldr	r3, [pc, #100]	; (801285c <__s2b+0x8c>)
 80127f8:	4819      	ldr	r0, [pc, #100]	; (8012860 <__s2b+0x90>)
 80127fa:	21ce      	movs	r1, #206	; 0xce
 80127fc:	f001 fa54 	bl	8013ca8 <__assert_func>
 8012800:	0052      	lsls	r2, r2, #1
 8012802:	3101      	adds	r1, #1
 8012804:	e7f0      	b.n	80127e8 <__s2b+0x18>
 8012806:	9b08      	ldr	r3, [sp, #32]
 8012808:	6143      	str	r3, [r0, #20]
 801280a:	2d09      	cmp	r5, #9
 801280c:	f04f 0301 	mov.w	r3, #1
 8012810:	6103      	str	r3, [r0, #16]
 8012812:	dd16      	ble.n	8012842 <__s2b+0x72>
 8012814:	f104 0909 	add.w	r9, r4, #9
 8012818:	46c8      	mov	r8, r9
 801281a:	442c      	add	r4, r5
 801281c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012820:	4601      	mov	r1, r0
 8012822:	3b30      	subs	r3, #48	; 0x30
 8012824:	220a      	movs	r2, #10
 8012826:	4630      	mov	r0, r6
 8012828:	f7ff ff88 	bl	801273c <__multadd>
 801282c:	45a0      	cmp	r8, r4
 801282e:	d1f5      	bne.n	801281c <__s2b+0x4c>
 8012830:	f1a5 0408 	sub.w	r4, r5, #8
 8012834:	444c      	add	r4, r9
 8012836:	1b2d      	subs	r5, r5, r4
 8012838:	1963      	adds	r3, r4, r5
 801283a:	42bb      	cmp	r3, r7
 801283c:	db04      	blt.n	8012848 <__s2b+0x78>
 801283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012842:	340a      	adds	r4, #10
 8012844:	2509      	movs	r5, #9
 8012846:	e7f6      	b.n	8012836 <__s2b+0x66>
 8012848:	f814 3b01 	ldrb.w	r3, [r4], #1
 801284c:	4601      	mov	r1, r0
 801284e:	3b30      	subs	r3, #48	; 0x30
 8012850:	220a      	movs	r2, #10
 8012852:	4630      	mov	r0, r6
 8012854:	f7ff ff72 	bl	801273c <__multadd>
 8012858:	e7ee      	b.n	8012838 <__s2b+0x68>
 801285a:	bf00      	nop
 801285c:	08016c0b 	.word	0x08016c0b
 8012860:	08016c9c 	.word	0x08016c9c

08012864 <__hi0bits>:
 8012864:	0c03      	lsrs	r3, r0, #16
 8012866:	041b      	lsls	r3, r3, #16
 8012868:	b9d3      	cbnz	r3, 80128a0 <__hi0bits+0x3c>
 801286a:	0400      	lsls	r0, r0, #16
 801286c:	2310      	movs	r3, #16
 801286e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012872:	bf04      	itt	eq
 8012874:	0200      	lsleq	r0, r0, #8
 8012876:	3308      	addeq	r3, #8
 8012878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801287c:	bf04      	itt	eq
 801287e:	0100      	lsleq	r0, r0, #4
 8012880:	3304      	addeq	r3, #4
 8012882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012886:	bf04      	itt	eq
 8012888:	0080      	lsleq	r0, r0, #2
 801288a:	3302      	addeq	r3, #2
 801288c:	2800      	cmp	r0, #0
 801288e:	db05      	blt.n	801289c <__hi0bits+0x38>
 8012890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012894:	f103 0301 	add.w	r3, r3, #1
 8012898:	bf08      	it	eq
 801289a:	2320      	moveq	r3, #32
 801289c:	4618      	mov	r0, r3
 801289e:	4770      	bx	lr
 80128a0:	2300      	movs	r3, #0
 80128a2:	e7e4      	b.n	801286e <__hi0bits+0xa>

080128a4 <__lo0bits>:
 80128a4:	6803      	ldr	r3, [r0, #0]
 80128a6:	f013 0207 	ands.w	r2, r3, #7
 80128aa:	4601      	mov	r1, r0
 80128ac:	d00b      	beq.n	80128c6 <__lo0bits+0x22>
 80128ae:	07da      	lsls	r2, r3, #31
 80128b0:	d424      	bmi.n	80128fc <__lo0bits+0x58>
 80128b2:	0798      	lsls	r0, r3, #30
 80128b4:	bf49      	itett	mi
 80128b6:	085b      	lsrmi	r3, r3, #1
 80128b8:	089b      	lsrpl	r3, r3, #2
 80128ba:	2001      	movmi	r0, #1
 80128bc:	600b      	strmi	r3, [r1, #0]
 80128be:	bf5c      	itt	pl
 80128c0:	600b      	strpl	r3, [r1, #0]
 80128c2:	2002      	movpl	r0, #2
 80128c4:	4770      	bx	lr
 80128c6:	b298      	uxth	r0, r3
 80128c8:	b9b0      	cbnz	r0, 80128f8 <__lo0bits+0x54>
 80128ca:	0c1b      	lsrs	r3, r3, #16
 80128cc:	2010      	movs	r0, #16
 80128ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80128d2:	bf04      	itt	eq
 80128d4:	0a1b      	lsreq	r3, r3, #8
 80128d6:	3008      	addeq	r0, #8
 80128d8:	071a      	lsls	r2, r3, #28
 80128da:	bf04      	itt	eq
 80128dc:	091b      	lsreq	r3, r3, #4
 80128de:	3004      	addeq	r0, #4
 80128e0:	079a      	lsls	r2, r3, #30
 80128e2:	bf04      	itt	eq
 80128e4:	089b      	lsreq	r3, r3, #2
 80128e6:	3002      	addeq	r0, #2
 80128e8:	07da      	lsls	r2, r3, #31
 80128ea:	d403      	bmi.n	80128f4 <__lo0bits+0x50>
 80128ec:	085b      	lsrs	r3, r3, #1
 80128ee:	f100 0001 	add.w	r0, r0, #1
 80128f2:	d005      	beq.n	8012900 <__lo0bits+0x5c>
 80128f4:	600b      	str	r3, [r1, #0]
 80128f6:	4770      	bx	lr
 80128f8:	4610      	mov	r0, r2
 80128fa:	e7e8      	b.n	80128ce <__lo0bits+0x2a>
 80128fc:	2000      	movs	r0, #0
 80128fe:	4770      	bx	lr
 8012900:	2020      	movs	r0, #32
 8012902:	4770      	bx	lr

08012904 <__i2b>:
 8012904:	b510      	push	{r4, lr}
 8012906:	460c      	mov	r4, r1
 8012908:	2101      	movs	r1, #1
 801290a:	f7ff feb5 	bl	8012678 <_Balloc>
 801290e:	4602      	mov	r2, r0
 8012910:	b928      	cbnz	r0, 801291e <__i2b+0x1a>
 8012912:	4b05      	ldr	r3, [pc, #20]	; (8012928 <__i2b+0x24>)
 8012914:	4805      	ldr	r0, [pc, #20]	; (801292c <__i2b+0x28>)
 8012916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801291a:	f001 f9c5 	bl	8013ca8 <__assert_func>
 801291e:	2301      	movs	r3, #1
 8012920:	6144      	str	r4, [r0, #20]
 8012922:	6103      	str	r3, [r0, #16]
 8012924:	bd10      	pop	{r4, pc}
 8012926:	bf00      	nop
 8012928:	08016c0b 	.word	0x08016c0b
 801292c:	08016c9c 	.word	0x08016c9c

08012930 <__multiply>:
 8012930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012934:	4614      	mov	r4, r2
 8012936:	690a      	ldr	r2, [r1, #16]
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	429a      	cmp	r2, r3
 801293c:	bfb8      	it	lt
 801293e:	460b      	movlt	r3, r1
 8012940:	460d      	mov	r5, r1
 8012942:	bfbc      	itt	lt
 8012944:	4625      	movlt	r5, r4
 8012946:	461c      	movlt	r4, r3
 8012948:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801294c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012950:	68ab      	ldr	r3, [r5, #8]
 8012952:	6869      	ldr	r1, [r5, #4]
 8012954:	eb0a 0709 	add.w	r7, sl, r9
 8012958:	42bb      	cmp	r3, r7
 801295a:	b085      	sub	sp, #20
 801295c:	bfb8      	it	lt
 801295e:	3101      	addlt	r1, #1
 8012960:	f7ff fe8a 	bl	8012678 <_Balloc>
 8012964:	b930      	cbnz	r0, 8012974 <__multiply+0x44>
 8012966:	4602      	mov	r2, r0
 8012968:	4b42      	ldr	r3, [pc, #264]	; (8012a74 <__multiply+0x144>)
 801296a:	4843      	ldr	r0, [pc, #268]	; (8012a78 <__multiply+0x148>)
 801296c:	f240 115d 	movw	r1, #349	; 0x15d
 8012970:	f001 f99a 	bl	8013ca8 <__assert_func>
 8012974:	f100 0614 	add.w	r6, r0, #20
 8012978:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801297c:	4633      	mov	r3, r6
 801297e:	2200      	movs	r2, #0
 8012980:	4543      	cmp	r3, r8
 8012982:	d31e      	bcc.n	80129c2 <__multiply+0x92>
 8012984:	f105 0c14 	add.w	ip, r5, #20
 8012988:	f104 0314 	add.w	r3, r4, #20
 801298c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012990:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012994:	9202      	str	r2, [sp, #8]
 8012996:	ebac 0205 	sub.w	r2, ip, r5
 801299a:	3a15      	subs	r2, #21
 801299c:	f022 0203 	bic.w	r2, r2, #3
 80129a0:	3204      	adds	r2, #4
 80129a2:	f105 0115 	add.w	r1, r5, #21
 80129a6:	458c      	cmp	ip, r1
 80129a8:	bf38      	it	cc
 80129aa:	2204      	movcc	r2, #4
 80129ac:	9201      	str	r2, [sp, #4]
 80129ae:	9a02      	ldr	r2, [sp, #8]
 80129b0:	9303      	str	r3, [sp, #12]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d808      	bhi.n	80129c8 <__multiply+0x98>
 80129b6:	2f00      	cmp	r7, #0
 80129b8:	dc55      	bgt.n	8012a66 <__multiply+0x136>
 80129ba:	6107      	str	r7, [r0, #16]
 80129bc:	b005      	add	sp, #20
 80129be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c2:	f843 2b04 	str.w	r2, [r3], #4
 80129c6:	e7db      	b.n	8012980 <__multiply+0x50>
 80129c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80129cc:	f1ba 0f00 	cmp.w	sl, #0
 80129d0:	d020      	beq.n	8012a14 <__multiply+0xe4>
 80129d2:	f105 0e14 	add.w	lr, r5, #20
 80129d6:	46b1      	mov	r9, r6
 80129d8:	2200      	movs	r2, #0
 80129da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80129de:	f8d9 b000 	ldr.w	fp, [r9]
 80129e2:	b2a1      	uxth	r1, r4
 80129e4:	fa1f fb8b 	uxth.w	fp, fp
 80129e8:	fb0a b101 	mla	r1, sl, r1, fp
 80129ec:	4411      	add	r1, r2
 80129ee:	f8d9 2000 	ldr.w	r2, [r9]
 80129f2:	0c24      	lsrs	r4, r4, #16
 80129f4:	0c12      	lsrs	r2, r2, #16
 80129f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80129fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80129fe:	b289      	uxth	r1, r1
 8012a00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012a04:	45f4      	cmp	ip, lr
 8012a06:	f849 1b04 	str.w	r1, [r9], #4
 8012a0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012a0e:	d8e4      	bhi.n	80129da <__multiply+0xaa>
 8012a10:	9901      	ldr	r1, [sp, #4]
 8012a12:	5072      	str	r2, [r6, r1]
 8012a14:	9a03      	ldr	r2, [sp, #12]
 8012a16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	f1b9 0f00 	cmp.w	r9, #0
 8012a20:	d01f      	beq.n	8012a62 <__multiply+0x132>
 8012a22:	6834      	ldr	r4, [r6, #0]
 8012a24:	f105 0114 	add.w	r1, r5, #20
 8012a28:	46b6      	mov	lr, r6
 8012a2a:	f04f 0a00 	mov.w	sl, #0
 8012a2e:	880a      	ldrh	r2, [r1, #0]
 8012a30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012a34:	fb09 b202 	mla	r2, r9, r2, fp
 8012a38:	4492      	add	sl, r2
 8012a3a:	b2a4      	uxth	r4, r4
 8012a3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012a40:	f84e 4b04 	str.w	r4, [lr], #4
 8012a44:	f851 4b04 	ldr.w	r4, [r1], #4
 8012a48:	f8be 2000 	ldrh.w	r2, [lr]
 8012a4c:	0c24      	lsrs	r4, r4, #16
 8012a4e:	fb09 2404 	mla	r4, r9, r4, r2
 8012a52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012a56:	458c      	cmp	ip, r1
 8012a58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012a5c:	d8e7      	bhi.n	8012a2e <__multiply+0xfe>
 8012a5e:	9a01      	ldr	r2, [sp, #4]
 8012a60:	50b4      	str	r4, [r6, r2]
 8012a62:	3604      	adds	r6, #4
 8012a64:	e7a3      	b.n	80129ae <__multiply+0x7e>
 8012a66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d1a5      	bne.n	80129ba <__multiply+0x8a>
 8012a6e:	3f01      	subs	r7, #1
 8012a70:	e7a1      	b.n	80129b6 <__multiply+0x86>
 8012a72:	bf00      	nop
 8012a74:	08016c0b 	.word	0x08016c0b
 8012a78:	08016c9c 	.word	0x08016c9c

08012a7c <__pow5mult>:
 8012a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a80:	4615      	mov	r5, r2
 8012a82:	f012 0203 	ands.w	r2, r2, #3
 8012a86:	4606      	mov	r6, r0
 8012a88:	460f      	mov	r7, r1
 8012a8a:	d007      	beq.n	8012a9c <__pow5mult+0x20>
 8012a8c:	4c25      	ldr	r4, [pc, #148]	; (8012b24 <__pow5mult+0xa8>)
 8012a8e:	3a01      	subs	r2, #1
 8012a90:	2300      	movs	r3, #0
 8012a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a96:	f7ff fe51 	bl	801273c <__multadd>
 8012a9a:	4607      	mov	r7, r0
 8012a9c:	10ad      	asrs	r5, r5, #2
 8012a9e:	d03d      	beq.n	8012b1c <__pow5mult+0xa0>
 8012aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012aa2:	b97c      	cbnz	r4, 8012ac4 <__pow5mult+0x48>
 8012aa4:	2010      	movs	r0, #16
 8012aa6:	f7ff fdcd 	bl	8012644 <malloc>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	6270      	str	r0, [r6, #36]	; 0x24
 8012aae:	b928      	cbnz	r0, 8012abc <__pow5mult+0x40>
 8012ab0:	4b1d      	ldr	r3, [pc, #116]	; (8012b28 <__pow5mult+0xac>)
 8012ab2:	481e      	ldr	r0, [pc, #120]	; (8012b2c <__pow5mult+0xb0>)
 8012ab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012ab8:	f001 f8f6 	bl	8013ca8 <__assert_func>
 8012abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ac0:	6004      	str	r4, [r0, #0]
 8012ac2:	60c4      	str	r4, [r0, #12]
 8012ac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012acc:	b94c      	cbnz	r4, 8012ae2 <__pow5mult+0x66>
 8012ace:	f240 2171 	movw	r1, #625	; 0x271
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f7ff ff16 	bl	8012904 <__i2b>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ade:	4604      	mov	r4, r0
 8012ae0:	6003      	str	r3, [r0, #0]
 8012ae2:	f04f 0900 	mov.w	r9, #0
 8012ae6:	07eb      	lsls	r3, r5, #31
 8012ae8:	d50a      	bpl.n	8012b00 <__pow5mult+0x84>
 8012aea:	4639      	mov	r1, r7
 8012aec:	4622      	mov	r2, r4
 8012aee:	4630      	mov	r0, r6
 8012af0:	f7ff ff1e 	bl	8012930 <__multiply>
 8012af4:	4639      	mov	r1, r7
 8012af6:	4680      	mov	r8, r0
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7ff fdfd 	bl	80126f8 <_Bfree>
 8012afe:	4647      	mov	r7, r8
 8012b00:	106d      	asrs	r5, r5, #1
 8012b02:	d00b      	beq.n	8012b1c <__pow5mult+0xa0>
 8012b04:	6820      	ldr	r0, [r4, #0]
 8012b06:	b938      	cbnz	r0, 8012b18 <__pow5mult+0x9c>
 8012b08:	4622      	mov	r2, r4
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7ff ff0f 	bl	8012930 <__multiply>
 8012b12:	6020      	str	r0, [r4, #0]
 8012b14:	f8c0 9000 	str.w	r9, [r0]
 8012b18:	4604      	mov	r4, r0
 8012b1a:	e7e4      	b.n	8012ae6 <__pow5mult+0x6a>
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b22:	bf00      	nop
 8012b24:	08016df0 	.word	0x08016df0
 8012b28:	08016b95 	.word	0x08016b95
 8012b2c:	08016c9c 	.word	0x08016c9c

08012b30 <__lshift>:
 8012b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b34:	460c      	mov	r4, r1
 8012b36:	6849      	ldr	r1, [r1, #4]
 8012b38:	6923      	ldr	r3, [r4, #16]
 8012b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b3e:	68a3      	ldr	r3, [r4, #8]
 8012b40:	4607      	mov	r7, r0
 8012b42:	4691      	mov	r9, r2
 8012b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b48:	f108 0601 	add.w	r6, r8, #1
 8012b4c:	42b3      	cmp	r3, r6
 8012b4e:	db0b      	blt.n	8012b68 <__lshift+0x38>
 8012b50:	4638      	mov	r0, r7
 8012b52:	f7ff fd91 	bl	8012678 <_Balloc>
 8012b56:	4605      	mov	r5, r0
 8012b58:	b948      	cbnz	r0, 8012b6e <__lshift+0x3e>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	4b28      	ldr	r3, [pc, #160]	; (8012c00 <__lshift+0xd0>)
 8012b5e:	4829      	ldr	r0, [pc, #164]	; (8012c04 <__lshift+0xd4>)
 8012b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012b64:	f001 f8a0 	bl	8013ca8 <__assert_func>
 8012b68:	3101      	adds	r1, #1
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	e7ee      	b.n	8012b4c <__lshift+0x1c>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	f100 0114 	add.w	r1, r0, #20
 8012b74:	f100 0210 	add.w	r2, r0, #16
 8012b78:	4618      	mov	r0, r3
 8012b7a:	4553      	cmp	r3, sl
 8012b7c:	db33      	blt.n	8012be6 <__lshift+0xb6>
 8012b7e:	6920      	ldr	r0, [r4, #16]
 8012b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b84:	f104 0314 	add.w	r3, r4, #20
 8012b88:	f019 091f 	ands.w	r9, r9, #31
 8012b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b94:	d02b      	beq.n	8012bee <__lshift+0xbe>
 8012b96:	f1c9 0e20 	rsb	lr, r9, #32
 8012b9a:	468a      	mov	sl, r1
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8012ba4:	4302      	orrs	r2, r0
 8012ba6:	f84a 2b04 	str.w	r2, [sl], #4
 8012baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bae:	459c      	cmp	ip, r3
 8012bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012bb4:	d8f3      	bhi.n	8012b9e <__lshift+0x6e>
 8012bb6:	ebac 0304 	sub.w	r3, ip, r4
 8012bba:	3b15      	subs	r3, #21
 8012bbc:	f023 0303 	bic.w	r3, r3, #3
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	f104 0015 	add.w	r0, r4, #21
 8012bc6:	4584      	cmp	ip, r0
 8012bc8:	bf38      	it	cc
 8012bca:	2304      	movcc	r3, #4
 8012bcc:	50ca      	str	r2, [r1, r3]
 8012bce:	b10a      	cbz	r2, 8012bd4 <__lshift+0xa4>
 8012bd0:	f108 0602 	add.w	r6, r8, #2
 8012bd4:	3e01      	subs	r6, #1
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	612e      	str	r6, [r5, #16]
 8012bda:	4621      	mov	r1, r4
 8012bdc:	f7ff fd8c 	bl	80126f8 <_Bfree>
 8012be0:	4628      	mov	r0, r5
 8012be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bea:	3301      	adds	r3, #1
 8012bec:	e7c5      	b.n	8012b7a <__lshift+0x4a>
 8012bee:	3904      	subs	r1, #4
 8012bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012bf8:	459c      	cmp	ip, r3
 8012bfa:	d8f9      	bhi.n	8012bf0 <__lshift+0xc0>
 8012bfc:	e7ea      	b.n	8012bd4 <__lshift+0xa4>
 8012bfe:	bf00      	nop
 8012c00:	08016c0b 	.word	0x08016c0b
 8012c04:	08016c9c 	.word	0x08016c9c

08012c08 <__mcmp>:
 8012c08:	b530      	push	{r4, r5, lr}
 8012c0a:	6902      	ldr	r2, [r0, #16]
 8012c0c:	690c      	ldr	r4, [r1, #16]
 8012c0e:	1b12      	subs	r2, r2, r4
 8012c10:	d10e      	bne.n	8012c30 <__mcmp+0x28>
 8012c12:	f100 0314 	add.w	r3, r0, #20
 8012c16:	3114      	adds	r1, #20
 8012c18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012c1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012c20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012c24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012c28:	42a5      	cmp	r5, r4
 8012c2a:	d003      	beq.n	8012c34 <__mcmp+0x2c>
 8012c2c:	d305      	bcc.n	8012c3a <__mcmp+0x32>
 8012c2e:	2201      	movs	r2, #1
 8012c30:	4610      	mov	r0, r2
 8012c32:	bd30      	pop	{r4, r5, pc}
 8012c34:	4283      	cmp	r3, r0
 8012c36:	d3f3      	bcc.n	8012c20 <__mcmp+0x18>
 8012c38:	e7fa      	b.n	8012c30 <__mcmp+0x28>
 8012c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c3e:	e7f7      	b.n	8012c30 <__mcmp+0x28>

08012c40 <__mdiff>:
 8012c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	460c      	mov	r4, r1
 8012c46:	4606      	mov	r6, r0
 8012c48:	4611      	mov	r1, r2
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4617      	mov	r7, r2
 8012c4e:	f7ff ffdb 	bl	8012c08 <__mcmp>
 8012c52:	1e05      	subs	r5, r0, #0
 8012c54:	d110      	bne.n	8012c78 <__mdiff+0x38>
 8012c56:	4629      	mov	r1, r5
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f7ff fd0d 	bl	8012678 <_Balloc>
 8012c5e:	b930      	cbnz	r0, 8012c6e <__mdiff+0x2e>
 8012c60:	4b39      	ldr	r3, [pc, #228]	; (8012d48 <__mdiff+0x108>)
 8012c62:	4602      	mov	r2, r0
 8012c64:	f240 2132 	movw	r1, #562	; 0x232
 8012c68:	4838      	ldr	r0, [pc, #224]	; (8012d4c <__mdiff+0x10c>)
 8012c6a:	f001 f81d 	bl	8013ca8 <__assert_func>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c78:	bfa4      	itt	ge
 8012c7a:	463b      	movge	r3, r7
 8012c7c:	4627      	movge	r7, r4
 8012c7e:	4630      	mov	r0, r6
 8012c80:	6879      	ldr	r1, [r7, #4]
 8012c82:	bfa6      	itte	ge
 8012c84:	461c      	movge	r4, r3
 8012c86:	2500      	movge	r5, #0
 8012c88:	2501      	movlt	r5, #1
 8012c8a:	f7ff fcf5 	bl	8012678 <_Balloc>
 8012c8e:	b920      	cbnz	r0, 8012c9a <__mdiff+0x5a>
 8012c90:	4b2d      	ldr	r3, [pc, #180]	; (8012d48 <__mdiff+0x108>)
 8012c92:	4602      	mov	r2, r0
 8012c94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012c98:	e7e6      	b.n	8012c68 <__mdiff+0x28>
 8012c9a:	693e      	ldr	r6, [r7, #16]
 8012c9c:	60c5      	str	r5, [r0, #12]
 8012c9e:	6925      	ldr	r5, [r4, #16]
 8012ca0:	f107 0114 	add.w	r1, r7, #20
 8012ca4:	f104 0914 	add.w	r9, r4, #20
 8012ca8:	f100 0e14 	add.w	lr, r0, #20
 8012cac:	f107 0210 	add.w	r2, r7, #16
 8012cb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012cb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012cb8:	46f2      	mov	sl, lr
 8012cba:	2700      	movs	r7, #0
 8012cbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012cc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012cc4:	fa1f f883 	uxth.w	r8, r3
 8012cc8:	fa17 f78b 	uxtah	r7, r7, fp
 8012ccc:	0c1b      	lsrs	r3, r3, #16
 8012cce:	eba7 0808 	sub.w	r8, r7, r8
 8012cd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012cd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012cda:	fa1f f888 	uxth.w	r8, r8
 8012cde:	141f      	asrs	r7, r3, #16
 8012ce0:	454d      	cmp	r5, r9
 8012ce2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012ce6:	f84a 3b04 	str.w	r3, [sl], #4
 8012cea:	d8e7      	bhi.n	8012cbc <__mdiff+0x7c>
 8012cec:	1b2b      	subs	r3, r5, r4
 8012cee:	3b15      	subs	r3, #21
 8012cf0:	f023 0303 	bic.w	r3, r3, #3
 8012cf4:	3304      	adds	r3, #4
 8012cf6:	3415      	adds	r4, #21
 8012cf8:	42a5      	cmp	r5, r4
 8012cfa:	bf38      	it	cc
 8012cfc:	2304      	movcc	r3, #4
 8012cfe:	4419      	add	r1, r3
 8012d00:	4473      	add	r3, lr
 8012d02:	469e      	mov	lr, r3
 8012d04:	460d      	mov	r5, r1
 8012d06:	4565      	cmp	r5, ip
 8012d08:	d30e      	bcc.n	8012d28 <__mdiff+0xe8>
 8012d0a:	f10c 0203 	add.w	r2, ip, #3
 8012d0e:	1a52      	subs	r2, r2, r1
 8012d10:	f022 0203 	bic.w	r2, r2, #3
 8012d14:	3903      	subs	r1, #3
 8012d16:	458c      	cmp	ip, r1
 8012d18:	bf38      	it	cc
 8012d1a:	2200      	movcc	r2, #0
 8012d1c:	441a      	add	r2, r3
 8012d1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012d22:	b17b      	cbz	r3, 8012d44 <__mdiff+0x104>
 8012d24:	6106      	str	r6, [r0, #16]
 8012d26:	e7a5      	b.n	8012c74 <__mdiff+0x34>
 8012d28:	f855 8b04 	ldr.w	r8, [r5], #4
 8012d2c:	fa17 f488 	uxtah	r4, r7, r8
 8012d30:	1422      	asrs	r2, r4, #16
 8012d32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012d36:	b2a4      	uxth	r4, r4
 8012d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012d3c:	f84e 4b04 	str.w	r4, [lr], #4
 8012d40:	1417      	asrs	r7, r2, #16
 8012d42:	e7e0      	b.n	8012d06 <__mdiff+0xc6>
 8012d44:	3e01      	subs	r6, #1
 8012d46:	e7ea      	b.n	8012d1e <__mdiff+0xde>
 8012d48:	08016c0b 	.word	0x08016c0b
 8012d4c:	08016c9c 	.word	0x08016c9c

08012d50 <__ulp>:
 8012d50:	b082      	sub	sp, #8
 8012d52:	ed8d 0b00 	vstr	d0, [sp]
 8012d56:	9b01      	ldr	r3, [sp, #4]
 8012d58:	4912      	ldr	r1, [pc, #72]	; (8012da4 <__ulp+0x54>)
 8012d5a:	4019      	ands	r1, r3
 8012d5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012d60:	2900      	cmp	r1, #0
 8012d62:	dd05      	ble.n	8012d70 <__ulp+0x20>
 8012d64:	2200      	movs	r2, #0
 8012d66:	460b      	mov	r3, r1
 8012d68:	ec43 2b10 	vmov	d0, r2, r3
 8012d6c:	b002      	add	sp, #8
 8012d6e:	4770      	bx	lr
 8012d70:	4249      	negs	r1, r1
 8012d72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012d76:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012d7a:	f04f 0200 	mov.w	r2, #0
 8012d7e:	f04f 0300 	mov.w	r3, #0
 8012d82:	da04      	bge.n	8012d8e <__ulp+0x3e>
 8012d84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012d88:	fa41 f300 	asr.w	r3, r1, r0
 8012d8c:	e7ec      	b.n	8012d68 <__ulp+0x18>
 8012d8e:	f1a0 0114 	sub.w	r1, r0, #20
 8012d92:	291e      	cmp	r1, #30
 8012d94:	bfda      	itte	le
 8012d96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012d9a:	fa20 f101 	lsrle.w	r1, r0, r1
 8012d9e:	2101      	movgt	r1, #1
 8012da0:	460a      	mov	r2, r1
 8012da2:	e7e1      	b.n	8012d68 <__ulp+0x18>
 8012da4:	7ff00000 	.word	0x7ff00000

08012da8 <__b2d>:
 8012da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012daa:	6905      	ldr	r5, [r0, #16]
 8012dac:	f100 0714 	add.w	r7, r0, #20
 8012db0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012db4:	1f2e      	subs	r6, r5, #4
 8012db6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f7ff fd52 	bl	8012864 <__hi0bits>
 8012dc0:	f1c0 0320 	rsb	r3, r0, #32
 8012dc4:	280a      	cmp	r0, #10
 8012dc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012e44 <__b2d+0x9c>
 8012dca:	600b      	str	r3, [r1, #0]
 8012dcc:	dc14      	bgt.n	8012df8 <__b2d+0x50>
 8012dce:	f1c0 0e0b 	rsb	lr, r0, #11
 8012dd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8012dd6:	42b7      	cmp	r7, r6
 8012dd8:	ea41 030c 	orr.w	r3, r1, ip
 8012ddc:	bf34      	ite	cc
 8012dde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012de2:	2100      	movcs	r1, #0
 8012de4:	3015      	adds	r0, #21
 8012de6:	fa04 f000 	lsl.w	r0, r4, r0
 8012dea:	fa21 f10e 	lsr.w	r1, r1, lr
 8012dee:	ea40 0201 	orr.w	r2, r0, r1
 8012df2:	ec43 2b10 	vmov	d0, r2, r3
 8012df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df8:	42b7      	cmp	r7, r6
 8012dfa:	bf3a      	itte	cc
 8012dfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e00:	f1a5 0608 	subcc.w	r6, r5, #8
 8012e04:	2100      	movcs	r1, #0
 8012e06:	380b      	subs	r0, #11
 8012e08:	d017      	beq.n	8012e3a <__b2d+0x92>
 8012e0a:	f1c0 0c20 	rsb	ip, r0, #32
 8012e0e:	fa04 f500 	lsl.w	r5, r4, r0
 8012e12:	42be      	cmp	r6, r7
 8012e14:	fa21 f40c 	lsr.w	r4, r1, ip
 8012e18:	ea45 0504 	orr.w	r5, r5, r4
 8012e1c:	bf8c      	ite	hi
 8012e1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012e22:	2400      	movls	r4, #0
 8012e24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012e28:	fa01 f000 	lsl.w	r0, r1, r0
 8012e2c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012e30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012e34:	ea40 0204 	orr.w	r2, r0, r4
 8012e38:	e7db      	b.n	8012df2 <__b2d+0x4a>
 8012e3a:	ea44 030c 	orr.w	r3, r4, ip
 8012e3e:	460a      	mov	r2, r1
 8012e40:	e7d7      	b.n	8012df2 <__b2d+0x4a>
 8012e42:	bf00      	nop
 8012e44:	3ff00000 	.word	0x3ff00000

08012e48 <__d2b>:
 8012e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e4c:	4689      	mov	r9, r1
 8012e4e:	2101      	movs	r1, #1
 8012e50:	ec57 6b10 	vmov	r6, r7, d0
 8012e54:	4690      	mov	r8, r2
 8012e56:	f7ff fc0f 	bl	8012678 <_Balloc>
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	b930      	cbnz	r0, 8012e6c <__d2b+0x24>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b25      	ldr	r3, [pc, #148]	; (8012ef8 <__d2b+0xb0>)
 8012e62:	4826      	ldr	r0, [pc, #152]	; (8012efc <__d2b+0xb4>)
 8012e64:	f240 310a 	movw	r1, #778	; 0x30a
 8012e68:	f000 ff1e 	bl	8013ca8 <__assert_func>
 8012e6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012e74:	bb35      	cbnz	r5, 8012ec4 <__d2b+0x7c>
 8012e76:	2e00      	cmp	r6, #0
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	d028      	beq.n	8012ece <__d2b+0x86>
 8012e7c:	4668      	mov	r0, sp
 8012e7e:	9600      	str	r6, [sp, #0]
 8012e80:	f7ff fd10 	bl	80128a4 <__lo0bits>
 8012e84:	9900      	ldr	r1, [sp, #0]
 8012e86:	b300      	cbz	r0, 8012eca <__d2b+0x82>
 8012e88:	9a01      	ldr	r2, [sp, #4]
 8012e8a:	f1c0 0320 	rsb	r3, r0, #32
 8012e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8012e92:	430b      	orrs	r3, r1
 8012e94:	40c2      	lsrs	r2, r0
 8012e96:	6163      	str	r3, [r4, #20]
 8012e98:	9201      	str	r2, [sp, #4]
 8012e9a:	9b01      	ldr	r3, [sp, #4]
 8012e9c:	61a3      	str	r3, [r4, #24]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	bf14      	ite	ne
 8012ea2:	2202      	movne	r2, #2
 8012ea4:	2201      	moveq	r2, #1
 8012ea6:	6122      	str	r2, [r4, #16]
 8012ea8:	b1d5      	cbz	r5, 8012ee0 <__d2b+0x98>
 8012eaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012eae:	4405      	add	r5, r0
 8012eb0:	f8c9 5000 	str.w	r5, [r9]
 8012eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012eb8:	f8c8 0000 	str.w	r0, [r8]
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	b003      	add	sp, #12
 8012ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ec8:	e7d5      	b.n	8012e76 <__d2b+0x2e>
 8012eca:	6161      	str	r1, [r4, #20]
 8012ecc:	e7e5      	b.n	8012e9a <__d2b+0x52>
 8012ece:	a801      	add	r0, sp, #4
 8012ed0:	f7ff fce8 	bl	80128a4 <__lo0bits>
 8012ed4:	9b01      	ldr	r3, [sp, #4]
 8012ed6:	6163      	str	r3, [r4, #20]
 8012ed8:	2201      	movs	r2, #1
 8012eda:	6122      	str	r2, [r4, #16]
 8012edc:	3020      	adds	r0, #32
 8012ede:	e7e3      	b.n	8012ea8 <__d2b+0x60>
 8012ee0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ee4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012ee8:	f8c9 0000 	str.w	r0, [r9]
 8012eec:	6918      	ldr	r0, [r3, #16]
 8012eee:	f7ff fcb9 	bl	8012864 <__hi0bits>
 8012ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ef6:	e7df      	b.n	8012eb8 <__d2b+0x70>
 8012ef8:	08016c0b 	.word	0x08016c0b
 8012efc:	08016c9c 	.word	0x08016c9c

08012f00 <__ratio>:
 8012f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f04:	4688      	mov	r8, r1
 8012f06:	4669      	mov	r1, sp
 8012f08:	4681      	mov	r9, r0
 8012f0a:	f7ff ff4d 	bl	8012da8 <__b2d>
 8012f0e:	a901      	add	r1, sp, #4
 8012f10:	4640      	mov	r0, r8
 8012f12:	ec55 4b10 	vmov	r4, r5, d0
 8012f16:	f7ff ff47 	bl	8012da8 <__b2d>
 8012f1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012f22:	eba3 0c02 	sub.w	ip, r3, r2
 8012f26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012f2a:	1a9b      	subs	r3, r3, r2
 8012f2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012f30:	ec51 0b10 	vmov	r0, r1, d0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	bfd6      	itet	le
 8012f38:	460a      	movle	r2, r1
 8012f3a:	462a      	movgt	r2, r5
 8012f3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f40:	468b      	mov	fp, r1
 8012f42:	462f      	mov	r7, r5
 8012f44:	bfd4      	ite	le
 8012f46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012f4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012f4e:	4620      	mov	r0, r4
 8012f50:	ee10 2a10 	vmov	r2, s0
 8012f54:	465b      	mov	r3, fp
 8012f56:	4639      	mov	r1, r7
 8012f58:	f7ed fc88 	bl	800086c <__aeabi_ddiv>
 8012f5c:	ec41 0b10 	vmov	d0, r0, r1
 8012f60:	b003      	add	sp, #12
 8012f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f66 <__copybits>:
 8012f66:	3901      	subs	r1, #1
 8012f68:	b570      	push	{r4, r5, r6, lr}
 8012f6a:	1149      	asrs	r1, r1, #5
 8012f6c:	6914      	ldr	r4, [r2, #16]
 8012f6e:	3101      	adds	r1, #1
 8012f70:	f102 0314 	add.w	r3, r2, #20
 8012f74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f7c:	1f05      	subs	r5, r0, #4
 8012f7e:	42a3      	cmp	r3, r4
 8012f80:	d30c      	bcc.n	8012f9c <__copybits+0x36>
 8012f82:	1aa3      	subs	r3, r4, r2
 8012f84:	3b11      	subs	r3, #17
 8012f86:	f023 0303 	bic.w	r3, r3, #3
 8012f8a:	3211      	adds	r2, #17
 8012f8c:	42a2      	cmp	r2, r4
 8012f8e:	bf88      	it	hi
 8012f90:	2300      	movhi	r3, #0
 8012f92:	4418      	add	r0, r3
 8012f94:	2300      	movs	r3, #0
 8012f96:	4288      	cmp	r0, r1
 8012f98:	d305      	bcc.n	8012fa6 <__copybits+0x40>
 8012f9a:	bd70      	pop	{r4, r5, r6, pc}
 8012f9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012fa0:	f845 6f04 	str.w	r6, [r5, #4]!
 8012fa4:	e7eb      	b.n	8012f7e <__copybits+0x18>
 8012fa6:	f840 3b04 	str.w	r3, [r0], #4
 8012faa:	e7f4      	b.n	8012f96 <__copybits+0x30>

08012fac <__any_on>:
 8012fac:	f100 0214 	add.w	r2, r0, #20
 8012fb0:	6900      	ldr	r0, [r0, #16]
 8012fb2:	114b      	asrs	r3, r1, #5
 8012fb4:	4298      	cmp	r0, r3
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	db11      	blt.n	8012fde <__any_on+0x32>
 8012fba:	dd0a      	ble.n	8012fd2 <__any_on+0x26>
 8012fbc:	f011 011f 	ands.w	r1, r1, #31
 8012fc0:	d007      	beq.n	8012fd2 <__any_on+0x26>
 8012fc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012fc6:	fa24 f001 	lsr.w	r0, r4, r1
 8012fca:	fa00 f101 	lsl.w	r1, r0, r1
 8012fce:	428c      	cmp	r4, r1
 8012fd0:	d10b      	bne.n	8012fea <__any_on+0x3e>
 8012fd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d803      	bhi.n	8012fe2 <__any_on+0x36>
 8012fda:	2000      	movs	r0, #0
 8012fdc:	bd10      	pop	{r4, pc}
 8012fde:	4603      	mov	r3, r0
 8012fe0:	e7f7      	b.n	8012fd2 <__any_on+0x26>
 8012fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012fe6:	2900      	cmp	r1, #0
 8012fe8:	d0f5      	beq.n	8012fd6 <__any_on+0x2a>
 8012fea:	2001      	movs	r0, #1
 8012fec:	e7f6      	b.n	8012fdc <__any_on+0x30>

08012fee <_calloc_r>:
 8012fee:	b513      	push	{r0, r1, r4, lr}
 8012ff0:	434a      	muls	r2, r1
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	9201      	str	r2, [sp, #4]
 8012ff6:	f000 f859 	bl	80130ac <_malloc_r>
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	b118      	cbz	r0, 8013006 <_calloc_r+0x18>
 8012ffe:	9a01      	ldr	r2, [sp, #4]
 8013000:	2100      	movs	r1, #0
 8013002:	f7fc fb19 	bl	800f638 <memset>
 8013006:	4620      	mov	r0, r4
 8013008:	b002      	add	sp, #8
 801300a:	bd10      	pop	{r4, pc}

0801300c <_free_r>:
 801300c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801300e:	2900      	cmp	r1, #0
 8013010:	d048      	beq.n	80130a4 <_free_r+0x98>
 8013012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013016:	9001      	str	r0, [sp, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	f1a1 0404 	sub.w	r4, r1, #4
 801301e:	bfb8      	it	lt
 8013020:	18e4      	addlt	r4, r4, r3
 8013022:	f001 f845 	bl	80140b0 <__malloc_lock>
 8013026:	4a20      	ldr	r2, [pc, #128]	; (80130a8 <_free_r+0x9c>)
 8013028:	9801      	ldr	r0, [sp, #4]
 801302a:	6813      	ldr	r3, [r2, #0]
 801302c:	4615      	mov	r5, r2
 801302e:	b933      	cbnz	r3, 801303e <_free_r+0x32>
 8013030:	6063      	str	r3, [r4, #4]
 8013032:	6014      	str	r4, [r2, #0]
 8013034:	b003      	add	sp, #12
 8013036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801303a:	f001 b83f 	b.w	80140bc <__malloc_unlock>
 801303e:	42a3      	cmp	r3, r4
 8013040:	d90b      	bls.n	801305a <_free_r+0x4e>
 8013042:	6821      	ldr	r1, [r4, #0]
 8013044:	1862      	adds	r2, r4, r1
 8013046:	4293      	cmp	r3, r2
 8013048:	bf04      	itt	eq
 801304a:	681a      	ldreq	r2, [r3, #0]
 801304c:	685b      	ldreq	r3, [r3, #4]
 801304e:	6063      	str	r3, [r4, #4]
 8013050:	bf04      	itt	eq
 8013052:	1852      	addeq	r2, r2, r1
 8013054:	6022      	streq	r2, [r4, #0]
 8013056:	602c      	str	r4, [r5, #0]
 8013058:	e7ec      	b.n	8013034 <_free_r+0x28>
 801305a:	461a      	mov	r2, r3
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	b10b      	cbz	r3, 8013064 <_free_r+0x58>
 8013060:	42a3      	cmp	r3, r4
 8013062:	d9fa      	bls.n	801305a <_free_r+0x4e>
 8013064:	6811      	ldr	r1, [r2, #0]
 8013066:	1855      	adds	r5, r2, r1
 8013068:	42a5      	cmp	r5, r4
 801306a:	d10b      	bne.n	8013084 <_free_r+0x78>
 801306c:	6824      	ldr	r4, [r4, #0]
 801306e:	4421      	add	r1, r4
 8013070:	1854      	adds	r4, r2, r1
 8013072:	42a3      	cmp	r3, r4
 8013074:	6011      	str	r1, [r2, #0]
 8013076:	d1dd      	bne.n	8013034 <_free_r+0x28>
 8013078:	681c      	ldr	r4, [r3, #0]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	6053      	str	r3, [r2, #4]
 801307e:	4421      	add	r1, r4
 8013080:	6011      	str	r1, [r2, #0]
 8013082:	e7d7      	b.n	8013034 <_free_r+0x28>
 8013084:	d902      	bls.n	801308c <_free_r+0x80>
 8013086:	230c      	movs	r3, #12
 8013088:	6003      	str	r3, [r0, #0]
 801308a:	e7d3      	b.n	8013034 <_free_r+0x28>
 801308c:	6825      	ldr	r5, [r4, #0]
 801308e:	1961      	adds	r1, r4, r5
 8013090:	428b      	cmp	r3, r1
 8013092:	bf04      	itt	eq
 8013094:	6819      	ldreq	r1, [r3, #0]
 8013096:	685b      	ldreq	r3, [r3, #4]
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	bf04      	itt	eq
 801309c:	1949      	addeq	r1, r1, r5
 801309e:	6021      	streq	r1, [r4, #0]
 80130a0:	6054      	str	r4, [r2, #4]
 80130a2:	e7c7      	b.n	8013034 <_free_r+0x28>
 80130a4:	b003      	add	sp, #12
 80130a6:	bd30      	pop	{r4, r5, pc}
 80130a8:	20000a60 	.word	0x20000a60

080130ac <_malloc_r>:
 80130ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ae:	1ccd      	adds	r5, r1, #3
 80130b0:	f025 0503 	bic.w	r5, r5, #3
 80130b4:	3508      	adds	r5, #8
 80130b6:	2d0c      	cmp	r5, #12
 80130b8:	bf38      	it	cc
 80130ba:	250c      	movcc	r5, #12
 80130bc:	2d00      	cmp	r5, #0
 80130be:	4606      	mov	r6, r0
 80130c0:	db01      	blt.n	80130c6 <_malloc_r+0x1a>
 80130c2:	42a9      	cmp	r1, r5
 80130c4:	d903      	bls.n	80130ce <_malloc_r+0x22>
 80130c6:	230c      	movs	r3, #12
 80130c8:	6033      	str	r3, [r6, #0]
 80130ca:	2000      	movs	r0, #0
 80130cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ce:	f000 ffef 	bl	80140b0 <__malloc_lock>
 80130d2:	4921      	ldr	r1, [pc, #132]	; (8013158 <_malloc_r+0xac>)
 80130d4:	680a      	ldr	r2, [r1, #0]
 80130d6:	4614      	mov	r4, r2
 80130d8:	b99c      	cbnz	r4, 8013102 <_malloc_r+0x56>
 80130da:	4f20      	ldr	r7, [pc, #128]	; (801315c <_malloc_r+0xb0>)
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	b923      	cbnz	r3, 80130ea <_malloc_r+0x3e>
 80130e0:	4621      	mov	r1, r4
 80130e2:	4630      	mov	r0, r6
 80130e4:	f000 fcd0 	bl	8013a88 <_sbrk_r>
 80130e8:	6038      	str	r0, [r7, #0]
 80130ea:	4629      	mov	r1, r5
 80130ec:	4630      	mov	r0, r6
 80130ee:	f000 fccb 	bl	8013a88 <_sbrk_r>
 80130f2:	1c43      	adds	r3, r0, #1
 80130f4:	d123      	bne.n	801313e <_malloc_r+0x92>
 80130f6:	230c      	movs	r3, #12
 80130f8:	6033      	str	r3, [r6, #0]
 80130fa:	4630      	mov	r0, r6
 80130fc:	f000 ffde 	bl	80140bc <__malloc_unlock>
 8013100:	e7e3      	b.n	80130ca <_malloc_r+0x1e>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	1b5b      	subs	r3, r3, r5
 8013106:	d417      	bmi.n	8013138 <_malloc_r+0x8c>
 8013108:	2b0b      	cmp	r3, #11
 801310a:	d903      	bls.n	8013114 <_malloc_r+0x68>
 801310c:	6023      	str	r3, [r4, #0]
 801310e:	441c      	add	r4, r3
 8013110:	6025      	str	r5, [r4, #0]
 8013112:	e004      	b.n	801311e <_malloc_r+0x72>
 8013114:	6863      	ldr	r3, [r4, #4]
 8013116:	42a2      	cmp	r2, r4
 8013118:	bf0c      	ite	eq
 801311a:	600b      	streq	r3, [r1, #0]
 801311c:	6053      	strne	r3, [r2, #4]
 801311e:	4630      	mov	r0, r6
 8013120:	f000 ffcc 	bl	80140bc <__malloc_unlock>
 8013124:	f104 000b 	add.w	r0, r4, #11
 8013128:	1d23      	adds	r3, r4, #4
 801312a:	f020 0007 	bic.w	r0, r0, #7
 801312e:	1ac2      	subs	r2, r0, r3
 8013130:	d0cc      	beq.n	80130cc <_malloc_r+0x20>
 8013132:	1a1b      	subs	r3, r3, r0
 8013134:	50a3      	str	r3, [r4, r2]
 8013136:	e7c9      	b.n	80130cc <_malloc_r+0x20>
 8013138:	4622      	mov	r2, r4
 801313a:	6864      	ldr	r4, [r4, #4]
 801313c:	e7cc      	b.n	80130d8 <_malloc_r+0x2c>
 801313e:	1cc4      	adds	r4, r0, #3
 8013140:	f024 0403 	bic.w	r4, r4, #3
 8013144:	42a0      	cmp	r0, r4
 8013146:	d0e3      	beq.n	8013110 <_malloc_r+0x64>
 8013148:	1a21      	subs	r1, r4, r0
 801314a:	4630      	mov	r0, r6
 801314c:	f000 fc9c 	bl	8013a88 <_sbrk_r>
 8013150:	3001      	adds	r0, #1
 8013152:	d1dd      	bne.n	8013110 <_malloc_r+0x64>
 8013154:	e7cf      	b.n	80130f6 <_malloc_r+0x4a>
 8013156:	bf00      	nop
 8013158:	20000a60 	.word	0x20000a60
 801315c:	20000a64 	.word	0x20000a64

08013160 <__ssputs_r>:
 8013160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013164:	688e      	ldr	r6, [r1, #8]
 8013166:	429e      	cmp	r6, r3
 8013168:	4682      	mov	sl, r0
 801316a:	460c      	mov	r4, r1
 801316c:	4690      	mov	r8, r2
 801316e:	461f      	mov	r7, r3
 8013170:	d838      	bhi.n	80131e4 <__ssputs_r+0x84>
 8013172:	898a      	ldrh	r2, [r1, #12]
 8013174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013178:	d032      	beq.n	80131e0 <__ssputs_r+0x80>
 801317a:	6825      	ldr	r5, [r4, #0]
 801317c:	6909      	ldr	r1, [r1, #16]
 801317e:	eba5 0901 	sub.w	r9, r5, r1
 8013182:	6965      	ldr	r5, [r4, #20]
 8013184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801318c:	3301      	adds	r3, #1
 801318e:	444b      	add	r3, r9
 8013190:	106d      	asrs	r5, r5, #1
 8013192:	429d      	cmp	r5, r3
 8013194:	bf38      	it	cc
 8013196:	461d      	movcc	r5, r3
 8013198:	0553      	lsls	r3, r2, #21
 801319a:	d531      	bpl.n	8013200 <__ssputs_r+0xa0>
 801319c:	4629      	mov	r1, r5
 801319e:	f7ff ff85 	bl	80130ac <_malloc_r>
 80131a2:	4606      	mov	r6, r0
 80131a4:	b950      	cbnz	r0, 80131bc <__ssputs_r+0x5c>
 80131a6:	230c      	movs	r3, #12
 80131a8:	f8ca 3000 	str.w	r3, [sl]
 80131ac:	89a3      	ldrh	r3, [r4, #12]
 80131ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131b2:	81a3      	strh	r3, [r4, #12]
 80131b4:	f04f 30ff 	mov.w	r0, #4294967295
 80131b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131bc:	6921      	ldr	r1, [r4, #16]
 80131be:	464a      	mov	r2, r9
 80131c0:	f7fc fa2c 	bl	800f61c <memcpy>
 80131c4:	89a3      	ldrh	r3, [r4, #12]
 80131c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80131ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131ce:	81a3      	strh	r3, [r4, #12]
 80131d0:	6126      	str	r6, [r4, #16]
 80131d2:	6165      	str	r5, [r4, #20]
 80131d4:	444e      	add	r6, r9
 80131d6:	eba5 0509 	sub.w	r5, r5, r9
 80131da:	6026      	str	r6, [r4, #0]
 80131dc:	60a5      	str	r5, [r4, #8]
 80131de:	463e      	mov	r6, r7
 80131e0:	42be      	cmp	r6, r7
 80131e2:	d900      	bls.n	80131e6 <__ssputs_r+0x86>
 80131e4:	463e      	mov	r6, r7
 80131e6:	4632      	mov	r2, r6
 80131e8:	6820      	ldr	r0, [r4, #0]
 80131ea:	4641      	mov	r1, r8
 80131ec:	f000 ff46 	bl	801407c <memmove>
 80131f0:	68a3      	ldr	r3, [r4, #8]
 80131f2:	6822      	ldr	r2, [r4, #0]
 80131f4:	1b9b      	subs	r3, r3, r6
 80131f6:	4432      	add	r2, r6
 80131f8:	60a3      	str	r3, [r4, #8]
 80131fa:	6022      	str	r2, [r4, #0]
 80131fc:	2000      	movs	r0, #0
 80131fe:	e7db      	b.n	80131b8 <__ssputs_r+0x58>
 8013200:	462a      	mov	r2, r5
 8013202:	f000 ff61 	bl	80140c8 <_realloc_r>
 8013206:	4606      	mov	r6, r0
 8013208:	2800      	cmp	r0, #0
 801320a:	d1e1      	bne.n	80131d0 <__ssputs_r+0x70>
 801320c:	6921      	ldr	r1, [r4, #16]
 801320e:	4650      	mov	r0, sl
 8013210:	f7ff fefc 	bl	801300c <_free_r>
 8013214:	e7c7      	b.n	80131a6 <__ssputs_r+0x46>
	...

08013218 <_svfiprintf_r>:
 8013218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801321c:	4698      	mov	r8, r3
 801321e:	898b      	ldrh	r3, [r1, #12]
 8013220:	061b      	lsls	r3, r3, #24
 8013222:	b09d      	sub	sp, #116	; 0x74
 8013224:	4607      	mov	r7, r0
 8013226:	460d      	mov	r5, r1
 8013228:	4614      	mov	r4, r2
 801322a:	d50e      	bpl.n	801324a <_svfiprintf_r+0x32>
 801322c:	690b      	ldr	r3, [r1, #16]
 801322e:	b963      	cbnz	r3, 801324a <_svfiprintf_r+0x32>
 8013230:	2140      	movs	r1, #64	; 0x40
 8013232:	f7ff ff3b 	bl	80130ac <_malloc_r>
 8013236:	6028      	str	r0, [r5, #0]
 8013238:	6128      	str	r0, [r5, #16]
 801323a:	b920      	cbnz	r0, 8013246 <_svfiprintf_r+0x2e>
 801323c:	230c      	movs	r3, #12
 801323e:	603b      	str	r3, [r7, #0]
 8013240:	f04f 30ff 	mov.w	r0, #4294967295
 8013244:	e0d1      	b.n	80133ea <_svfiprintf_r+0x1d2>
 8013246:	2340      	movs	r3, #64	; 0x40
 8013248:	616b      	str	r3, [r5, #20]
 801324a:	2300      	movs	r3, #0
 801324c:	9309      	str	r3, [sp, #36]	; 0x24
 801324e:	2320      	movs	r3, #32
 8013250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013254:	f8cd 800c 	str.w	r8, [sp, #12]
 8013258:	2330      	movs	r3, #48	; 0x30
 801325a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013404 <_svfiprintf_r+0x1ec>
 801325e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013262:	f04f 0901 	mov.w	r9, #1
 8013266:	4623      	mov	r3, r4
 8013268:	469a      	mov	sl, r3
 801326a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801326e:	b10a      	cbz	r2, 8013274 <_svfiprintf_r+0x5c>
 8013270:	2a25      	cmp	r2, #37	; 0x25
 8013272:	d1f9      	bne.n	8013268 <_svfiprintf_r+0x50>
 8013274:	ebba 0b04 	subs.w	fp, sl, r4
 8013278:	d00b      	beq.n	8013292 <_svfiprintf_r+0x7a>
 801327a:	465b      	mov	r3, fp
 801327c:	4622      	mov	r2, r4
 801327e:	4629      	mov	r1, r5
 8013280:	4638      	mov	r0, r7
 8013282:	f7ff ff6d 	bl	8013160 <__ssputs_r>
 8013286:	3001      	adds	r0, #1
 8013288:	f000 80aa 	beq.w	80133e0 <_svfiprintf_r+0x1c8>
 801328c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801328e:	445a      	add	r2, fp
 8013290:	9209      	str	r2, [sp, #36]	; 0x24
 8013292:	f89a 3000 	ldrb.w	r3, [sl]
 8013296:	2b00      	cmp	r3, #0
 8013298:	f000 80a2 	beq.w	80133e0 <_svfiprintf_r+0x1c8>
 801329c:	2300      	movs	r3, #0
 801329e:	f04f 32ff 	mov.w	r2, #4294967295
 80132a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132a6:	f10a 0a01 	add.w	sl, sl, #1
 80132aa:	9304      	str	r3, [sp, #16]
 80132ac:	9307      	str	r3, [sp, #28]
 80132ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132b2:	931a      	str	r3, [sp, #104]	; 0x68
 80132b4:	4654      	mov	r4, sl
 80132b6:	2205      	movs	r2, #5
 80132b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132bc:	4851      	ldr	r0, [pc, #324]	; (8013404 <_svfiprintf_r+0x1ec>)
 80132be:	f7ec ff9f 	bl	8000200 <memchr>
 80132c2:	9a04      	ldr	r2, [sp, #16]
 80132c4:	b9d8      	cbnz	r0, 80132fe <_svfiprintf_r+0xe6>
 80132c6:	06d0      	lsls	r0, r2, #27
 80132c8:	bf44      	itt	mi
 80132ca:	2320      	movmi	r3, #32
 80132cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132d0:	0711      	lsls	r1, r2, #28
 80132d2:	bf44      	itt	mi
 80132d4:	232b      	movmi	r3, #43	; 0x2b
 80132d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132da:	f89a 3000 	ldrb.w	r3, [sl]
 80132de:	2b2a      	cmp	r3, #42	; 0x2a
 80132e0:	d015      	beq.n	801330e <_svfiprintf_r+0xf6>
 80132e2:	9a07      	ldr	r2, [sp, #28]
 80132e4:	4654      	mov	r4, sl
 80132e6:	2000      	movs	r0, #0
 80132e8:	f04f 0c0a 	mov.w	ip, #10
 80132ec:	4621      	mov	r1, r4
 80132ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132f2:	3b30      	subs	r3, #48	; 0x30
 80132f4:	2b09      	cmp	r3, #9
 80132f6:	d94e      	bls.n	8013396 <_svfiprintf_r+0x17e>
 80132f8:	b1b0      	cbz	r0, 8013328 <_svfiprintf_r+0x110>
 80132fa:	9207      	str	r2, [sp, #28]
 80132fc:	e014      	b.n	8013328 <_svfiprintf_r+0x110>
 80132fe:	eba0 0308 	sub.w	r3, r0, r8
 8013302:	fa09 f303 	lsl.w	r3, r9, r3
 8013306:	4313      	orrs	r3, r2
 8013308:	9304      	str	r3, [sp, #16]
 801330a:	46a2      	mov	sl, r4
 801330c:	e7d2      	b.n	80132b4 <_svfiprintf_r+0x9c>
 801330e:	9b03      	ldr	r3, [sp, #12]
 8013310:	1d19      	adds	r1, r3, #4
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	9103      	str	r1, [sp, #12]
 8013316:	2b00      	cmp	r3, #0
 8013318:	bfbb      	ittet	lt
 801331a:	425b      	neglt	r3, r3
 801331c:	f042 0202 	orrlt.w	r2, r2, #2
 8013320:	9307      	strge	r3, [sp, #28]
 8013322:	9307      	strlt	r3, [sp, #28]
 8013324:	bfb8      	it	lt
 8013326:	9204      	strlt	r2, [sp, #16]
 8013328:	7823      	ldrb	r3, [r4, #0]
 801332a:	2b2e      	cmp	r3, #46	; 0x2e
 801332c:	d10c      	bne.n	8013348 <_svfiprintf_r+0x130>
 801332e:	7863      	ldrb	r3, [r4, #1]
 8013330:	2b2a      	cmp	r3, #42	; 0x2a
 8013332:	d135      	bne.n	80133a0 <_svfiprintf_r+0x188>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	1d1a      	adds	r2, r3, #4
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	9203      	str	r2, [sp, #12]
 801333c:	2b00      	cmp	r3, #0
 801333e:	bfb8      	it	lt
 8013340:	f04f 33ff 	movlt.w	r3, #4294967295
 8013344:	3402      	adds	r4, #2
 8013346:	9305      	str	r3, [sp, #20]
 8013348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013414 <_svfiprintf_r+0x1fc>
 801334c:	7821      	ldrb	r1, [r4, #0]
 801334e:	2203      	movs	r2, #3
 8013350:	4650      	mov	r0, sl
 8013352:	f7ec ff55 	bl	8000200 <memchr>
 8013356:	b140      	cbz	r0, 801336a <_svfiprintf_r+0x152>
 8013358:	2340      	movs	r3, #64	; 0x40
 801335a:	eba0 000a 	sub.w	r0, r0, sl
 801335e:	fa03 f000 	lsl.w	r0, r3, r0
 8013362:	9b04      	ldr	r3, [sp, #16]
 8013364:	4303      	orrs	r3, r0
 8013366:	3401      	adds	r4, #1
 8013368:	9304      	str	r3, [sp, #16]
 801336a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801336e:	4826      	ldr	r0, [pc, #152]	; (8013408 <_svfiprintf_r+0x1f0>)
 8013370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013374:	2206      	movs	r2, #6
 8013376:	f7ec ff43 	bl	8000200 <memchr>
 801337a:	2800      	cmp	r0, #0
 801337c:	d038      	beq.n	80133f0 <_svfiprintf_r+0x1d8>
 801337e:	4b23      	ldr	r3, [pc, #140]	; (801340c <_svfiprintf_r+0x1f4>)
 8013380:	bb1b      	cbnz	r3, 80133ca <_svfiprintf_r+0x1b2>
 8013382:	9b03      	ldr	r3, [sp, #12]
 8013384:	3307      	adds	r3, #7
 8013386:	f023 0307 	bic.w	r3, r3, #7
 801338a:	3308      	adds	r3, #8
 801338c:	9303      	str	r3, [sp, #12]
 801338e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013390:	4433      	add	r3, r6
 8013392:	9309      	str	r3, [sp, #36]	; 0x24
 8013394:	e767      	b.n	8013266 <_svfiprintf_r+0x4e>
 8013396:	fb0c 3202 	mla	r2, ip, r2, r3
 801339a:	460c      	mov	r4, r1
 801339c:	2001      	movs	r0, #1
 801339e:	e7a5      	b.n	80132ec <_svfiprintf_r+0xd4>
 80133a0:	2300      	movs	r3, #0
 80133a2:	3401      	adds	r4, #1
 80133a4:	9305      	str	r3, [sp, #20]
 80133a6:	4619      	mov	r1, r3
 80133a8:	f04f 0c0a 	mov.w	ip, #10
 80133ac:	4620      	mov	r0, r4
 80133ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133b2:	3a30      	subs	r2, #48	; 0x30
 80133b4:	2a09      	cmp	r2, #9
 80133b6:	d903      	bls.n	80133c0 <_svfiprintf_r+0x1a8>
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d0c5      	beq.n	8013348 <_svfiprintf_r+0x130>
 80133bc:	9105      	str	r1, [sp, #20]
 80133be:	e7c3      	b.n	8013348 <_svfiprintf_r+0x130>
 80133c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80133c4:	4604      	mov	r4, r0
 80133c6:	2301      	movs	r3, #1
 80133c8:	e7f0      	b.n	80133ac <_svfiprintf_r+0x194>
 80133ca:	ab03      	add	r3, sp, #12
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	462a      	mov	r2, r5
 80133d0:	4b0f      	ldr	r3, [pc, #60]	; (8013410 <_svfiprintf_r+0x1f8>)
 80133d2:	a904      	add	r1, sp, #16
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7fc f9d7 	bl	800f788 <_printf_float>
 80133da:	1c42      	adds	r2, r0, #1
 80133dc:	4606      	mov	r6, r0
 80133de:	d1d6      	bne.n	801338e <_svfiprintf_r+0x176>
 80133e0:	89ab      	ldrh	r3, [r5, #12]
 80133e2:	065b      	lsls	r3, r3, #25
 80133e4:	f53f af2c 	bmi.w	8013240 <_svfiprintf_r+0x28>
 80133e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133ea:	b01d      	add	sp, #116	; 0x74
 80133ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f0:	ab03      	add	r3, sp, #12
 80133f2:	9300      	str	r3, [sp, #0]
 80133f4:	462a      	mov	r2, r5
 80133f6:	4b06      	ldr	r3, [pc, #24]	; (8013410 <_svfiprintf_r+0x1f8>)
 80133f8:	a904      	add	r1, sp, #16
 80133fa:	4638      	mov	r0, r7
 80133fc:	f7fc fc68 	bl	800fcd0 <_printf_i>
 8013400:	e7eb      	b.n	80133da <_svfiprintf_r+0x1c2>
 8013402:	bf00      	nop
 8013404:	08016dfc 	.word	0x08016dfc
 8013408:	08016e06 	.word	0x08016e06
 801340c:	0800f789 	.word	0x0800f789
 8013410:	08013161 	.word	0x08013161
 8013414:	08016e02 	.word	0x08016e02

08013418 <_sungetc_r>:
 8013418:	b538      	push	{r3, r4, r5, lr}
 801341a:	1c4b      	adds	r3, r1, #1
 801341c:	4614      	mov	r4, r2
 801341e:	d103      	bne.n	8013428 <_sungetc_r+0x10>
 8013420:	f04f 35ff 	mov.w	r5, #4294967295
 8013424:	4628      	mov	r0, r5
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	8993      	ldrh	r3, [r2, #12]
 801342a:	f023 0320 	bic.w	r3, r3, #32
 801342e:	8193      	strh	r3, [r2, #12]
 8013430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013432:	6852      	ldr	r2, [r2, #4]
 8013434:	b2cd      	uxtb	r5, r1
 8013436:	b18b      	cbz	r3, 801345c <_sungetc_r+0x44>
 8013438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801343a:	4293      	cmp	r3, r2
 801343c:	dd08      	ble.n	8013450 <_sungetc_r+0x38>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	1e5a      	subs	r2, r3, #1
 8013442:	6022      	str	r2, [r4, #0]
 8013444:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013448:	6863      	ldr	r3, [r4, #4]
 801344a:	3301      	adds	r3, #1
 801344c:	6063      	str	r3, [r4, #4]
 801344e:	e7e9      	b.n	8013424 <_sungetc_r+0xc>
 8013450:	4621      	mov	r1, r4
 8013452:	f000 fbe1 	bl	8013c18 <__submore>
 8013456:	2800      	cmp	r0, #0
 8013458:	d0f1      	beq.n	801343e <_sungetc_r+0x26>
 801345a:	e7e1      	b.n	8013420 <_sungetc_r+0x8>
 801345c:	6921      	ldr	r1, [r4, #16]
 801345e:	6823      	ldr	r3, [r4, #0]
 8013460:	b151      	cbz	r1, 8013478 <_sungetc_r+0x60>
 8013462:	4299      	cmp	r1, r3
 8013464:	d208      	bcs.n	8013478 <_sungetc_r+0x60>
 8013466:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801346a:	42a9      	cmp	r1, r5
 801346c:	d104      	bne.n	8013478 <_sungetc_r+0x60>
 801346e:	3b01      	subs	r3, #1
 8013470:	3201      	adds	r2, #1
 8013472:	6023      	str	r3, [r4, #0]
 8013474:	6062      	str	r2, [r4, #4]
 8013476:	e7d5      	b.n	8013424 <_sungetc_r+0xc>
 8013478:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801347c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013480:	6363      	str	r3, [r4, #52]	; 0x34
 8013482:	2303      	movs	r3, #3
 8013484:	63a3      	str	r3, [r4, #56]	; 0x38
 8013486:	4623      	mov	r3, r4
 8013488:	f803 5f46 	strb.w	r5, [r3, #70]!
 801348c:	6023      	str	r3, [r4, #0]
 801348e:	2301      	movs	r3, #1
 8013490:	e7dc      	b.n	801344c <_sungetc_r+0x34>

08013492 <__ssrefill_r>:
 8013492:	b510      	push	{r4, lr}
 8013494:	460c      	mov	r4, r1
 8013496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013498:	b169      	cbz	r1, 80134b6 <__ssrefill_r+0x24>
 801349a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801349e:	4299      	cmp	r1, r3
 80134a0:	d001      	beq.n	80134a6 <__ssrefill_r+0x14>
 80134a2:	f7ff fdb3 	bl	801300c <_free_r>
 80134a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134a8:	6063      	str	r3, [r4, #4]
 80134aa:	2000      	movs	r0, #0
 80134ac:	6360      	str	r0, [r4, #52]	; 0x34
 80134ae:	b113      	cbz	r3, 80134b6 <__ssrefill_r+0x24>
 80134b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80134b2:	6023      	str	r3, [r4, #0]
 80134b4:	bd10      	pop	{r4, pc}
 80134b6:	6923      	ldr	r3, [r4, #16]
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	2300      	movs	r3, #0
 80134bc:	6063      	str	r3, [r4, #4]
 80134be:	89a3      	ldrh	r3, [r4, #12]
 80134c0:	f043 0320 	orr.w	r3, r3, #32
 80134c4:	81a3      	strh	r3, [r4, #12]
 80134c6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ca:	e7f3      	b.n	80134b4 <__ssrefill_r+0x22>

080134cc <__ssvfiscanf_r>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	460c      	mov	r4, r1
 80134d2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80134d6:	2100      	movs	r1, #0
 80134d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80134dc:	49b2      	ldr	r1, [pc, #712]	; (80137a8 <__ssvfiscanf_r+0x2dc>)
 80134de:	91a0      	str	r1, [sp, #640]	; 0x280
 80134e0:	f10d 0804 	add.w	r8, sp, #4
 80134e4:	49b1      	ldr	r1, [pc, #708]	; (80137ac <__ssvfiscanf_r+0x2e0>)
 80134e6:	4fb2      	ldr	r7, [pc, #712]	; (80137b0 <__ssvfiscanf_r+0x2e4>)
 80134e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80137b4 <__ssvfiscanf_r+0x2e8>
 80134ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80134f0:	4606      	mov	r6, r0
 80134f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	f892 a000 	ldrb.w	sl, [r2]
 80134fa:	f1ba 0f00 	cmp.w	sl, #0
 80134fe:	f000 8151 	beq.w	80137a4 <__ssvfiscanf_r+0x2d8>
 8013502:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013506:	f013 0308 	ands.w	r3, r3, #8
 801350a:	f102 0501 	add.w	r5, r2, #1
 801350e:	d019      	beq.n	8013544 <__ssvfiscanf_r+0x78>
 8013510:	6863      	ldr	r3, [r4, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	dd0f      	ble.n	8013536 <__ssvfiscanf_r+0x6a>
 8013516:	6823      	ldr	r3, [r4, #0]
 8013518:	781a      	ldrb	r2, [r3, #0]
 801351a:	5cba      	ldrb	r2, [r7, r2]
 801351c:	0712      	lsls	r2, r2, #28
 801351e:	d401      	bmi.n	8013524 <__ssvfiscanf_r+0x58>
 8013520:	462a      	mov	r2, r5
 8013522:	e7e8      	b.n	80134f6 <__ssvfiscanf_r+0x2a>
 8013524:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013526:	3201      	adds	r2, #1
 8013528:	9245      	str	r2, [sp, #276]	; 0x114
 801352a:	6862      	ldr	r2, [r4, #4]
 801352c:	3301      	adds	r3, #1
 801352e:	3a01      	subs	r2, #1
 8013530:	6062      	str	r2, [r4, #4]
 8013532:	6023      	str	r3, [r4, #0]
 8013534:	e7ec      	b.n	8013510 <__ssvfiscanf_r+0x44>
 8013536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013538:	4621      	mov	r1, r4
 801353a:	4630      	mov	r0, r6
 801353c:	4798      	blx	r3
 801353e:	2800      	cmp	r0, #0
 8013540:	d0e9      	beq.n	8013516 <__ssvfiscanf_r+0x4a>
 8013542:	e7ed      	b.n	8013520 <__ssvfiscanf_r+0x54>
 8013544:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8013548:	f040 8083 	bne.w	8013652 <__ssvfiscanf_r+0x186>
 801354c:	9341      	str	r3, [sp, #260]	; 0x104
 801354e:	9343      	str	r3, [sp, #268]	; 0x10c
 8013550:	7853      	ldrb	r3, [r2, #1]
 8013552:	2b2a      	cmp	r3, #42	; 0x2a
 8013554:	bf02      	ittt	eq
 8013556:	2310      	moveq	r3, #16
 8013558:	1c95      	addeq	r5, r2, #2
 801355a:	9341      	streq	r3, [sp, #260]	; 0x104
 801355c:	220a      	movs	r2, #10
 801355e:	46ab      	mov	fp, r5
 8013560:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013564:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013568:	2b09      	cmp	r3, #9
 801356a:	d91d      	bls.n	80135a8 <__ssvfiscanf_r+0xdc>
 801356c:	4891      	ldr	r0, [pc, #580]	; (80137b4 <__ssvfiscanf_r+0x2e8>)
 801356e:	2203      	movs	r2, #3
 8013570:	f7ec fe46 	bl	8000200 <memchr>
 8013574:	b140      	cbz	r0, 8013588 <__ssvfiscanf_r+0xbc>
 8013576:	2301      	movs	r3, #1
 8013578:	eba0 0009 	sub.w	r0, r0, r9
 801357c:	fa03 f000 	lsl.w	r0, r3, r0
 8013580:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013582:	4318      	orrs	r0, r3
 8013584:	9041      	str	r0, [sp, #260]	; 0x104
 8013586:	465d      	mov	r5, fp
 8013588:	f815 3b01 	ldrb.w	r3, [r5], #1
 801358c:	2b78      	cmp	r3, #120	; 0x78
 801358e:	d806      	bhi.n	801359e <__ssvfiscanf_r+0xd2>
 8013590:	2b57      	cmp	r3, #87	; 0x57
 8013592:	d810      	bhi.n	80135b6 <__ssvfiscanf_r+0xea>
 8013594:	2b25      	cmp	r3, #37	; 0x25
 8013596:	d05c      	beq.n	8013652 <__ssvfiscanf_r+0x186>
 8013598:	d856      	bhi.n	8013648 <__ssvfiscanf_r+0x17c>
 801359a:	2b00      	cmp	r3, #0
 801359c:	d074      	beq.n	8013688 <__ssvfiscanf_r+0x1bc>
 801359e:	2303      	movs	r3, #3
 80135a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80135a2:	230a      	movs	r3, #10
 80135a4:	9342      	str	r3, [sp, #264]	; 0x108
 80135a6:	e081      	b.n	80136ac <__ssvfiscanf_r+0x1e0>
 80135a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80135aa:	fb02 1303 	mla	r3, r2, r3, r1
 80135ae:	3b30      	subs	r3, #48	; 0x30
 80135b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80135b2:	465d      	mov	r5, fp
 80135b4:	e7d3      	b.n	801355e <__ssvfiscanf_r+0x92>
 80135b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80135ba:	2a20      	cmp	r2, #32
 80135bc:	d8ef      	bhi.n	801359e <__ssvfiscanf_r+0xd2>
 80135be:	a101      	add	r1, pc, #4	; (adr r1, 80135c4 <__ssvfiscanf_r+0xf8>)
 80135c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80135c4:	08013697 	.word	0x08013697
 80135c8:	0801359f 	.word	0x0801359f
 80135cc:	0801359f 	.word	0x0801359f
 80135d0:	080136f5 	.word	0x080136f5
 80135d4:	0801359f 	.word	0x0801359f
 80135d8:	0801359f 	.word	0x0801359f
 80135dc:	0801359f 	.word	0x0801359f
 80135e0:	0801359f 	.word	0x0801359f
 80135e4:	0801359f 	.word	0x0801359f
 80135e8:	0801359f 	.word	0x0801359f
 80135ec:	0801359f 	.word	0x0801359f
 80135f0:	0801370b 	.word	0x0801370b
 80135f4:	080136e1 	.word	0x080136e1
 80135f8:	0801364f 	.word	0x0801364f
 80135fc:	0801364f 	.word	0x0801364f
 8013600:	0801364f 	.word	0x0801364f
 8013604:	0801359f 	.word	0x0801359f
 8013608:	080136e5 	.word	0x080136e5
 801360c:	0801359f 	.word	0x0801359f
 8013610:	0801359f 	.word	0x0801359f
 8013614:	0801359f 	.word	0x0801359f
 8013618:	0801359f 	.word	0x0801359f
 801361c:	0801371b 	.word	0x0801371b
 8013620:	080136ed 	.word	0x080136ed
 8013624:	0801368f 	.word	0x0801368f
 8013628:	0801359f 	.word	0x0801359f
 801362c:	0801359f 	.word	0x0801359f
 8013630:	08013717 	.word	0x08013717
 8013634:	0801359f 	.word	0x0801359f
 8013638:	080136e1 	.word	0x080136e1
 801363c:	0801359f 	.word	0x0801359f
 8013640:	0801359f 	.word	0x0801359f
 8013644:	08013697 	.word	0x08013697
 8013648:	3b45      	subs	r3, #69	; 0x45
 801364a:	2b02      	cmp	r3, #2
 801364c:	d8a7      	bhi.n	801359e <__ssvfiscanf_r+0xd2>
 801364e:	2305      	movs	r3, #5
 8013650:	e02b      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 8013652:	6863      	ldr	r3, [r4, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	dd0d      	ble.n	8013674 <__ssvfiscanf_r+0x1a8>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	781a      	ldrb	r2, [r3, #0]
 801365c:	4552      	cmp	r2, sl
 801365e:	f040 80a1 	bne.w	80137a4 <__ssvfiscanf_r+0x2d8>
 8013662:	3301      	adds	r3, #1
 8013664:	6862      	ldr	r2, [r4, #4]
 8013666:	6023      	str	r3, [r4, #0]
 8013668:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801366a:	3a01      	subs	r2, #1
 801366c:	3301      	adds	r3, #1
 801366e:	6062      	str	r2, [r4, #4]
 8013670:	9345      	str	r3, [sp, #276]	; 0x114
 8013672:	e755      	b.n	8013520 <__ssvfiscanf_r+0x54>
 8013674:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013676:	4621      	mov	r1, r4
 8013678:	4630      	mov	r0, r6
 801367a:	4798      	blx	r3
 801367c:	2800      	cmp	r0, #0
 801367e:	d0eb      	beq.n	8013658 <__ssvfiscanf_r+0x18c>
 8013680:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013682:	2800      	cmp	r0, #0
 8013684:	f040 8084 	bne.w	8013790 <__ssvfiscanf_r+0x2c4>
 8013688:	f04f 30ff 	mov.w	r0, #4294967295
 801368c:	e086      	b.n	801379c <__ssvfiscanf_r+0x2d0>
 801368e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013690:	f042 0220 	orr.w	r2, r2, #32
 8013694:	9241      	str	r2, [sp, #260]	; 0x104
 8013696:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801369c:	9241      	str	r2, [sp, #260]	; 0x104
 801369e:	2210      	movs	r2, #16
 80136a0:	2b6f      	cmp	r3, #111	; 0x6f
 80136a2:	9242      	str	r2, [sp, #264]	; 0x108
 80136a4:	bf34      	ite	cc
 80136a6:	2303      	movcc	r3, #3
 80136a8:	2304      	movcs	r3, #4
 80136aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80136ac:	6863      	ldr	r3, [r4, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	dd41      	ble.n	8013736 <__ssvfiscanf_r+0x26a>
 80136b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80136b4:	0659      	lsls	r1, r3, #25
 80136b6:	d404      	bmi.n	80136c2 <__ssvfiscanf_r+0x1f6>
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	781a      	ldrb	r2, [r3, #0]
 80136bc:	5cba      	ldrb	r2, [r7, r2]
 80136be:	0712      	lsls	r2, r2, #28
 80136c0:	d440      	bmi.n	8013744 <__ssvfiscanf_r+0x278>
 80136c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80136c4:	2b02      	cmp	r3, #2
 80136c6:	dc4f      	bgt.n	8013768 <__ssvfiscanf_r+0x29c>
 80136c8:	466b      	mov	r3, sp
 80136ca:	4622      	mov	r2, r4
 80136cc:	a941      	add	r1, sp, #260	; 0x104
 80136ce:	4630      	mov	r0, r6
 80136d0:	f000 f874 	bl	80137bc <_scanf_chars>
 80136d4:	2801      	cmp	r0, #1
 80136d6:	d065      	beq.n	80137a4 <__ssvfiscanf_r+0x2d8>
 80136d8:	2802      	cmp	r0, #2
 80136da:	f47f af21 	bne.w	8013520 <__ssvfiscanf_r+0x54>
 80136de:	e7cf      	b.n	8013680 <__ssvfiscanf_r+0x1b4>
 80136e0:	220a      	movs	r2, #10
 80136e2:	e7dd      	b.n	80136a0 <__ssvfiscanf_r+0x1d4>
 80136e4:	2300      	movs	r3, #0
 80136e6:	9342      	str	r3, [sp, #264]	; 0x108
 80136e8:	2303      	movs	r3, #3
 80136ea:	e7de      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 80136ec:	2308      	movs	r3, #8
 80136ee:	9342      	str	r3, [sp, #264]	; 0x108
 80136f0:	2304      	movs	r3, #4
 80136f2:	e7da      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 80136f4:	4629      	mov	r1, r5
 80136f6:	4640      	mov	r0, r8
 80136f8:	f000 f9d6 	bl	8013aa8 <__sccl>
 80136fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80136fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013702:	9341      	str	r3, [sp, #260]	; 0x104
 8013704:	4605      	mov	r5, r0
 8013706:	2301      	movs	r3, #1
 8013708:	e7cf      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 801370a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013710:	9341      	str	r3, [sp, #260]	; 0x104
 8013712:	2300      	movs	r3, #0
 8013714:	e7c9      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 8013716:	2302      	movs	r3, #2
 8013718:	e7c7      	b.n	80136aa <__ssvfiscanf_r+0x1de>
 801371a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801371c:	06c3      	lsls	r3, r0, #27
 801371e:	f53f aeff 	bmi.w	8013520 <__ssvfiscanf_r+0x54>
 8013722:	9b00      	ldr	r3, [sp, #0]
 8013724:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013726:	1d19      	adds	r1, r3, #4
 8013728:	9100      	str	r1, [sp, #0]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	07c0      	lsls	r0, r0, #31
 801372e:	bf4c      	ite	mi
 8013730:	801a      	strhmi	r2, [r3, #0]
 8013732:	601a      	strpl	r2, [r3, #0]
 8013734:	e6f4      	b.n	8013520 <__ssvfiscanf_r+0x54>
 8013736:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013738:	4621      	mov	r1, r4
 801373a:	4630      	mov	r0, r6
 801373c:	4798      	blx	r3
 801373e:	2800      	cmp	r0, #0
 8013740:	d0b7      	beq.n	80136b2 <__ssvfiscanf_r+0x1e6>
 8013742:	e79d      	b.n	8013680 <__ssvfiscanf_r+0x1b4>
 8013744:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013746:	3201      	adds	r2, #1
 8013748:	9245      	str	r2, [sp, #276]	; 0x114
 801374a:	6862      	ldr	r2, [r4, #4]
 801374c:	3a01      	subs	r2, #1
 801374e:	2a00      	cmp	r2, #0
 8013750:	6062      	str	r2, [r4, #4]
 8013752:	dd02      	ble.n	801375a <__ssvfiscanf_r+0x28e>
 8013754:	3301      	adds	r3, #1
 8013756:	6023      	str	r3, [r4, #0]
 8013758:	e7ae      	b.n	80136b8 <__ssvfiscanf_r+0x1ec>
 801375a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801375c:	4621      	mov	r1, r4
 801375e:	4630      	mov	r0, r6
 8013760:	4798      	blx	r3
 8013762:	2800      	cmp	r0, #0
 8013764:	d0a8      	beq.n	80136b8 <__ssvfiscanf_r+0x1ec>
 8013766:	e78b      	b.n	8013680 <__ssvfiscanf_r+0x1b4>
 8013768:	2b04      	cmp	r3, #4
 801376a:	dc06      	bgt.n	801377a <__ssvfiscanf_r+0x2ae>
 801376c:	466b      	mov	r3, sp
 801376e:	4622      	mov	r2, r4
 8013770:	a941      	add	r1, sp, #260	; 0x104
 8013772:	4630      	mov	r0, r6
 8013774:	f000 f87a 	bl	801386c <_scanf_i>
 8013778:	e7ac      	b.n	80136d4 <__ssvfiscanf_r+0x208>
 801377a:	4b0f      	ldr	r3, [pc, #60]	; (80137b8 <__ssvfiscanf_r+0x2ec>)
 801377c:	2b00      	cmp	r3, #0
 801377e:	f43f aecf 	beq.w	8013520 <__ssvfiscanf_r+0x54>
 8013782:	466b      	mov	r3, sp
 8013784:	4622      	mov	r2, r4
 8013786:	a941      	add	r1, sp, #260	; 0x104
 8013788:	4630      	mov	r0, r6
 801378a:	f7fc fbc7 	bl	800ff1c <_scanf_float>
 801378e:	e7a1      	b.n	80136d4 <__ssvfiscanf_r+0x208>
 8013790:	89a3      	ldrh	r3, [r4, #12]
 8013792:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013796:	bf18      	it	ne
 8013798:	f04f 30ff 	movne.w	r0, #4294967295
 801379c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80137a6:	e7f9      	b.n	801379c <__ssvfiscanf_r+0x2d0>
 80137a8:	08013419 	.word	0x08013419
 80137ac:	08013493 	.word	0x08013493
 80137b0:	080169f5 	.word	0x080169f5
 80137b4:	08016e02 	.word	0x08016e02
 80137b8:	0800ff1d 	.word	0x0800ff1d

080137bc <_scanf_chars>:
 80137bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c0:	4615      	mov	r5, r2
 80137c2:	688a      	ldr	r2, [r1, #8]
 80137c4:	4680      	mov	r8, r0
 80137c6:	460c      	mov	r4, r1
 80137c8:	b932      	cbnz	r2, 80137d8 <_scanf_chars+0x1c>
 80137ca:	698a      	ldr	r2, [r1, #24]
 80137cc:	2a00      	cmp	r2, #0
 80137ce:	bf0c      	ite	eq
 80137d0:	2201      	moveq	r2, #1
 80137d2:	f04f 32ff 	movne.w	r2, #4294967295
 80137d6:	608a      	str	r2, [r1, #8]
 80137d8:	6822      	ldr	r2, [r4, #0]
 80137da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8013868 <_scanf_chars+0xac>
 80137de:	06d1      	lsls	r1, r2, #27
 80137e0:	bf5f      	itttt	pl
 80137e2:	681a      	ldrpl	r2, [r3, #0]
 80137e4:	1d11      	addpl	r1, r2, #4
 80137e6:	6019      	strpl	r1, [r3, #0]
 80137e8:	6816      	ldrpl	r6, [r2, #0]
 80137ea:	2700      	movs	r7, #0
 80137ec:	69a0      	ldr	r0, [r4, #24]
 80137ee:	b188      	cbz	r0, 8013814 <_scanf_chars+0x58>
 80137f0:	2801      	cmp	r0, #1
 80137f2:	d107      	bne.n	8013804 <_scanf_chars+0x48>
 80137f4:	682b      	ldr	r3, [r5, #0]
 80137f6:	781a      	ldrb	r2, [r3, #0]
 80137f8:	6963      	ldr	r3, [r4, #20]
 80137fa:	5c9b      	ldrb	r3, [r3, r2]
 80137fc:	b953      	cbnz	r3, 8013814 <_scanf_chars+0x58>
 80137fe:	bb27      	cbnz	r7, 801384a <_scanf_chars+0x8e>
 8013800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013804:	2802      	cmp	r0, #2
 8013806:	d120      	bne.n	801384a <_scanf_chars+0x8e>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013810:	071b      	lsls	r3, r3, #28
 8013812:	d41a      	bmi.n	801384a <_scanf_chars+0x8e>
 8013814:	6823      	ldr	r3, [r4, #0]
 8013816:	06da      	lsls	r2, r3, #27
 8013818:	bf5e      	ittt	pl
 801381a:	682b      	ldrpl	r3, [r5, #0]
 801381c:	781b      	ldrbpl	r3, [r3, #0]
 801381e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013822:	682a      	ldr	r2, [r5, #0]
 8013824:	686b      	ldr	r3, [r5, #4]
 8013826:	3201      	adds	r2, #1
 8013828:	602a      	str	r2, [r5, #0]
 801382a:	68a2      	ldr	r2, [r4, #8]
 801382c:	3b01      	subs	r3, #1
 801382e:	3a01      	subs	r2, #1
 8013830:	606b      	str	r3, [r5, #4]
 8013832:	3701      	adds	r7, #1
 8013834:	60a2      	str	r2, [r4, #8]
 8013836:	b142      	cbz	r2, 801384a <_scanf_chars+0x8e>
 8013838:	2b00      	cmp	r3, #0
 801383a:	dcd7      	bgt.n	80137ec <_scanf_chars+0x30>
 801383c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013840:	4629      	mov	r1, r5
 8013842:	4640      	mov	r0, r8
 8013844:	4798      	blx	r3
 8013846:	2800      	cmp	r0, #0
 8013848:	d0d0      	beq.n	80137ec <_scanf_chars+0x30>
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	f013 0310 	ands.w	r3, r3, #16
 8013850:	d105      	bne.n	801385e <_scanf_chars+0xa2>
 8013852:	68e2      	ldr	r2, [r4, #12]
 8013854:	3201      	adds	r2, #1
 8013856:	60e2      	str	r2, [r4, #12]
 8013858:	69a2      	ldr	r2, [r4, #24]
 801385a:	b102      	cbz	r2, 801385e <_scanf_chars+0xa2>
 801385c:	7033      	strb	r3, [r6, #0]
 801385e:	6923      	ldr	r3, [r4, #16]
 8013860:	441f      	add	r7, r3
 8013862:	6127      	str	r7, [r4, #16]
 8013864:	2000      	movs	r0, #0
 8013866:	e7cb      	b.n	8013800 <_scanf_chars+0x44>
 8013868:	080169f5 	.word	0x080169f5

0801386c <_scanf_i>:
 801386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013870:	4698      	mov	r8, r3
 8013872:	4b74      	ldr	r3, [pc, #464]	; (8013a44 <_scanf_i+0x1d8>)
 8013874:	460c      	mov	r4, r1
 8013876:	4682      	mov	sl, r0
 8013878:	4616      	mov	r6, r2
 801387a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801387e:	b087      	sub	sp, #28
 8013880:	ab03      	add	r3, sp, #12
 8013882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013886:	4b70      	ldr	r3, [pc, #448]	; (8013a48 <_scanf_i+0x1dc>)
 8013888:	69a1      	ldr	r1, [r4, #24]
 801388a:	4a70      	ldr	r2, [pc, #448]	; (8013a4c <_scanf_i+0x1e0>)
 801388c:	2903      	cmp	r1, #3
 801388e:	bf18      	it	ne
 8013890:	461a      	movne	r2, r3
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	9201      	str	r2, [sp, #4]
 8013896:	1e5a      	subs	r2, r3, #1
 8013898:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801389c:	bf88      	it	hi
 801389e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80138a2:	4627      	mov	r7, r4
 80138a4:	bf82      	ittt	hi
 80138a6:	eb03 0905 	addhi.w	r9, r3, r5
 80138aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80138ae:	60a3      	strhi	r3, [r4, #8]
 80138b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80138b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80138b8:	bf98      	it	ls
 80138ba:	f04f 0900 	movls.w	r9, #0
 80138be:	6023      	str	r3, [r4, #0]
 80138c0:	463d      	mov	r5, r7
 80138c2:	f04f 0b00 	mov.w	fp, #0
 80138c6:	6831      	ldr	r1, [r6, #0]
 80138c8:	ab03      	add	r3, sp, #12
 80138ca:	7809      	ldrb	r1, [r1, #0]
 80138cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80138d0:	2202      	movs	r2, #2
 80138d2:	f7ec fc95 	bl	8000200 <memchr>
 80138d6:	b328      	cbz	r0, 8013924 <_scanf_i+0xb8>
 80138d8:	f1bb 0f01 	cmp.w	fp, #1
 80138dc:	d159      	bne.n	8013992 <_scanf_i+0x126>
 80138de:	6862      	ldr	r2, [r4, #4]
 80138e0:	b92a      	cbnz	r2, 80138ee <_scanf_i+0x82>
 80138e2:	6822      	ldr	r2, [r4, #0]
 80138e4:	2308      	movs	r3, #8
 80138e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80138ea:	6063      	str	r3, [r4, #4]
 80138ec:	6022      	str	r2, [r4, #0]
 80138ee:	6822      	ldr	r2, [r4, #0]
 80138f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80138f4:	6022      	str	r2, [r4, #0]
 80138f6:	68a2      	ldr	r2, [r4, #8]
 80138f8:	1e51      	subs	r1, r2, #1
 80138fa:	60a1      	str	r1, [r4, #8]
 80138fc:	b192      	cbz	r2, 8013924 <_scanf_i+0xb8>
 80138fe:	6832      	ldr	r2, [r6, #0]
 8013900:	1c51      	adds	r1, r2, #1
 8013902:	6031      	str	r1, [r6, #0]
 8013904:	7812      	ldrb	r2, [r2, #0]
 8013906:	f805 2b01 	strb.w	r2, [r5], #1
 801390a:	6872      	ldr	r2, [r6, #4]
 801390c:	3a01      	subs	r2, #1
 801390e:	2a00      	cmp	r2, #0
 8013910:	6072      	str	r2, [r6, #4]
 8013912:	dc07      	bgt.n	8013924 <_scanf_i+0xb8>
 8013914:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013918:	4631      	mov	r1, r6
 801391a:	4650      	mov	r0, sl
 801391c:	4790      	blx	r2
 801391e:	2800      	cmp	r0, #0
 8013920:	f040 8085 	bne.w	8013a2e <_scanf_i+0x1c2>
 8013924:	f10b 0b01 	add.w	fp, fp, #1
 8013928:	f1bb 0f03 	cmp.w	fp, #3
 801392c:	d1cb      	bne.n	80138c6 <_scanf_i+0x5a>
 801392e:	6863      	ldr	r3, [r4, #4]
 8013930:	b90b      	cbnz	r3, 8013936 <_scanf_i+0xca>
 8013932:	230a      	movs	r3, #10
 8013934:	6063      	str	r3, [r4, #4]
 8013936:	6863      	ldr	r3, [r4, #4]
 8013938:	4945      	ldr	r1, [pc, #276]	; (8013a50 <_scanf_i+0x1e4>)
 801393a:	6960      	ldr	r0, [r4, #20]
 801393c:	1ac9      	subs	r1, r1, r3
 801393e:	f000 f8b3 	bl	8013aa8 <__sccl>
 8013942:	f04f 0b00 	mov.w	fp, #0
 8013946:	68a3      	ldr	r3, [r4, #8]
 8013948:	6822      	ldr	r2, [r4, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d03d      	beq.n	80139ca <_scanf_i+0x15e>
 801394e:	6831      	ldr	r1, [r6, #0]
 8013950:	6960      	ldr	r0, [r4, #20]
 8013952:	f891 c000 	ldrb.w	ip, [r1]
 8013956:	f810 000c 	ldrb.w	r0, [r0, ip]
 801395a:	2800      	cmp	r0, #0
 801395c:	d035      	beq.n	80139ca <_scanf_i+0x15e>
 801395e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013962:	d124      	bne.n	80139ae <_scanf_i+0x142>
 8013964:	0510      	lsls	r0, r2, #20
 8013966:	d522      	bpl.n	80139ae <_scanf_i+0x142>
 8013968:	f10b 0b01 	add.w	fp, fp, #1
 801396c:	f1b9 0f00 	cmp.w	r9, #0
 8013970:	d003      	beq.n	801397a <_scanf_i+0x10e>
 8013972:	3301      	adds	r3, #1
 8013974:	f109 39ff 	add.w	r9, r9, #4294967295
 8013978:	60a3      	str	r3, [r4, #8]
 801397a:	6873      	ldr	r3, [r6, #4]
 801397c:	3b01      	subs	r3, #1
 801397e:	2b00      	cmp	r3, #0
 8013980:	6073      	str	r3, [r6, #4]
 8013982:	dd1b      	ble.n	80139bc <_scanf_i+0x150>
 8013984:	6833      	ldr	r3, [r6, #0]
 8013986:	3301      	adds	r3, #1
 8013988:	6033      	str	r3, [r6, #0]
 801398a:	68a3      	ldr	r3, [r4, #8]
 801398c:	3b01      	subs	r3, #1
 801398e:	60a3      	str	r3, [r4, #8]
 8013990:	e7d9      	b.n	8013946 <_scanf_i+0xda>
 8013992:	f1bb 0f02 	cmp.w	fp, #2
 8013996:	d1ae      	bne.n	80138f6 <_scanf_i+0x8a>
 8013998:	6822      	ldr	r2, [r4, #0]
 801399a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801399e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80139a2:	d1bf      	bne.n	8013924 <_scanf_i+0xb8>
 80139a4:	2310      	movs	r3, #16
 80139a6:	6063      	str	r3, [r4, #4]
 80139a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80139ac:	e7a2      	b.n	80138f4 <_scanf_i+0x88>
 80139ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80139b2:	6022      	str	r2, [r4, #0]
 80139b4:	780b      	ldrb	r3, [r1, #0]
 80139b6:	f805 3b01 	strb.w	r3, [r5], #1
 80139ba:	e7de      	b.n	801397a <_scanf_i+0x10e>
 80139bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80139c0:	4631      	mov	r1, r6
 80139c2:	4650      	mov	r0, sl
 80139c4:	4798      	blx	r3
 80139c6:	2800      	cmp	r0, #0
 80139c8:	d0df      	beq.n	801398a <_scanf_i+0x11e>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	05d9      	lsls	r1, r3, #23
 80139ce:	d50d      	bpl.n	80139ec <_scanf_i+0x180>
 80139d0:	42bd      	cmp	r5, r7
 80139d2:	d909      	bls.n	80139e8 <_scanf_i+0x17c>
 80139d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80139d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139dc:	4632      	mov	r2, r6
 80139de:	4650      	mov	r0, sl
 80139e0:	4798      	blx	r3
 80139e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80139e6:	464d      	mov	r5, r9
 80139e8:	42bd      	cmp	r5, r7
 80139ea:	d028      	beq.n	8013a3e <_scanf_i+0x1d2>
 80139ec:	6822      	ldr	r2, [r4, #0]
 80139ee:	f012 0210 	ands.w	r2, r2, #16
 80139f2:	d113      	bne.n	8013a1c <_scanf_i+0x1b0>
 80139f4:	702a      	strb	r2, [r5, #0]
 80139f6:	6863      	ldr	r3, [r4, #4]
 80139f8:	9e01      	ldr	r6, [sp, #4]
 80139fa:	4639      	mov	r1, r7
 80139fc:	4650      	mov	r0, sl
 80139fe:	47b0      	blx	r6
 8013a00:	f8d8 3000 	ldr.w	r3, [r8]
 8013a04:	6821      	ldr	r1, [r4, #0]
 8013a06:	1d1a      	adds	r2, r3, #4
 8013a08:	f8c8 2000 	str.w	r2, [r8]
 8013a0c:	f011 0f20 	tst.w	r1, #32
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	d00f      	beq.n	8013a34 <_scanf_i+0x1c8>
 8013a14:	6018      	str	r0, [r3, #0]
 8013a16:	68e3      	ldr	r3, [r4, #12]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	60e3      	str	r3, [r4, #12]
 8013a1c:	1bed      	subs	r5, r5, r7
 8013a1e:	44ab      	add	fp, r5
 8013a20:	6925      	ldr	r5, [r4, #16]
 8013a22:	445d      	add	r5, fp
 8013a24:	6125      	str	r5, [r4, #16]
 8013a26:	2000      	movs	r0, #0
 8013a28:	b007      	add	sp, #28
 8013a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2e:	f04f 0b00 	mov.w	fp, #0
 8013a32:	e7ca      	b.n	80139ca <_scanf_i+0x15e>
 8013a34:	07ca      	lsls	r2, r1, #31
 8013a36:	bf4c      	ite	mi
 8013a38:	8018      	strhmi	r0, [r3, #0]
 8013a3a:	6018      	strpl	r0, [r3, #0]
 8013a3c:	e7eb      	b.n	8013a16 <_scanf_i+0x1aa>
 8013a3e:	2001      	movs	r0, #1
 8013a40:	e7f2      	b.n	8013a28 <_scanf_i+0x1bc>
 8013a42:	bf00      	nop
 8013a44:	080169b8 	.word	0x080169b8
 8013a48:	08013c15 	.word	0x08013c15
 8013a4c:	08011201 	.word	0x08011201
 8013a50:	08016e26 	.word	0x08016e26

08013a54 <_read_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	4d07      	ldr	r5, [pc, #28]	; (8013a74 <_read_r+0x20>)
 8013a58:	4604      	mov	r4, r0
 8013a5a:	4608      	mov	r0, r1
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	2200      	movs	r2, #0
 8013a60:	602a      	str	r2, [r5, #0]
 8013a62:	461a      	mov	r2, r3
 8013a64:	f7f4 fc8e 	bl	8008384 <_read>
 8013a68:	1c43      	adds	r3, r0, #1
 8013a6a:	d102      	bne.n	8013a72 <_read_r+0x1e>
 8013a6c:	682b      	ldr	r3, [r5, #0]
 8013a6e:	b103      	cbz	r3, 8013a72 <_read_r+0x1e>
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	bd38      	pop	{r3, r4, r5, pc}
 8013a74:	20003274 	.word	0x20003274

08013a78 <nan>:
 8013a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013a80 <nan+0x8>
 8013a7c:	4770      	bx	lr
 8013a7e:	bf00      	nop
 8013a80:	00000000 	.word	0x00000000
 8013a84:	7ff80000 	.word	0x7ff80000

08013a88 <_sbrk_r>:
 8013a88:	b538      	push	{r3, r4, r5, lr}
 8013a8a:	4d06      	ldr	r5, [pc, #24]	; (8013aa4 <_sbrk_r+0x1c>)
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	4604      	mov	r4, r0
 8013a90:	4608      	mov	r0, r1
 8013a92:	602b      	str	r3, [r5, #0]
 8013a94:	f7f4 fce4 	bl	8008460 <_sbrk>
 8013a98:	1c43      	adds	r3, r0, #1
 8013a9a:	d102      	bne.n	8013aa2 <_sbrk_r+0x1a>
 8013a9c:	682b      	ldr	r3, [r5, #0]
 8013a9e:	b103      	cbz	r3, 8013aa2 <_sbrk_r+0x1a>
 8013aa0:	6023      	str	r3, [r4, #0]
 8013aa2:	bd38      	pop	{r3, r4, r5, pc}
 8013aa4:	20003274 	.word	0x20003274

08013aa8 <__sccl>:
 8013aa8:	b570      	push	{r4, r5, r6, lr}
 8013aaa:	780b      	ldrb	r3, [r1, #0]
 8013aac:	4604      	mov	r4, r0
 8013aae:	2b5e      	cmp	r3, #94	; 0x5e
 8013ab0:	bf0b      	itete	eq
 8013ab2:	784b      	ldrbeq	r3, [r1, #1]
 8013ab4:	1c48      	addne	r0, r1, #1
 8013ab6:	1c88      	addeq	r0, r1, #2
 8013ab8:	2200      	movne	r2, #0
 8013aba:	bf08      	it	eq
 8013abc:	2201      	moveq	r2, #1
 8013abe:	1e61      	subs	r1, r4, #1
 8013ac0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013ac4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013ac8:	42a9      	cmp	r1, r5
 8013aca:	d1fb      	bne.n	8013ac4 <__sccl+0x1c>
 8013acc:	b90b      	cbnz	r3, 8013ad2 <__sccl+0x2a>
 8013ace:	3801      	subs	r0, #1
 8013ad0:	bd70      	pop	{r4, r5, r6, pc}
 8013ad2:	f082 0101 	eor.w	r1, r2, #1
 8013ad6:	54e1      	strb	r1, [r4, r3]
 8013ad8:	1c42      	adds	r2, r0, #1
 8013ada:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8013ade:	2d2d      	cmp	r5, #45	; 0x2d
 8013ae0:	f102 36ff 	add.w	r6, r2, #4294967295
 8013ae4:	4610      	mov	r0, r2
 8013ae6:	d006      	beq.n	8013af6 <__sccl+0x4e>
 8013ae8:	2d5d      	cmp	r5, #93	; 0x5d
 8013aea:	d0f1      	beq.n	8013ad0 <__sccl+0x28>
 8013aec:	b90d      	cbnz	r5, 8013af2 <__sccl+0x4a>
 8013aee:	4630      	mov	r0, r6
 8013af0:	e7ee      	b.n	8013ad0 <__sccl+0x28>
 8013af2:	462b      	mov	r3, r5
 8013af4:	e7ef      	b.n	8013ad6 <__sccl+0x2e>
 8013af6:	7816      	ldrb	r6, [r2, #0]
 8013af8:	2e5d      	cmp	r6, #93	; 0x5d
 8013afa:	d0fa      	beq.n	8013af2 <__sccl+0x4a>
 8013afc:	42b3      	cmp	r3, r6
 8013afe:	dcf8      	bgt.n	8013af2 <__sccl+0x4a>
 8013b00:	4618      	mov	r0, r3
 8013b02:	3001      	adds	r0, #1
 8013b04:	4286      	cmp	r6, r0
 8013b06:	5421      	strb	r1, [r4, r0]
 8013b08:	dcfb      	bgt.n	8013b02 <__sccl+0x5a>
 8013b0a:	43d8      	mvns	r0, r3
 8013b0c:	4430      	add	r0, r6
 8013b0e:	1c5d      	adds	r5, r3, #1
 8013b10:	42b3      	cmp	r3, r6
 8013b12:	bfa8      	it	ge
 8013b14:	2000      	movge	r0, #0
 8013b16:	182b      	adds	r3, r5, r0
 8013b18:	3202      	adds	r2, #2
 8013b1a:	e7de      	b.n	8013ada <__sccl+0x32>

08013b1c <_strtoul_l.isra.0>:
 8013b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b20:	4e3b      	ldr	r6, [pc, #236]	; (8013c10 <_strtoul_l.isra.0+0xf4>)
 8013b22:	4686      	mov	lr, r0
 8013b24:	468c      	mov	ip, r1
 8013b26:	4660      	mov	r0, ip
 8013b28:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013b2c:	5da5      	ldrb	r5, [r4, r6]
 8013b2e:	f015 0508 	ands.w	r5, r5, #8
 8013b32:	d1f8      	bne.n	8013b26 <_strtoul_l.isra.0+0xa>
 8013b34:	2c2d      	cmp	r4, #45	; 0x2d
 8013b36:	d134      	bne.n	8013ba2 <_strtoul_l.isra.0+0x86>
 8013b38:	f89c 4000 	ldrb.w	r4, [ip]
 8013b3c:	f04f 0801 	mov.w	r8, #1
 8013b40:	f100 0c02 	add.w	ip, r0, #2
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d05e      	beq.n	8013c06 <_strtoul_l.isra.0+0xea>
 8013b48:	2b10      	cmp	r3, #16
 8013b4a:	d10c      	bne.n	8013b66 <_strtoul_l.isra.0+0x4a>
 8013b4c:	2c30      	cmp	r4, #48	; 0x30
 8013b4e:	d10a      	bne.n	8013b66 <_strtoul_l.isra.0+0x4a>
 8013b50:	f89c 0000 	ldrb.w	r0, [ip]
 8013b54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013b58:	2858      	cmp	r0, #88	; 0x58
 8013b5a:	d14f      	bne.n	8013bfc <_strtoul_l.isra.0+0xe0>
 8013b5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013b60:	2310      	movs	r3, #16
 8013b62:	f10c 0c02 	add.w	ip, ip, #2
 8013b66:	f04f 37ff 	mov.w	r7, #4294967295
 8013b6a:	2500      	movs	r5, #0
 8013b6c:	fbb7 f7f3 	udiv	r7, r7, r3
 8013b70:	fb03 f907 	mul.w	r9, r3, r7
 8013b74:	ea6f 0909 	mvn.w	r9, r9
 8013b78:	4628      	mov	r0, r5
 8013b7a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013b7e:	2e09      	cmp	r6, #9
 8013b80:	d818      	bhi.n	8013bb4 <_strtoul_l.isra.0+0x98>
 8013b82:	4634      	mov	r4, r6
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	dd24      	ble.n	8013bd2 <_strtoul_l.isra.0+0xb6>
 8013b88:	2d00      	cmp	r5, #0
 8013b8a:	db1f      	blt.n	8013bcc <_strtoul_l.isra.0+0xb0>
 8013b8c:	4287      	cmp	r7, r0
 8013b8e:	d31d      	bcc.n	8013bcc <_strtoul_l.isra.0+0xb0>
 8013b90:	d101      	bne.n	8013b96 <_strtoul_l.isra.0+0x7a>
 8013b92:	45a1      	cmp	r9, r4
 8013b94:	db1a      	blt.n	8013bcc <_strtoul_l.isra.0+0xb0>
 8013b96:	fb00 4003 	mla	r0, r0, r3, r4
 8013b9a:	2501      	movs	r5, #1
 8013b9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013ba0:	e7eb      	b.n	8013b7a <_strtoul_l.isra.0+0x5e>
 8013ba2:	2c2b      	cmp	r4, #43	; 0x2b
 8013ba4:	bf08      	it	eq
 8013ba6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013baa:	46a8      	mov	r8, r5
 8013bac:	bf08      	it	eq
 8013bae:	f100 0c02 	addeq.w	ip, r0, #2
 8013bb2:	e7c7      	b.n	8013b44 <_strtoul_l.isra.0+0x28>
 8013bb4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013bb8:	2e19      	cmp	r6, #25
 8013bba:	d801      	bhi.n	8013bc0 <_strtoul_l.isra.0+0xa4>
 8013bbc:	3c37      	subs	r4, #55	; 0x37
 8013bbe:	e7e1      	b.n	8013b84 <_strtoul_l.isra.0+0x68>
 8013bc0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013bc4:	2e19      	cmp	r6, #25
 8013bc6:	d804      	bhi.n	8013bd2 <_strtoul_l.isra.0+0xb6>
 8013bc8:	3c57      	subs	r4, #87	; 0x57
 8013bca:	e7db      	b.n	8013b84 <_strtoul_l.isra.0+0x68>
 8013bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8013bd0:	e7e4      	b.n	8013b9c <_strtoul_l.isra.0+0x80>
 8013bd2:	2d00      	cmp	r5, #0
 8013bd4:	da07      	bge.n	8013be6 <_strtoul_l.isra.0+0xca>
 8013bd6:	2322      	movs	r3, #34	; 0x22
 8013bd8:	f8ce 3000 	str.w	r3, [lr]
 8013bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013be0:	b942      	cbnz	r2, 8013bf4 <_strtoul_l.isra.0+0xd8>
 8013be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be6:	f1b8 0f00 	cmp.w	r8, #0
 8013bea:	d000      	beq.n	8013bee <_strtoul_l.isra.0+0xd2>
 8013bec:	4240      	negs	r0, r0
 8013bee:	2a00      	cmp	r2, #0
 8013bf0:	d0f7      	beq.n	8013be2 <_strtoul_l.isra.0+0xc6>
 8013bf2:	b10d      	cbz	r5, 8013bf8 <_strtoul_l.isra.0+0xdc>
 8013bf4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013bf8:	6011      	str	r1, [r2, #0]
 8013bfa:	e7f2      	b.n	8013be2 <_strtoul_l.isra.0+0xc6>
 8013bfc:	2430      	movs	r4, #48	; 0x30
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1b1      	bne.n	8013b66 <_strtoul_l.isra.0+0x4a>
 8013c02:	2308      	movs	r3, #8
 8013c04:	e7af      	b.n	8013b66 <_strtoul_l.isra.0+0x4a>
 8013c06:	2c30      	cmp	r4, #48	; 0x30
 8013c08:	d0a2      	beq.n	8013b50 <_strtoul_l.isra.0+0x34>
 8013c0a:	230a      	movs	r3, #10
 8013c0c:	e7ab      	b.n	8013b66 <_strtoul_l.isra.0+0x4a>
 8013c0e:	bf00      	nop
 8013c10:	080169f5 	.word	0x080169f5

08013c14 <_strtoul_r>:
 8013c14:	f7ff bf82 	b.w	8013b1c <_strtoul_l.isra.0>

08013c18 <__submore>:
 8013c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1c:	460c      	mov	r4, r1
 8013c1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c24:	4299      	cmp	r1, r3
 8013c26:	d11d      	bne.n	8013c64 <__submore+0x4c>
 8013c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c2c:	f7ff fa3e 	bl	80130ac <_malloc_r>
 8013c30:	b918      	cbnz	r0, 8013c3a <__submore+0x22>
 8013c32:	f04f 30ff 	mov.w	r0, #4294967295
 8013c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013c3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013c40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013c44:	6360      	str	r0, [r4, #52]	; 0x34
 8013c46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013c4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013c4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013c52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013c56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013c5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013c5e:	6020      	str	r0, [r4, #0]
 8013c60:	2000      	movs	r0, #0
 8013c62:	e7e8      	b.n	8013c36 <__submore+0x1e>
 8013c64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013c66:	0077      	lsls	r7, r6, #1
 8013c68:	463a      	mov	r2, r7
 8013c6a:	f000 fa2d 	bl	80140c8 <_realloc_r>
 8013c6e:	4605      	mov	r5, r0
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d0de      	beq.n	8013c32 <__submore+0x1a>
 8013c74:	eb00 0806 	add.w	r8, r0, r6
 8013c78:	4601      	mov	r1, r0
 8013c7a:	4632      	mov	r2, r6
 8013c7c:	4640      	mov	r0, r8
 8013c7e:	f7fb fccd 	bl	800f61c <memcpy>
 8013c82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013c86:	f8c4 8000 	str.w	r8, [r4]
 8013c8a:	e7e9      	b.n	8013c60 <__submore+0x48>

08013c8c <__ascii_wctomb>:
 8013c8c:	b149      	cbz	r1, 8013ca2 <__ascii_wctomb+0x16>
 8013c8e:	2aff      	cmp	r2, #255	; 0xff
 8013c90:	bf85      	ittet	hi
 8013c92:	238a      	movhi	r3, #138	; 0x8a
 8013c94:	6003      	strhi	r3, [r0, #0]
 8013c96:	700a      	strbls	r2, [r1, #0]
 8013c98:	f04f 30ff 	movhi.w	r0, #4294967295
 8013c9c:	bf98      	it	ls
 8013c9e:	2001      	movls	r0, #1
 8013ca0:	4770      	bx	lr
 8013ca2:	4608      	mov	r0, r1
 8013ca4:	4770      	bx	lr
	...

08013ca8 <__assert_func>:
 8013ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013caa:	4614      	mov	r4, r2
 8013cac:	461a      	mov	r2, r3
 8013cae:	4b09      	ldr	r3, [pc, #36]	; (8013cd4 <__assert_func+0x2c>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	68d8      	ldr	r0, [r3, #12]
 8013cb6:	b14c      	cbz	r4, 8013ccc <__assert_func+0x24>
 8013cb8:	4b07      	ldr	r3, [pc, #28]	; (8013cd8 <__assert_func+0x30>)
 8013cba:	9100      	str	r1, [sp, #0]
 8013cbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cc0:	4906      	ldr	r1, [pc, #24]	; (8013cdc <__assert_func+0x34>)
 8013cc2:	462b      	mov	r3, r5
 8013cc4:	f000 f9a6 	bl	8014014 <fiprintf>
 8013cc8:	f000 fc3e 	bl	8014548 <abort>
 8013ccc:	4b04      	ldr	r3, [pc, #16]	; (8013ce0 <__assert_func+0x38>)
 8013cce:	461c      	mov	r4, r3
 8013cd0:	e7f3      	b.n	8013cba <__assert_func+0x12>
 8013cd2:	bf00      	nop
 8013cd4:	20000274 	.word	0x20000274
 8013cd8:	08016e28 	.word	0x08016e28
 8013cdc:	08016e35 	.word	0x08016e35
 8013ce0:	08016e63 	.word	0x08016e63

08013ce4 <__sflush_r>:
 8013ce4:	898a      	ldrh	r2, [r1, #12]
 8013ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cea:	4605      	mov	r5, r0
 8013cec:	0710      	lsls	r0, r2, #28
 8013cee:	460c      	mov	r4, r1
 8013cf0:	d458      	bmi.n	8013da4 <__sflush_r+0xc0>
 8013cf2:	684b      	ldr	r3, [r1, #4]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	dc05      	bgt.n	8013d04 <__sflush_r+0x20>
 8013cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	dc02      	bgt.n	8013d04 <__sflush_r+0x20>
 8013cfe:	2000      	movs	r0, #0
 8013d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d06:	2e00      	cmp	r6, #0
 8013d08:	d0f9      	beq.n	8013cfe <__sflush_r+0x1a>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d10:	682f      	ldr	r7, [r5, #0]
 8013d12:	602b      	str	r3, [r5, #0]
 8013d14:	d032      	beq.n	8013d7c <__sflush_r+0x98>
 8013d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d18:	89a3      	ldrh	r3, [r4, #12]
 8013d1a:	075a      	lsls	r2, r3, #29
 8013d1c:	d505      	bpl.n	8013d2a <__sflush_r+0x46>
 8013d1e:	6863      	ldr	r3, [r4, #4]
 8013d20:	1ac0      	subs	r0, r0, r3
 8013d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d24:	b10b      	cbz	r3, 8013d2a <__sflush_r+0x46>
 8013d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d28:	1ac0      	subs	r0, r0, r3
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d30:	6a21      	ldr	r1, [r4, #32]
 8013d32:	4628      	mov	r0, r5
 8013d34:	47b0      	blx	r6
 8013d36:	1c43      	adds	r3, r0, #1
 8013d38:	89a3      	ldrh	r3, [r4, #12]
 8013d3a:	d106      	bne.n	8013d4a <__sflush_r+0x66>
 8013d3c:	6829      	ldr	r1, [r5, #0]
 8013d3e:	291d      	cmp	r1, #29
 8013d40:	d82c      	bhi.n	8013d9c <__sflush_r+0xb8>
 8013d42:	4a2a      	ldr	r2, [pc, #168]	; (8013dec <__sflush_r+0x108>)
 8013d44:	40ca      	lsrs	r2, r1
 8013d46:	07d6      	lsls	r6, r2, #31
 8013d48:	d528      	bpl.n	8013d9c <__sflush_r+0xb8>
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	6062      	str	r2, [r4, #4]
 8013d4e:	04d9      	lsls	r1, r3, #19
 8013d50:	6922      	ldr	r2, [r4, #16]
 8013d52:	6022      	str	r2, [r4, #0]
 8013d54:	d504      	bpl.n	8013d60 <__sflush_r+0x7c>
 8013d56:	1c42      	adds	r2, r0, #1
 8013d58:	d101      	bne.n	8013d5e <__sflush_r+0x7a>
 8013d5a:	682b      	ldr	r3, [r5, #0]
 8013d5c:	b903      	cbnz	r3, 8013d60 <__sflush_r+0x7c>
 8013d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8013d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d62:	602f      	str	r7, [r5, #0]
 8013d64:	2900      	cmp	r1, #0
 8013d66:	d0ca      	beq.n	8013cfe <__sflush_r+0x1a>
 8013d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d6c:	4299      	cmp	r1, r3
 8013d6e:	d002      	beq.n	8013d76 <__sflush_r+0x92>
 8013d70:	4628      	mov	r0, r5
 8013d72:	f7ff f94b 	bl	801300c <_free_r>
 8013d76:	2000      	movs	r0, #0
 8013d78:	6360      	str	r0, [r4, #52]	; 0x34
 8013d7a:	e7c1      	b.n	8013d00 <__sflush_r+0x1c>
 8013d7c:	6a21      	ldr	r1, [r4, #32]
 8013d7e:	2301      	movs	r3, #1
 8013d80:	4628      	mov	r0, r5
 8013d82:	47b0      	blx	r6
 8013d84:	1c41      	adds	r1, r0, #1
 8013d86:	d1c7      	bne.n	8013d18 <__sflush_r+0x34>
 8013d88:	682b      	ldr	r3, [r5, #0]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d0c4      	beq.n	8013d18 <__sflush_r+0x34>
 8013d8e:	2b1d      	cmp	r3, #29
 8013d90:	d001      	beq.n	8013d96 <__sflush_r+0xb2>
 8013d92:	2b16      	cmp	r3, #22
 8013d94:	d101      	bne.n	8013d9a <__sflush_r+0xb6>
 8013d96:	602f      	str	r7, [r5, #0]
 8013d98:	e7b1      	b.n	8013cfe <__sflush_r+0x1a>
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da0:	81a3      	strh	r3, [r4, #12]
 8013da2:	e7ad      	b.n	8013d00 <__sflush_r+0x1c>
 8013da4:	690f      	ldr	r7, [r1, #16]
 8013da6:	2f00      	cmp	r7, #0
 8013da8:	d0a9      	beq.n	8013cfe <__sflush_r+0x1a>
 8013daa:	0793      	lsls	r3, r2, #30
 8013dac:	680e      	ldr	r6, [r1, #0]
 8013dae:	bf08      	it	eq
 8013db0:	694b      	ldreq	r3, [r1, #20]
 8013db2:	600f      	str	r7, [r1, #0]
 8013db4:	bf18      	it	ne
 8013db6:	2300      	movne	r3, #0
 8013db8:	eba6 0807 	sub.w	r8, r6, r7
 8013dbc:	608b      	str	r3, [r1, #8]
 8013dbe:	f1b8 0f00 	cmp.w	r8, #0
 8013dc2:	dd9c      	ble.n	8013cfe <__sflush_r+0x1a>
 8013dc4:	6a21      	ldr	r1, [r4, #32]
 8013dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dc8:	4643      	mov	r3, r8
 8013dca:	463a      	mov	r2, r7
 8013dcc:	4628      	mov	r0, r5
 8013dce:	47b0      	blx	r6
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	dc06      	bgt.n	8013de2 <__sflush_r+0xfe>
 8013dd4:	89a3      	ldrh	r3, [r4, #12]
 8013dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dda:	81a3      	strh	r3, [r4, #12]
 8013ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8013de0:	e78e      	b.n	8013d00 <__sflush_r+0x1c>
 8013de2:	4407      	add	r7, r0
 8013de4:	eba8 0800 	sub.w	r8, r8, r0
 8013de8:	e7e9      	b.n	8013dbe <__sflush_r+0xda>
 8013dea:	bf00      	nop
 8013dec:	20400001 	.word	0x20400001

08013df0 <_fflush_r>:
 8013df0:	b538      	push	{r3, r4, r5, lr}
 8013df2:	690b      	ldr	r3, [r1, #16]
 8013df4:	4605      	mov	r5, r0
 8013df6:	460c      	mov	r4, r1
 8013df8:	b913      	cbnz	r3, 8013e00 <_fflush_r+0x10>
 8013dfa:	2500      	movs	r5, #0
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	bd38      	pop	{r3, r4, r5, pc}
 8013e00:	b118      	cbz	r0, 8013e0a <_fflush_r+0x1a>
 8013e02:	6983      	ldr	r3, [r0, #24]
 8013e04:	b90b      	cbnz	r3, 8013e0a <_fflush_r+0x1a>
 8013e06:	f000 f887 	bl	8013f18 <__sinit>
 8013e0a:	4b14      	ldr	r3, [pc, #80]	; (8013e5c <_fflush_r+0x6c>)
 8013e0c:	429c      	cmp	r4, r3
 8013e0e:	d11b      	bne.n	8013e48 <_fflush_r+0x58>
 8013e10:	686c      	ldr	r4, [r5, #4]
 8013e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d0ef      	beq.n	8013dfa <_fflush_r+0xa>
 8013e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e1c:	07d0      	lsls	r0, r2, #31
 8013e1e:	d404      	bmi.n	8013e2a <_fflush_r+0x3a>
 8013e20:	0599      	lsls	r1, r3, #22
 8013e22:	d402      	bmi.n	8013e2a <_fflush_r+0x3a>
 8013e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e26:	f000 f927 	bl	8014078 <__retarget_lock_acquire_recursive>
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	f7ff ff59 	bl	8013ce4 <__sflush_r>
 8013e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e34:	07da      	lsls	r2, r3, #31
 8013e36:	4605      	mov	r5, r0
 8013e38:	d4e0      	bmi.n	8013dfc <_fflush_r+0xc>
 8013e3a:	89a3      	ldrh	r3, [r4, #12]
 8013e3c:	059b      	lsls	r3, r3, #22
 8013e3e:	d4dd      	bmi.n	8013dfc <_fflush_r+0xc>
 8013e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e42:	f000 f91a 	bl	801407a <__retarget_lock_release_recursive>
 8013e46:	e7d9      	b.n	8013dfc <_fflush_r+0xc>
 8013e48:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <_fflush_r+0x70>)
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	d101      	bne.n	8013e52 <_fflush_r+0x62>
 8013e4e:	68ac      	ldr	r4, [r5, #8]
 8013e50:	e7df      	b.n	8013e12 <_fflush_r+0x22>
 8013e52:	4b04      	ldr	r3, [pc, #16]	; (8013e64 <_fflush_r+0x74>)
 8013e54:	429c      	cmp	r4, r3
 8013e56:	bf08      	it	eq
 8013e58:	68ec      	ldreq	r4, [r5, #12]
 8013e5a:	e7da      	b.n	8013e12 <_fflush_r+0x22>
 8013e5c:	08016e84 	.word	0x08016e84
 8013e60:	08016ea4 	.word	0x08016ea4
 8013e64:	08016e64 	.word	0x08016e64

08013e68 <std>:
 8013e68:	2300      	movs	r3, #0
 8013e6a:	b510      	push	{r4, lr}
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8013e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e76:	6083      	str	r3, [r0, #8]
 8013e78:	8181      	strh	r1, [r0, #12]
 8013e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8013e7c:	81c2      	strh	r2, [r0, #14]
 8013e7e:	6183      	str	r3, [r0, #24]
 8013e80:	4619      	mov	r1, r3
 8013e82:	2208      	movs	r2, #8
 8013e84:	305c      	adds	r0, #92	; 0x5c
 8013e86:	f7fb fbd7 	bl	800f638 <memset>
 8013e8a:	4b05      	ldr	r3, [pc, #20]	; (8013ea0 <std+0x38>)
 8013e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8013e8e:	4b05      	ldr	r3, [pc, #20]	; (8013ea4 <std+0x3c>)
 8013e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e92:	4b05      	ldr	r3, [pc, #20]	; (8013ea8 <std+0x40>)
 8013e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e96:	4b05      	ldr	r3, [pc, #20]	; (8013eac <std+0x44>)
 8013e98:	6224      	str	r4, [r4, #32]
 8013e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8013e9c:	bd10      	pop	{r4, pc}
 8013e9e:	bf00      	nop
 8013ea0:	080103e1 	.word	0x080103e1
 8013ea4:	08010407 	.word	0x08010407
 8013ea8:	0801043f 	.word	0x0801043f
 8013eac:	08010463 	.word	0x08010463

08013eb0 <_cleanup_r>:
 8013eb0:	4901      	ldr	r1, [pc, #4]	; (8013eb8 <_cleanup_r+0x8>)
 8013eb2:	f000 b8c1 	b.w	8014038 <_fwalk_reent>
 8013eb6:	bf00      	nop
 8013eb8:	08013df1 	.word	0x08013df1

08013ebc <__sfmoreglue>:
 8013ebc:	b570      	push	{r4, r5, r6, lr}
 8013ebe:	1e4a      	subs	r2, r1, #1
 8013ec0:	2568      	movs	r5, #104	; 0x68
 8013ec2:	4355      	muls	r5, r2
 8013ec4:	460e      	mov	r6, r1
 8013ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013eca:	f7ff f8ef 	bl	80130ac <_malloc_r>
 8013ece:	4604      	mov	r4, r0
 8013ed0:	b140      	cbz	r0, 8013ee4 <__sfmoreglue+0x28>
 8013ed2:	2100      	movs	r1, #0
 8013ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8013ed8:	300c      	adds	r0, #12
 8013eda:	60a0      	str	r0, [r4, #8]
 8013edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ee0:	f7fb fbaa 	bl	800f638 <memset>
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	bd70      	pop	{r4, r5, r6, pc}

08013ee8 <__sfp_lock_acquire>:
 8013ee8:	4801      	ldr	r0, [pc, #4]	; (8013ef0 <__sfp_lock_acquire+0x8>)
 8013eea:	f000 b8c5 	b.w	8014078 <__retarget_lock_acquire_recursive>
 8013eee:	bf00      	nop
 8013ef0:	20003280 	.word	0x20003280

08013ef4 <__sfp_lock_release>:
 8013ef4:	4801      	ldr	r0, [pc, #4]	; (8013efc <__sfp_lock_release+0x8>)
 8013ef6:	f000 b8c0 	b.w	801407a <__retarget_lock_release_recursive>
 8013efa:	bf00      	nop
 8013efc:	20003280 	.word	0x20003280

08013f00 <__sinit_lock_acquire>:
 8013f00:	4801      	ldr	r0, [pc, #4]	; (8013f08 <__sinit_lock_acquire+0x8>)
 8013f02:	f000 b8b9 	b.w	8014078 <__retarget_lock_acquire_recursive>
 8013f06:	bf00      	nop
 8013f08:	2000327b 	.word	0x2000327b

08013f0c <__sinit_lock_release>:
 8013f0c:	4801      	ldr	r0, [pc, #4]	; (8013f14 <__sinit_lock_release+0x8>)
 8013f0e:	f000 b8b4 	b.w	801407a <__retarget_lock_release_recursive>
 8013f12:	bf00      	nop
 8013f14:	2000327b 	.word	0x2000327b

08013f18 <__sinit>:
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	f7ff fff0 	bl	8013f00 <__sinit_lock_acquire>
 8013f20:	69a3      	ldr	r3, [r4, #24]
 8013f22:	b11b      	cbz	r3, 8013f2c <__sinit+0x14>
 8013f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f28:	f7ff bff0 	b.w	8013f0c <__sinit_lock_release>
 8013f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013f30:	6523      	str	r3, [r4, #80]	; 0x50
 8013f32:	4b13      	ldr	r3, [pc, #76]	; (8013f80 <__sinit+0x68>)
 8013f34:	4a13      	ldr	r2, [pc, #76]	; (8013f84 <__sinit+0x6c>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8013f3a:	42a3      	cmp	r3, r4
 8013f3c:	bf04      	itt	eq
 8013f3e:	2301      	moveq	r3, #1
 8013f40:	61a3      	streq	r3, [r4, #24]
 8013f42:	4620      	mov	r0, r4
 8013f44:	f000 f820 	bl	8013f88 <__sfp>
 8013f48:	6060      	str	r0, [r4, #4]
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f000 f81c 	bl	8013f88 <__sfp>
 8013f50:	60a0      	str	r0, [r4, #8]
 8013f52:	4620      	mov	r0, r4
 8013f54:	f000 f818 	bl	8013f88 <__sfp>
 8013f58:	2200      	movs	r2, #0
 8013f5a:	60e0      	str	r0, [r4, #12]
 8013f5c:	2104      	movs	r1, #4
 8013f5e:	6860      	ldr	r0, [r4, #4]
 8013f60:	f7ff ff82 	bl	8013e68 <std>
 8013f64:	68a0      	ldr	r0, [r4, #8]
 8013f66:	2201      	movs	r2, #1
 8013f68:	2109      	movs	r1, #9
 8013f6a:	f7ff ff7d 	bl	8013e68 <std>
 8013f6e:	68e0      	ldr	r0, [r4, #12]
 8013f70:	2202      	movs	r2, #2
 8013f72:	2112      	movs	r1, #18
 8013f74:	f7ff ff78 	bl	8013e68 <std>
 8013f78:	2301      	movs	r3, #1
 8013f7a:	61a3      	str	r3, [r4, #24]
 8013f7c:	e7d2      	b.n	8013f24 <__sinit+0xc>
 8013f7e:	bf00      	nop
 8013f80:	08016af8 	.word	0x08016af8
 8013f84:	08013eb1 	.word	0x08013eb1

08013f88 <__sfp>:
 8013f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f8a:	4607      	mov	r7, r0
 8013f8c:	f7ff ffac 	bl	8013ee8 <__sfp_lock_acquire>
 8013f90:	4b1e      	ldr	r3, [pc, #120]	; (801400c <__sfp+0x84>)
 8013f92:	681e      	ldr	r6, [r3, #0]
 8013f94:	69b3      	ldr	r3, [r6, #24]
 8013f96:	b913      	cbnz	r3, 8013f9e <__sfp+0x16>
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f7ff ffbd 	bl	8013f18 <__sinit>
 8013f9e:	3648      	adds	r6, #72	; 0x48
 8013fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	d503      	bpl.n	8013fb0 <__sfp+0x28>
 8013fa8:	6833      	ldr	r3, [r6, #0]
 8013faa:	b30b      	cbz	r3, 8013ff0 <__sfp+0x68>
 8013fac:	6836      	ldr	r6, [r6, #0]
 8013fae:	e7f7      	b.n	8013fa0 <__sfp+0x18>
 8013fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013fb4:	b9d5      	cbnz	r5, 8013fec <__sfp+0x64>
 8013fb6:	4b16      	ldr	r3, [pc, #88]	; (8014010 <__sfp+0x88>)
 8013fb8:	60e3      	str	r3, [r4, #12]
 8013fba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8013fc0:	f000 f859 	bl	8014076 <__retarget_lock_init_recursive>
 8013fc4:	f7ff ff96 	bl	8013ef4 <__sfp_lock_release>
 8013fc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013fcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013fd0:	6025      	str	r5, [r4, #0]
 8013fd2:	61a5      	str	r5, [r4, #24]
 8013fd4:	2208      	movs	r2, #8
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013fdc:	f7fb fb2c 	bl	800f638 <memset>
 8013fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013fe8:	4620      	mov	r0, r4
 8013fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fec:	3468      	adds	r4, #104	; 0x68
 8013fee:	e7d9      	b.n	8013fa4 <__sfp+0x1c>
 8013ff0:	2104      	movs	r1, #4
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	f7ff ff62 	bl	8013ebc <__sfmoreglue>
 8013ff8:	4604      	mov	r4, r0
 8013ffa:	6030      	str	r0, [r6, #0]
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	d1d5      	bne.n	8013fac <__sfp+0x24>
 8014000:	f7ff ff78 	bl	8013ef4 <__sfp_lock_release>
 8014004:	230c      	movs	r3, #12
 8014006:	603b      	str	r3, [r7, #0]
 8014008:	e7ee      	b.n	8013fe8 <__sfp+0x60>
 801400a:	bf00      	nop
 801400c:	08016af8 	.word	0x08016af8
 8014010:	ffff0001 	.word	0xffff0001

08014014 <fiprintf>:
 8014014:	b40e      	push	{r1, r2, r3}
 8014016:	b503      	push	{r0, r1, lr}
 8014018:	4601      	mov	r1, r0
 801401a:	ab03      	add	r3, sp, #12
 801401c:	4805      	ldr	r0, [pc, #20]	; (8014034 <fiprintf+0x20>)
 801401e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014022:	6800      	ldr	r0, [r0, #0]
 8014024:	9301      	str	r3, [sp, #4]
 8014026:	f000 f89f 	bl	8014168 <_vfiprintf_r>
 801402a:	b002      	add	sp, #8
 801402c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014030:	b003      	add	sp, #12
 8014032:	4770      	bx	lr
 8014034:	20000274 	.word	0x20000274

08014038 <_fwalk_reent>:
 8014038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801403c:	4606      	mov	r6, r0
 801403e:	4688      	mov	r8, r1
 8014040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014044:	2700      	movs	r7, #0
 8014046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801404a:	f1b9 0901 	subs.w	r9, r9, #1
 801404e:	d505      	bpl.n	801405c <_fwalk_reent+0x24>
 8014050:	6824      	ldr	r4, [r4, #0]
 8014052:	2c00      	cmp	r4, #0
 8014054:	d1f7      	bne.n	8014046 <_fwalk_reent+0xe>
 8014056:	4638      	mov	r0, r7
 8014058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801405c:	89ab      	ldrh	r3, [r5, #12]
 801405e:	2b01      	cmp	r3, #1
 8014060:	d907      	bls.n	8014072 <_fwalk_reent+0x3a>
 8014062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014066:	3301      	adds	r3, #1
 8014068:	d003      	beq.n	8014072 <_fwalk_reent+0x3a>
 801406a:	4629      	mov	r1, r5
 801406c:	4630      	mov	r0, r6
 801406e:	47c0      	blx	r8
 8014070:	4307      	orrs	r7, r0
 8014072:	3568      	adds	r5, #104	; 0x68
 8014074:	e7e9      	b.n	801404a <_fwalk_reent+0x12>

08014076 <__retarget_lock_init_recursive>:
 8014076:	4770      	bx	lr

08014078 <__retarget_lock_acquire_recursive>:
 8014078:	4770      	bx	lr

0801407a <__retarget_lock_release_recursive>:
 801407a:	4770      	bx	lr

0801407c <memmove>:
 801407c:	4288      	cmp	r0, r1
 801407e:	b510      	push	{r4, lr}
 8014080:	eb01 0402 	add.w	r4, r1, r2
 8014084:	d902      	bls.n	801408c <memmove+0x10>
 8014086:	4284      	cmp	r4, r0
 8014088:	4623      	mov	r3, r4
 801408a:	d807      	bhi.n	801409c <memmove+0x20>
 801408c:	1e43      	subs	r3, r0, #1
 801408e:	42a1      	cmp	r1, r4
 8014090:	d008      	beq.n	80140a4 <memmove+0x28>
 8014092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014096:	f803 2f01 	strb.w	r2, [r3, #1]!
 801409a:	e7f8      	b.n	801408e <memmove+0x12>
 801409c:	4402      	add	r2, r0
 801409e:	4601      	mov	r1, r0
 80140a0:	428a      	cmp	r2, r1
 80140a2:	d100      	bne.n	80140a6 <memmove+0x2a>
 80140a4:	bd10      	pop	{r4, pc}
 80140a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140ae:	e7f7      	b.n	80140a0 <memmove+0x24>

080140b0 <__malloc_lock>:
 80140b0:	4801      	ldr	r0, [pc, #4]	; (80140b8 <__malloc_lock+0x8>)
 80140b2:	f7ff bfe1 	b.w	8014078 <__retarget_lock_acquire_recursive>
 80140b6:	bf00      	nop
 80140b8:	2000327c 	.word	0x2000327c

080140bc <__malloc_unlock>:
 80140bc:	4801      	ldr	r0, [pc, #4]	; (80140c4 <__malloc_unlock+0x8>)
 80140be:	f7ff bfdc 	b.w	801407a <__retarget_lock_release_recursive>
 80140c2:	bf00      	nop
 80140c4:	2000327c 	.word	0x2000327c

080140c8 <_realloc_r>:
 80140c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ca:	4607      	mov	r7, r0
 80140cc:	4614      	mov	r4, r2
 80140ce:	460e      	mov	r6, r1
 80140d0:	b921      	cbnz	r1, 80140dc <_realloc_r+0x14>
 80140d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80140d6:	4611      	mov	r1, r2
 80140d8:	f7fe bfe8 	b.w	80130ac <_malloc_r>
 80140dc:	b922      	cbnz	r2, 80140e8 <_realloc_r+0x20>
 80140de:	f7fe ff95 	bl	801300c <_free_r>
 80140e2:	4625      	mov	r5, r4
 80140e4:	4628      	mov	r0, r5
 80140e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e8:	f000 fa9a 	bl	8014620 <_malloc_usable_size_r>
 80140ec:	42a0      	cmp	r0, r4
 80140ee:	d20f      	bcs.n	8014110 <_realloc_r+0x48>
 80140f0:	4621      	mov	r1, r4
 80140f2:	4638      	mov	r0, r7
 80140f4:	f7fe ffda 	bl	80130ac <_malloc_r>
 80140f8:	4605      	mov	r5, r0
 80140fa:	2800      	cmp	r0, #0
 80140fc:	d0f2      	beq.n	80140e4 <_realloc_r+0x1c>
 80140fe:	4631      	mov	r1, r6
 8014100:	4622      	mov	r2, r4
 8014102:	f7fb fa8b 	bl	800f61c <memcpy>
 8014106:	4631      	mov	r1, r6
 8014108:	4638      	mov	r0, r7
 801410a:	f7fe ff7f 	bl	801300c <_free_r>
 801410e:	e7e9      	b.n	80140e4 <_realloc_r+0x1c>
 8014110:	4635      	mov	r5, r6
 8014112:	e7e7      	b.n	80140e4 <_realloc_r+0x1c>

08014114 <__sfputc_r>:
 8014114:	6893      	ldr	r3, [r2, #8]
 8014116:	3b01      	subs	r3, #1
 8014118:	2b00      	cmp	r3, #0
 801411a:	b410      	push	{r4}
 801411c:	6093      	str	r3, [r2, #8]
 801411e:	da08      	bge.n	8014132 <__sfputc_r+0x1e>
 8014120:	6994      	ldr	r4, [r2, #24]
 8014122:	42a3      	cmp	r3, r4
 8014124:	db01      	blt.n	801412a <__sfputc_r+0x16>
 8014126:	290a      	cmp	r1, #10
 8014128:	d103      	bne.n	8014132 <__sfputc_r+0x1e>
 801412a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801412e:	f000 b94b 	b.w	80143c8 <__swbuf_r>
 8014132:	6813      	ldr	r3, [r2, #0]
 8014134:	1c58      	adds	r0, r3, #1
 8014136:	6010      	str	r0, [r2, #0]
 8014138:	7019      	strb	r1, [r3, #0]
 801413a:	4608      	mov	r0, r1
 801413c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014140:	4770      	bx	lr

08014142 <__sfputs_r>:
 8014142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014144:	4606      	mov	r6, r0
 8014146:	460f      	mov	r7, r1
 8014148:	4614      	mov	r4, r2
 801414a:	18d5      	adds	r5, r2, r3
 801414c:	42ac      	cmp	r4, r5
 801414e:	d101      	bne.n	8014154 <__sfputs_r+0x12>
 8014150:	2000      	movs	r0, #0
 8014152:	e007      	b.n	8014164 <__sfputs_r+0x22>
 8014154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014158:	463a      	mov	r2, r7
 801415a:	4630      	mov	r0, r6
 801415c:	f7ff ffda 	bl	8014114 <__sfputc_r>
 8014160:	1c43      	adds	r3, r0, #1
 8014162:	d1f3      	bne.n	801414c <__sfputs_r+0xa>
 8014164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014168 <_vfiprintf_r>:
 8014168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	460d      	mov	r5, r1
 801416e:	b09d      	sub	sp, #116	; 0x74
 8014170:	4614      	mov	r4, r2
 8014172:	4698      	mov	r8, r3
 8014174:	4606      	mov	r6, r0
 8014176:	b118      	cbz	r0, 8014180 <_vfiprintf_r+0x18>
 8014178:	6983      	ldr	r3, [r0, #24]
 801417a:	b90b      	cbnz	r3, 8014180 <_vfiprintf_r+0x18>
 801417c:	f7ff fecc 	bl	8013f18 <__sinit>
 8014180:	4b89      	ldr	r3, [pc, #548]	; (80143a8 <_vfiprintf_r+0x240>)
 8014182:	429d      	cmp	r5, r3
 8014184:	d11b      	bne.n	80141be <_vfiprintf_r+0x56>
 8014186:	6875      	ldr	r5, [r6, #4]
 8014188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801418a:	07d9      	lsls	r1, r3, #31
 801418c:	d405      	bmi.n	801419a <_vfiprintf_r+0x32>
 801418e:	89ab      	ldrh	r3, [r5, #12]
 8014190:	059a      	lsls	r2, r3, #22
 8014192:	d402      	bmi.n	801419a <_vfiprintf_r+0x32>
 8014194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014196:	f7ff ff6f 	bl	8014078 <__retarget_lock_acquire_recursive>
 801419a:	89ab      	ldrh	r3, [r5, #12]
 801419c:	071b      	lsls	r3, r3, #28
 801419e:	d501      	bpl.n	80141a4 <_vfiprintf_r+0x3c>
 80141a0:	692b      	ldr	r3, [r5, #16]
 80141a2:	b9eb      	cbnz	r3, 80141e0 <_vfiprintf_r+0x78>
 80141a4:	4629      	mov	r1, r5
 80141a6:	4630      	mov	r0, r6
 80141a8:	f000 f960 	bl	801446c <__swsetup_r>
 80141ac:	b1c0      	cbz	r0, 80141e0 <_vfiprintf_r+0x78>
 80141ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141b0:	07dc      	lsls	r4, r3, #31
 80141b2:	d50e      	bpl.n	80141d2 <_vfiprintf_r+0x6a>
 80141b4:	f04f 30ff 	mov.w	r0, #4294967295
 80141b8:	b01d      	add	sp, #116	; 0x74
 80141ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141be:	4b7b      	ldr	r3, [pc, #492]	; (80143ac <_vfiprintf_r+0x244>)
 80141c0:	429d      	cmp	r5, r3
 80141c2:	d101      	bne.n	80141c8 <_vfiprintf_r+0x60>
 80141c4:	68b5      	ldr	r5, [r6, #8]
 80141c6:	e7df      	b.n	8014188 <_vfiprintf_r+0x20>
 80141c8:	4b79      	ldr	r3, [pc, #484]	; (80143b0 <_vfiprintf_r+0x248>)
 80141ca:	429d      	cmp	r5, r3
 80141cc:	bf08      	it	eq
 80141ce:	68f5      	ldreq	r5, [r6, #12]
 80141d0:	e7da      	b.n	8014188 <_vfiprintf_r+0x20>
 80141d2:	89ab      	ldrh	r3, [r5, #12]
 80141d4:	0598      	lsls	r0, r3, #22
 80141d6:	d4ed      	bmi.n	80141b4 <_vfiprintf_r+0x4c>
 80141d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141da:	f7ff ff4e 	bl	801407a <__retarget_lock_release_recursive>
 80141de:	e7e9      	b.n	80141b4 <_vfiprintf_r+0x4c>
 80141e0:	2300      	movs	r3, #0
 80141e2:	9309      	str	r3, [sp, #36]	; 0x24
 80141e4:	2320      	movs	r3, #32
 80141e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80141ee:	2330      	movs	r3, #48	; 0x30
 80141f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80143b4 <_vfiprintf_r+0x24c>
 80141f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80141f8:	f04f 0901 	mov.w	r9, #1
 80141fc:	4623      	mov	r3, r4
 80141fe:	469a      	mov	sl, r3
 8014200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014204:	b10a      	cbz	r2, 801420a <_vfiprintf_r+0xa2>
 8014206:	2a25      	cmp	r2, #37	; 0x25
 8014208:	d1f9      	bne.n	80141fe <_vfiprintf_r+0x96>
 801420a:	ebba 0b04 	subs.w	fp, sl, r4
 801420e:	d00b      	beq.n	8014228 <_vfiprintf_r+0xc0>
 8014210:	465b      	mov	r3, fp
 8014212:	4622      	mov	r2, r4
 8014214:	4629      	mov	r1, r5
 8014216:	4630      	mov	r0, r6
 8014218:	f7ff ff93 	bl	8014142 <__sfputs_r>
 801421c:	3001      	adds	r0, #1
 801421e:	f000 80aa 	beq.w	8014376 <_vfiprintf_r+0x20e>
 8014222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014224:	445a      	add	r2, fp
 8014226:	9209      	str	r2, [sp, #36]	; 0x24
 8014228:	f89a 3000 	ldrb.w	r3, [sl]
 801422c:	2b00      	cmp	r3, #0
 801422e:	f000 80a2 	beq.w	8014376 <_vfiprintf_r+0x20e>
 8014232:	2300      	movs	r3, #0
 8014234:	f04f 32ff 	mov.w	r2, #4294967295
 8014238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801423c:	f10a 0a01 	add.w	sl, sl, #1
 8014240:	9304      	str	r3, [sp, #16]
 8014242:	9307      	str	r3, [sp, #28]
 8014244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014248:	931a      	str	r3, [sp, #104]	; 0x68
 801424a:	4654      	mov	r4, sl
 801424c:	2205      	movs	r2, #5
 801424e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014252:	4858      	ldr	r0, [pc, #352]	; (80143b4 <_vfiprintf_r+0x24c>)
 8014254:	f7eb ffd4 	bl	8000200 <memchr>
 8014258:	9a04      	ldr	r2, [sp, #16]
 801425a:	b9d8      	cbnz	r0, 8014294 <_vfiprintf_r+0x12c>
 801425c:	06d1      	lsls	r1, r2, #27
 801425e:	bf44      	itt	mi
 8014260:	2320      	movmi	r3, #32
 8014262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014266:	0713      	lsls	r3, r2, #28
 8014268:	bf44      	itt	mi
 801426a:	232b      	movmi	r3, #43	; 0x2b
 801426c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014270:	f89a 3000 	ldrb.w	r3, [sl]
 8014274:	2b2a      	cmp	r3, #42	; 0x2a
 8014276:	d015      	beq.n	80142a4 <_vfiprintf_r+0x13c>
 8014278:	9a07      	ldr	r2, [sp, #28]
 801427a:	4654      	mov	r4, sl
 801427c:	2000      	movs	r0, #0
 801427e:	f04f 0c0a 	mov.w	ip, #10
 8014282:	4621      	mov	r1, r4
 8014284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014288:	3b30      	subs	r3, #48	; 0x30
 801428a:	2b09      	cmp	r3, #9
 801428c:	d94e      	bls.n	801432c <_vfiprintf_r+0x1c4>
 801428e:	b1b0      	cbz	r0, 80142be <_vfiprintf_r+0x156>
 8014290:	9207      	str	r2, [sp, #28]
 8014292:	e014      	b.n	80142be <_vfiprintf_r+0x156>
 8014294:	eba0 0308 	sub.w	r3, r0, r8
 8014298:	fa09 f303 	lsl.w	r3, r9, r3
 801429c:	4313      	orrs	r3, r2
 801429e:	9304      	str	r3, [sp, #16]
 80142a0:	46a2      	mov	sl, r4
 80142a2:	e7d2      	b.n	801424a <_vfiprintf_r+0xe2>
 80142a4:	9b03      	ldr	r3, [sp, #12]
 80142a6:	1d19      	adds	r1, r3, #4
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	9103      	str	r1, [sp, #12]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	bfbb      	ittet	lt
 80142b0:	425b      	neglt	r3, r3
 80142b2:	f042 0202 	orrlt.w	r2, r2, #2
 80142b6:	9307      	strge	r3, [sp, #28]
 80142b8:	9307      	strlt	r3, [sp, #28]
 80142ba:	bfb8      	it	lt
 80142bc:	9204      	strlt	r2, [sp, #16]
 80142be:	7823      	ldrb	r3, [r4, #0]
 80142c0:	2b2e      	cmp	r3, #46	; 0x2e
 80142c2:	d10c      	bne.n	80142de <_vfiprintf_r+0x176>
 80142c4:	7863      	ldrb	r3, [r4, #1]
 80142c6:	2b2a      	cmp	r3, #42	; 0x2a
 80142c8:	d135      	bne.n	8014336 <_vfiprintf_r+0x1ce>
 80142ca:	9b03      	ldr	r3, [sp, #12]
 80142cc:	1d1a      	adds	r2, r3, #4
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	9203      	str	r2, [sp, #12]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	bfb8      	it	lt
 80142d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80142da:	3402      	adds	r4, #2
 80142dc:	9305      	str	r3, [sp, #20]
 80142de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80143c4 <_vfiprintf_r+0x25c>
 80142e2:	7821      	ldrb	r1, [r4, #0]
 80142e4:	2203      	movs	r2, #3
 80142e6:	4650      	mov	r0, sl
 80142e8:	f7eb ff8a 	bl	8000200 <memchr>
 80142ec:	b140      	cbz	r0, 8014300 <_vfiprintf_r+0x198>
 80142ee:	2340      	movs	r3, #64	; 0x40
 80142f0:	eba0 000a 	sub.w	r0, r0, sl
 80142f4:	fa03 f000 	lsl.w	r0, r3, r0
 80142f8:	9b04      	ldr	r3, [sp, #16]
 80142fa:	4303      	orrs	r3, r0
 80142fc:	3401      	adds	r4, #1
 80142fe:	9304      	str	r3, [sp, #16]
 8014300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014304:	482c      	ldr	r0, [pc, #176]	; (80143b8 <_vfiprintf_r+0x250>)
 8014306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801430a:	2206      	movs	r2, #6
 801430c:	f7eb ff78 	bl	8000200 <memchr>
 8014310:	2800      	cmp	r0, #0
 8014312:	d03f      	beq.n	8014394 <_vfiprintf_r+0x22c>
 8014314:	4b29      	ldr	r3, [pc, #164]	; (80143bc <_vfiprintf_r+0x254>)
 8014316:	bb1b      	cbnz	r3, 8014360 <_vfiprintf_r+0x1f8>
 8014318:	9b03      	ldr	r3, [sp, #12]
 801431a:	3307      	adds	r3, #7
 801431c:	f023 0307 	bic.w	r3, r3, #7
 8014320:	3308      	adds	r3, #8
 8014322:	9303      	str	r3, [sp, #12]
 8014324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014326:	443b      	add	r3, r7
 8014328:	9309      	str	r3, [sp, #36]	; 0x24
 801432a:	e767      	b.n	80141fc <_vfiprintf_r+0x94>
 801432c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014330:	460c      	mov	r4, r1
 8014332:	2001      	movs	r0, #1
 8014334:	e7a5      	b.n	8014282 <_vfiprintf_r+0x11a>
 8014336:	2300      	movs	r3, #0
 8014338:	3401      	adds	r4, #1
 801433a:	9305      	str	r3, [sp, #20]
 801433c:	4619      	mov	r1, r3
 801433e:	f04f 0c0a 	mov.w	ip, #10
 8014342:	4620      	mov	r0, r4
 8014344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014348:	3a30      	subs	r2, #48	; 0x30
 801434a:	2a09      	cmp	r2, #9
 801434c:	d903      	bls.n	8014356 <_vfiprintf_r+0x1ee>
 801434e:	2b00      	cmp	r3, #0
 8014350:	d0c5      	beq.n	80142de <_vfiprintf_r+0x176>
 8014352:	9105      	str	r1, [sp, #20]
 8014354:	e7c3      	b.n	80142de <_vfiprintf_r+0x176>
 8014356:	fb0c 2101 	mla	r1, ip, r1, r2
 801435a:	4604      	mov	r4, r0
 801435c:	2301      	movs	r3, #1
 801435e:	e7f0      	b.n	8014342 <_vfiprintf_r+0x1da>
 8014360:	ab03      	add	r3, sp, #12
 8014362:	9300      	str	r3, [sp, #0]
 8014364:	462a      	mov	r2, r5
 8014366:	4b16      	ldr	r3, [pc, #88]	; (80143c0 <_vfiprintf_r+0x258>)
 8014368:	a904      	add	r1, sp, #16
 801436a:	4630      	mov	r0, r6
 801436c:	f7fb fa0c 	bl	800f788 <_printf_float>
 8014370:	4607      	mov	r7, r0
 8014372:	1c78      	adds	r0, r7, #1
 8014374:	d1d6      	bne.n	8014324 <_vfiprintf_r+0x1bc>
 8014376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014378:	07d9      	lsls	r1, r3, #31
 801437a:	d405      	bmi.n	8014388 <_vfiprintf_r+0x220>
 801437c:	89ab      	ldrh	r3, [r5, #12]
 801437e:	059a      	lsls	r2, r3, #22
 8014380:	d402      	bmi.n	8014388 <_vfiprintf_r+0x220>
 8014382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014384:	f7ff fe79 	bl	801407a <__retarget_lock_release_recursive>
 8014388:	89ab      	ldrh	r3, [r5, #12]
 801438a:	065b      	lsls	r3, r3, #25
 801438c:	f53f af12 	bmi.w	80141b4 <_vfiprintf_r+0x4c>
 8014390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014392:	e711      	b.n	80141b8 <_vfiprintf_r+0x50>
 8014394:	ab03      	add	r3, sp, #12
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	462a      	mov	r2, r5
 801439a:	4b09      	ldr	r3, [pc, #36]	; (80143c0 <_vfiprintf_r+0x258>)
 801439c:	a904      	add	r1, sp, #16
 801439e:	4630      	mov	r0, r6
 80143a0:	f7fb fc96 	bl	800fcd0 <_printf_i>
 80143a4:	e7e4      	b.n	8014370 <_vfiprintf_r+0x208>
 80143a6:	bf00      	nop
 80143a8:	08016e84 	.word	0x08016e84
 80143ac:	08016ea4 	.word	0x08016ea4
 80143b0:	08016e64 	.word	0x08016e64
 80143b4:	08016dfc 	.word	0x08016dfc
 80143b8:	08016e06 	.word	0x08016e06
 80143bc:	0800f789 	.word	0x0800f789
 80143c0:	08014143 	.word	0x08014143
 80143c4:	08016e02 	.word	0x08016e02

080143c8 <__swbuf_r>:
 80143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ca:	460e      	mov	r6, r1
 80143cc:	4614      	mov	r4, r2
 80143ce:	4605      	mov	r5, r0
 80143d0:	b118      	cbz	r0, 80143da <__swbuf_r+0x12>
 80143d2:	6983      	ldr	r3, [r0, #24]
 80143d4:	b90b      	cbnz	r3, 80143da <__swbuf_r+0x12>
 80143d6:	f7ff fd9f 	bl	8013f18 <__sinit>
 80143da:	4b21      	ldr	r3, [pc, #132]	; (8014460 <__swbuf_r+0x98>)
 80143dc:	429c      	cmp	r4, r3
 80143de:	d12b      	bne.n	8014438 <__swbuf_r+0x70>
 80143e0:	686c      	ldr	r4, [r5, #4]
 80143e2:	69a3      	ldr	r3, [r4, #24]
 80143e4:	60a3      	str	r3, [r4, #8]
 80143e6:	89a3      	ldrh	r3, [r4, #12]
 80143e8:	071a      	lsls	r2, r3, #28
 80143ea:	d52f      	bpl.n	801444c <__swbuf_r+0x84>
 80143ec:	6923      	ldr	r3, [r4, #16]
 80143ee:	b36b      	cbz	r3, 801444c <__swbuf_r+0x84>
 80143f0:	6923      	ldr	r3, [r4, #16]
 80143f2:	6820      	ldr	r0, [r4, #0]
 80143f4:	1ac0      	subs	r0, r0, r3
 80143f6:	6963      	ldr	r3, [r4, #20]
 80143f8:	b2f6      	uxtb	r6, r6
 80143fa:	4283      	cmp	r3, r0
 80143fc:	4637      	mov	r7, r6
 80143fe:	dc04      	bgt.n	801440a <__swbuf_r+0x42>
 8014400:	4621      	mov	r1, r4
 8014402:	4628      	mov	r0, r5
 8014404:	f7ff fcf4 	bl	8013df0 <_fflush_r>
 8014408:	bb30      	cbnz	r0, 8014458 <__swbuf_r+0x90>
 801440a:	68a3      	ldr	r3, [r4, #8]
 801440c:	3b01      	subs	r3, #1
 801440e:	60a3      	str	r3, [r4, #8]
 8014410:	6823      	ldr	r3, [r4, #0]
 8014412:	1c5a      	adds	r2, r3, #1
 8014414:	6022      	str	r2, [r4, #0]
 8014416:	701e      	strb	r6, [r3, #0]
 8014418:	6963      	ldr	r3, [r4, #20]
 801441a:	3001      	adds	r0, #1
 801441c:	4283      	cmp	r3, r0
 801441e:	d004      	beq.n	801442a <__swbuf_r+0x62>
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	07db      	lsls	r3, r3, #31
 8014424:	d506      	bpl.n	8014434 <__swbuf_r+0x6c>
 8014426:	2e0a      	cmp	r6, #10
 8014428:	d104      	bne.n	8014434 <__swbuf_r+0x6c>
 801442a:	4621      	mov	r1, r4
 801442c:	4628      	mov	r0, r5
 801442e:	f7ff fcdf 	bl	8013df0 <_fflush_r>
 8014432:	b988      	cbnz	r0, 8014458 <__swbuf_r+0x90>
 8014434:	4638      	mov	r0, r7
 8014436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <__swbuf_r+0x9c>)
 801443a:	429c      	cmp	r4, r3
 801443c:	d101      	bne.n	8014442 <__swbuf_r+0x7a>
 801443e:	68ac      	ldr	r4, [r5, #8]
 8014440:	e7cf      	b.n	80143e2 <__swbuf_r+0x1a>
 8014442:	4b09      	ldr	r3, [pc, #36]	; (8014468 <__swbuf_r+0xa0>)
 8014444:	429c      	cmp	r4, r3
 8014446:	bf08      	it	eq
 8014448:	68ec      	ldreq	r4, [r5, #12]
 801444a:	e7ca      	b.n	80143e2 <__swbuf_r+0x1a>
 801444c:	4621      	mov	r1, r4
 801444e:	4628      	mov	r0, r5
 8014450:	f000 f80c 	bl	801446c <__swsetup_r>
 8014454:	2800      	cmp	r0, #0
 8014456:	d0cb      	beq.n	80143f0 <__swbuf_r+0x28>
 8014458:	f04f 37ff 	mov.w	r7, #4294967295
 801445c:	e7ea      	b.n	8014434 <__swbuf_r+0x6c>
 801445e:	bf00      	nop
 8014460:	08016e84 	.word	0x08016e84
 8014464:	08016ea4 	.word	0x08016ea4
 8014468:	08016e64 	.word	0x08016e64

0801446c <__swsetup_r>:
 801446c:	4b32      	ldr	r3, [pc, #200]	; (8014538 <__swsetup_r+0xcc>)
 801446e:	b570      	push	{r4, r5, r6, lr}
 8014470:	681d      	ldr	r5, [r3, #0]
 8014472:	4606      	mov	r6, r0
 8014474:	460c      	mov	r4, r1
 8014476:	b125      	cbz	r5, 8014482 <__swsetup_r+0x16>
 8014478:	69ab      	ldr	r3, [r5, #24]
 801447a:	b913      	cbnz	r3, 8014482 <__swsetup_r+0x16>
 801447c:	4628      	mov	r0, r5
 801447e:	f7ff fd4b 	bl	8013f18 <__sinit>
 8014482:	4b2e      	ldr	r3, [pc, #184]	; (801453c <__swsetup_r+0xd0>)
 8014484:	429c      	cmp	r4, r3
 8014486:	d10f      	bne.n	80144a8 <__swsetup_r+0x3c>
 8014488:	686c      	ldr	r4, [r5, #4]
 801448a:	89a3      	ldrh	r3, [r4, #12]
 801448c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014490:	0719      	lsls	r1, r3, #28
 8014492:	d42c      	bmi.n	80144ee <__swsetup_r+0x82>
 8014494:	06dd      	lsls	r5, r3, #27
 8014496:	d411      	bmi.n	80144bc <__swsetup_r+0x50>
 8014498:	2309      	movs	r3, #9
 801449a:	6033      	str	r3, [r6, #0]
 801449c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144a0:	81a3      	strh	r3, [r4, #12]
 80144a2:	f04f 30ff 	mov.w	r0, #4294967295
 80144a6:	e03e      	b.n	8014526 <__swsetup_r+0xba>
 80144a8:	4b25      	ldr	r3, [pc, #148]	; (8014540 <__swsetup_r+0xd4>)
 80144aa:	429c      	cmp	r4, r3
 80144ac:	d101      	bne.n	80144b2 <__swsetup_r+0x46>
 80144ae:	68ac      	ldr	r4, [r5, #8]
 80144b0:	e7eb      	b.n	801448a <__swsetup_r+0x1e>
 80144b2:	4b24      	ldr	r3, [pc, #144]	; (8014544 <__swsetup_r+0xd8>)
 80144b4:	429c      	cmp	r4, r3
 80144b6:	bf08      	it	eq
 80144b8:	68ec      	ldreq	r4, [r5, #12]
 80144ba:	e7e6      	b.n	801448a <__swsetup_r+0x1e>
 80144bc:	0758      	lsls	r0, r3, #29
 80144be:	d512      	bpl.n	80144e6 <__swsetup_r+0x7a>
 80144c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144c2:	b141      	cbz	r1, 80144d6 <__swsetup_r+0x6a>
 80144c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144c8:	4299      	cmp	r1, r3
 80144ca:	d002      	beq.n	80144d2 <__swsetup_r+0x66>
 80144cc:	4630      	mov	r0, r6
 80144ce:	f7fe fd9d 	bl	801300c <_free_r>
 80144d2:	2300      	movs	r3, #0
 80144d4:	6363      	str	r3, [r4, #52]	; 0x34
 80144d6:	89a3      	ldrh	r3, [r4, #12]
 80144d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144dc:	81a3      	strh	r3, [r4, #12]
 80144de:	2300      	movs	r3, #0
 80144e0:	6063      	str	r3, [r4, #4]
 80144e2:	6923      	ldr	r3, [r4, #16]
 80144e4:	6023      	str	r3, [r4, #0]
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	f043 0308 	orr.w	r3, r3, #8
 80144ec:	81a3      	strh	r3, [r4, #12]
 80144ee:	6923      	ldr	r3, [r4, #16]
 80144f0:	b94b      	cbnz	r3, 8014506 <__swsetup_r+0x9a>
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144fc:	d003      	beq.n	8014506 <__swsetup_r+0x9a>
 80144fe:	4621      	mov	r1, r4
 8014500:	4630      	mov	r0, r6
 8014502:	f000 f84d 	bl	80145a0 <__smakebuf_r>
 8014506:	89a0      	ldrh	r0, [r4, #12]
 8014508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801450c:	f010 0301 	ands.w	r3, r0, #1
 8014510:	d00a      	beq.n	8014528 <__swsetup_r+0xbc>
 8014512:	2300      	movs	r3, #0
 8014514:	60a3      	str	r3, [r4, #8]
 8014516:	6963      	ldr	r3, [r4, #20]
 8014518:	425b      	negs	r3, r3
 801451a:	61a3      	str	r3, [r4, #24]
 801451c:	6923      	ldr	r3, [r4, #16]
 801451e:	b943      	cbnz	r3, 8014532 <__swsetup_r+0xc6>
 8014520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014524:	d1ba      	bne.n	801449c <__swsetup_r+0x30>
 8014526:	bd70      	pop	{r4, r5, r6, pc}
 8014528:	0781      	lsls	r1, r0, #30
 801452a:	bf58      	it	pl
 801452c:	6963      	ldrpl	r3, [r4, #20]
 801452e:	60a3      	str	r3, [r4, #8]
 8014530:	e7f4      	b.n	801451c <__swsetup_r+0xb0>
 8014532:	2000      	movs	r0, #0
 8014534:	e7f7      	b.n	8014526 <__swsetup_r+0xba>
 8014536:	bf00      	nop
 8014538:	20000274 	.word	0x20000274
 801453c:	08016e84 	.word	0x08016e84
 8014540:	08016ea4 	.word	0x08016ea4
 8014544:	08016e64 	.word	0x08016e64

08014548 <abort>:
 8014548:	b508      	push	{r3, lr}
 801454a:	2006      	movs	r0, #6
 801454c:	f000 f898 	bl	8014680 <raise>
 8014550:	2001      	movs	r0, #1
 8014552:	f7f3 ff0d 	bl	8008370 <_exit>

08014556 <__swhatbuf_r>:
 8014556:	b570      	push	{r4, r5, r6, lr}
 8014558:	460e      	mov	r6, r1
 801455a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801455e:	2900      	cmp	r1, #0
 8014560:	b096      	sub	sp, #88	; 0x58
 8014562:	4614      	mov	r4, r2
 8014564:	461d      	mov	r5, r3
 8014566:	da07      	bge.n	8014578 <__swhatbuf_r+0x22>
 8014568:	2300      	movs	r3, #0
 801456a:	602b      	str	r3, [r5, #0]
 801456c:	89b3      	ldrh	r3, [r6, #12]
 801456e:	061a      	lsls	r2, r3, #24
 8014570:	d410      	bmi.n	8014594 <__swhatbuf_r+0x3e>
 8014572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014576:	e00e      	b.n	8014596 <__swhatbuf_r+0x40>
 8014578:	466a      	mov	r2, sp
 801457a:	f000 f89d 	bl	80146b8 <_fstat_r>
 801457e:	2800      	cmp	r0, #0
 8014580:	dbf2      	blt.n	8014568 <__swhatbuf_r+0x12>
 8014582:	9a01      	ldr	r2, [sp, #4]
 8014584:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014588:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801458c:	425a      	negs	r2, r3
 801458e:	415a      	adcs	r2, r3
 8014590:	602a      	str	r2, [r5, #0]
 8014592:	e7ee      	b.n	8014572 <__swhatbuf_r+0x1c>
 8014594:	2340      	movs	r3, #64	; 0x40
 8014596:	2000      	movs	r0, #0
 8014598:	6023      	str	r3, [r4, #0]
 801459a:	b016      	add	sp, #88	; 0x58
 801459c:	bd70      	pop	{r4, r5, r6, pc}
	...

080145a0 <__smakebuf_r>:
 80145a0:	898b      	ldrh	r3, [r1, #12]
 80145a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145a4:	079d      	lsls	r5, r3, #30
 80145a6:	4606      	mov	r6, r0
 80145a8:	460c      	mov	r4, r1
 80145aa:	d507      	bpl.n	80145bc <__smakebuf_r+0x1c>
 80145ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	6123      	str	r3, [r4, #16]
 80145b4:	2301      	movs	r3, #1
 80145b6:	6163      	str	r3, [r4, #20]
 80145b8:	b002      	add	sp, #8
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	ab01      	add	r3, sp, #4
 80145be:	466a      	mov	r2, sp
 80145c0:	f7ff ffc9 	bl	8014556 <__swhatbuf_r>
 80145c4:	9900      	ldr	r1, [sp, #0]
 80145c6:	4605      	mov	r5, r0
 80145c8:	4630      	mov	r0, r6
 80145ca:	f7fe fd6f 	bl	80130ac <_malloc_r>
 80145ce:	b948      	cbnz	r0, 80145e4 <__smakebuf_r+0x44>
 80145d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d4:	059a      	lsls	r2, r3, #22
 80145d6:	d4ef      	bmi.n	80145b8 <__smakebuf_r+0x18>
 80145d8:	f023 0303 	bic.w	r3, r3, #3
 80145dc:	f043 0302 	orr.w	r3, r3, #2
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	e7e3      	b.n	80145ac <__smakebuf_r+0xc>
 80145e4:	4b0d      	ldr	r3, [pc, #52]	; (801461c <__smakebuf_r+0x7c>)
 80145e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145e8:	89a3      	ldrh	r3, [r4, #12]
 80145ea:	6020      	str	r0, [r4, #0]
 80145ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145f0:	81a3      	strh	r3, [r4, #12]
 80145f2:	9b00      	ldr	r3, [sp, #0]
 80145f4:	6163      	str	r3, [r4, #20]
 80145f6:	9b01      	ldr	r3, [sp, #4]
 80145f8:	6120      	str	r0, [r4, #16]
 80145fa:	b15b      	cbz	r3, 8014614 <__smakebuf_r+0x74>
 80145fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014600:	4630      	mov	r0, r6
 8014602:	f000 f86b 	bl	80146dc <_isatty_r>
 8014606:	b128      	cbz	r0, 8014614 <__smakebuf_r+0x74>
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	f023 0303 	bic.w	r3, r3, #3
 801460e:	f043 0301 	orr.w	r3, r3, #1
 8014612:	81a3      	strh	r3, [r4, #12]
 8014614:	89a0      	ldrh	r0, [r4, #12]
 8014616:	4305      	orrs	r5, r0
 8014618:	81a5      	strh	r5, [r4, #12]
 801461a:	e7cd      	b.n	80145b8 <__smakebuf_r+0x18>
 801461c:	08013eb1 	.word	0x08013eb1

08014620 <_malloc_usable_size_r>:
 8014620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014624:	1f18      	subs	r0, r3, #4
 8014626:	2b00      	cmp	r3, #0
 8014628:	bfbc      	itt	lt
 801462a:	580b      	ldrlt	r3, [r1, r0]
 801462c:	18c0      	addlt	r0, r0, r3
 801462e:	4770      	bx	lr

08014630 <_raise_r>:
 8014630:	291f      	cmp	r1, #31
 8014632:	b538      	push	{r3, r4, r5, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	460d      	mov	r5, r1
 8014638:	d904      	bls.n	8014644 <_raise_r+0x14>
 801463a:	2316      	movs	r3, #22
 801463c:	6003      	str	r3, [r0, #0]
 801463e:	f04f 30ff 	mov.w	r0, #4294967295
 8014642:	bd38      	pop	{r3, r4, r5, pc}
 8014644:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014646:	b112      	cbz	r2, 801464e <_raise_r+0x1e>
 8014648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801464c:	b94b      	cbnz	r3, 8014662 <_raise_r+0x32>
 801464e:	4620      	mov	r0, r4
 8014650:	f000 f830 	bl	80146b4 <_getpid_r>
 8014654:	462a      	mov	r2, r5
 8014656:	4601      	mov	r1, r0
 8014658:	4620      	mov	r0, r4
 801465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801465e:	f000 b817 	b.w	8014690 <_kill_r>
 8014662:	2b01      	cmp	r3, #1
 8014664:	d00a      	beq.n	801467c <_raise_r+0x4c>
 8014666:	1c59      	adds	r1, r3, #1
 8014668:	d103      	bne.n	8014672 <_raise_r+0x42>
 801466a:	2316      	movs	r3, #22
 801466c:	6003      	str	r3, [r0, #0]
 801466e:	2001      	movs	r0, #1
 8014670:	e7e7      	b.n	8014642 <_raise_r+0x12>
 8014672:	2400      	movs	r4, #0
 8014674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014678:	4628      	mov	r0, r5
 801467a:	4798      	blx	r3
 801467c:	2000      	movs	r0, #0
 801467e:	e7e0      	b.n	8014642 <_raise_r+0x12>

08014680 <raise>:
 8014680:	4b02      	ldr	r3, [pc, #8]	; (801468c <raise+0xc>)
 8014682:	4601      	mov	r1, r0
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	f7ff bfd3 	b.w	8014630 <_raise_r>
 801468a:	bf00      	nop
 801468c:	20000274 	.word	0x20000274

08014690 <_kill_r>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	4d07      	ldr	r5, [pc, #28]	; (80146b0 <_kill_r+0x20>)
 8014694:	2300      	movs	r3, #0
 8014696:	4604      	mov	r4, r0
 8014698:	4608      	mov	r0, r1
 801469a:	4611      	mov	r1, r2
 801469c:	602b      	str	r3, [r5, #0]
 801469e:	f7f3 fe57 	bl	8008350 <_kill>
 80146a2:	1c43      	adds	r3, r0, #1
 80146a4:	d102      	bne.n	80146ac <_kill_r+0x1c>
 80146a6:	682b      	ldr	r3, [r5, #0]
 80146a8:	b103      	cbz	r3, 80146ac <_kill_r+0x1c>
 80146aa:	6023      	str	r3, [r4, #0]
 80146ac:	bd38      	pop	{r3, r4, r5, pc}
 80146ae:	bf00      	nop
 80146b0:	20003274 	.word	0x20003274

080146b4 <_getpid_r>:
 80146b4:	f7f3 be44 	b.w	8008340 <_getpid>

080146b8 <_fstat_r>:
 80146b8:	b538      	push	{r3, r4, r5, lr}
 80146ba:	4d07      	ldr	r5, [pc, #28]	; (80146d8 <_fstat_r+0x20>)
 80146bc:	2300      	movs	r3, #0
 80146be:	4604      	mov	r4, r0
 80146c0:	4608      	mov	r0, r1
 80146c2:	4611      	mov	r1, r2
 80146c4:	602b      	str	r3, [r5, #0]
 80146c6:	f7f3 fea2 	bl	800840e <_fstat>
 80146ca:	1c43      	adds	r3, r0, #1
 80146cc:	d102      	bne.n	80146d4 <_fstat_r+0x1c>
 80146ce:	682b      	ldr	r3, [r5, #0]
 80146d0:	b103      	cbz	r3, 80146d4 <_fstat_r+0x1c>
 80146d2:	6023      	str	r3, [r4, #0]
 80146d4:	bd38      	pop	{r3, r4, r5, pc}
 80146d6:	bf00      	nop
 80146d8:	20003274 	.word	0x20003274

080146dc <_isatty_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	4d06      	ldr	r5, [pc, #24]	; (80146f8 <_isatty_r+0x1c>)
 80146e0:	2300      	movs	r3, #0
 80146e2:	4604      	mov	r4, r0
 80146e4:	4608      	mov	r0, r1
 80146e6:	602b      	str	r3, [r5, #0]
 80146e8:	f7f3 fea1 	bl	800842e <_isatty>
 80146ec:	1c43      	adds	r3, r0, #1
 80146ee:	d102      	bne.n	80146f6 <_isatty_r+0x1a>
 80146f0:	682b      	ldr	r3, [r5, #0]
 80146f2:	b103      	cbz	r3, 80146f6 <_isatty_r+0x1a>
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	bd38      	pop	{r3, r4, r5, pc}
 80146f8:	20003274 	.word	0x20003274

080146fc <round>:
 80146fc:	ec51 0b10 	vmov	r0, r1, d0
 8014700:	b570      	push	{r4, r5, r6, lr}
 8014702:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8014706:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801470a:	2c13      	cmp	r4, #19
 801470c:	ee10 2a10 	vmov	r2, s0
 8014710:	460b      	mov	r3, r1
 8014712:	dc19      	bgt.n	8014748 <round+0x4c>
 8014714:	2c00      	cmp	r4, #0
 8014716:	da09      	bge.n	801472c <round+0x30>
 8014718:	3401      	adds	r4, #1
 801471a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801471e:	d103      	bne.n	8014728 <round+0x2c>
 8014720:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014724:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014728:	2100      	movs	r1, #0
 801472a:	e028      	b.n	801477e <round+0x82>
 801472c:	4d15      	ldr	r5, [pc, #84]	; (8014784 <round+0x88>)
 801472e:	4125      	asrs	r5, r4
 8014730:	ea01 0605 	and.w	r6, r1, r5
 8014734:	4332      	orrs	r2, r6
 8014736:	d00e      	beq.n	8014756 <round+0x5a>
 8014738:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801473c:	fa42 f404 	asr.w	r4, r2, r4
 8014740:	4423      	add	r3, r4
 8014742:	ea23 0305 	bic.w	r3, r3, r5
 8014746:	e7ef      	b.n	8014728 <round+0x2c>
 8014748:	2c33      	cmp	r4, #51	; 0x33
 801474a:	dd07      	ble.n	801475c <round+0x60>
 801474c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014750:	d101      	bne.n	8014756 <round+0x5a>
 8014752:	f7eb fdab 	bl	80002ac <__adddf3>
 8014756:	ec41 0b10 	vmov	d0, r0, r1
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8014760:	f04f 35ff 	mov.w	r5, #4294967295
 8014764:	40f5      	lsrs	r5, r6
 8014766:	4228      	tst	r0, r5
 8014768:	d0f5      	beq.n	8014756 <round+0x5a>
 801476a:	2101      	movs	r1, #1
 801476c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8014770:	fa01 f404 	lsl.w	r4, r1, r4
 8014774:	1912      	adds	r2, r2, r4
 8014776:	bf28      	it	cs
 8014778:	185b      	addcs	r3, r3, r1
 801477a:	ea22 0105 	bic.w	r1, r2, r5
 801477e:	4608      	mov	r0, r1
 8014780:	4619      	mov	r1, r3
 8014782:	e7e8      	b.n	8014756 <round+0x5a>
 8014784:	000fffff 	.word	0x000fffff

08014788 <atan2>:
 8014788:	f000 b826 	b.w	80147d8 <__ieee754_atan2>

0801478c <sqrtf>:
 801478c:	b508      	push	{r3, lr}
 801478e:	ed2d 8b02 	vpush	{d8}
 8014792:	eeb0 8a40 	vmov.f32	s16, s0
 8014796:	f000 f8e9 	bl	801496c <__ieee754_sqrtf>
 801479a:	4b0d      	ldr	r3, [pc, #52]	; (80147d0 <sqrtf+0x44>)
 801479c:	f993 3000 	ldrsb.w	r3, [r3]
 80147a0:	3301      	adds	r3, #1
 80147a2:	d011      	beq.n	80147c8 <sqrtf+0x3c>
 80147a4:	eeb4 8a48 	vcmp.f32	s16, s16
 80147a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ac:	d60c      	bvs.n	80147c8 <sqrtf+0x3c>
 80147ae:	eddf 8a09 	vldr	s17, [pc, #36]	; 80147d4 <sqrtf+0x48>
 80147b2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80147b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ba:	d505      	bpl.n	80147c8 <sqrtf+0x3c>
 80147bc:	f7fa ff04 	bl	800f5c8 <__errno>
 80147c0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80147c4:	2321      	movs	r3, #33	; 0x21
 80147c6:	6003      	str	r3, [r0, #0]
 80147c8:	ecbd 8b02 	vpop	{d8}
 80147cc:	bd08      	pop	{r3, pc}
 80147ce:	bf00      	nop
 80147d0:	20000448 	.word	0x20000448
 80147d4:	00000000 	.word	0x00000000

080147d8 <__ieee754_atan2>:
 80147d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147dc:	ec57 6b11 	vmov	r6, r7, d1
 80147e0:	4273      	negs	r3, r6
 80147e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8014968 <__ieee754_atan2+0x190>
 80147e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80147ea:	4333      	orrs	r3, r6
 80147ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80147f0:	4573      	cmp	r3, lr
 80147f2:	ec51 0b10 	vmov	r0, r1, d0
 80147f6:	ee11 8a10 	vmov	r8, s2
 80147fa:	d80a      	bhi.n	8014812 <__ieee754_atan2+0x3a>
 80147fc:	4244      	negs	r4, r0
 80147fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014802:	4304      	orrs	r4, r0
 8014804:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014808:	4574      	cmp	r4, lr
 801480a:	ee10 9a10 	vmov	r9, s0
 801480e:	468c      	mov	ip, r1
 8014810:	d907      	bls.n	8014822 <__ieee754_atan2+0x4a>
 8014812:	4632      	mov	r2, r6
 8014814:	463b      	mov	r3, r7
 8014816:	f7eb fd49 	bl	80002ac <__adddf3>
 801481a:	ec41 0b10 	vmov	d0, r0, r1
 801481e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014822:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014826:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801482a:	4334      	orrs	r4, r6
 801482c:	d103      	bne.n	8014836 <__ieee754_atan2+0x5e>
 801482e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014832:	f000 b8a1 	b.w	8014978 <atan>
 8014836:	17bc      	asrs	r4, r7, #30
 8014838:	f004 0402 	and.w	r4, r4, #2
 801483c:	ea53 0909 	orrs.w	r9, r3, r9
 8014840:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014844:	d107      	bne.n	8014856 <__ieee754_atan2+0x7e>
 8014846:	2c02      	cmp	r4, #2
 8014848:	d060      	beq.n	801490c <__ieee754_atan2+0x134>
 801484a:	2c03      	cmp	r4, #3
 801484c:	d1e5      	bne.n	801481a <__ieee754_atan2+0x42>
 801484e:	a142      	add	r1, pc, #264	; (adr r1, 8014958 <__ieee754_atan2+0x180>)
 8014850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014854:	e7e1      	b.n	801481a <__ieee754_atan2+0x42>
 8014856:	ea52 0808 	orrs.w	r8, r2, r8
 801485a:	d106      	bne.n	801486a <__ieee754_atan2+0x92>
 801485c:	f1bc 0f00 	cmp.w	ip, #0
 8014860:	da5f      	bge.n	8014922 <__ieee754_atan2+0x14a>
 8014862:	a13f      	add	r1, pc, #252	; (adr r1, 8014960 <__ieee754_atan2+0x188>)
 8014864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014868:	e7d7      	b.n	801481a <__ieee754_atan2+0x42>
 801486a:	4572      	cmp	r2, lr
 801486c:	d10f      	bne.n	801488e <__ieee754_atan2+0xb6>
 801486e:	4293      	cmp	r3, r2
 8014870:	f104 34ff 	add.w	r4, r4, #4294967295
 8014874:	d107      	bne.n	8014886 <__ieee754_atan2+0xae>
 8014876:	2c02      	cmp	r4, #2
 8014878:	d84c      	bhi.n	8014914 <__ieee754_atan2+0x13c>
 801487a:	4b35      	ldr	r3, [pc, #212]	; (8014950 <__ieee754_atan2+0x178>)
 801487c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014880:	e9d4 0100 	ldrd	r0, r1, [r4]
 8014884:	e7c9      	b.n	801481a <__ieee754_atan2+0x42>
 8014886:	2c02      	cmp	r4, #2
 8014888:	d848      	bhi.n	801491c <__ieee754_atan2+0x144>
 801488a:	4b32      	ldr	r3, [pc, #200]	; (8014954 <__ieee754_atan2+0x17c>)
 801488c:	e7f6      	b.n	801487c <__ieee754_atan2+0xa4>
 801488e:	4573      	cmp	r3, lr
 8014890:	d0e4      	beq.n	801485c <__ieee754_atan2+0x84>
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8014898:	ea4f 5223 	mov.w	r2, r3, asr #20
 801489c:	da1e      	bge.n	80148dc <__ieee754_atan2+0x104>
 801489e:	2f00      	cmp	r7, #0
 80148a0:	da01      	bge.n	80148a6 <__ieee754_atan2+0xce>
 80148a2:	323c      	adds	r2, #60	; 0x3c
 80148a4:	db1e      	blt.n	80148e4 <__ieee754_atan2+0x10c>
 80148a6:	4632      	mov	r2, r6
 80148a8:	463b      	mov	r3, r7
 80148aa:	f7eb ffdf 	bl	800086c <__aeabi_ddiv>
 80148ae:	ec41 0b10 	vmov	d0, r0, r1
 80148b2:	f000 fa01 	bl	8014cb8 <fabs>
 80148b6:	f000 f85f 	bl	8014978 <atan>
 80148ba:	ec51 0b10 	vmov	r0, r1, d0
 80148be:	2c01      	cmp	r4, #1
 80148c0:	d013      	beq.n	80148ea <__ieee754_atan2+0x112>
 80148c2:	2c02      	cmp	r4, #2
 80148c4:	d015      	beq.n	80148f2 <__ieee754_atan2+0x11a>
 80148c6:	2c00      	cmp	r4, #0
 80148c8:	d0a7      	beq.n	801481a <__ieee754_atan2+0x42>
 80148ca:	a319      	add	r3, pc, #100	; (adr r3, 8014930 <__ieee754_atan2+0x158>)
 80148cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d0:	f7eb fcea 	bl	80002a8 <__aeabi_dsub>
 80148d4:	a318      	add	r3, pc, #96	; (adr r3, 8014938 <__ieee754_atan2+0x160>)
 80148d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148da:	e014      	b.n	8014906 <__ieee754_atan2+0x12e>
 80148dc:	a118      	add	r1, pc, #96	; (adr r1, 8014940 <__ieee754_atan2+0x168>)
 80148de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148e2:	e7ec      	b.n	80148be <__ieee754_atan2+0xe6>
 80148e4:	2000      	movs	r0, #0
 80148e6:	2100      	movs	r1, #0
 80148e8:	e7e9      	b.n	80148be <__ieee754_atan2+0xe6>
 80148ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80148ee:	4619      	mov	r1, r3
 80148f0:	e793      	b.n	801481a <__ieee754_atan2+0x42>
 80148f2:	a30f      	add	r3, pc, #60	; (adr r3, 8014930 <__ieee754_atan2+0x158>)
 80148f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f8:	f7eb fcd6 	bl	80002a8 <__aeabi_dsub>
 80148fc:	4602      	mov	r2, r0
 80148fe:	460b      	mov	r3, r1
 8014900:	a10d      	add	r1, pc, #52	; (adr r1, 8014938 <__ieee754_atan2+0x160>)
 8014902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014906:	f7eb fccf 	bl	80002a8 <__aeabi_dsub>
 801490a:	e786      	b.n	801481a <__ieee754_atan2+0x42>
 801490c:	a10a      	add	r1, pc, #40	; (adr r1, 8014938 <__ieee754_atan2+0x160>)
 801490e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014912:	e782      	b.n	801481a <__ieee754_atan2+0x42>
 8014914:	a10c      	add	r1, pc, #48	; (adr r1, 8014948 <__ieee754_atan2+0x170>)
 8014916:	e9d1 0100 	ldrd	r0, r1, [r1]
 801491a:	e77e      	b.n	801481a <__ieee754_atan2+0x42>
 801491c:	2000      	movs	r0, #0
 801491e:	2100      	movs	r1, #0
 8014920:	e77b      	b.n	801481a <__ieee754_atan2+0x42>
 8014922:	a107      	add	r1, pc, #28	; (adr r1, 8014940 <__ieee754_atan2+0x168>)
 8014924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014928:	e777      	b.n	801481a <__ieee754_atan2+0x42>
 801492a:	bf00      	nop
 801492c:	f3af 8000 	nop.w
 8014930:	33145c07 	.word	0x33145c07
 8014934:	3ca1a626 	.word	0x3ca1a626
 8014938:	54442d18 	.word	0x54442d18
 801493c:	400921fb 	.word	0x400921fb
 8014940:	54442d18 	.word	0x54442d18
 8014944:	3ff921fb 	.word	0x3ff921fb
 8014948:	54442d18 	.word	0x54442d18
 801494c:	3fe921fb 	.word	0x3fe921fb
 8014950:	08016ec8 	.word	0x08016ec8
 8014954:	08016ee0 	.word	0x08016ee0
 8014958:	54442d18 	.word	0x54442d18
 801495c:	c00921fb 	.word	0xc00921fb
 8014960:	54442d18 	.word	0x54442d18
 8014964:	bff921fb 	.word	0xbff921fb
 8014968:	7ff00000 	.word	0x7ff00000

0801496c <__ieee754_sqrtf>:
 801496c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014970:	4770      	bx	lr
 8014972:	0000      	movs	r0, r0
 8014974:	0000      	movs	r0, r0
	...

08014978 <atan>:
 8014978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801497c:	ec55 4b10 	vmov	r4, r5, d0
 8014980:	4bc3      	ldr	r3, [pc, #780]	; (8014c90 <atan+0x318>)
 8014982:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014986:	429e      	cmp	r6, r3
 8014988:	46ab      	mov	fp, r5
 801498a:	dd18      	ble.n	80149be <atan+0x46>
 801498c:	4bc1      	ldr	r3, [pc, #772]	; (8014c94 <atan+0x31c>)
 801498e:	429e      	cmp	r6, r3
 8014990:	dc01      	bgt.n	8014996 <atan+0x1e>
 8014992:	d109      	bne.n	80149a8 <atan+0x30>
 8014994:	b144      	cbz	r4, 80149a8 <atan+0x30>
 8014996:	4622      	mov	r2, r4
 8014998:	462b      	mov	r3, r5
 801499a:	4620      	mov	r0, r4
 801499c:	4629      	mov	r1, r5
 801499e:	f7eb fc85 	bl	80002ac <__adddf3>
 80149a2:	4604      	mov	r4, r0
 80149a4:	460d      	mov	r5, r1
 80149a6:	e006      	b.n	80149b6 <atan+0x3e>
 80149a8:	f1bb 0f00 	cmp.w	fp, #0
 80149ac:	f300 8131 	bgt.w	8014c12 <atan+0x29a>
 80149b0:	a59b      	add	r5, pc, #620	; (adr r5, 8014c20 <atan+0x2a8>)
 80149b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80149b6:	ec45 4b10 	vmov	d0, r4, r5
 80149ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149be:	4bb6      	ldr	r3, [pc, #728]	; (8014c98 <atan+0x320>)
 80149c0:	429e      	cmp	r6, r3
 80149c2:	dc14      	bgt.n	80149ee <atan+0x76>
 80149c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80149c8:	429e      	cmp	r6, r3
 80149ca:	dc0d      	bgt.n	80149e8 <atan+0x70>
 80149cc:	a396      	add	r3, pc, #600	; (adr r3, 8014c28 <atan+0x2b0>)
 80149ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d2:	ee10 0a10 	vmov	r0, s0
 80149d6:	4629      	mov	r1, r5
 80149d8:	f7eb fc68 	bl	80002ac <__adddf3>
 80149dc:	4baf      	ldr	r3, [pc, #700]	; (8014c9c <atan+0x324>)
 80149de:	2200      	movs	r2, #0
 80149e0:	f7ec f8aa 	bl	8000b38 <__aeabi_dcmpgt>
 80149e4:	2800      	cmp	r0, #0
 80149e6:	d1e6      	bne.n	80149b6 <atan+0x3e>
 80149e8:	f04f 3aff 	mov.w	sl, #4294967295
 80149ec:	e02b      	b.n	8014a46 <atan+0xce>
 80149ee:	f000 f963 	bl	8014cb8 <fabs>
 80149f2:	4bab      	ldr	r3, [pc, #684]	; (8014ca0 <atan+0x328>)
 80149f4:	429e      	cmp	r6, r3
 80149f6:	ec55 4b10 	vmov	r4, r5, d0
 80149fa:	f300 80bf 	bgt.w	8014b7c <atan+0x204>
 80149fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014a02:	429e      	cmp	r6, r3
 8014a04:	f300 80a0 	bgt.w	8014b48 <atan+0x1d0>
 8014a08:	ee10 2a10 	vmov	r2, s0
 8014a0c:	ee10 0a10 	vmov	r0, s0
 8014a10:	462b      	mov	r3, r5
 8014a12:	4629      	mov	r1, r5
 8014a14:	f7eb fc4a 	bl	80002ac <__adddf3>
 8014a18:	4ba0      	ldr	r3, [pc, #640]	; (8014c9c <atan+0x324>)
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f7eb fc44 	bl	80002a8 <__aeabi_dsub>
 8014a20:	2200      	movs	r2, #0
 8014a22:	4606      	mov	r6, r0
 8014a24:	460f      	mov	r7, r1
 8014a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	4629      	mov	r1, r5
 8014a2e:	f7eb fc3d 	bl	80002ac <__adddf3>
 8014a32:	4602      	mov	r2, r0
 8014a34:	460b      	mov	r3, r1
 8014a36:	4630      	mov	r0, r6
 8014a38:	4639      	mov	r1, r7
 8014a3a:	f7eb ff17 	bl	800086c <__aeabi_ddiv>
 8014a3e:	f04f 0a00 	mov.w	sl, #0
 8014a42:	4604      	mov	r4, r0
 8014a44:	460d      	mov	r5, r1
 8014a46:	4622      	mov	r2, r4
 8014a48:	462b      	mov	r3, r5
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	f7eb fde3 	bl	8000618 <__aeabi_dmul>
 8014a52:	4602      	mov	r2, r0
 8014a54:	460b      	mov	r3, r1
 8014a56:	4680      	mov	r8, r0
 8014a58:	4689      	mov	r9, r1
 8014a5a:	f7eb fddd 	bl	8000618 <__aeabi_dmul>
 8014a5e:	a374      	add	r3, pc, #464	; (adr r3, 8014c30 <atan+0x2b8>)
 8014a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a64:	4606      	mov	r6, r0
 8014a66:	460f      	mov	r7, r1
 8014a68:	f7eb fdd6 	bl	8000618 <__aeabi_dmul>
 8014a6c:	a372      	add	r3, pc, #456	; (adr r3, 8014c38 <atan+0x2c0>)
 8014a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a72:	f7eb fc1b 	bl	80002ac <__adddf3>
 8014a76:	4632      	mov	r2, r6
 8014a78:	463b      	mov	r3, r7
 8014a7a:	f7eb fdcd 	bl	8000618 <__aeabi_dmul>
 8014a7e:	a370      	add	r3, pc, #448	; (adr r3, 8014c40 <atan+0x2c8>)
 8014a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a84:	f7eb fc12 	bl	80002ac <__adddf3>
 8014a88:	4632      	mov	r2, r6
 8014a8a:	463b      	mov	r3, r7
 8014a8c:	f7eb fdc4 	bl	8000618 <__aeabi_dmul>
 8014a90:	a36d      	add	r3, pc, #436	; (adr r3, 8014c48 <atan+0x2d0>)
 8014a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a96:	f7eb fc09 	bl	80002ac <__adddf3>
 8014a9a:	4632      	mov	r2, r6
 8014a9c:	463b      	mov	r3, r7
 8014a9e:	f7eb fdbb 	bl	8000618 <__aeabi_dmul>
 8014aa2:	a36b      	add	r3, pc, #428	; (adr r3, 8014c50 <atan+0x2d8>)
 8014aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa8:	f7eb fc00 	bl	80002ac <__adddf3>
 8014aac:	4632      	mov	r2, r6
 8014aae:	463b      	mov	r3, r7
 8014ab0:	f7eb fdb2 	bl	8000618 <__aeabi_dmul>
 8014ab4:	a368      	add	r3, pc, #416	; (adr r3, 8014c58 <atan+0x2e0>)
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aba:	f7eb fbf7 	bl	80002ac <__adddf3>
 8014abe:	4642      	mov	r2, r8
 8014ac0:	464b      	mov	r3, r9
 8014ac2:	f7eb fda9 	bl	8000618 <__aeabi_dmul>
 8014ac6:	a366      	add	r3, pc, #408	; (adr r3, 8014c60 <atan+0x2e8>)
 8014ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014acc:	4680      	mov	r8, r0
 8014ace:	4689      	mov	r9, r1
 8014ad0:	4630      	mov	r0, r6
 8014ad2:	4639      	mov	r1, r7
 8014ad4:	f7eb fda0 	bl	8000618 <__aeabi_dmul>
 8014ad8:	a363      	add	r3, pc, #396	; (adr r3, 8014c68 <atan+0x2f0>)
 8014ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ade:	f7eb fbe3 	bl	80002a8 <__aeabi_dsub>
 8014ae2:	4632      	mov	r2, r6
 8014ae4:	463b      	mov	r3, r7
 8014ae6:	f7eb fd97 	bl	8000618 <__aeabi_dmul>
 8014aea:	a361      	add	r3, pc, #388	; (adr r3, 8014c70 <atan+0x2f8>)
 8014aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af0:	f7eb fbda 	bl	80002a8 <__aeabi_dsub>
 8014af4:	4632      	mov	r2, r6
 8014af6:	463b      	mov	r3, r7
 8014af8:	f7eb fd8e 	bl	8000618 <__aeabi_dmul>
 8014afc:	a35e      	add	r3, pc, #376	; (adr r3, 8014c78 <atan+0x300>)
 8014afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b02:	f7eb fbd1 	bl	80002a8 <__aeabi_dsub>
 8014b06:	4632      	mov	r2, r6
 8014b08:	463b      	mov	r3, r7
 8014b0a:	f7eb fd85 	bl	8000618 <__aeabi_dmul>
 8014b0e:	a35c      	add	r3, pc, #368	; (adr r3, 8014c80 <atan+0x308>)
 8014b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b14:	f7eb fbc8 	bl	80002a8 <__aeabi_dsub>
 8014b18:	4632      	mov	r2, r6
 8014b1a:	463b      	mov	r3, r7
 8014b1c:	f7eb fd7c 	bl	8000618 <__aeabi_dmul>
 8014b20:	4602      	mov	r2, r0
 8014b22:	460b      	mov	r3, r1
 8014b24:	4640      	mov	r0, r8
 8014b26:	4649      	mov	r1, r9
 8014b28:	f7eb fbc0 	bl	80002ac <__adddf3>
 8014b2c:	4622      	mov	r2, r4
 8014b2e:	462b      	mov	r3, r5
 8014b30:	f7eb fd72 	bl	8000618 <__aeabi_dmul>
 8014b34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014b38:	4602      	mov	r2, r0
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	d14b      	bne.n	8014bd6 <atan+0x25e>
 8014b3e:	4620      	mov	r0, r4
 8014b40:	4629      	mov	r1, r5
 8014b42:	f7eb fbb1 	bl	80002a8 <__aeabi_dsub>
 8014b46:	e72c      	b.n	80149a2 <atan+0x2a>
 8014b48:	ee10 0a10 	vmov	r0, s0
 8014b4c:	4b53      	ldr	r3, [pc, #332]	; (8014c9c <atan+0x324>)
 8014b4e:	2200      	movs	r2, #0
 8014b50:	4629      	mov	r1, r5
 8014b52:	f7eb fba9 	bl	80002a8 <__aeabi_dsub>
 8014b56:	4b51      	ldr	r3, [pc, #324]	; (8014c9c <atan+0x324>)
 8014b58:	4606      	mov	r6, r0
 8014b5a:	460f      	mov	r7, r1
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	4620      	mov	r0, r4
 8014b60:	4629      	mov	r1, r5
 8014b62:	f7eb fba3 	bl	80002ac <__adddf3>
 8014b66:	4602      	mov	r2, r0
 8014b68:	460b      	mov	r3, r1
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	4639      	mov	r1, r7
 8014b6e:	f7eb fe7d 	bl	800086c <__aeabi_ddiv>
 8014b72:	f04f 0a01 	mov.w	sl, #1
 8014b76:	4604      	mov	r4, r0
 8014b78:	460d      	mov	r5, r1
 8014b7a:	e764      	b.n	8014a46 <atan+0xce>
 8014b7c:	4b49      	ldr	r3, [pc, #292]	; (8014ca4 <atan+0x32c>)
 8014b7e:	429e      	cmp	r6, r3
 8014b80:	da1d      	bge.n	8014bbe <atan+0x246>
 8014b82:	ee10 0a10 	vmov	r0, s0
 8014b86:	4b48      	ldr	r3, [pc, #288]	; (8014ca8 <atan+0x330>)
 8014b88:	2200      	movs	r2, #0
 8014b8a:	4629      	mov	r1, r5
 8014b8c:	f7eb fb8c 	bl	80002a8 <__aeabi_dsub>
 8014b90:	4b45      	ldr	r3, [pc, #276]	; (8014ca8 <atan+0x330>)
 8014b92:	4606      	mov	r6, r0
 8014b94:	460f      	mov	r7, r1
 8014b96:	2200      	movs	r2, #0
 8014b98:	4620      	mov	r0, r4
 8014b9a:	4629      	mov	r1, r5
 8014b9c:	f7eb fd3c 	bl	8000618 <__aeabi_dmul>
 8014ba0:	4b3e      	ldr	r3, [pc, #248]	; (8014c9c <atan+0x324>)
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	f7eb fb82 	bl	80002ac <__adddf3>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4630      	mov	r0, r6
 8014bae:	4639      	mov	r1, r7
 8014bb0:	f7eb fe5c 	bl	800086c <__aeabi_ddiv>
 8014bb4:	f04f 0a02 	mov.w	sl, #2
 8014bb8:	4604      	mov	r4, r0
 8014bba:	460d      	mov	r5, r1
 8014bbc:	e743      	b.n	8014a46 <atan+0xce>
 8014bbe:	462b      	mov	r3, r5
 8014bc0:	ee10 2a10 	vmov	r2, s0
 8014bc4:	4939      	ldr	r1, [pc, #228]	; (8014cac <atan+0x334>)
 8014bc6:	2000      	movs	r0, #0
 8014bc8:	f7eb fe50 	bl	800086c <__aeabi_ddiv>
 8014bcc:	f04f 0a03 	mov.w	sl, #3
 8014bd0:	4604      	mov	r4, r0
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	e737      	b.n	8014a46 <atan+0xce>
 8014bd6:	4b36      	ldr	r3, [pc, #216]	; (8014cb0 <atan+0x338>)
 8014bd8:	4e36      	ldr	r6, [pc, #216]	; (8014cb4 <atan+0x33c>)
 8014bda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014bde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014be2:	e9da 2300 	ldrd	r2, r3, [sl]
 8014be6:	f7eb fb5f 	bl	80002a8 <__aeabi_dsub>
 8014bea:	4622      	mov	r2, r4
 8014bec:	462b      	mov	r3, r5
 8014bee:	f7eb fb5b 	bl	80002a8 <__aeabi_dsub>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014bfa:	f7eb fb55 	bl	80002a8 <__aeabi_dsub>
 8014bfe:	f1bb 0f00 	cmp.w	fp, #0
 8014c02:	4604      	mov	r4, r0
 8014c04:	460d      	mov	r5, r1
 8014c06:	f6bf aed6 	bge.w	80149b6 <atan+0x3e>
 8014c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c0e:	461d      	mov	r5, r3
 8014c10:	e6d1      	b.n	80149b6 <atan+0x3e>
 8014c12:	a51d      	add	r5, pc, #116	; (adr r5, 8014c88 <atan+0x310>)
 8014c14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014c18:	e6cd      	b.n	80149b6 <atan+0x3e>
 8014c1a:	bf00      	nop
 8014c1c:	f3af 8000 	nop.w
 8014c20:	54442d18 	.word	0x54442d18
 8014c24:	bff921fb 	.word	0xbff921fb
 8014c28:	8800759c 	.word	0x8800759c
 8014c2c:	7e37e43c 	.word	0x7e37e43c
 8014c30:	e322da11 	.word	0xe322da11
 8014c34:	3f90ad3a 	.word	0x3f90ad3a
 8014c38:	24760deb 	.word	0x24760deb
 8014c3c:	3fa97b4b 	.word	0x3fa97b4b
 8014c40:	a0d03d51 	.word	0xa0d03d51
 8014c44:	3fb10d66 	.word	0x3fb10d66
 8014c48:	c54c206e 	.word	0xc54c206e
 8014c4c:	3fb745cd 	.word	0x3fb745cd
 8014c50:	920083ff 	.word	0x920083ff
 8014c54:	3fc24924 	.word	0x3fc24924
 8014c58:	5555550d 	.word	0x5555550d
 8014c5c:	3fd55555 	.word	0x3fd55555
 8014c60:	2c6a6c2f 	.word	0x2c6a6c2f
 8014c64:	bfa2b444 	.word	0xbfa2b444
 8014c68:	52defd9a 	.word	0x52defd9a
 8014c6c:	3fadde2d 	.word	0x3fadde2d
 8014c70:	af749a6d 	.word	0xaf749a6d
 8014c74:	3fb3b0f2 	.word	0x3fb3b0f2
 8014c78:	fe231671 	.word	0xfe231671
 8014c7c:	3fbc71c6 	.word	0x3fbc71c6
 8014c80:	9998ebc4 	.word	0x9998ebc4
 8014c84:	3fc99999 	.word	0x3fc99999
 8014c88:	54442d18 	.word	0x54442d18
 8014c8c:	3ff921fb 	.word	0x3ff921fb
 8014c90:	440fffff 	.word	0x440fffff
 8014c94:	7ff00000 	.word	0x7ff00000
 8014c98:	3fdbffff 	.word	0x3fdbffff
 8014c9c:	3ff00000 	.word	0x3ff00000
 8014ca0:	3ff2ffff 	.word	0x3ff2ffff
 8014ca4:	40038000 	.word	0x40038000
 8014ca8:	3ff80000 	.word	0x3ff80000
 8014cac:	bff00000 	.word	0xbff00000
 8014cb0:	08016f18 	.word	0x08016f18
 8014cb4:	08016ef8 	.word	0x08016ef8

08014cb8 <fabs>:
 8014cb8:	ec51 0b10 	vmov	r0, r1, d0
 8014cbc:	ee10 2a10 	vmov	r2, s0
 8014cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014cc4:	ec43 2b10 	vmov	d0, r2, r3
 8014cc8:	4770      	bx	lr
	...

08014ccc <_init>:
 8014ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cce:	bf00      	nop
 8014cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cd2:	bc08      	pop	{r3}
 8014cd4:	469e      	mov	lr, r3
 8014cd6:	4770      	bx	lr

08014cd8 <_fini>:
 8014cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cda:	bf00      	nop
 8014cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cde:	bc08      	pop	{r3}
 8014ce0:	469e      	mov	lr, r3
 8014ce2:	4770      	bx	lr
