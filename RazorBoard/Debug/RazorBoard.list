
RazorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001428c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  08014420  08014420  00024420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016278  08016278  0003044c  2**0
                  CONTENTS
  4 .ARM          00000008  08016278  08016278  00026278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016280  08016280  0003044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016280  08016280  00026280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016284  08016284  00026284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000044c  20000000  08016288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a78  20000450  080166d4  00030450  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ec8  080166d4  00032ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c963  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c22  00000000  00000000  0004cddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00050a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00052150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250c1  00000000  00000000  00053880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce16  00000000  00000000  00078941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc00f  00000000  00000000  00095757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  00171766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa0  00000000  00000000  00171828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001b48  00000000  00000000  001792c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000450 	.word	0x20000450
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014404 	.word	0x08014404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000454 	.word	0x20000454
 80001cc:	08014404 	.word	0x08014404

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <show_config>:
#include "sram.h"
#include "string.h"
#include "stdio.h"
#include <stdlib.h>

void show_config(sram_settings settings) {
 800100c:	b084      	sub	sp, #16
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
 8001012:	f107 0c08 	add.w	ip, r7, #8
 8001016:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	sprintf(msg, "Go Home Direction: %d\r\n", settings.Go_Home_Direction);
 800101a:	7a7b      	ldrb	r3, [r7, #9]
 800101c:	461a      	mov	r2, r3
 800101e:	49a5      	ldr	r1, [pc, #660]	; (80012b4 <show_config+0x2a8>)
 8001020:	48a5      	ldr	r0, [pc, #660]	; (80012b8 <show_config+0x2ac>)
 8001022:	f00e fd33 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001026:	48a4      	ldr	r0, [pc, #656]	; (80012b8 <show_config+0x2ac>)
 8001028:	f002 ff08 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Boundary_Timeout: %d\r\n", settings.Boundary_Timeout);
 800102c:	7abb      	ldrb	r3, [r7, #10]
 800102e:	461a      	mov	r2, r3
 8001030:	49a2      	ldr	r1, [pc, #648]	; (80012bc <show_config+0x2b0>)
 8001032:	48a1      	ldr	r0, [pc, #644]	; (80012b8 <show_config+0x2ac>)
 8001034:	f00e fd2a 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001038:	489f      	ldr	r0, [pc, #636]	; (80012b8 <show_config+0x2ac>)
 800103a:	f002 feff 	bl	8003e3c <Serial_Console>
	sprintf(msg, "WorkingHourStart: %d\r\n", settings.WorkingHourStart);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	461a      	mov	r2, r3
 8001042:	499f      	ldr	r1, [pc, #636]	; (80012c0 <show_config+0x2b4>)
 8001044:	489c      	ldr	r0, [pc, #624]	; (80012b8 <show_config+0x2ac>)
 8001046:	f00e fd21 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800104a:	489b      	ldr	r0, [pc, #620]	; (80012b8 <show_config+0x2ac>)
 800104c:	f002 fef6 	bl	8003e3c <Serial_Console>
	sprintf(msg, "WorkingHourEnd: %d\r\n", settings.WorkingHourEnd);
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	461a      	mov	r2, r3
 8001054:	499b      	ldr	r1, [pc, #620]	; (80012c4 <show_config+0x2b8>)
 8001056:	4898      	ldr	r0, [pc, #608]	; (80012b8 <show_config+0x2ac>)
 8001058:	f00e fd18 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800105c:	4896      	ldr	r0, [pc, #600]	; (80012b8 <show_config+0x2ac>)
 800105e:	f002 feed 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Overturn_Limit: %d\r\n", settings.Overturn_Limit);
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	461a      	mov	r2, r3
 8001066:	4998      	ldr	r1, [pc, #608]	; (80012c8 <show_config+0x2bc>)
 8001068:	4893      	ldr	r0, [pc, #588]	; (80012b8 <show_config+0x2ac>)
 800106a:	f00e fd0f 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800106e:	4892      	ldr	r0, [pc, #584]	; (80012b8 <show_config+0x2ac>)
 8001070:	f002 fee4 	bl	8003e3c <Serial_Console>
	sprintf(msg, "MotorSpeedUpdateFreq: %d\r\n", settings.MotorSpeedUpdateFreq);
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	461a      	mov	r2, r3
 8001078:	4994      	ldr	r1, [pc, #592]	; (80012cc <show_config+0x2c0>)
 800107a:	488f      	ldr	r0, [pc, #572]	; (80012b8 <show_config+0x2ac>)
 800107c:	f00e fd06 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001080:	488d      	ldr	r0, [pc, #564]	; (80012b8 <show_config+0x2ac>)
 8001082:	f002 fedb 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Outside_Threshold: %d\r\n", settings.Outside_Threshold);
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	4991      	ldr	r1, [pc, #580]	; (80012d0 <show_config+0x2c4>)
 800108c:	488a      	ldr	r0, [pc, #552]	; (80012b8 <show_config+0x2ac>)
 800108e:	f00e fcfd 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001092:	4889      	ldr	r0, [pc, #548]	; (80012b8 <show_config+0x2ac>)
 8001094:	f002 fed2 	bl	8003e3c <Serial_Console>
	sprintf(msg, "HoldChargeDetection: %d\r\n", settings.HoldChargeDetection);
 8001098:	8a7b      	ldrh	r3, [r7, #18]
 800109a:	461a      	mov	r2, r3
 800109c:	498d      	ldr	r1, [pc, #564]	; (80012d4 <show_config+0x2c8>)
 800109e:	4886      	ldr	r0, [pc, #536]	; (80012b8 <show_config+0x2ac>)
 80010a0:	f00e fcf4 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80010a4:	4884      	ldr	r0, [pc, #528]	; (80012b8 <show_config+0x2ac>)
 80010a6:	f002 fec9 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Battery High: %.2f\r\n", settings.Battery_High_Limit);
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4988      	ldr	r1, [pc, #544]	; (80012d8 <show_config+0x2cc>)
 80010b8:	487f      	ldr	r0, [pc, #508]	; (80012b8 <show_config+0x2ac>)
 80010ba:	f00e fce7 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80010be:	487e      	ldr	r0, [pc, #504]	; (80012b8 <show_config+0x2ac>)
 80010c0:	f002 febc 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Battery Low: %.2f\r\n", settings.Battery_Low_Limit);
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa4e 	bl	8000568 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4982      	ldr	r1, [pc, #520]	; (80012dc <show_config+0x2d0>)
 80010d2:	4879      	ldr	r0, [pc, #484]	; (80012b8 <show_config+0x2ac>)
 80010d4:	f00e fcda 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80010d8:	4877      	ldr	r0, [pc, #476]	; (80012b8 <show_config+0x2ac>)
 80010da:	f002 feaf 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Signal IN: %.2f\r\n", settings.Signal_Integrity_IN);
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa41 	bl	8000568 <__aeabi_f2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	497d      	ldr	r1, [pc, #500]	; (80012e0 <show_config+0x2d4>)
 80010ec:	4872      	ldr	r0, [pc, #456]	; (80012b8 <show_config+0x2ac>)
 80010ee:	f00e fccd 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80010f2:	4871      	ldr	r0, [pc, #452]	; (80012b8 <show_config+0x2ac>)
 80010f4:	f002 fea2 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Signal OUT: %.2f\r\n", settings.Signal_Integrity_OUT);
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa34 	bl	8000568 <__aeabi_f2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4977      	ldr	r1, [pc, #476]	; (80012e4 <show_config+0x2d8>)
 8001106:	486c      	ldr	r0, [pc, #432]	; (80012b8 <show_config+0x2ac>)
 8001108:	f00e fcc0 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800110c:	486a      	ldr	r0, [pc, #424]	; (80012b8 <show_config+0x2ac>)
 800110e:	f002 fe95 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Motor Limit: %.2f\r\n", settings.Motor_Limit);
 8001112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa27 	bl	8000568 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4972      	ldr	r1, [pc, #456]	; (80012e8 <show_config+0x2dc>)
 8001120:	4865      	ldr	r0, [pc, #404]	; (80012b8 <show_config+0x2ac>)
 8001122:	f00e fcb3 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001126:	4864      	ldr	r0, [pc, #400]	; (80012b8 <show_config+0x2ac>)
 8001128:	f002 fe88 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Cutter Limit: %.2f\r\n", settings.Cutter_Limit);
 800112c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa1a 	bl	8000568 <__aeabi_f2d>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	496c      	ldr	r1, [pc, #432]	; (80012ec <show_config+0x2e0>)
 800113a:	485f      	ldr	r0, [pc, #380]	; (80012b8 <show_config+0x2ac>)
 800113c:	f00e fca6 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001140:	485d      	ldr	r0, [pc, #372]	; (80012b8 <show_config+0x2ac>)
 8001142:	f002 fe7b 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Motor Max Limit: %.2f\r\n", settings.Motor_Max_Limit);
 8001146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa0d 	bl	8000568 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4967      	ldr	r1, [pc, #412]	; (80012f0 <show_config+0x2e4>)
 8001154:	4858      	ldr	r0, [pc, #352]	; (80012b8 <show_config+0x2ac>)
 8001156:	f00e fc99 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800115a:	4857      	ldr	r0, [pc, #348]	; (80012b8 <show_config+0x2ac>)
 800115c:	f002 fe6e 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Motor Min Limit: %.2f\r\n", settings.Motor_Min_Limit);
 8001160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fa00 	bl	8000568 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4961      	ldr	r1, [pc, #388]	; (80012f4 <show_config+0x2e8>)
 800116e:	4852      	ldr	r0, [pc, #328]	; (80012b8 <show_config+0x2ac>)
 8001170:	f00e fc8c 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001174:	4850      	ldr	r0, [pc, #320]	; (80012b8 <show_config+0x2ac>)
 8001176:	f002 fe61 	bl	8003e3c <Serial_Console>
	sprintf(msg, "ADC Level: %d\r\n", settings.adcLevel);
 800117a:	8bfb      	ldrh	r3, [r7, #30]
 800117c:	461a      	mov	r2, r3
 800117e:	495e      	ldr	r1, [pc, #376]	; (80012f8 <show_config+0x2ec>)
 8001180:	484d      	ldr	r0, [pc, #308]	; (80012b8 <show_config+0x2ac>)
 8001182:	f00e fc83 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001186:	484c      	ldr	r0, [pc, #304]	; (80012b8 <show_config+0x2ac>)
 8001188:	f002 fe58 	bl	8003e3c <Serial_Console>
	sprintf(msg, "KP: %.4f\r\n", settings.kp);
 800118c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9ea 	bl	8000568 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4958      	ldr	r1, [pc, #352]	; (80012fc <show_config+0x2f0>)
 800119a:	4847      	ldr	r0, [pc, #284]	; (80012b8 <show_config+0x2ac>)
 800119c:	f00e fc76 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <show_config+0x2ac>)
 80011a2:	f002 fe4b 	bl	8003e3c <Serial_Console>
	sprintf(msg, "KI: %.4f\r\n", settings.ki);
 80011a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9dd 	bl	8000568 <__aeabi_f2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4953      	ldr	r1, [pc, #332]	; (8001300 <show_config+0x2f4>)
 80011b4:	4840      	ldr	r0, [pc, #256]	; (80012b8 <show_config+0x2ac>)
 80011b6:	f00e fc69 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80011ba:	483f      	ldr	r0, [pc, #252]	; (80012b8 <show_config+0x2ac>)
 80011bc:	f002 fe3e 	bl	8003e3c <Serial_Console>
	sprintf(msg, "KD: %.4f\r\n", settings.kd);
 80011c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9d0 	bl	8000568 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	494d      	ldr	r1, [pc, #308]	; (8001304 <show_config+0x2f8>)
 80011ce:	483a      	ldr	r0, [pc, #232]	; (80012b8 <show_config+0x2ac>)
 80011d0:	f00e fc5c 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80011d4:	4838      	ldr	r0, [pc, #224]	; (80012b8 <show_config+0x2ac>)
 80011d6:	f002 fe31 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Magnitude Proximity: %d\r\n", settings.magValue);
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	461a      	mov	r2, r3
 80011de:	494a      	ldr	r1, [pc, #296]	; (8001308 <show_config+0x2fc>)
 80011e0:	4835      	ldr	r0, [pc, #212]	; (80012b8 <show_config+0x2ac>)
 80011e2:	f00e fc53 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80011e6:	4834      	ldr	r0, [pc, #208]	; (80012b8 <show_config+0x2ac>)
 80011e8:	f002 fe28 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Magnitude Min Proximity: %d\r\n", settings.magMinValue);
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4946      	ldr	r1, [pc, #280]	; (800130c <show_config+0x300>)
 80011f2:	4831      	ldr	r0, [pc, #196]	; (80012b8 <show_config+0x2ac>)
 80011f4:	f00e fc4a 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80011f8:	482f      	ldr	r0, [pc, #188]	; (80012b8 <show_config+0x2ac>)
 80011fa:	f002 fe1f 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Voltage Multiply: %.4f\r\n", settings.voltageMultiply);
 80011fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9b1 	bl	8000568 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4941      	ldr	r1, [pc, #260]	; (8001310 <show_config+0x304>)
 800120c:	482a      	ldr	r0, [pc, #168]	; (80012b8 <show_config+0x2ac>)
 800120e:	f00e fc3d 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001212:	4829      	ldr	r0, [pc, #164]	; (80012b8 <show_config+0x2ac>)
 8001214:	f002 fe12 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Proximity Speed: %.2f\r\n", settings.proximitySpeed);
 8001218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9a4 	bl	8000568 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	493b      	ldr	r1, [pc, #236]	; (8001314 <show_config+0x308>)
 8001226:	4824      	ldr	r0, [pc, #144]	; (80012b8 <show_config+0x2ac>)
 8001228:	f00e fc30 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800122c:	4822      	ldr	r0, [pc, #136]	; (80012b8 <show_config+0x2ac>)
 800122e:	f002 fe05 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Movement Limit: %.2f\r\n", settings.movement);
 8001232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f997 	bl	8000568 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4936      	ldr	r1, [pc, #216]	; (8001318 <show_config+0x30c>)
 8001240:	481d      	ldr	r0, [pc, #116]	; (80012b8 <show_config+0x2ac>)
 8001242:	f00e fc23 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001246:	481c      	ldr	r0, [pc, #112]	; (80012b8 <show_config+0x2ac>)
 8001248:	f002 fdf8 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Motor Max Speed: %d\r\n", settings.motorMaxSpeed);
 800124c:	8b3b      	ldrh	r3, [r7, #24]
 800124e:	461a      	mov	r2, r3
 8001250:	4932      	ldr	r1, [pc, #200]	; (800131c <show_config+0x310>)
 8001252:	4819      	ldr	r0, [pc, #100]	; (80012b8 <show_config+0x2ac>)
 8001254:	f00e fc1a 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <show_config+0x2ac>)
 800125a:	f002 fdef 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Motor Min Speed: %d\r\n", settings.motorMinSpeed);
 800125e:	8b7b      	ldrh	r3, [r7, #26]
 8001260:	461a      	mov	r2, r3
 8001262:	492f      	ldr	r1, [pc, #188]	; (8001320 <show_config+0x314>)
 8001264:	4814      	ldr	r0, [pc, #80]	; (80012b8 <show_config+0x2ac>)
 8001266:	f00e fc11 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <show_config+0x2ac>)
 800126c:	f002 fde6 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Cutter Speed: %d\r\n", settings.cutterSpeed);
 8001270:	8bbb      	ldrh	r3, [r7, #28]
 8001272:	461a      	mov	r2, r3
 8001274:	492b      	ldr	r1, [pc, #172]	; (8001324 <show_config+0x318>)
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <show_config+0x2ac>)
 8001278:	f00e fc08 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800127c:	480e      	ldr	r0, [pc, #56]	; (80012b8 <show_config+0x2ac>)
 800127e:	f002 fddd 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Movement limit: %d\r\n", settings.move_count_limit);
 8001282:	7c3b      	ldrb	r3, [r7, #16]
 8001284:	461a      	mov	r2, r3
 8001286:	4928      	ldr	r1, [pc, #160]	; (8001328 <show_config+0x31c>)
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <show_config+0x2ac>)
 800128a:	f00e fbff 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <show_config+0x2ac>)
 8001290:	f002 fdd4 	bl	8003e3c <Serial_Console>
	sprintf(msg, "Bumber limit: %d\r\n", settings.bumber_count_limit);
 8001294:	7c7b      	ldrb	r3, [r7, #17]
 8001296:	461a      	mov	r2, r3
 8001298:	4924      	ldr	r1, [pc, #144]	; (800132c <show_config+0x320>)
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <show_config+0x2ac>)
 800129c:	f00e fbf6 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <show_config+0x2ac>)
 80012a2:	f002 fdcb 	bl	8003e3c <Serial_Console>

}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ae:	b004      	add	sp, #16
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	08014420 	.word	0x08014420
 80012b8:	20000a80 	.word	0x20000a80
 80012bc:	08014438 	.word	0x08014438
 80012c0:	08014450 	.word	0x08014450
 80012c4:	08014468 	.word	0x08014468
 80012c8:	08014480 	.word	0x08014480
 80012cc:	08014498 	.word	0x08014498
 80012d0:	080144b4 	.word	0x080144b4
 80012d4:	080144cc 	.word	0x080144cc
 80012d8:	080144e8 	.word	0x080144e8
 80012dc:	08014500 	.word	0x08014500
 80012e0:	08014514 	.word	0x08014514
 80012e4:	08014528 	.word	0x08014528
 80012e8:	0801453c 	.word	0x0801453c
 80012ec:	08014550 	.word	0x08014550
 80012f0:	08014568 	.word	0x08014568
 80012f4:	08014580 	.word	0x08014580
 80012f8:	08014598 	.word	0x08014598
 80012fc:	080145a8 	.word	0x080145a8
 8001300:	080145b4 	.word	0x080145b4
 8001304:	080145c0 	.word	0x080145c0
 8001308:	080145cc 	.word	0x080145cc
 800130c:	080145e8 	.word	0x080145e8
 8001310:	08014608 	.word	0x08014608
 8001314:	08014624 	.word	0x08014624
 8001318:	0801463c 	.word	0x0801463c
 800131c:	08014654 	.word	0x08014654
 8001320:	0801466c 	.word	0x0801466c
 8001324:	08014684 	.word	0x08014684
 8001328:	08014698 	.word	0x08014698
 800132c:	080146b0 	.word	0x080146b0

08001330 <help>:


void help(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	sprintf(msg, "Available commands:\r\n\r\n");
 8001334:	49b1      	ldr	r1, [pc, #708]	; (80015fc <help+0x2cc>)
 8001336:	48b2      	ldr	r0, [pc, #712]	; (8001600 <help+0x2d0>)
 8001338:	f00e fba8 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800133c:	48b0      	ldr	r0, [pc, #704]	; (8001600 <help+0x2d0>)
 800133e:	f002 fd7d 	bl	8003e3c <Serial_Console>
	sprintf(msg, "HELLO             	- Welcome message\r\n");
 8001342:	49b0      	ldr	r1, [pc, #704]	; (8001604 <help+0x2d4>)
 8001344:	48ae      	ldr	r0, [pc, #696]	; (8001600 <help+0x2d0>)
 8001346:	f00e fba1 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800134a:	48ad      	ldr	r0, [pc, #692]	; (8001600 <help+0x2d0>)
 800134c:	f002 fd76 	bl	8003e3c <Serial_Console>
	sprintf(msg, "REBOOT                  - Reboot Razorboard\r\n");
 8001350:	49ad      	ldr	r1, [pc, #692]	; (8001608 <help+0x2d8>)
 8001352:	48ab      	ldr	r0, [pc, #684]	; (8001600 <help+0x2d0>)
 8001354:	f00e fb9a 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001358:	48a9      	ldr	r0, [pc, #676]	; (8001600 <help+0x2d0>)
 800135a:	f002 fd6f 	bl	8003e3c <Serial_Console>
	sprintf(msg, "DISABLE                 - Disable Razorboard\r\n");
 800135e:	49ab      	ldr	r1, [pc, #684]	; (800160c <help+0x2dc>)
 8001360:	48a7      	ldr	r0, [pc, #668]	; (8001600 <help+0x2d0>)
 8001362:	f00e fb93 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001366:	48a6      	ldr	r0, [pc, #664]	; (8001600 <help+0x2d0>)
 8001368:	f002 fd68 	bl	8003e3c <Serial_Console>
	sprintf(msg, "ENABLE                  - Enable Razorboard\r\n");
 800136c:	49a8      	ldr	r1, [pc, #672]	; (8001610 <help+0x2e0>)
 800136e:	48a4      	ldr	r0, [pc, #656]	; (8001600 <help+0x2d0>)
 8001370:	f00e fb8c 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001374:	48a2      	ldr	r0, [pc, #648]	; (8001600 <help+0x2d0>)
 8001376:	f002 fd61 	bl	8003e3c <Serial_Console>
	sprintf(msg, "VERSION           	- Show version of board\r\n");
 800137a:	49a6      	ldr	r1, [pc, #664]	; (8001614 <help+0x2e4>)
 800137c:	48a0      	ldr	r0, [pc, #640]	; (8001600 <help+0x2d0>)
 800137e:	f00e fb85 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001382:	489f      	ldr	r0, [pc, #636]	; (8001600 <help+0x2d0>)
 8001384:	f002 fd5a 	bl	8003e3c <Serial_Console>
	sprintf(msg, "DEBUG ON          	- Enable debug messages\r\n");
 8001388:	49a3      	ldr	r1, [pc, #652]	; (8001618 <help+0x2e8>)
 800138a:	489d      	ldr	r0, [pc, #628]	; (8001600 <help+0x2d0>)
 800138c:	f00e fb7e 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001390:	489b      	ldr	r0, [pc, #620]	; (8001600 <help+0x2d0>)
 8001392:	f002 fd53 	bl	8003e3c <Serial_Console>
	sprintf(msg, "DEBUG OFF         	- Disable debug messages\r\n");
 8001396:	49a1      	ldr	r1, [pc, #644]	; (800161c <help+0x2ec>)
 8001398:	4899      	ldr	r0, [pc, #612]	; (8001600 <help+0x2d0>)
 800139a:	f00e fb77 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800139e:	4898      	ldr	r0, [pc, #608]	; (8001600 <help+0x2d0>)
 80013a0:	f002 fd4c 	bl	8003e3c <Serial_Console>
	sprintf(msg, "VOLTAGE           	- Show current voltage\r\n");
 80013a4:	499e      	ldr	r1, [pc, #632]	; (8001620 <help+0x2f0>)
 80013a6:	4896      	ldr	r0, [pc, #600]	; (8001600 <help+0x2d0>)
 80013a8:	f00e fb70 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013ac:	4894      	ldr	r0, [pc, #592]	; (8001600 <help+0x2d0>)
 80013ae:	f002 fd45 	bl	8003e3c <Serial_Console>
	sprintf(msg, "UPGRADE           	- Enter bootloader\r\n");
 80013b2:	499c      	ldr	r1, [pc, #624]	; (8001624 <help+0x2f4>)
 80013b4:	4892      	ldr	r0, [pc, #584]	; (8001600 <help+0x2d0>)
 80013b6:	f00e fb69 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013ba:	4891      	ldr	r0, [pc, #580]	; (8001600 <help+0x2d0>)
 80013bc:	f002 fd3e 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SHOW SIG          	- Show reference BWF signature\r\n");
 80013c0:	4999      	ldr	r1, [pc, #612]	; (8001628 <help+0x2f8>)
 80013c2:	488f      	ldr	r0, [pc, #572]	; (8001600 <help+0x2d0>)
 80013c4:	f00e fb62 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013c8:	488d      	ldr	r0, [pc, #564]	; (8001600 <help+0x2d0>)
 80013ca:	f002 fd37 	bl	8003e3c <Serial_Console>
	sprintf(msg, "EXPORT SIG          	- Export reference BWF signature as an array\r\n");
 80013ce:	4997      	ldr	r1, [pc, #604]	; (800162c <help+0x2fc>)
 80013d0:	488b      	ldr	r0, [pc, #556]	; (8001600 <help+0x2d0>)
 80013d2:	f00e fb5b 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013d6:	488a      	ldr	r0, [pc, #552]	; (8001600 <help+0x2d0>)
 80013d8:	f002 fd30 	bl	8003e3c <Serial_Console>
	sprintf(msg, "RECORD SIG              - Record a new signature\r\n");
 80013dc:	4994      	ldr	r1, [pc, #592]	; (8001630 <help+0x300>)
 80013de:	4888      	ldr	r0, [pc, #544]	; (8001600 <help+0x2d0>)
 80013e0:	f00e fb54 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013e4:	4886      	ldr	r0, [pc, #536]	; (8001600 <help+0x2d0>)
 80013e6:	f002 fd29 	bl	8003e3c <Serial_Console>
	sprintf(msg, "TEST LEFT MOTOR   	- Test left motor (M1)\r\n");
 80013ea:	4992      	ldr	r1, [pc, #584]	; (8001634 <help+0x304>)
 80013ec:	4884      	ldr	r0, [pc, #528]	; (8001600 <help+0x2d0>)
 80013ee:	f00e fb4d 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80013f2:	4883      	ldr	r0, [pc, #524]	; (8001600 <help+0x2d0>)
 80013f4:	f002 fd22 	bl	8003e3c <Serial_Console>
	sprintf(msg, "TEST RIGHT MOTOR  	- Test right motor (M2)\r\n");
 80013f8:	498f      	ldr	r1, [pc, #572]	; (8001638 <help+0x308>)
 80013fa:	4881      	ldr	r0, [pc, #516]	; (8001600 <help+0x2d0>)
 80013fc:	f00e fb46 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001400:	487f      	ldr	r0, [pc, #508]	; (8001600 <help+0x2d0>)
 8001402:	f002 fd1b 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SHOW CURRENT      	- Show current sensors M1, M2, C1\r\n");
 8001406:	498d      	ldr	r1, [pc, #564]	; (800163c <help+0x30c>)
 8001408:	487d      	ldr	r0, [pc, #500]	; (8001600 <help+0x2d0>)
 800140a:	f00e fb3f 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800140e:	487c      	ldr	r0, [pc, #496]	; (8001600 <help+0x2d0>)
 8001410:	f002 fd14 	bl	8003e3c <Serial_Console>
	sprintf(msg, "STOP MOTORS       	- Stop motors\r\n");
 8001414:	498a      	ldr	r1, [pc, #552]	; (8001640 <help+0x310>)
 8001416:	487a      	ldr	r0, [pc, #488]	; (8001600 <help+0x2d0>)
 8001418:	f00e fb38 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800141c:	4878      	ldr	r0, [pc, #480]	; (8001600 <help+0x2d0>)
 800141e:	f002 fd0d 	bl	8003e3c <Serial_Console>
	sprintf(msg, "RUN MOTORS FORWARD	- Run motors forward\r\n");
 8001422:	4988      	ldr	r1, [pc, #544]	; (8001644 <help+0x314>)
 8001424:	4876      	ldr	r0, [pc, #472]	; (8001600 <help+0x2d0>)
 8001426:	f00e fb31 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800142a:	4875      	ldr	r0, [pc, #468]	; (8001600 <help+0x2d0>)
 800142c:	f002 fd06 	bl	8003e3c <Serial_Console>
	sprintf(msg, "RUN MOTORS REVERSE	- Run motors backward\r\n");
 8001430:	4985      	ldr	r1, [pc, #532]	; (8001648 <help+0x318>)
 8001432:	4873      	ldr	r0, [pc, #460]	; (8001600 <help+0x2d0>)
 8001434:	f00e fb2a 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001438:	4871      	ldr	r0, [pc, #452]	; (8001600 <help+0x2d0>)
 800143a:	f002 fcff 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET PROXIMITY SPEED     - Set proximity speed\r\n");
 800143e:	4983      	ldr	r1, [pc, #524]	; (800164c <help+0x31c>)
 8001440:	486f      	ldr	r0, [pc, #444]	; (8001600 <help+0x2d0>)
 8001442:	f00e fb23 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001446:	486e      	ldr	r0, [pc, #440]	; (8001600 <help+0x2d0>)
 8001448:	f002 fcf8 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET VOLTAGE MULTIPLY   - Voltage Multiply for calculating voltage\r\n");
 800144c:	4980      	ldr	r1, [pc, #512]	; (8001650 <help+0x320>)
 800144e:	486c      	ldr	r0, [pc, #432]	; (8001600 <help+0x2d0>)
 8001450:	f00e fb1c 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001454:	486a      	ldr	r0, [pc, #424]	; (8001600 <help+0x2d0>)
 8001456:	f002 fcf1 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MOTOR MAX LIMIT     - Set Motor Max Limit in amp\r\n");
 800145a:	497e      	ldr	r1, [pc, #504]	; (8001654 <help+0x324>)
 800145c:	4868      	ldr	r0, [pc, #416]	; (8001600 <help+0x2d0>)
 800145e:	f00e fb15 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001462:	4867      	ldr	r0, [pc, #412]	; (8001600 <help+0x2d0>)
 8001464:	f002 fcea 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MOTOR MIN LIMIT     - Set Motor Min Limit in amp\r\n");
 8001468:	497b      	ldr	r1, [pc, #492]	; (8001658 <help+0x328>)
 800146a:	4865      	ldr	r0, [pc, #404]	; (8001600 <help+0x2d0>)
 800146c:	f00e fb0e 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001470:	4863      	ldr	r0, [pc, #396]	; (8001600 <help+0x2d0>)
 8001472:	f002 fce3 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BOUNDARY TIMEOUT    - How many seconds without INSIDE before HALT\r\n");
 8001476:	4979      	ldr	r1, [pc, #484]	; (800165c <help+0x32c>)
 8001478:	4861      	ldr	r0, [pc, #388]	; (8001600 <help+0x2d0>)
 800147a:	f00e fb07 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800147e:	4860      	ldr	r0, [pc, #384]	; (8001600 <help+0x2d0>)
 8001480:	f002 fcdc 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET OVERTURN LIMIT      - How many degrees it can tilt before HALT\r\n");
 8001484:	4976      	ldr	r1, [pc, #472]	; (8001660 <help+0x330>)
 8001486:	485e      	ldr	r0, [pc, #376]	; (8001600 <help+0x2d0>)
 8001488:	f00e fb00 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800148c:	485c      	ldr	r0, [pc, #368]	; (8001600 <help+0x2d0>)
 800148e:	f002 fcd5 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET OUTSIDE LIMIT       - How many seconds OUTSIDE before HALT\r\n");
 8001492:	4974      	ldr	r1, [pc, #464]	; (8001664 <help+0x334>)
 8001494:	485a      	ldr	r0, [pc, #360]	; (8001600 <help+0x2d0>)
 8001496:	f00e faf9 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800149a:	4859      	ldr	r0, [pc, #356]	; (8001600 <help+0x2d0>)
 800149c:	f002 fcce 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET CHARGE DETECTION    - How many (ms) from detecting charge to STOP\r\n");
 80014a0:	4971      	ldr	r1, [pc, #452]	; (8001668 <help+0x338>)
 80014a2:	4857      	ldr	r0, [pc, #348]	; (8001600 <help+0x2d0>)
 80014a4:	f00e faf2 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014a8:	4855      	ldr	r0, [pc, #340]	; (8001600 <help+0x2d0>)
 80014aa:	f002 fcc7 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BAT LOW             - Limit when considering charge needed\r\n");
 80014ae:	496f      	ldr	r1, [pc, #444]	; (800166c <help+0x33c>)
 80014b0:	4853      	ldr	r0, [pc, #332]	; (8001600 <help+0x2d0>)
 80014b2:	f00e faeb 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014b6:	4852      	ldr	r0, [pc, #328]	; (8001600 <help+0x2d0>)
 80014b8:	f002 fcc0 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BAT HIGH            - Limit when considering battery full\r\n");
 80014bc:	496c      	ldr	r1, [pc, #432]	; (8001670 <help+0x340>)
 80014be:	4850      	ldr	r0, [pc, #320]	; (8001600 <help+0x2d0>)
 80014c0:	f00e fae4 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014c4:	484e      	ldr	r0, [pc, #312]	; (8001600 <help+0x2d0>)
 80014c6:	f002 fcb9 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BWF OUT             - Limit for considering BWF OUT\r\n");
 80014ca:	496a      	ldr	r1, [pc, #424]	; (8001674 <help+0x344>)
 80014cc:	484c      	ldr	r0, [pc, #304]	; (8001600 <help+0x2d0>)
 80014ce:	f00e fadd 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014d2:	484b      	ldr	r0, [pc, #300]	; (8001600 <help+0x2d0>)
 80014d4:	f002 fcb2 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BWF IN              - Limit for considering BWF IN\r\n");
 80014d8:	4967      	ldr	r1, [pc, #412]	; (8001678 <help+0x348>)
 80014da:	4849      	ldr	r0, [pc, #292]	; (8001600 <help+0x2d0>)
 80014dc:	f00e fad6 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014e0:	4847      	ldr	r0, [pc, #284]	; (8001600 <help+0x2d0>)
 80014e2:	f002 fcab 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET CUTTER LIMIT        - Set Cutter Motor Limit in Amp\r\n");
 80014e6:	4965      	ldr	r1, [pc, #404]	; (800167c <help+0x34c>)
 80014e8:	4845      	ldr	r0, [pc, #276]	; (8001600 <help+0x2d0>)
 80014ea:	f00e facf 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014ee:	4844      	ldr	r0, [pc, #272]	; (8001600 <help+0x2d0>)
 80014f0:	f002 fca4 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MOTOR LIMIT         - Set Motor Limit, in multiply, default = 3.0\r\n");
 80014f4:	4962      	ldr	r1, [pc, #392]	; (8001680 <help+0x350>)
 80014f6:	4842      	ldr	r0, [pc, #264]	; (8001600 <help+0x2d0>)
 80014f8:	f00e fac8 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80014fc:	4840      	ldr	r0, [pc, #256]	; (8001600 <help+0x2d0>)
 80014fe:	f002 fc9d 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MOVEMENT LIMIT      - Set Movement Limit for detecting movement\r\n");
 8001502:	4960      	ldr	r1, [pc, #384]	; (8001684 <help+0x354>)
 8001504:	483e      	ldr	r0, [pc, #248]	; (8001600 <help+0x2d0>)
 8001506:	f00e fac1 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800150a:	483d      	ldr	r0, [pc, #244]	; (8001600 <help+0x2d0>)
 800150c:	f002 fc96 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET ADC LEVEL           - Set the ADC level for BWF\r\n");
 8001510:	495d      	ldr	r1, [pc, #372]	; (8001688 <help+0x358>)
 8001512:	483b      	ldr	r0, [pc, #236]	; (8001600 <help+0x2d0>)
 8001514:	f00e faba 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001518:	4839      	ldr	r0, [pc, #228]	; (8001600 <help+0x2d0>)
 800151a:	f002 fc8f 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET CUTTER SPEED        - Set speed of cutter motor\r\n");
 800151e:	495b      	ldr	r1, [pc, #364]	; (800168c <help+0x35c>)
 8001520:	4837      	ldr	r0, [pc, #220]	; (8001600 <help+0x2d0>)
 8001522:	f00e fab3 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001526:	4836      	ldr	r0, [pc, #216]	; (8001600 <help+0x2d0>)
 8001528:	f002 fc88 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MOVEMENT COUNT LIMIT    - Set limit for movement detection before HALT\r\n");
 800152c:	4958      	ldr	r1, [pc, #352]	; (8001690 <help+0x360>)
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <help+0x2d0>)
 8001530:	f00e faac 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001534:	4832      	ldr	r0, [pc, #200]	; (8001600 <help+0x2d0>)
 8001536:	f002 fc81 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET BUMBER COUNT LIMIT  - Set limit for bumber detection before HALT\r\n");
 800153a:	4956      	ldr	r1, [pc, #344]	; (8001694 <help+0x364>)
 800153c:	4830      	ldr	r0, [pc, #192]	; (8001600 <help+0x2d0>)
 800153e:	f00e faa5 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001542:	482f      	ldr	r0, [pc, #188]	; (8001600 <help+0x2d0>)
 8001544:	f002 fc7a 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET TIME		- Set current time for RTC\r\n");
 8001548:	4953      	ldr	r1, [pc, #332]	; (8001698 <help+0x368>)
 800154a:	482d      	ldr	r0, [pc, #180]	; (8001600 <help+0x2d0>)
 800154c:	f00e fa9e 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001550:	482b      	ldr	r0, [pc, #172]	; (8001600 <help+0x2d0>)
 8001552:	f002 fc73 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET DATE		- Set current date for RTC\r\n");
 8001556:	4951      	ldr	r1, [pc, #324]	; (800169c <help+0x36c>)
 8001558:	4829      	ldr	r0, [pc, #164]	; (8001600 <help+0x2d0>)
 800155a:	f00e fa97 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800155e:	4828      	ldr	r0, [pc, #160]	; (8001600 <help+0x2d0>)
 8001560:	f002 fc6c 	bl	8003e3c <Serial_Console>
	sprintf(msg, "			Date must be set in a special order:\r\n");
 8001564:	494e      	ldr	r1, [pc, #312]	; (80016a0 <help+0x370>)
 8001566:	4826      	ldr	r0, [pc, #152]	; (8001600 <help+0x2d0>)
 8001568:	f00e fa90 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <help+0x2d0>)
 800156e:	f002 fc65 	bl	8003e3c <Serial_Console>
	sprintf(msg, "			Year Month Day Weekday -> 21 3 31 2 (2 = Wednesday)\r\n");
 8001572:	494c      	ldr	r1, [pc, #304]	; (80016a4 <help+0x374>)
 8001574:	4822      	ldr	r0, [pc, #136]	; (8001600 <help+0x2d0>)
 8001576:	f00e fa89 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 800157a:	4821      	ldr	r0, [pc, #132]	; (8001600 <help+0x2d0>)
 800157c:	f002 fc5e 	bl	8003e3c <Serial_Console>
	sprintf(msg, "TRACK PERIMETER 	- Track perimeter next time it crosses\r\n");
 8001580:	4949      	ldr	r1, [pc, #292]	; (80016a8 <help+0x378>)
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <help+0x2d0>)
 8001584:	f00e fa82 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001588:	481d      	ldr	r0, [pc, #116]	; (8001600 <help+0x2d0>)
 800158a:	f002 fc57 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET KP			- PID Controller KP for Perimeter Tracking\r\n");
 800158e:	4947      	ldr	r1, [pc, #284]	; (80016ac <help+0x37c>)
 8001590:	481b      	ldr	r0, [pc, #108]	; (8001600 <help+0x2d0>)
 8001592:	f00e fa7b 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001596:	481a      	ldr	r0, [pc, #104]	; (8001600 <help+0x2d0>)
 8001598:	f002 fc50 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET KI			- PID Controller KI for Perimeter Tracking\r\n");
 800159c:	4944      	ldr	r1, [pc, #272]	; (80016b0 <help+0x380>)
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <help+0x2d0>)
 80015a0:	f00e fa74 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <help+0x2d0>)
 80015a6:	f002 fc49 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET KD			- PID Controller KD for Perimeter Tracking\r\n");
 80015aa:	4942      	ldr	r1, [pc, #264]	; (80016b4 <help+0x384>)
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <help+0x2d0>)
 80015ae:	f00e fa6d 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <help+0x2d0>)
 80015b4:	f002 fc42 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MAG VALUE     - Set Magnitude value for BWF proximity\r\n");
 80015b8:	493f      	ldr	r1, [pc, #252]	; (80016b8 <help+0x388>)
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <help+0x2d0>)
 80015bc:	f00e fa66 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <help+0x2d0>)
 80015c2:	f002 fc3b 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET MAGMIN VALUE     - Set Magnitude Min value for BWF proximity\r\n");
 80015c6:	493d      	ldr	r1, [pc, #244]	; (80016bc <help+0x38c>)
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <help+0x2d0>)
 80015ca:	f00e fa5f 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <help+0x2d0>)
 80015d0:	f002 fc34 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET WORKING START	- Set Working Hour START\r\n");
 80015d4:	493a      	ldr	r1, [pc, #232]	; (80016c0 <help+0x390>)
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <help+0x2d0>)
 80015d8:	f00e fa58 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <help+0x2d0>)
 80015de:	f002 fc2d 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SET WORKING END	- Set Working Hour END\r\n");
 80015e2:	4938      	ldr	r1, [pc, #224]	; (80016c4 <help+0x394>)
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <help+0x2d0>)
 80015e6:	f00e fa51 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <help+0x2d0>)
 80015ec:	f002 fc26 	bl	8003e3c <Serial_Console>
	Serial_Console("\r\n");
 80015f0:	4835      	ldr	r0, [pc, #212]	; (80016c8 <help+0x398>)
 80015f2:	f002 fc23 	bl	8003e3c <Serial_Console>
	sprintf(msg, "LOAD CONFIG        - Load config from SRAM\r\n");
 80015f6:	4935      	ldr	r1, [pc, #212]	; (80016cc <help+0x39c>)
 80015f8:	e06a      	b.n	80016d0 <help+0x3a0>
 80015fa:	bf00      	nop
 80015fc:	080146c4 	.word	0x080146c4
 8001600:	20000a80 	.word	0x20000a80
 8001604:	080146dc 	.word	0x080146dc
 8001608:	08014704 	.word	0x08014704
 800160c:	08014734 	.word	0x08014734
 8001610:	08014764 	.word	0x08014764
 8001614:	08014794 	.word	0x08014794
 8001618:	080147c4 	.word	0x080147c4
 800161c:	080147f4 	.word	0x080147f4
 8001620:	08014824 	.word	0x08014824
 8001624:	08014850 	.word	0x08014850
 8001628:	08014878 	.word	0x08014878
 800162c:	080148ac 	.word	0x080148ac
 8001630:	080148f0 	.word	0x080148f0
 8001634:	08014924 	.word	0x08014924
 8001638:	08014950 	.word	0x08014950
 800163c:	08014980 	.word	0x08014980
 8001640:	080149b8 	.word	0x080149b8
 8001644:	080149dc 	.word	0x080149dc
 8001648:	08014a08 	.word	0x08014a08
 800164c:	08014a34 	.word	0x08014a34
 8001650:	08014a64 	.word	0x08014a64
 8001654:	08014aa8 	.word	0x08014aa8
 8001658:	08014ae0 	.word	0x08014ae0
 800165c:	08014b18 	.word	0x08014b18
 8001660:	08014b60 	.word	0x08014b60
 8001664:	08014ba8 	.word	0x08014ba8
 8001668:	08014bec 	.word	0x08014bec
 800166c:	08014c34 	.word	0x08014c34
 8001670:	08014c78 	.word	0x08014c78
 8001674:	08014cb8 	.word	0x08014cb8
 8001678:	08014cf4 	.word	0x08014cf4
 800167c:	08014d30 	.word	0x08014d30
 8001680:	08014d6c 	.word	0x08014d6c
 8001684:	08014db4 	.word	0x08014db4
 8001688:	08014dfc 	.word	0x08014dfc
 800168c:	08014e34 	.word	0x08014e34
 8001690:	08014e6c 	.word	0x08014e6c
 8001694:	08014ebc 	.word	0x08014ebc
 8001698:	08014f04 	.word	0x08014f04
 800169c:	08014f2c 	.word	0x08014f2c
 80016a0:	08014f54 	.word	0x08014f54
 80016a4:	08014f80 	.word	0x08014f80
 80016a8:	08014fbc 	.word	0x08014fbc
 80016ac:	08014ff8 	.word	0x08014ff8
 80016b0:	08015030 	.word	0x08015030
 80016b4:	08015068 	.word	0x08015068
 80016b8:	080150a0 	.word	0x080150a0
 80016bc:	080150dc 	.word	0x080150dc
 80016c0:	08015120 	.word	0x08015120
 80016c4:	08015150 	.word	0x08015150
 80016c8:	0801517c 	.word	0x0801517c
 80016cc:	08015180 	.word	0x08015180
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <help+0x3dc>)
 80016d2:	f00e f9db 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <help+0x3dc>)
 80016d8:	f002 fbb0 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SAVE CONFIG        - Save config to SRAM\r\n");
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <help+0x3e0>)
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <help+0x3dc>)
 80016e0:	f00e f9d4 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <help+0x3dc>)
 80016e6:	f002 fba9 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SAVE DEFAULT CONFIG     - Save default config to SRAM\r\n");
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <help+0x3e4>)
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <help+0x3dc>)
 80016ee:	f00e f9cd 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <help+0x3dc>)
 80016f4:	f002 fba2 	bl	8003e3c <Serial_Console>
	sprintf(msg, "SHOW CONFIG        - Show config from SRAM\r\n");
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <help+0x3e8>)
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <help+0x3dc>)
 80016fc:	f00e f9c6 	bl	800fa8c <siprintf>
	Serial_Console(msg);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <help+0x3dc>)
 8001702:	f002 fb9b 	bl	8003e3c <Serial_Console>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000a80 	.word	0x20000a80
 8001710:	080151b0 	.word	0x080151b0
 8001714:	080151dc 	.word	0x080151dc
 8001718:	08015214 	.word	0x08015214

0800171c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001720:	f3bf 8f4f 	dsb	sy
}
 8001724:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <__NVIC_SystemReset+0x24>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <__NVIC_SystemReset+0x24>)
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_SystemReset+0x28>)
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001736:	f3bf 8f4f 	dsb	sy
}
 800173a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <__NVIC_SystemReset+0x20>
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	05fa0004 	.word	0x05fa0004

08001748 <reInitIMU>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void reInitIMU(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0

	// If the I2C bus hangs, this will clear the deadlock and re-init the MPU

	Serial_Console("reInit IMU\r\n");
 800174e:	4820      	ldr	r0, [pc, #128]	; (80017d0 <reInitIMU+0x88>)
 8001750:	f002 fb74 	bl	8003e3c <Serial_Console>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
	HAL_I2C_DeInit(&hi2c2);
 8001762:	481c      	ldr	r0, [pc, #112]	; (80017d4 <reInitIMU+0x8c>)
 8001764:	f008 f9d8 	bl	8009b18 <HAL_I2C_DeInit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <reInitIMU+0x90>)
 8001770:	f008 f874 	bl	800985c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <reInitIMU+0x90>)
 800177c:	f008 f86e 	bl	800985c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001784:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178a:	2302      	movs	r3, #2
 800178c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4810      	ldr	r0, [pc, #64]	; (80017d8 <reInitIMU+0x90>)
 8001798:	f007 fdb0 	bl	80092fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800179c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	4619      	mov	r1, r3
 80017b2:	4809      	ldr	r0, [pc, #36]	; (80017d8 <reInitIMU+0x90>)
 80017b4:	f007 fda2 	bl	80092fc <HAL_GPIO_Init>
	HAL_Delay(1);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f006 fb0b 	bl	8007dd4 <HAL_Delay>
	MX_I2C2_Init();
 80017be:	f004 fa19 	bl	8005bf4 <MX_I2C2_Init>
	Init6050();
 80017c2:	f004 fded 	bl	80063a0 <Init6050>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08015244 	.word	0x08015244
 80017d4:	20000d9c 	.word	0x20000d9c
 80017d8:	40020400 	.word	0x40020400

080017dc <CalcMagnitude>:

void CalcMagnitude(uint8_t Sensor) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4602      	mov	r2, r0
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	701a      	strb	r2, [r3, #0]
	float32_t Mag_Out[LENGTH_SAMPLES / 2];
	float32_t sum = 0;
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	float32_t magValue;

	if (Sensor == 1) {
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <CalcMagnitude+0x2e>
		arm_cmplx_mag_f32(BWF1, Mag_Out, LENGTH_SAMPLES / 2);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	4619      	mov	r1, r3
 8001802:	4860      	ldr	r0, [pc, #384]	; (8001984 <CalcMagnitude+0x1a8>)
 8001804:	f00d f99a 	bl	800eb3c <arm_cmplx_mag_f32>
 8001808:	e00a      	b.n	8001820 <CalcMagnitude+0x44>
	}
	else if (Sensor == 2) {
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d106      	bne.n	8001820 <CalcMagnitude+0x44>
		arm_cmplx_mag_f32(BWF2, Mag_Out, LENGTH_SAMPLES / 2);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	4619      	mov	r1, r3
 800181a:	485b      	ldr	r0, [pc, #364]	; (8001988 <CalcMagnitude+0x1ac>)
 800181c:	f00d f98e 	bl	800eb3c <arm_cmplx_mag_f32>
	}

	  for (int y = 0; y < LENGTH_SAMPLES / 2; y++) {
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001826:	e012      	b.n	800184e <CalcMagnitude+0x72>
		  sum += Mag_Out[y];
 8001828:	f107 0210 	add.w	r2, r7, #16
 800182c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ed97 7a87 	vldr	s14, [r7, #540]	; 0x21c
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
	  for (int y = 0; y < LENGTH_SAMPLES / 2; y++) {
 8001844:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001848:	3301      	adds	r3, #1
 800184a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800184e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001852:	2b7f      	cmp	r3, #127	; 0x7f
 8001854:	dde8      	ble.n	8001828 <CalcMagnitude+0x4c>
 8001856:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800185a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001866:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 800186a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	db0a      	blt.n	800188a <CalcMagnitude+0xae>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001874:	ed97 0a85 	vldr	s0, [r7, #532]	; 0x214
 8001878:	f012 fb24 	bl	8013ec4 <sqrtf>
 800187c:	eef0 7a40 	vmov.f32	s15, s0
 8001880:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001884:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001888:	e005      	b.n	8001896 <CalcMagnitude+0xba>
    }
    else
    {
      *pOut = 0.0f;
 800188a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001894:	bf00      	nop
	  }
	  arm_sqrt_f32(sum, &magValue);

	  if (Sensor == 1) magBWF1 = round(magValue);
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d116      	bne.n	80018cc <CalcMagnitude+0xf0>
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe5f 	bl	8000568 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	ec43 2b10 	vmov	d0, r2, r3
 80018b2:	f012 fabf 	bl	8013e34 <round>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f983 	bl	8000bc8 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <CalcMagnitude+0x1b0>)
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	e019      	b.n	8001900 <CalcMagnitude+0x124>
	  else if (Sensor == 2) magBWF2 = round(magValue);
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d115      	bne.n	8001900 <CalcMagnitude+0x124>
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe44 	bl	8000568 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b10 	vmov	d0, r2, r3
 80018e8:	f012 faa4 	bl	8013e34 <round>
 80018ec:	ec53 2b10 	vmov	r2, r3, d0
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f968 	bl	8000bc8 <__aeabi_d2uiz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <CalcMagnitude+0x1b4>)
 80018fe:	801a      	strh	r2, [r3, #0]

	  if (magBWF1 >= settings.magValue || magBWF2 >= settings.magValue) {
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <CalcMagnitude+0x1b8>)
 8001902:	899a      	ldrh	r2, [r3, #12]
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <CalcMagnitude+0x1b0>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d905      	bls.n	8001918 <CalcMagnitude+0x13c>
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <CalcMagnitude+0x1b8>)
 800190e:	899a      	ldrh	r2, [r3, #12]
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <CalcMagnitude+0x1b4>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d80f      	bhi.n	8001938 <CalcMagnitude+0x15c>
		  if (mag_near_bwf == 0) {
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <CalcMagnitude+0x1bc>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <CalcMagnitude+0x150>
			  mag_near_bwf = 1;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <CalcMagnitude+0x1bc>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
			  Serial_Console("PROXIMITY ALERT!\r\n");
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <CalcMagnitude+0x1c0>)
 8001928:	f002 fa88 	bl	8003e3c <Serial_Console>
		  }
		  mag_timer = HAL_GetTick();
 800192c:	f006 fa46 	bl	8007dbc <HAL_GetTick>
 8001930:	4603      	mov	r3, r0
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <CalcMagnitude+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]
				  mag_near_bwf = 0;
				  Serial_Console("PROXIMITY CLEARED!\r\n");
			  }
		  }
	  }
}
 8001936:	e01f      	b.n	8001978 <CalcMagnitude+0x19c>
	  else if (magBWF1 <= settings.magMinValue && magBWF2 <= settings.magMinValue) {
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <CalcMagnitude+0x1b8>)
 800193a:	89da      	ldrh	r2, [r3, #14]
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <CalcMagnitude+0x1b0>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d319      	bcc.n	8001978 <CalcMagnitude+0x19c>
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <CalcMagnitude+0x1b8>)
 8001946:	89da      	ldrh	r2, [r3, #14]
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <CalcMagnitude+0x1b4>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d313      	bcc.n	8001978 <CalcMagnitude+0x19c>
		  if (mag_near_bwf == 1) {
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <CalcMagnitude+0x1bc>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d10f      	bne.n	8001978 <CalcMagnitude+0x19c>
			  if (HAL_GetTick() - mag_timer >= 3000) {
 8001958:	f006 fa30 	bl	8007dbc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <CalcMagnitude+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001968:	4293      	cmp	r3, r2
 800196a:	d905      	bls.n	8001978 <CalcMagnitude+0x19c>
				  mag_near_bwf = 0;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <CalcMagnitude+0x1bc>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
				  Serial_Console("PROXIMITY CLEARED!\r\n");
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <CalcMagnitude+0x1c8>)
 8001974:	f002 fa62 	bl	8003e3c <Serial_Console>
}
 8001978:	bf00      	nop
 800197a:	f507 7708 	add.w	r7, r7, #544	; 0x220
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20002564 	.word	0x20002564
 8001988:	20000df4 	.word	0x20000df4
 800198c:	20000df0 	.word	0x20000df0
 8001990:	20000c04 	.word	0x20000c04
 8001994:	20000ca4 	.word	0x20000ca4
 8001998:	200009be 	.word	0x200009be
 800199c:	08015254 	.word	0x08015254
 80019a0:	200009c0 	.word	0x200009c0
 80019a4:	08015268 	.word	0x08015268

080019a8 <TimeToGoHome>:

void TimeToGoHome(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0

	// Get Time and check if we should go home

	RTC_TimeTypeDef currTime = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef currDate = {0};
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	4619      	mov	r1, r3
 80019c6:	480a      	ldr	r0, [pc, #40]	; (80019f0 <TimeToGoHome+0x48>)
 80019c8:	f00a fc07 	bl	800c1da <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <TimeToGoHome+0x48>)
 80019d4:	f00a fd06 	bl	800c3e4 <HAL_RTC_GetDate>

	if (currTime.Hours >= settings.WorkingHourEnd) {
 80019d8:	793a      	ldrb	r2, [r7, #4]
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <TimeToGoHome+0x4c>)
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <TimeToGoHome+0x40>
		perimeterTracking = 1;
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <TimeToGoHome+0x50>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
	}

}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20002450 	.word	0x20002450
 80019f4:	20000ca4 	.word	0x20000ca4
 80019f8:	20000950 	.word	0x20000950

080019fc <setTime>:

void setTime(uint8_t hour, uint8_t minute, uint8_t second) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	460b      	mov	r3, r1
 8001a08:	71bb      	strb	r3, [r7, #6]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	717b      	strb	r3, [r7, #5]

	RTC_TimeTypeDef sTime = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

	sTime.Hours = RTC_ByteToBcd2(hour);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00a fd82 	bl	800c52a <RTC_ByteToBcd2>
 8001a26:	4603      	mov	r3, r0
 8001a28:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = RTC_ByteToBcd2(minute);
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00a fd7c 	bl	800c52a <RTC_ByteToBcd2>
 8001a32:	4603      	mov	r3, r0
 8001a34:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = RTC_ByteToBcd2(second);
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00a fd76 	bl	800c52a <RTC_ByteToBcd2>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8001a46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a4a:	61fb      	str	r3, [r7, #28]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <setTime+0x68>)
 8001a56:	f00a fb03 	bl	800c060 <HAL_RTC_SetTime>

}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20002450 	.word	0x20002450

08001a68 <setDate>:
void setDate(uint8_t year, uint8_t month, uint8_t day, uint8_t weekday) {
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4604      	mov	r4, r0
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	717b      	strb	r3, [r7, #5]
 8001a82:	4613      	mov	r3, r2
 8001a84:	713b      	strb	r3, [r7, #4]

	RTC_DateTypeDef sDate = {0};
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]

	sDate.WeekDay = RTC_ByteToBcd2(weekday);
 8001a8a:	793b      	ldrb	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00a fd4c 	bl	800c52a <RTC_ByteToBcd2>
 8001a92:	4603      	mov	r3, r0
 8001a94:	733b      	strb	r3, [r7, #12]
	sDate.Month = RTC_ByteToBcd2(month);
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00a fd46 	bl	800c52a <RTC_ByteToBcd2>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	737b      	strb	r3, [r7, #13]
	sDate.Date = RTC_ByteToBcd2(day);
 8001aa2:	797b      	ldrb	r3, [r7, #5]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00a fd40 	bl	800c52a <RTC_ByteToBcd2>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73bb      	strb	r3, [r7, #14]
	sDate.Year = RTC_ByteToBcd2(year);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00a fd3a 	bl	800c52a <RTC_ByteToBcd2>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <setDate+0x68>)
 8001ac4:	f00a fbe7 	bl	800c296 <HAL_RTC_SetDate>

}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	20002450 	.word	0x20002450

08001ad4 <BootLoaderInit>:

void BootLoaderInit(unsigned long BootLoaderStatus)

// Inside the debug menu you can type "upgrade", this will force the STM into the bootloader, so no need to change the jumper.
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SysMemBootJump = (void (*)(void)) (*((unsigned long *) 0x1fff0004));
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <BootLoaderInit+0x58>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <BootLoaderInit+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  if (BootLoaderStatus == 1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d11a      	bne.n	8001b22 <BootLoaderInit+0x4e>
  {

    HAL_DeInit();
 8001aec:	f006 f8ee 	bl	8007ccc <HAL_DeInit>
    SysTick->CTRL = 0;
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <BootLoaderInit+0x60>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <BootLoaderInit+0x60>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <BootLoaderInit+0x60>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f383 8810 	msr	PRIMASK, r3
}
 8001b0c:	bf00      	nop
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <BootLoaderInit+0x64>)
 8001b10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f383 8808 	msr	MSP, r3
}
 8001b18:	bf00      	nop
    __set_PRIMASK(1);
    __set_MSP(0x20001000);
    SysMemBootJump();
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <BootLoaderInit+0x5c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4798      	blx	r3
    while(1);
 8001b20:	e7fe      	b.n	8001b20 <BootLoaderInit+0x4c>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	1fff0004 	.word	0x1fff0004
 8001b30:	200009cc 	.word	0x200009cc
 8001b34:	e000e010 	.word	0xe000e010
 8001b38:	20001000 	.word	0x20001000

08001b3c <WatchdogInit>:

void WatchdogInit(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
        16 * 4095 = 64
        64 / 32 = 2 seconds
        if the watchdog is not fed within 2 seconds, the Razorboard will simply reboot.
    */

    hiwdg.Instance = IWDG;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <WatchdogInit+0x24>)
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <WatchdogInit+0x28>)
 8001b44:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <WatchdogInit+0x24>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 4095;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <WatchdogInit+0x24>)
 8001b4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b52:	609a      	str	r2, [r3, #8]
    HAL_IWDG_Init(&hiwdg);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <WatchdogInit+0x24>)
 8001b56:	f009 fafe 	bl	800b156 <HAL_IWDG_Init>

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000d90 	.word	0x20000d90
 8001b64:	40003000 	.word	0x40003000

08001b68 <WatchdogRefresh>:

void WatchdogRefresh(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

	// refresh the watchdog

    HAL_IWDG_Refresh(&hiwdg);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <WatchdogRefresh+0x10>)
 8001b6e:	f009 fb34 	bl	800b1da <HAL_IWDG_Refresh>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000d90 	.word	0x20000d90

08001b7c <InitFIR>:

void InitFIR(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af02      	add	r7, sp, #8

	// Initiate the FIR functions

	uint32_t blocksize = BLOCK_SIZE;
 8001b82:	2320      	movs	r3, #32
 8001b84:	607b      	str	r3, [r7, #4]
	arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blocksize);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <InitFIR+0x24>)
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <InitFIR+0x28>)
 8001b8e:	2105      	movs	r1, #5
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <InitFIR+0x2c>)
 8001b92:	f00c fd5d 	bl	800e650 <arm_fir_init_f32>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000046c 	.word	0x2000046c
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20001280 	.word	0x20001280

08001bac <FIR_LEFT>:

void FIR_LEFT(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF1[0];
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <FIR_LEFT+0x80>)
 8001bbc:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <FIR_LEFT+0x84>)
 8001bc0:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e014      	b.n	8001bf2 <FIR_LEFT+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	18d1      	adds	r1, r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	441a      	add	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4813      	ldr	r0, [pc, #76]	; (8001c34 <FIR_LEFT+0x88>)
 8001be8:	f00c fd44 	bl	800e674 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3e6      	bcc.n	8001bc8 <FIR_LEFT+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e00c      	b.n	8001c1a <FIR_LEFT+0x6e>
		  BWF1[x] = (float)outputF32[x];
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <FIR_LEFT+0x80>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3301      	adds	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	ddef      	ble.n	8001c00 <FIR_LEFT+0x54>
	  }

}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20002564 	.word	0x20002564
 8001c30:	200004fc 	.word	0x200004fc
 8001c34:	20001280 	.word	0x20001280

08001c38 <FIR_RIGHT>:
void FIR_RIGHT(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001c42:	2308      	movs	r3, #8
 8001c44:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF2[0];
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <FIR_RIGHT+0x80>)
 8001c48:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <FIR_RIGHT+0x84>)
 8001c4c:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e014      	b.n	8001c7e <FIR_RIGHT+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	18d1      	adds	r1, r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	441a      	add	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <FIR_RIGHT+0x88>)
 8001c74:	f00c fcfe 	bl	800e674 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3e6      	bcc.n	8001c54 <FIR_RIGHT+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e00c      	b.n	8001ca6 <FIR_RIGHT+0x6e>
		  BWF2[x] = (float)outputF32[x];
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <FIR_RIGHT+0x80>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2bff      	cmp	r3, #255	; 0xff
 8001caa:	ddef      	ble.n	8001c8c <FIR_RIGHT+0x54>
	  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000df4 	.word	0x20000df4
 8001cbc:	200004fc 	.word	0x200004fc
 8001cc0:	20001280 	.word	0x20001280

08001cc4 <FIR_REAR>:

void FIR_REAR(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
	  uint32_t i;
	  uint32_t blockSize = BLOCK_SIZE;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	60fb      	str	r3, [r7, #12]
	  uint32_t numBlocks = LENGTH_SAMPLES/BLOCK_SIZE;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	60bb      	str	r3, [r7, #8]
	  float32_t  *inputF32, *outputF32;
	  inputF32 = &BWF3[0];
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <FIR_REAR+0x80>)
 8001cd4:	607b      	str	r3, [r7, #4]
	  outputF32 = &Output[0];
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <FIR_REAR+0x84>)
 8001cd8:	603b      	str	r3, [r7, #0]
	  for(i=0; i < numBlocks; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e014      	b.n	8001d0a <FIR_REAR+0x46>
	  {
	    arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	441a      	add	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4813      	ldr	r0, [pc, #76]	; (8001d4c <FIR_REAR+0x88>)
 8001d00:	f00c fcb8 	bl	800e674 <arm_fir_f32>
	  for(i=0; i < numBlocks; i++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d3e6      	bcc.n	8001ce0 <FIR_REAR+0x1c>
	  }
	  for (int x = 0; x < 256; x++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e00c      	b.n	8001d32 <FIR_REAR+0x6e>
		  BWF3[x] = (float)outputF32[x];
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <FIR_REAR+0x80>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	601a      	str	r2, [r3, #0]
	  for (int x = 0; x < 256; x++) {
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2bff      	cmp	r3, #255	; 0xff
 8001d36:	ddef      	ble.n	8001d18 <FIR_REAR+0x54>
	  }

}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200012dc 	.word	0x200012dc
 8001d48:	200004fc 	.word	0x200004fc
 8001d4c:	20001280 	.word	0x20001280

08001d50 <rnd>:

uint32_t rnd(uint32_t maxValue) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

	// Our random number generator

	uint32_t rndnum;
	rndnum = HAL_RNG_GetRandomNumber(&hrng) % maxValue;
 8001d58:	4808      	ldr	r0, [pc, #32]	; (8001d7c <rnd+0x2c>)
 8001d5a:	f00a f870 	bl	800be3e <HAL_RNG_GetRandomNumber>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	fb01 f202 	mul.w	r2, r1, r2
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
	return rndnum;
 8001d70:	68fb      	ldr	r3, [r7, #12]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200029a4 	.word	0x200029a4

08001d80 <CheckMotorCurrent>:

void CheckMotorCurrent(int RAW) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

			// Check if any motor is experiencing a spike in power, then we probably hit something.

			float M1, M2;
	        if (M1_idx == 10 || M2_idx == 10 || C1_idx == 10) Force_Active = 1;
 8001d88:	4baf      	ldr	r3, [pc, #700]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b0a      	cmp	r3, #10
 8001d8e:	d007      	beq.n	8001da0 <CheckMotorCurrent+0x20>
 8001d90:	4bae      	ldr	r3, [pc, #696]	; (800204c <CheckMotorCurrent+0x2cc>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b0a      	cmp	r3, #10
 8001d96:	d003      	beq.n	8001da0 <CheckMotorCurrent+0x20>
 8001d98:	4bad      	ldr	r3, [pc, #692]	; (8002050 <CheckMotorCurrent+0x2d0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b0a      	cmp	r3, #10
 8001d9e:	d102      	bne.n	8001da6 <CheckMotorCurrent+0x26>
 8001da0:	4bac      	ldr	r3, [pc, #688]	; (8002054 <CheckMotorCurrent+0x2d4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]

			if (Channel == M1_addr) {
 8001da6:	4bac      	ldr	r3, [pc, #688]	; (8002058 <CheckMotorCurrent+0x2d8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2bc1      	cmp	r3, #193	; 0xc1
 8001dac:	f040 80e7 	bne.w	8001f7e <CheckMotorCurrent+0x1fe>
				M1_Value = RAW;
 8001db0:	4aaa      	ldr	r2, [pc, #680]	; (800205c <CheckMotorCurrent+0x2dc>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
	            M1 = fabs(((M1_Value * 0.1875) - 2500) / 100);
 8001db6:	4ba9      	ldr	r3, [pc, #676]	; (800205c <CheckMotorCurrent+0x2dc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbc2 	bl	8000544 <__aeabi_i2d>
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4ba6      	ldr	r3, [pc, #664]	; (8002060 <CheckMotorCurrent+0x2e0>)
 8001dc6:	f7fe fc27 	bl	8000618 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	a39b      	add	r3, pc, #620	; (adr r3, 8002040 <CheckMotorCurrent+0x2c0>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fa66 	bl	80002a8 <__aeabi_dsub>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b9e      	ldr	r3, [pc, #632]	; (8002064 <CheckMotorCurrent+0x2e4>)
 8001dea:	f7fe fd3f 	bl	800086c <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe ff07 	bl	8000c08 <__aeabi_d2f>
 8001dfa:	ee07 0a90 	vmov	s15, r0
 8001dfe:	eef0 7ae7 	vabs.f32	s15, s15
 8001e02:	edc7 7a02 	vstr	s15, [r7, #8]
	            if (Initial_Start == 0) M1_error = M1;
 8001e06:	4b98      	ldr	r3, [pc, #608]	; (8002068 <CheckMotorCurrent+0x2e8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <CheckMotorCurrent+0x94>
 8001e0e:	4a97      	ldr	r2, [pc, #604]	; (800206c <CheckMotorCurrent+0x2ec>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6013      	str	r3, [r2, #0]
	            M1_amp = fabs(M1 - M1_error);
 8001e14:	4b95      	ldr	r3, [pc, #596]	; (800206c <CheckMotorCurrent+0x2ec>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e22:	eef0 7ae7 	vabs.f32	s15, s15
 8001e26:	4b92      	ldr	r3, [pc, #584]	; (8002070 <CheckMotorCurrent+0x2f0>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
	            M1_force[M1_idx] = M1_amp;
 8001e2c:	4b86      	ldr	r3, [pc, #536]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	4b8f      	ldr	r3, [pc, #572]	; (8002070 <CheckMotorCurrent+0x2f0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	498f      	ldr	r1, [pc, #572]	; (8002074 <CheckMotorCurrent+0x2f4>)
 8001e38:	0083      	lsls	r3, r0, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	601a      	str	r2, [r3, #0]
	            M1_idx++;
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b80      	ldr	r3, [pc, #512]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001e48:	701a      	strb	r2, [r3, #0]
	            if (M1_idx == 20) M1_idx = 0;
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b14      	cmp	r3, #20
 8001e50:	d102      	bne.n	8001e58 <CheckMotorCurrent+0xd8>
 8001e52:	4b7d      	ldr	r3, [pc, #500]	; (8002048 <CheckMotorCurrent+0x2c8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
	            float ForceM1 = 0;
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
	            for (int x = 0; x < 20; x++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	e00e      	b.n	8001e82 <CheckMotorCurrent+0x102>
	            	ForceM1 += M1_force[x];
 8001e64:	4a83      	ldr	r2, [pc, #524]	; (8002074 <CheckMotorCurrent+0x2f4>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a07 	vstr	s15, [r7, #28]
	            for (int x = 0; x < 20; x++) {
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b13      	cmp	r3, #19
 8001e86:	dded      	ble.n	8001e64 <CheckMotorCurrent+0xe4>
	            }
	            M1_F = ForceM1 / 20;
 8001e88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e8c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e94:	4b78      	ldr	r3, [pc, #480]	; (8002078 <CheckMotorCurrent+0x2f8>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
	            if (M1_F < settings.Motor_Min_Limit) M1_F = settings.Motor_Min_Limit;
 8001e9a:	4b78      	ldr	r3, [pc, #480]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001e9c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ea0:	4b75      	ldr	r3, [pc, #468]	; (8002078 <CheckMotorCurrent+0x2f8>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	dd03      	ble.n	8001eb8 <CheckMotorCurrent+0x138>
 8001eb0:	4b72      	ldr	r3, [pc, #456]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4a70      	ldr	r2, [pc, #448]	; (8002078 <CheckMotorCurrent+0x2f8>)
 8001eb6:	6013      	str	r3, [r2, #0]
	            if ((M1_amp >= settings.Motor_Max_Limit || M1_amp >= M1_F * settings.Motor_Limit) && State == (FORWARD || RIGHT) && Force_Active == 1) {
 8001eb8:	4b70      	ldr	r3, [pc, #448]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001eba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001ebe:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <CheckMotorCurrent+0x2f0>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d910      	bls.n	8001ef0 <CheckMotorCurrent+0x170>
 8001ece:	4b6b      	ldr	r3, [pc, #428]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001ed0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <CheckMotorCurrent+0x2f8>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <CheckMotorCurrent+0x2f0>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	f200 8166 	bhi.w	80021bc <CheckMotorCurrent+0x43c>
 8001ef0:	4b63      	ldr	r3, [pc, #396]	; (8002080 <CheckMotorCurrent+0x300>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	f040 8161 	bne.w	80021bc <CheckMotorCurrent+0x43c>
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <CheckMotorCurrent+0x2d4>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	f040 815c 	bne.w	80021bc <CheckMotorCurrent+0x43c>

	            	sprintf(msg, "Motor Current Limit reached for M1: %f", M1_amp);
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <CheckMotorCurrent+0x2f0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb2d 	bl	8000568 <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	495c      	ldr	r1, [pc, #368]	; (8002084 <CheckMotorCurrent+0x304>)
 8001f14:	485c      	ldr	r0, [pc, #368]	; (8002088 <CheckMotorCurrent+0x308>)
 8001f16:	f00d fdb9 	bl	800fa8c <siprintf>
	            	Serial_Console(msg);
 8001f1a:	485b      	ldr	r0, [pc, #364]	; (8002088 <CheckMotorCurrent+0x308>)
 8001f1c:	f001 ff8e 	bl	8003e3c <Serial_Console>

	            	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {
 8001f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f24:	4859      	ldr	r0, [pc, #356]	; (800208c <CheckMotorCurrent+0x30c>)
 8001f26:	f007 fc81 	bl	800982c <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f000 8142 	beq.w	80021b6 <CheckMotorCurrent+0x436>
	            		return;
	            	}
	            	MotorBrake();
 8001f32:	f003 f853 	bl	8004fdc <MotorBrake>
	            	HAL_Delay(500);
 8001f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3a:	f005 ff4b 	bl	8007dd4 <HAL_Delay>
	            	MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001f40:	8a5b      	ldrh	r3, [r3, #18]
 8001f42:	4a4e      	ldr	r2, [pc, #312]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001f44:	8a11      	ldrh	r1, [r2, #16]
 8001f46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fe34 	bl	8004bb8 <MotorBackward>
	            	HAL_Delay(500);
 8001f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f54:	f005 ff3e 	bl	8007dd4 <HAL_Delay>
	            	MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 1000);
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001f5a:	8a5b      	ldrh	r3, [r3, #18]
 8001f5c:	4a47      	ldr	r2, [pc, #284]	; (800207c <CheckMotorCurrent+0x2fc>)
 8001f5e:	8a11      	ldrh	r1, [r2, #16]
 8001f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 ff19 	bl	8004d9c <MotorRight>
	            	Force_Active = 0;
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <CheckMotorCurrent+0x2d4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
	            	bumber_count++;
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <CheckMotorCurrent+0x310>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <CheckMotorCurrent+0x310>)
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e11e      	b.n	80021bc <CheckMotorCurrent+0x43c>

	            }
			}
			else if (Channel == M2_addr) {
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <CheckMotorCurrent+0x2d8>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2be1      	cmp	r3, #225	; 0xe1
 8001f84:	f040 811a 	bne.w	80021bc <CheckMotorCurrent+0x43c>
				M2_Value = RAW;
 8001f88:	4a42      	ldr	r2, [pc, #264]	; (8002094 <CheckMotorCurrent+0x314>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
	            M2 = fabs(((M2_Value * 0.1875) - 2500) / 100);
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <CheckMotorCurrent+0x314>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fad6 	bl	8000544 <__aeabi_i2d>
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <CheckMotorCurrent+0x2e0>)
 8001f9e:	f7fe fb3b 	bl	8000618 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	a325      	add	r3, pc, #148	; (adr r3, 8002040 <CheckMotorCurrent+0x2c0>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe f97a 	bl	80002a8 <__aeabi_dsub>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <CheckMotorCurrent+0x2e4>)
 8001fc2:	f7fe fc53 	bl	800086c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe1b 	bl	8000c08 <__aeabi_d2f>
 8001fd2:	ee07 0a90 	vmov	s15, r0
 8001fd6:	eef0 7ae7 	vabs.f32	s15, s15
 8001fda:	edc7 7a03 	vstr	s15, [r7, #12]
	            if (Initial_Start == 0) M2_error = M2;
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <CheckMotorCurrent+0x2e8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <CheckMotorCurrent+0x26c>
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <CheckMotorCurrent+0x318>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6013      	str	r3, [r2, #0]
	            M2_amp = fabs(M2 - M2_error);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <CheckMotorCurrent+0x318>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	eef0 7ae7 	vabs.f32	s15, s15
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <CheckMotorCurrent+0x31c>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
	            M2_force[M2_idx] = M2_amp;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <CheckMotorCurrent+0x2cc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <CheckMotorCurrent+0x31c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4924      	ldr	r1, [pc, #144]	; (80020a0 <CheckMotorCurrent+0x320>)
 8002010:	0083      	lsls	r3, r0, #2
 8002012:	440b      	add	r3, r1
 8002014:	601a      	str	r2, [r3, #0]
	            M2_idx++;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <CheckMotorCurrent+0x2cc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <CheckMotorCurrent+0x2cc>)
 8002020:	701a      	strb	r2, [r3, #0]
	            if (M2_idx == 20) M2_idx = 0;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <CheckMotorCurrent+0x2cc>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b14      	cmp	r3, #20
 8002028:	d102      	bne.n	8002030 <CheckMotorCurrent+0x2b0>
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <CheckMotorCurrent+0x2cc>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
	            float ForceM2 = 0;
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
	            for (int x = 0; x < 20; x++) {
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e042      	b.n	80020c2 <CheckMotorCurrent+0x342>
 800203c:	f3af 8000 	nop.w
 8002040:	00000000 	.word	0x00000000
 8002044:	40a38800 	.word	0x40a38800
 8002048:	200009a6 	.word	0x200009a6
 800204c:	200009a7 	.word	0x200009a7
 8002050:	200009a8 	.word	0x200009a8
 8002054:	200009b4 	.word	0x200009b4
 8002058:	20000214 	.word	0x20000214
 800205c:	200008fc 	.word	0x200008fc
 8002060:	3fc80000 	.word	0x3fc80000
 8002064:	40590000 	.word	0x40590000
 8002068:	20000952 	.word	0x20000952
 800206c:	2000097c 	.word	0x2000097c
 8002070:	20000970 	.word	0x20000970
 8002074:	20000c08 	.word	0x20000c08
 8002078:	200009ac 	.word	0x200009ac
 800207c:	20000ca4 	.word	0x20000ca4
 8002080:	2000098f 	.word	0x2000098f
 8002084:	08015280 	.word	0x08015280
 8002088:	20000a80 	.word	0x20000a80
 800208c:	40020000 	.word	0x40020000
 8002090:	200009c8 	.word	0x200009c8
 8002094:	20000900 	.word	0x20000900
 8002098:	20000980 	.word	0x20000980
 800209c:	20000974 	.word	0x20000974
 80020a0:	20000bb4 	.word	0x20000bb4
	            	ForceM2 += M2_force[x];
 80020a4:	4a47      	ldr	r2, [pc, #284]	; (80021c4 <CheckMotorCurrent+0x444>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b8:	edc7 7a05 	vstr	s15, [r7, #20]
	            for (int x = 0; x < 20; x++) {
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	3301      	adds	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b13      	cmp	r3, #19
 80020c6:	dded      	ble.n	80020a4 <CheckMotorCurrent+0x324>
	            }
	            M2_F = ForceM2 / 20;
 80020c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80020cc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80020d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <CheckMotorCurrent+0x448>)
 80020d6:	edc3 7a00 	vstr	s15, [r3]
	            if (M2_F < settings.Motor_Min_Limit) M2_F = settings.Motor_Min_Limit;
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <CheckMotorCurrent+0x44c>)
 80020dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <CheckMotorCurrent+0x448>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	dd03      	ble.n	80020f8 <CheckMotorCurrent+0x378>
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <CheckMotorCurrent+0x44c>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <CheckMotorCurrent+0x448>)
 80020f6:	6013      	str	r3, [r2, #0]
	            if ((M2_amp >= settings.Motor_Max_Limit || M2_amp >= M2_F * settings.Motor_Limit) && State == (FORWARD || LEFT) && Force_Active == 1) {
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <CheckMotorCurrent+0x44c>)
 80020fa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <CheckMotorCurrent+0x450>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d90f      	bls.n	800212e <CheckMotorCurrent+0x3ae>
 800210e:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <CheckMotorCurrent+0x44c>)
 8002110:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002114:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <CheckMotorCurrent+0x448>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <CheckMotorCurrent+0x450>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d846      	bhi.n	80021bc <CheckMotorCurrent+0x43c>
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <CheckMotorCurrent+0x454>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d142      	bne.n	80021bc <CheckMotorCurrent+0x43c>
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <CheckMotorCurrent+0x458>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d13e      	bne.n	80021bc <CheckMotorCurrent+0x43c>

	            	sprintf(msg, "Motor Current Limit reached for M2: %f", M2_amp);
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <CheckMotorCurrent+0x450>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa10 	bl	8000568 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4923      	ldr	r1, [pc, #140]	; (80021dc <CheckMotorCurrent+0x45c>)
 800214e:	4824      	ldr	r0, [pc, #144]	; (80021e0 <CheckMotorCurrent+0x460>)
 8002150:	f00d fc9c 	bl	800fa8c <siprintf>
	            	Serial_Console(msg);
 8002154:	4822      	ldr	r0, [pc, #136]	; (80021e0 <CheckMotorCurrent+0x460>)
 8002156:	f001 fe71 	bl	8003e3c <Serial_Console>

	            	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {
 800215a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215e:	4821      	ldr	r0, [pc, #132]	; (80021e4 <CheckMotorCurrent+0x464>)
 8002160:	f007 fb64 	bl	800982c <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	d027      	beq.n	80021ba <CheckMotorCurrent+0x43a>
	            		return;
	            	}
	            	MotorBrake();
 800216a:	f002 ff37 	bl	8004fdc <MotorBrake>
	            	HAL_Delay(500);
 800216e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002172:	f005 fe2f 	bl	8007dd4 <HAL_Delay>
	            	MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <CheckMotorCurrent+0x44c>)
 8002178:	8a5b      	ldrh	r3, [r3, #18]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <CheckMotorCurrent+0x44c>)
 800217c:	8a11      	ldrh	r1, [r2, #16]
 800217e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fd18 	bl	8004bb8 <MotorBackward>
	            	HAL_Delay(500);
 8002188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218c:	f005 fe22 	bl	8007dd4 <HAL_Delay>
	            	MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 1000);
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <CheckMotorCurrent+0x44c>)
 8002192:	8a5b      	ldrh	r3, [r3, #18]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <CheckMotorCurrent+0x44c>)
 8002196:	8a11      	ldrh	r1, [r2, #16]
 8002198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fe4f 	bl	8004e40 <MotorLeft>
	            	Force_Active = 0;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <CheckMotorCurrent+0x458>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
	            	bumber_count++;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <CheckMotorCurrent+0x468>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <CheckMotorCurrent+0x468>)
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e002      	b.n	80021bc <CheckMotorCurrent+0x43c>
	            		return;
 80021b6:	bf00      	nop
 80021b8:	e000      	b.n	80021bc <CheckMotorCurrent+0x43c>
	            		return;
 80021ba:	bf00      	nop

	            }
			}
}
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000bb4 	.word	0x20000bb4
 80021c8:	200009b0 	.word	0x200009b0
 80021cc:	20000ca4 	.word	0x20000ca4
 80021d0:	20000974 	.word	0x20000974
 80021d4:	2000098f 	.word	0x2000098f
 80021d8:	200009b4 	.word	0x200009b4
 80021dc:	080152a8 	.word	0x080152a8
 80021e0:	20000a80 	.word	0x20000a80
 80021e4:	40020000 	.word	0x40020000
 80021e8:	200009c8 	.word	0x200009c8

080021ec <CheckVoltage>:

void CheckVoltage() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0

	//Simple Voltage check

	if ( Voltage < settings.Battery_Low_Limit) {
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <CheckVoltage+0x48>)
 80021f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <CheckVoltage+0x4c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	dd14      	ble.n	8002230 <CheckVoltage+0x44>
		if (perimeterTracking == 1) return;
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <CheckVoltage+0x50>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d00f      	beq.n	800222e <CheckVoltage+0x42>
		sprintf(msg, "Low Voltage - Searching for perimeter wire...\r\n");
 800220e:	490c      	ldr	r1, [pc, #48]	; (8002240 <CheckVoltage+0x54>)
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <CheckVoltage+0x58>)
 8002212:	f00d fc3b 	bl	800fa8c <siprintf>
		Serial_RPi(msg);
 8002216:	480b      	ldr	r0, [pc, #44]	; (8002244 <CheckVoltage+0x58>)
 8002218:	f001 fe24 	bl	8003e64 <Serial_RPi>
		Serial_Console(msg);
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <CheckVoltage+0x58>)
 800221e:	f001 fe0d 	bl	8003e3c <Serial_Console>
		perimeterTracking = 1;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <CheckVoltage+0x50>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
		cutterOFF();
 8002228:	f001 ff88 	bl	800413c <cutterOFF>
 800222c:	e000      	b.n	8002230 <CheckVoltage+0x44>
		if (perimeterTracking == 1) return;
 800222e:	bf00      	nop
	}

}
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000ca4 	.word	0x20000ca4
 8002238:	20000988 	.word	0x20000988
 800223c:	20000950 	.word	0x20000950
 8002240:	080152d0 	.word	0x080152d0
 8002244:	20000a80 	.word	0x20000a80

08002248 <SendInfo>:

void SendInfo() {
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	b0af      	sub	sp, #188	; 0xbc
 800224e:	af08      	add	r7, sp, #32

		SendInfoStatus = 0;
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <SendInfo+0x214>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

		if (DEBUG_RAZORBOARD == 0) {
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <SendInfo+0x218>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d112      	bne.n	8002284 <SendInfo+0x3c>
			bwf1_inside = 0;
 800225e:	4b81      	ldr	r3, [pc, #516]	; (8002464 <SendInfo+0x21c>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
			bwf1_outside = 0;
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <SendInfo+0x220>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
			bwf2_inside = 0;
 800226a:	4b80      	ldr	r3, [pc, #512]	; (800246c <SendInfo+0x224>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
			bwf2_outside = 0;
 8002270:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <SendInfo+0x228>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
			bwf3_inside = 0;
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <SendInfo+0x22c>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
			bwf3_outside = 0;
 800227c:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <SendInfo+0x230>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e180      	b.n	8002586 <SendInfo+0x33e>
			return;
		}

		// Send info to the Console & Raspberry PI - Update frequency is ~1 Hz
    	RTC_TimeTypeDef currTime = {0};
 8002284:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
    	RTC_DateTypeDef currDate = {0};
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 800229a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4876      	ldr	r0, [pc, #472]	; (800247c <SendInfo+0x234>)
 80022a4:	f009 ff99 	bl	800c1da <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80022a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4872      	ldr	r0, [pc, #456]	; (800247c <SendInfo+0x234>)
 80022b2:	f00a f897 	bl	800c3e4 <HAL_RTC_GetDate>

		sprintf(msg, "M1: %.2f\r\n", M1_amp);
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <SendInfo+0x238>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f954 	bl	8000568 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	496f      	ldr	r1, [pc, #444]	; (8002484 <SendInfo+0x23c>)
 80022c6:	4870      	ldr	r0, [pc, #448]	; (8002488 <SendInfo+0x240>)
 80022c8:	f00d fbe0 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 80022cc:	486e      	ldr	r0, [pc, #440]	; (8002488 <SendInfo+0x240>)
 80022ce:	f001 fdb5 	bl	8003e3c <Serial_Console>
		sprintf(msg, "M2: %.2f\r\n", M2_amp);
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <SendInfo+0x244>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f946 	bl	8000568 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	496b      	ldr	r1, [pc, #428]	; (8002490 <SendInfo+0x248>)
 80022e2:	4869      	ldr	r0, [pc, #420]	; (8002488 <SendInfo+0x240>)
 80022e4:	f00d fbd2 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 80022e8:	4867      	ldr	r0, [pc, #412]	; (8002488 <SendInfo+0x240>)
 80022ea:	f001 fda7 	bl	8003e3c <Serial_Console>
		sprintf(msg, "C1: %.2f\r\n", C1_amp);
 80022ee:	4b69      	ldr	r3, [pc, #420]	; (8002494 <SendInfo+0x24c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f938 	bl	8000568 <__aeabi_f2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4966      	ldr	r1, [pc, #408]	; (8002498 <SendInfo+0x250>)
 80022fe:	4862      	ldr	r0, [pc, #392]	; (8002488 <SendInfo+0x240>)
 8002300:	f00d fbc4 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002304:	4860      	ldr	r0, [pc, #384]	; (8002488 <SendInfo+0x240>)
 8002306:	f001 fd99 	bl	8003e3c <Serial_Console>
		sprintf(msg, "V1: %.2f\r\n", Voltage);
 800230a:	4b64      	ldr	r3, [pc, #400]	; (800249c <SendInfo+0x254>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f92a 	bl	8000568 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4961      	ldr	r1, [pc, #388]	; (80024a0 <SendInfo+0x258>)
 800231a:	485b      	ldr	r0, [pc, #364]	; (8002488 <SendInfo+0x240>)
 800231c:	f00d fbb6 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002320:	4859      	ldr	r0, [pc, #356]	; (8002488 <SendInfo+0x240>)
 8002322:	f001 fd8b 	bl	8003e3c <Serial_Console>
		sprintf(msg,"Charger Connected: %d\r\n", ChargerConnect);
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <SendInfo+0x25c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	495e      	ldr	r1, [pc, #376]	; (80024a8 <SendInfo+0x260>)
 800232e:	4856      	ldr	r0, [pc, #344]	; (8002488 <SendInfo+0x240>)
 8002330:	f00d fbac 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002334:	4854      	ldr	r0, [pc, #336]	; (8002488 <SendInfo+0x240>)
 8002336:	f001 fd81 	bl	8003e3c <Serial_Console>
		sprintf(msg,"IN-> BWF1: %d BWF2: %d BWF3: %d\r\nOUT-> BWF1: %d BWF2: %d BWF3: %d\r\n", bwf1_inside, bwf2_inside, bwf3_inside, bwf1_outside, bwf2_outside, bwf3_outside);
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <SendInfo+0x21c>)
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <SendInfo+0x224>)
 8002340:	681d      	ldr	r5, [r3, #0]
 8002342:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <SendInfo+0x22c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a48      	ldr	r2, [pc, #288]	; (8002468 <SendInfo+0x220>)
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4949      	ldr	r1, [pc, #292]	; (8002470 <SendInfo+0x228>)
 800234c:	6809      	ldr	r1, [r1, #0]
 800234e:	484a      	ldr	r0, [pc, #296]	; (8002478 <SendInfo+0x230>)
 8002350:	6800      	ldr	r0, [r0, #0]
 8002352:	9003      	str	r0, [sp, #12]
 8002354:	9102      	str	r1, [sp, #8]
 8002356:	9201      	str	r2, [sp, #4]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	462b      	mov	r3, r5
 800235c:	4622      	mov	r2, r4
 800235e:	4953      	ldr	r1, [pc, #332]	; (80024ac <SendInfo+0x264>)
 8002360:	4849      	ldr	r0, [pc, #292]	; (8002488 <SendInfo+0x240>)
 8002362:	f00d fb93 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002366:	4848      	ldr	r0, [pc, #288]	; (8002488 <SendInfo+0x240>)
 8002368:	f001 fd68 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Magnitude -> BWF1: %d BWF2: %d\r\n", magBWF1, magBWF2);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <SendInfo+0x268>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <SendInfo+0x26c>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	4950      	ldr	r1, [pc, #320]	; (80024b8 <SendInfo+0x270>)
 8002378:	4843      	ldr	r0, [pc, #268]	; (8002488 <SendInfo+0x240>)
 800237a:	f00d fb87 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 800237e:	4842      	ldr	r0, [pc, #264]	; (8002488 <SendInfo+0x240>)
 8002380:	f001 fd5c 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Battery Fully Charged: %d\r\n", Battery_Ready);
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <SendInfo+0x274>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	494d      	ldr	r1, [pc, #308]	; (80024c0 <SendInfo+0x278>)
 800238c:	483e      	ldr	r0, [pc, #248]	; (8002488 <SendInfo+0x240>)
 800238e:	f00d fb7d 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002392:	483d      	ldr	r0, [pc, #244]	; (8002488 <SendInfo+0x240>)
 8002394:	f001 fd52 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Roll: %.2f Pitch: %2.f Yaw: %2.f\r\n", mpu.roll, mpu.pitch, mpu.yaw);
 8002398:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <SendInfo+0x27c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8e3 	bl	8000568 <__aeabi_f2d>
 80023a2:	4680      	mov	r8, r0
 80023a4:	4689      	mov	r9, r1
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <SendInfo+0x27c>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8dc 	bl	8000568 <__aeabi_f2d>
 80023b0:	4604      	mov	r4, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <SendInfo+0x27c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8d5 	bl	8000568 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023c6:	e9cd 4500 	strd	r4, r5, [sp]
 80023ca:	4642      	mov	r2, r8
 80023cc:	464b      	mov	r3, r9
 80023ce:	493e      	ldr	r1, [pc, #248]	; (80024c8 <SendInfo+0x280>)
 80023d0:	482d      	ldr	r0, [pc, #180]	; (8002488 <SendInfo+0x240>)
 80023d2:	f00d fb5b 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 80023d6:	482c      	ldr	r0, [pc, #176]	; (8002488 <SendInfo+0x240>)
 80023d8:	f001 fd30 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Time: %d:%d:%d\r\n", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80023dc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80023e0:	461a      	mov	r2, r3
 80023e2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80023e6:	4619      	mov	r1, r3
 80023e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	460b      	mov	r3, r1
 80023f0:	4936      	ldr	r1, [pc, #216]	; (80024cc <SendInfo+0x284>)
 80023f2:	4825      	ldr	r0, [pc, #148]	; (8002488 <SendInfo+0x240>)
 80023f4:	f00d fb4a 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 80023f8:	4823      	ldr	r0, [pc, #140]	; (8002488 <SendInfo+0x240>)
 80023fa:	f001 fd1f 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Date: 20%d-%d-%d\r\n", currDate.Year, currDate.Month, currDate.Date);
 80023fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002402:	461a      	mov	r2, r3
 8002404:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002408:	4619      	mov	r1, r3
 800240a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	460b      	mov	r3, r1
 8002412:	492f      	ldr	r1, [pc, #188]	; (80024d0 <SendInfo+0x288>)
 8002414:	481c      	ldr	r0, [pc, #112]	; (8002488 <SendInfo+0x240>)
 8002416:	f00d fb39 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 800241a:	481b      	ldr	r0, [pc, #108]	; (8002488 <SendInfo+0x240>)
 800241c:	f001 fd0e 	bl	8003e3c <Serial_Console>
		sprintf(msg, "Movement: %.2f\r\n", mpu.movement);
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <SendInfo+0x27c>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f89f 	bl	8000568 <__aeabi_f2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4929      	ldr	r1, [pc, #164]	; (80024d4 <SendInfo+0x28c>)
 8002430:	4815      	ldr	r0, [pc, #84]	; (8002488 <SendInfo+0x240>)
 8002432:	f00d fb2b 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 8002436:	4814      	ldr	r0, [pc, #80]	; (8002488 <SendInfo+0x240>)
 8002438:	f001 fd00 	bl	8003e3c <Serial_Console>
		if (mpu.movement < settings.movement) sprintf(msg, "Movement Verdict: Standing\r\n");
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <SendInfo+0x27c>)
 800243e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <SendInfo+0x290>)
 8002444:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002450:	d546      	bpl.n	80024e0 <SendInfo+0x298>
 8002452:	4922      	ldr	r1, [pc, #136]	; (80024dc <SendInfo+0x294>)
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <SendInfo+0x240>)
 8002456:	f00d fb19 	bl	800fa8c <siprintf>
 800245a:	e045      	b.n	80024e8 <SendInfo+0x2a0>
 800245c:	200009a0 	.word	0x200009a0
 8002460:	200009bd 	.word	0x200009bd
 8002464:	20000958 	.word	0x20000958
 8002468:	20000964 	.word	0x20000964
 800246c:	2000095c 	.word	0x2000095c
 8002470:	20000968 	.word	0x20000968
 8002474:	20000960 	.word	0x20000960
 8002478:	2000096c 	.word	0x2000096c
 800247c:	20002450 	.word	0x20002450
 8002480:	20000970 	.word	0x20000970
 8002484:	08015300 	.word	0x08015300
 8002488:	20000a80 	.word	0x20000a80
 800248c:	20000974 	.word	0x20000974
 8002490:	0801530c 	.word	0x0801530c
 8002494:	20000978 	.word	0x20000978
 8002498:	08015318 	.word	0x08015318
 800249c:	20000988 	.word	0x20000988
 80024a0:	08015324 	.word	0x08015324
 80024a4:	200009bc 	.word	0x200009bc
 80024a8:	08015330 	.word	0x08015330
 80024ac:	08015348 	.word	0x08015348
 80024b0:	20000df0 	.word	0x20000df0
 80024b4:	20000c04 	.word	0x20000c04
 80024b8:	0801538c 	.word	0x0801538c
 80024bc:	200009a5 	.word	0x200009a5
 80024c0:	080153b0 	.word	0x080153b0
 80024c4:	200023cc 	.word	0x200023cc
 80024c8:	080153cc 	.word	0x080153cc
 80024cc:	080153f0 	.word	0x080153f0
 80024d0:	08015404 	.word	0x08015404
 80024d4:	08015418 	.word	0x08015418
 80024d8:	20000ca4 	.word	0x20000ca4
 80024dc:	0801542c 	.word	0x0801542c
		else sprintf(msg, "Movement Verdict: Moving\r\n");
 80024e0:	492b      	ldr	r1, [pc, #172]	; (8002590 <SendInfo+0x348>)
 80024e2:	482c      	ldr	r0, [pc, #176]	; (8002594 <SendInfo+0x34c>)
 80024e4:	f00d fad2 	bl	800fa8c <siprintf>
		Serial_Console(msg);
 80024e8:	482a      	ldr	r0, [pc, #168]	; (8002594 <SendInfo+0x34c>)
 80024ea:	f001 fca7 	bl	8003e3c <Serial_Console>

		char Data[128];

		sprintf(Data, "Battery Voltage,%.2f\r\n"
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <SendInfo+0x350>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f838 	bl	8000568 <__aeabi_f2d>
 80024f8:	4682      	mov	sl, r0
 80024fa:	468b      	mov	fp, r1
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <SendInfo+0x354>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f831 	bl	8000568 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <SendInfo+0x358>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f82a 	bl	8000568 <__aeabi_f2d>
 8002514:	4680      	mov	r8, r0
 8002516:	4689      	mov	r9, r1
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <SendInfo+0x35c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f823 	bl	8000568 <__aeabi_f2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4920      	ldr	r1, [pc, #128]	; (80025a8 <SendInfo+0x360>)
 8002528:	7809      	ldrb	r1, [r1, #0]
 800252a:	460e      	mov	r6, r1
 800252c:	491f      	ldr	r1, [pc, #124]	; (80025ac <SendInfo+0x364>)
 800252e:	7809      	ldrb	r1, [r1, #0]
 8002530:	4638      	mov	r0, r7
 8002532:	9107      	str	r1, [sp, #28]
 8002534:	9606      	str	r6, [sp, #24]
 8002536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800253a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800253e:	e9cd 4500 	strd	r4, r5, [sp]
 8002542:	4652      	mov	r2, sl
 8002544:	465b      	mov	r3, fp
 8002546:	491a      	ldr	r1, [pc, #104]	; (80025b0 <SendInfo+0x368>)
 8002548:	f00d faa0 	bl	800fa8c <siprintf>
				      "M2 Current,%.2f\r\n"
				      "C1 Current,%.2f\r\n"
				      "Security,%d\r\n"
				      "Mower State,%d\r\n", Voltage, M1_amp,M2_amp,C1_amp, Security, State);

		bwf1_inside = 0;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <SendInfo+0x36c>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
		bwf1_outside = 0;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <SendInfo+0x370>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
		bwf2_inside = 0;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <SendInfo+0x374>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
		bwf2_outside = 0;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <SendInfo+0x378>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
		bwf3_inside = 0;
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <SendInfo+0x37c>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
		bwf3_outside = 0;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <SendInfo+0x380>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(&huart2, (uint8_t *)&Data, strlen(Data), 100);
 8002570:	463b      	mov	r3, r7
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fe36 	bl	80001e4 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	b29a      	uxth	r2, r3
 800257c:	4639      	mov	r1, r7
 800257e:	2364      	movs	r3, #100	; 0x64
 8002580:	4812      	ldr	r0, [pc, #72]	; (80025cc <SendInfo+0x384>)
 8002582:	f00b f8f6 	bl	800d772 <HAL_UART_Transmit>

}
 8002586:	379c      	adds	r7, #156	; 0x9c
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	0801544c 	.word	0x0801544c
 8002594:	20000a80 	.word	0x20000a80
 8002598:	20000988 	.word	0x20000988
 800259c:	20000970 	.word	0x20000970
 80025a0:	20000974 	.word	0x20000974
 80025a4:	20000978 	.word	0x20000978
 80025a8:	200009a4 	.word	0x200009a4
 80025ac:	2000098f 	.word	0x2000098f
 80025b0:	08015468 	.word	0x08015468
 80025b4:	20000958 	.word	0x20000958
 80025b8:	20000964 	.word	0x20000964
 80025bc:	2000095c 	.word	0x2000095c
 80025c0:	20000968 	.word	0x20000968
 80025c4:	20000960 	.word	0x20000960
 80025c8:	2000096c 	.word	0x2000096c
 80025cc:	20002e00 	.word	0x20002e00

080025d0 <CollectADC>:

void CollectADC() {
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0

	// Collect IC2 data from the external ADC, in a non-blocking way.

	if (Channel == M1_addr && Channel_Status == 0) {
 80025d6:	4ba6      	ldr	r3, [pc, #664]	; (8002870 <CollectADC+0x2a0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2bc1      	cmp	r3, #193	; 0xc1
 80025dc:	d111      	bne.n	8002602 <CollectADC+0x32>
 80025de:	4ba5      	ldr	r3, [pc, #660]	; (8002874 <CollectADC+0x2a4>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <CollectADC+0x32>
		ADC_Send(Channel);
 80025e6:	4ba2      	ldr	r3, [pc, #648]	; (8002870 <CollectADC+0x2a0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 f922 	bl	8004834 <ADC_Send>
		Channel_Status = 1;
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <CollectADC+0x2a4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 80025f6:	f005 fbe1 	bl	8007dbc <HAL_GetTick>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a9e      	ldr	r2, [pc, #632]	; (8002878 <CollectADC+0x2a8>)
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	e040      	b.n	8002684 <CollectADC+0xb4>
	}
	else if (Channel == M2_addr && Channel_Status == 0) {
 8002602:	4b9b      	ldr	r3, [pc, #620]	; (8002870 <CollectADC+0x2a0>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2be1      	cmp	r3, #225	; 0xe1
 8002608:	d111      	bne.n	800262e <CollectADC+0x5e>
 800260a:	4b9a      	ldr	r3, [pc, #616]	; (8002874 <CollectADC+0x2a4>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <CollectADC+0x5e>
		ADC_Send(Channel);
 8002612:	4b97      	ldr	r3, [pc, #604]	; (8002870 <CollectADC+0x2a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 f90c 	bl	8004834 <ADC_Send>
		Channel_Status = 1;
 800261c:	4b95      	ldr	r3, [pc, #596]	; (8002874 <CollectADC+0x2a4>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 8002622:	f005 fbcb 	bl	8007dbc <HAL_GetTick>
 8002626:	4603      	mov	r3, r0
 8002628:	4a93      	ldr	r2, [pc, #588]	; (8002878 <CollectADC+0x2a8>)
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e02a      	b.n	8002684 <CollectADC+0xb4>
	}
	else if (Channel == C1_addr && Channel_Status == 0) {
 800262e:	4b90      	ldr	r3, [pc, #576]	; (8002870 <CollectADC+0x2a0>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2bf1      	cmp	r3, #241	; 0xf1
 8002634:	d111      	bne.n	800265a <CollectADC+0x8a>
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <CollectADC+0x2a4>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <CollectADC+0x8a>
		ADC_Send(Channel);
 800263e:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <CollectADC+0x2a0>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f002 f8f6 	bl	8004834 <ADC_Send>
		Channel_Status = 1;
 8002648:	4b8a      	ldr	r3, [pc, #552]	; (8002874 <CollectADC+0x2a4>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 800264e:	f005 fbb5 	bl	8007dbc <HAL_GetTick>
 8002652:	4603      	mov	r3, r0
 8002654:	4a88      	ldr	r2, [pc, #544]	; (8002878 <CollectADC+0x2a8>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e014      	b.n	8002684 <CollectADC+0xb4>
	}
	else if (Channel == V1_addr && Channel_Status == 0) {
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <CollectADC+0x2a0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2bd1      	cmp	r3, #209	; 0xd1
 8002660:	d110      	bne.n	8002684 <CollectADC+0xb4>
 8002662:	4b84      	ldr	r3, [pc, #528]	; (8002874 <CollectADC+0x2a4>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <CollectADC+0xb4>
		ADC_Send(Channel);
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <CollectADC+0x2a0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 f8e0 	bl	8004834 <ADC_Send>
		Channel_Status = 1;
 8002674:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <CollectADC+0x2a4>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
		ADC_timer = HAL_GetTick();
 800267a:	f005 fb9f 	bl	8007dbc <HAL_GetTick>
 800267e:	4603      	mov	r3, r0
 8002680:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <CollectADC+0x2a8>)
 8002682:	6013      	str	r3, [r2, #0]
	}

	if ((HAL_GetTick() - ADC_timer) >= 20 && Channel_Status == 1) {
 8002684:	f005 fb9a 	bl	8007dbc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <CollectADC+0x2a8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b13      	cmp	r3, #19
 8002692:	f240 80e5 	bls.w	8002860 <CollectADC+0x290>
 8002696:	4b77      	ldr	r3, [pc, #476]	; (8002874 <CollectADC+0x2a4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 80e0 	bne.w	8002860 <CollectADC+0x290>
		int RAW = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
		RAW = ADC_Receive();
 80026a4:	f002 f8ec 	bl	8004880 <ADC_Receive>
 80026a8:	6078      	str	r0, [r7, #4]

		CheckMotorCurrent(RAW);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fb68 	bl	8001d80 <CheckMotorCurrent>

	    if (Channel == C1_addr) {
 80026b0:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <CollectADC+0x2a0>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2bf1      	cmp	r3, #241	; 0xf1
 80026b6:	d14c      	bne.n	8002752 <CollectADC+0x182>
			C1_Value = RAW;
 80026b8:	4a70      	ldr	r2, [pc, #448]	; (800287c <CollectADC+0x2ac>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
			float C1;
            C1 = fabs(((C1_Value * 0.1875) - 2500) / 100);
 80026be:	4b6f      	ldr	r3, [pc, #444]	; (800287c <CollectADC+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff3e 	bl	8000544 <__aeabi_i2d>
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b6c      	ldr	r3, [pc, #432]	; (8002880 <CollectADC+0x2b0>)
 80026ce:	f7fd ffa3 	bl	8000618 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	a363      	add	r3, pc, #396	; (adr r3, 8002868 <CollectADC+0x298>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd fde2 	bl	80002a8 <__aeabi_dsub>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b64      	ldr	r3, [pc, #400]	; (8002884 <CollectADC+0x2b4>)
 80026f2:	f7fe f8bb 	bl	800086c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa83 	bl	8000c08 <__aeabi_d2f>
 8002702:	ee07 0a90 	vmov	s15, r0
 8002706:	eef0 7ae7 	vabs.f32	s15, s15
 800270a:	edc7 7a00 	vstr	s15, [r7]
            if (Initial_Start == 0) C1_error = C1;
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <CollectADC+0x2b8>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <CollectADC+0x14c>
 8002716:	4a5d      	ldr	r2, [pc, #372]	; (800288c <CollectADC+0x2bc>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6013      	str	r3, [r2, #0]
            C1_amp = fabs(C1 - C1_error);
 800271c:	4b5b      	ldr	r3, [pc, #364]	; (800288c <CollectADC+0x2bc>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ed97 7a00 	vldr	s14, [r7]
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	eef0 7ae7 	vabs.f32	s15, s15
 800272e:	4b58      	ldr	r3, [pc, #352]	; (8002890 <CollectADC+0x2c0>)
 8002730:	edc3 7a00 	vstr	s15, [r3]
            if (C1_amp >= settings.Cutter_Limit) {
 8002734:	4b57      	ldr	r3, [pc, #348]	; (8002894 <CollectADC+0x2c4>)
 8002736:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800273a:	4b55      	ldr	r3, [pc, #340]	; (8002890 <CollectADC+0x2c0>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d868      	bhi.n	800281c <CollectADC+0x24c>
            	MasterSwitch =  0;
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <CollectADC+0x2c8>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
            	return;
 8002750:	e086      	b.n	8002860 <CollectADC+0x290>
            }

		}
		else if (Channel == V1_addr) {
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <CollectADC+0x2a0>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2bd1      	cmp	r3, #209	; 0xd1
 8002758:	d160      	bne.n	800281c <CollectADC+0x24c>
			V1_Value = RAW;
 800275a:	4a50      	ldr	r2, [pc, #320]	; (800289c <CollectADC+0x2cc>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]
            V1_array[V1_index] = (V1_Value * 0.1875) * settings.voltageMultiply / 1000;
 8002760:	4b4e      	ldr	r3, [pc, #312]	; (800289c <CollectADC+0x2cc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd feed 	bl	8000544 <__aeabi_i2d>
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <CollectADC+0x2b0>)
 8002770:	f7fd ff52 	bl	8000618 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4b45      	ldr	r3, [pc, #276]	; (8002894 <CollectADC+0x2c4>)
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fef1 	bl	8000568 <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd ff43 	bl	8000618 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <CollectADC+0x2d0>)
 80027a0:	f7fe f864 	bl	800086c <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	493e      	ldr	r1, [pc, #248]	; (80028a4 <CollectADC+0x2d4>)
 80027aa:	7809      	ldrb	r1, [r1, #0]
 80027ac:	460c      	mov	r4, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe fa29 	bl	8000c08 <__aeabi_d2f>
 80027b6:	4602      	mov	r2, r0
 80027b8:	493b      	ldr	r1, [pc, #236]	; (80028a8 <CollectADC+0x2d8>)
 80027ba:	00a3      	lsls	r3, r4, #2
 80027bc:	440b      	add	r3, r1
 80027be:	601a      	str	r2, [r3, #0]
            V1_index++;
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <CollectADC+0x2d4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <CollectADC+0x2d4>)
 80027ca:	701a      	strb	r2, [r3, #0]
            if (V1_index >= 60) V1_index = 0;
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <CollectADC+0x2d4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b3b      	cmp	r3, #59	; 0x3b
 80027d2:	d902      	bls.n	80027da <CollectADC+0x20a>
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <CollectADC+0x2d4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
            float volt_sum = 0.0;
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
            for (uint8_t x = 0; x < 60; x++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	72fb      	strb	r3, [r7, #11]
 80027e4:	e00e      	b.n	8002804 <CollectADC+0x234>
            	volt_sum += V1_array[x];
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	4a2f      	ldr	r2, [pc, #188]	; (80028a8 <CollectADC+0x2d8>)
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80027f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fa:	edc7 7a03 	vstr	s15, [r7, #12]
            for (uint8_t x = 0; x < 60; x++) {
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	3301      	adds	r3, #1
 8002802:	72fb      	strb	r3, [r7, #11]
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	2b3b      	cmp	r3, #59	; 0x3b
 8002808:	d9ed      	bls.n	80027e6 <CollectADC+0x216>
            }
            Voltage = volt_sum / 60;
 800280a:	ed97 7a03 	vldr	s14, [r7, #12]
 800280e:	eddf 6a27 	vldr	s13, [pc, #156]	; 80028ac <CollectADC+0x2dc>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <CollectADC+0x2e0>)
 8002818:	edc3 7a00 	vstr	s15, [r3]
		}

		if (Channel == M1_addr) Channel = M2_addr;
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <CollectADC+0x2a0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2bc1      	cmp	r3, #193	; 0xc1
 8002822:	d103      	bne.n	800282c <CollectADC+0x25c>
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <CollectADC+0x2a0>)
 8002826:	22e1      	movs	r2, #225	; 0xe1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e016      	b.n	800285a <CollectADC+0x28a>
		else if (Channel == M2_addr) Channel = C1_addr;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <CollectADC+0x2a0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2be1      	cmp	r3, #225	; 0xe1
 8002832:	d103      	bne.n	800283c <CollectADC+0x26c>
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <CollectADC+0x2a0>)
 8002836:	22f1      	movs	r2, #241	; 0xf1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e00e      	b.n	800285a <CollectADC+0x28a>
		else if (Channel == C1_addr) Channel = V1_addr;
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <CollectADC+0x2a0>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2bf1      	cmp	r3, #241	; 0xf1
 8002842:	d103      	bne.n	800284c <CollectADC+0x27c>
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <CollectADC+0x2a0>)
 8002846:	22d1      	movs	r2, #209	; 0xd1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e006      	b.n	800285a <CollectADC+0x28a>
		else if (Channel == V1_addr) Channel = M1_addr;
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <CollectADC+0x2a0>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2bd1      	cmp	r3, #209	; 0xd1
 8002852:	d102      	bne.n	800285a <CollectADC+0x28a>
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <CollectADC+0x2a0>)
 8002856:	22c1      	movs	r2, #193	; 0xc1
 8002858:	701a      	strb	r2, [r3, #0]
		Channel_Status = 0;
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <CollectADC+0x2a4>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]

	}
}
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	bf00      	nop
 8002868:	00000000 	.word	0x00000000
 800286c:	40a38800 	.word	0x40a38800
 8002870:	20000214 	.word	0x20000214
 8002874:	2000090c 	.word	0x2000090c
 8002878:	20000994 	.word	0x20000994
 800287c:	20000904 	.word	0x20000904
 8002880:	3fc80000 	.word	0x3fc80000
 8002884:	40590000 	.word	0x40590000
 8002888:	20000952 	.word	0x20000952
 800288c:	20000984 	.word	0x20000984
 8002890:	20000978 	.word	0x20000978
 8002894:	20000ca4 	.word	0x20000ca4
 8002898:	20000215 	.word	0x20000215
 800289c:	20000908 	.word	0x20000908
 80028a0:	408f4000 	.word	0x408f4000
 80028a4:	200009a9 	.word	0x200009a9
 80028a8:	20002474 	.word	0x20002474
 80028ac:	42700000 	.word	0x42700000
 80028b0:	20000988 	.word	0x20000988

080028b4 <delay_us>:

void delay_us (uint16_t us)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5,0);  // set the counter value a 0
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <delay_us+0x30>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim5) < us);  // wait for the counter to reach the us input in the parameter
 80028c6:	bf00      	nop
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <delay_us+0x30>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3f9      	bcc.n	80028c8 <delay_us+0x14>
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20001234 	.word	0x20001234

080028e8 <unDock>:

void unDock(void) {
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b097      	sub	sp, #92	; 0x5c
 80028ec:	af10      	add	r7, sp, #64	; 0x40

	// Simple undock sequence,  check if Battery is ready (fully charged) and if we are within working hours.

	RTC_TimeTypeDef currTime = {0};
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef currDate = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	603b      	str	r3, [r7, #0]

	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	4834      	ldr	r0, [pc, #208]	; (80029d8 <unDock+0xf0>)
 8002908:	f009 fc67 	bl	800c1da <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800290c:	463b      	mov	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	4619      	mov	r1, r3
 8002912:	4831      	ldr	r0, [pc, #196]	; (80029d8 <unDock+0xf0>)
 8002914:	f009 fd66 	bl	800c3e4 <HAL_RTC_GetDate>

	if (currTime.Hours >= settings.WorkingHourStart && currTime.Hours < settings.WorkingHourEnd && Battery_Ready == 1 && Docked == 1) {
 8002918:	793a      	ldrb	r2, [r7, #4]
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <unDock+0xf4>)
 800291c:	78db      	ldrb	r3, [r3, #3]
 800291e:	429a      	cmp	r2, r3
 8002920:	d355      	bcc.n	80029ce <unDock+0xe6>
 8002922:	793a      	ldrb	r2, [r7, #4]
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <unDock+0xf4>)
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d250      	bcs.n	80029ce <unDock+0xe6>
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <unDock+0xf8>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d14c      	bne.n	80029ce <unDock+0xe6>
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <unDock+0xfc>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d148      	bne.n	80029ce <unDock+0xe6>

		Serial_Console("Switching to Main Battery\r\n");
 800293c:	482a      	ldr	r0, [pc, #168]	; (80029e8 <unDock+0x100>)
 800293e:	f001 fa7d 	bl	8003e3c <Serial_Console>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002942:	2200      	movs	r2, #0
 8002944:	2101      	movs	r1, #1
 8002946:	4829      	ldr	r0, [pc, #164]	; (80029ec <unDock+0x104>)
 8002948:	f006 ff88 	bl	800985c <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 800294c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002950:	f005 fa40 	bl	8007dd4 <HAL_Delay>

		MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 3000);
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <unDock+0xf4>)
 8002956:	8a5b      	ldrh	r3, [r3, #18]
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <unDock+0xf4>)
 800295a:	8a11      	ldrh	r1, [r2, #16]
 800295c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002960:	4618      	mov	r0, r3
 8002962:	f002 f929 	bl	8004bb8 <MotorBackward>

		MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 800);			// This needs to be changed if your docking is on the right side
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <unDock+0xf4>)
 8002968:	8a5b      	ldrh	r3, [r3, #18]
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <unDock+0xf4>)
 800296c:	8a11      	ldrh	r1, [r2, #16]
 800296e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002972:	4618      	mov	r0, r3
 8002974:	f002 fa64 	bl	8004e40 <MotorLeft>

		Docked = 0;
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <unDock+0xfc>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
		Initial_Start = 0;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <unDock+0x108>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
		Start_Threshold = 0;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <unDock+0x10c>)
 8002986:	2200      	movs	r2, #0
 8002988:	801a      	strh	r2, [r3, #0]
		Battery_Ready = 0;
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <unDock+0xf8>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
		lastError = 0;
 8002990:	4919      	ldr	r1, [pc, #100]	; (80029f8 <unDock+0x110>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9c1 2300 	strd	r2, r3, [r1]
		perimeterTracking = 0;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <unDock+0x114>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
		perimeterTrackingActive = 0;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <unDock+0x118>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
		write_all_settings(settings);
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <unDock+0xf4>)
 80029ac:	466d      	mov	r5, sp
 80029ae:	f106 0410 	add.w	r4, r6, #16
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ca:	f004 faa4 	bl	8006f16 <write_all_settings>

	}

}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20002450 	.word	0x20002450
 80029dc:	20000ca4 	.word	0x20000ca4
 80029e0:	200009a5 	.word	0x200009a5
 80029e4:	200009a1 	.word	0x200009a1
 80029e8:	080154d0 	.word	0x080154d0
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	20000952 	.word	0x20000952
 80029f4:	20000954 	.word	0x20000954
 80029f8:	20000928 	.word	0x20000928
 80029fc:	20000950 	.word	0x20000950
 8002a00:	20000951 	.word	0x20000951

08002a04 <ChargerConnected>:

void ChargerConnected(void) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0

	// Is the charger connected?

	if (ChargerConnect == 1 || Docked == 1) {
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <ChargerConnected+0xd4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d003      	beq.n	8002a18 <ChargerConnected+0x14>
 8002a10:	4b32      	ldr	r3, [pc, #200]	; (8002adc <ChargerConnected+0xd8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11f      	bne.n	8002a58 <ChargerConnected+0x54>
		if (Voltage >= settings.Battery_High_Limit && Battery_Ready == 0) {
 8002a18:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <ChargerConnected+0xdc>)
 8002a1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <ChargerConnected+0xe0>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	d900      	bls.n	8002a30 <ChargerConnected+0x2c>
			Battery_Ready = 1;
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
			Serial_Console("Charger disconnected.\r\n");
			ChargerConnect = 0;
		}
		return;
 8002a2e:	e050      	b.n	8002ad2 <ChargerConnected+0xce>
		if (Voltage >= settings.Battery_High_Limit && Battery_Ready == 0) {
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <ChargerConnected+0xe4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d14c      	bne.n	8002ad2 <ChargerConnected+0xce>
			Battery_Ready = 1;
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <ChargerConnected+0xe4>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a44:	4829      	ldr	r0, [pc, #164]	; (8002aec <ChargerConnected+0xe8>)
 8002a46:	f006 ff09 	bl	800985c <HAL_GPIO_WritePin>
			Serial_Console("Charger disconnected.\r\n");
 8002a4a:	4829      	ldr	r0, [pc, #164]	; (8002af0 <ChargerConnected+0xec>)
 8002a4c:	f001 f9f6 	bl	8003e3c <Serial_Console>
			ChargerConnect = 0;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <ChargerConnected+0xd4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
		return;
 8002a56:	e03c      	b.n	8002ad2 <ChargerConnected+0xce>
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 ) == GPIO_PIN_SET) {			// Read Volt sense pin
 8002a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a5c:	4825      	ldr	r0, [pc, #148]	; (8002af4 <ChargerConnected+0xf0>)
 8002a5e:	f006 fee5 	bl	800982c <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d135      	bne.n	8002ad4 <ChargerConnected+0xd0>
		HAL_Delay(settings.HoldChargeDetection);									// Wait for a while so a proper connection is made
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <ChargerConnected+0xdc>)
 8002a6a:	895b      	ldrh	r3, [r3, #10]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f9b1 	bl	8007dd4 <HAL_Delay>
		Force_Active = 0;
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <ChargerConnected+0xf4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
		MotorBrake();
 8002a78:	f002 fab0 	bl	8004fdc <MotorBrake>
		cutterHardBreak();
 8002a7c:	f001 faf2 	bl	8004064 <cutterHardBreak>
		Serial_Console("Charger Connected\r\n");
 8002a80:	481e      	ldr	r0, [pc, #120]	; (8002afc <ChargerConnected+0xf8>)
 8002a82:	f001 f9db 	bl	8003e3c <Serial_Console>
		HAL_Delay(10000);
 8002a86:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a8a:	f005 f9a3 	bl	8007dd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);				// Main Power switch
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2101      	movs	r1, #1
 8002a92:	481b      	ldr	r0, [pc, #108]	; (8002b00 <ChargerConnected+0xfc>)
 8002a94:	f006 fee2 	bl	800985c <HAL_GPIO_WritePin>
		Serial_Console("Changing Main Power\r\n");
 8002a98:	481a      	ldr	r0, [pc, #104]	; (8002b04 <ChargerConnected+0x100>)
 8002a9a:	f001 f9cf 	bl	8003e3c <Serial_Console>
		ChargerConnect = 1;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <ChargerConnected+0xd4>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
		Docked = 1;
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <ChargerConnected+0xd8>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5000);
 8002aaa:	f241 3088 	movw	r0, #5000	; 0x1388
 8002aae:	f005 f991 	bl	8007dd4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);			// Charger Switch
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <ChargerConnected+0xe8>)
 8002aba:	f006 fecf 	bl	800985c <HAL_GPIO_WritePin>
		Serial_Console("Charging activated\r\n");
 8002abe:	4812      	ldr	r0, [pc, #72]	; (8002b08 <ChargerConnected+0x104>)
 8002ac0:	f001 f9bc 	bl	8003e3c <Serial_Console>
		perimeterTracking = 0;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <ChargerConnected+0x108>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
		perimeterTrackingActive = 0;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <ChargerConnected+0x10c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
		return;
 8002ad0:	e000      	b.n	8002ad4 <ChargerConnected+0xd0>
		return;
 8002ad2:	bf00      	nop
		}
}
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200009bc 	.word	0x200009bc
 8002adc:	200009a1 	.word	0x200009a1
 8002ae0:	20000ca4 	.word	0x20000ca4
 8002ae4:	20000988 	.word	0x20000988
 8002ae8:	200009a5 	.word	0x200009a5
 8002aec:	40020800 	.word	0x40020800
 8002af0:	080154ec 	.word	0x080154ec
 8002af4:	40020000 	.word	0x40020000
 8002af8:	200009b4 	.word	0x200009b4
 8002afc:	08015504 	.word	0x08015504
 8002b00:	40020c00 	.word	0x40020c00
 8002b04:	08015518 	.word	0x08015518
 8002b08:	08015530 	.word	0x08015530
 8002b0c:	20000950 	.word	0x20000950
 8002b10:	20000951 	.word	0x20000951
 8002b14:	00000000 	.word	0x00000000

08002b18 <perimeterTracker>:

void perimeterTracker() {
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0

	CheckSecurity();
 8002b1e:	f001 f9b5 	bl	8003e8c <CheckSecurity>

	elapsedTime = HAL_GetTick() - previousTime;
 8002b22:	f005 f94b 	bl	8007dbc <HAL_GetTick>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fcfb 	bl	8000524 <__aeabi_ui2d>
 8002b2e:	4bac      	ldr	r3, [pc, #688]	; (8002de0 <perimeterTracker+0x2c8>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fbb8 	bl	80002a8 <__aeabi_dsub>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	49a9      	ldr	r1, [pc, #676]	; (8002de4 <perimeterTracker+0x2cc>)
 8002b3e:	e9c1 2300 	strd	r2, r3, [r1]

    if (BWF2_Status == OUTSIDE) {
 8002b42:	4ba9      	ldr	r3, [pc, #676]	; (8002de8 <perimeterTracker+0x2d0>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d113      	bne.n	8002b72 <perimeterTracker+0x5a>
    	Tick1 -= elapsedTime;
 8002b4a:	4ba8      	ldr	r3, [pc, #672]	; (8002dec <perimeterTracker+0x2d4>)
 8002b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b50:	4ba4      	ldr	r3, [pc, #656]	; (8002de4 <perimeterTracker+0x2cc>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fba7 	bl	80002a8 <__aeabi_dsub>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	49a3      	ldr	r1, [pc, #652]	; (8002dec <perimeterTracker+0x2d4>)
 8002b60:	e9c1 2300 	strd	r2, r3, [r1]
    	Tick2 = 0;
 8002b64:	49a2      	ldr	r1, [pc, #648]	; (8002df0 <perimeterTracker+0x2d8>)
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (BWF2_Status == INSIDE) {
 8002b72:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <perimeterTracker+0x2d0>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d113      	bne.n	8002ba2 <perimeterTracker+0x8a>
    	Tick2 -= elapsedTime;
 8002b7a:	4b9d      	ldr	r3, [pc, #628]	; (8002df0 <perimeterTracker+0x2d8>)
 8002b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b80:	4b98      	ldr	r3, [pc, #608]	; (8002de4 <perimeterTracker+0x2cc>)
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f7fd fb8f 	bl	80002a8 <__aeabi_dsub>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4998      	ldr	r1, [pc, #608]	; (8002df0 <perimeterTracker+0x2d8>)
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
    	Tick1 = 0;
 8002b94:	4995      	ldr	r1, [pc, #596]	; (8002dec <perimeterTracker+0x2d4>)
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    error = 2800 - (Tick1 + Tick2);                // determine error
 8002ba2:	4b92      	ldr	r3, [pc, #584]	; (8002dec <perimeterTracker+0x2d4>)
 8002ba4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba8:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <perimeterTracker+0x2d8>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fb7d 	bl	80002ac <__adddf3>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	a186      	add	r1, pc, #536	; (adr r1, 8002dd0 <perimeterTracker+0x2b8>)
 8002bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bbc:	f7fd fb74 	bl	80002a8 <__aeabi_dsub>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	498b      	ldr	r1, [pc, #556]	; (8002df4 <perimeterTracker+0x2dc>)
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
    cumError += error * elapsedTime;               // compute integral
 8002bca:	4b8a      	ldr	r3, [pc, #552]	; (8002df4 <perimeterTracker+0x2dc>)
 8002bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd0:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <perimeterTracker+0x2cc>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fd1f 	bl	8000618 <__aeabi_dmul>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <perimeterTracker+0x2e0>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fb60 	bl	80002ac <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4981      	ldr	r1, [pc, #516]	; (8002df8 <perimeterTracker+0x2e0>)
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
    rateError = (error - lastError)/elapsedTime;   // compute derivative
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <perimeterTracker+0x2dc>)
 8002bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bfc:	4b7f      	ldr	r3, [pc, #508]	; (8002dfc <perimeterTracker+0x2e4>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fb51 	bl	80002a8 <__aeabi_dsub>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <perimeterTracker+0x2cc>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd fe2a 	bl	800086c <__aeabi_ddiv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4978      	ldr	r1, [pc, #480]	; (8002e00 <perimeterTracker+0x2e8>)
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]

    double out = settings.kp*error + settings.ki*cumError + settings.kd*rateError;                //PID output
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <perimeterTracker+0x2ec>)
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc9e 	bl	8000568 <__aeabi_f2d>
 8002c2c:	4b71      	ldr	r3, [pc, #452]	; (8002df4 <perimeterTracker+0x2dc>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fcf1 	bl	8000618 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	4b71      	ldr	r3, [pc, #452]	; (8002e04 <perimeterTracker+0x2ec>)
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc90 	bl	8000568 <__aeabi_f2d>
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <perimeterTracker+0x2e0>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fce3 	bl	8000618 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fb27 	bl	80002ac <__adddf3>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4614      	mov	r4, r2
 8002c64:	461d      	mov	r5, r3
 8002c66:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <perimeterTracker+0x2ec>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc7c 	bl	8000568 <__aeabi_f2d>
 8002c70:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <perimeterTracker+0x2e8>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd fccf 	bl	8000618 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fb13 	bl	80002ac <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	e9c7 2300 	strd	r2, r3, [r7]

    lastError = error;                             //remember current error
 8002c8e:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <perimeterTracker+0x2dc>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	4959      	ldr	r1, [pc, #356]	; (8002dfc <perimeterTracker+0x2e4>)
 8002c96:	e9c1 2300 	strd	r2, r3, [r1]
    previousTime = HAL_GetTick();                  //remember current time
 8002c9a:	f005 f88f 	bl	8007dbc <HAL_GetTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc3f 	bl	8000524 <__aeabi_ui2d>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	494d      	ldr	r1, [pc, #308]	; (8002de0 <perimeterTracker+0x2c8>)
 8002cac:	e9c1 2300 	strd	r2, r3, [r1]

    int speedA = (2800 + round(out));
 8002cb0:	ed97 0b00 	vldr	d0, [r7]
 8002cb4:	f011 f8be 	bl	8013e34 <round>
 8002cb8:	ec51 0b10 	vmov	r0, r1, d0
 8002cbc:	a344      	add	r3, pc, #272	; (adr r3, 8002dd0 <perimeterTracker+0x2b8>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd faf3 	bl	80002ac <__adddf3>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7fd ff53 	bl	8000b78 <__aeabi_d2iz>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	60fb      	str	r3, [r7, #12]
    int speedB = (2800 - round(out));
 8002cd6:	ed97 0b00 	vldr	d0, [r7]
 8002cda:	f011 f8ab 	bl	8013e34 <round>
 8002cde:	ec53 2b10 	vmov	r2, r3, d0
 8002ce2:	a13b      	add	r1, pc, #236	; (adr r1, 8002dd0 <perimeterTracker+0x2b8>)
 8002ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ce8:	f7fd fade 	bl	80002a8 <__aeabi_dsub>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7fd ff40 	bl	8000b78 <__aeabi_d2iz>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60bb      	str	r3, [r7, #8]

    if (speedA > 3200) speedA = 3200;				// limit upper and lower speed
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002d02:	dd02      	ble.n	8002d0a <perimeterTracker+0x1f2>
 8002d04:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002d08:	60fb      	str	r3, [r7, #12]
    if (speedB > 3200) speedB = 3200;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002d10:	dd02      	ble.n	8002d18 <perimeterTracker+0x200>
 8002d12:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002d16:	60bb      	str	r3, [r7, #8]

    if (speedA < 1500) speedA = 1500;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f240 52db 	movw	r2, #1499	; 0x5db
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	dc02      	bgt.n	8002d28 <perimeterTracker+0x210>
 8002d22:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002d26:	60fb      	str	r3, [r7, #12]
    if (speedB < 1500) speedB = 1500;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f240 52db 	movw	r2, #1499	; 0x5db
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	dc02      	bgt.n	8002d38 <perimeterTracker+0x220>
 8002d32:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002d36:	60bb      	str	r3, [r7, #8]

    if (BWF2_Status == OUTSIDE) {
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <perimeterTracker+0x2d0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <perimeterTracker+0x260>

		  if (BWF1_Status == OUTSIDE) {
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <perimeterTracker+0x2f0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d107      	bne.n	8002d58 <perimeterTracker+0x240>
			  TIM4->CCR1 = 2300;			// if both boundary sensors are OUTSIDE, reverse M1 motor, this logic needs to be changed if docking is to the right
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d4a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002d4e:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = 0;
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
 8002d56:	e009      	b.n	8002d6c <perimeterTracker+0x254>
		  }
		  else if (BWF1_Status == INSIDE) {
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <perimeterTracker+0x2f0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <perimeterTracker+0x254>
			  TIM4->CCR1 = 0;
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = speedB;
 8002d66:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6393      	str	r3, [r2, #56]	; 0x38
		  }

		  TIM4->CCR3 = speedA;
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	63d3      	str	r3, [r2, #60]	; 0x3c
		  TIM4->CCR4 = 0;
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40

    }

    if (BWF2_Status == INSIDE) {
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <perimeterTracker+0x2d0>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d123      	bne.n	8002dc8 <perimeterTracker+0x2b0>
		  TIM4->CCR1 = 0;
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM4->CCR2 = speedA;
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <perimeterTracker+0x2f4>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6393      	str	r3, [r2, #56]	; 0x38

		  TIM4->CCR3 = round(speedB * 0.95);
 8002d8c:	68b8      	ldr	r0, [r7, #8]
 8002d8e:	f7fd fbd9 	bl	8000544 <__aeabi_i2d>
 8002d92:	a311      	add	r3, pc, #68	; (adr r3, 8002dd8 <perimeterTracker+0x2c0>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fc3e 	bl	8000618 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	ec43 2b17 	vmov	d7, r2, r3
 8002da4:	eeb0 0a47 	vmov.f32	s0, s14
 8002da8:	eef0 0a67 	vmov.f32	s1, s15
 8002dac:	f011 f842 	bl	8013e34 <round>
 8002db0:	ec53 2b10 	vmov	r2, r3, d0
 8002db4:	4c15      	ldr	r4, [pc, #84]	; (8002e0c <perimeterTracker+0x2f4>)
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff05 	bl	8000bc8 <__aeabi_d2uiz>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	63e3      	str	r3, [r4, #60]	; 0x3c
		  TIM4->CCR4 = 0;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <perimeterTracker+0x2f4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	40a5e000 	.word	0x40a5e000
 8002dd8:	66666666 	.word	0x66666666
 8002ddc:	3fee6666 	.word	0x3fee6666
 8002de0:	20000948 	.word	0x20000948
 8002de4:	20000938 	.word	0x20000938
 8002de8:	2000098d 	.word	0x2000098d
 8002dec:	20000910 	.word	0x20000910
 8002df0:	20000918 	.word	0x20000918
 8002df4:	20000920 	.word	0x20000920
 8002df8:	20000930 	.word	0x20000930
 8002dfc:	20000928 	.word	0x20000928
 8002e00:	20000940 	.word	0x20000940
 8002e04:	20000ca4 	.word	0x20000ca4
 8002e08:	2000098c 	.word	0x2000098c
 8002e0c:	40000800 	.word	0x40000800

08002e10 <parseCommand_Console>:
void parseCommand_Console(void) {
 8002e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e14:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 8002e18:	af10      	add	r7, sp, #64	; 0x40

	// Parse commands from the Console

	char Command[64] = {"\0"};
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8002e20:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002e24:	223c      	movs	r2, #60	; 0x3c
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f00b ffa7 	bl	800ed7c <memset>

	for (uint8_t x = 0; x < sizeof(ConsoleBuffer); x++) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
 8002e34:	f000 bf59 	b.w	8003cea <parseCommand_Console+0xeda>
		if (ConsoleBuffer[x] == 13) {
 8002e38:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8002e3c:	4ab4      	ldr	r2, [pc, #720]	; (8003110 <parseCommand_Console+0x300>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	2b0d      	cmp	r3, #13
 8002e42:	f040 874d 	bne.w	8003ce0 <parseCommand_Console+0xed0>
			if (ConsoleBuffer[0] == 13) memcpy(Command, "DISABLE", 7);
 8002e46:	4bb2      	ldr	r3, [pc, #712]	; (8003110 <parseCommand_Console+0x300>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b0d      	cmp	r3, #13
 8002e4c:	d107      	bne.n	8002e5e <parseCommand_Console+0x4e>
 8002e4e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e52:	2207      	movs	r2, #7
 8002e54:	49af      	ldr	r1, [pc, #700]	; (8003114 <parseCommand_Console+0x304>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f00b ff82 	bl	800ed60 <memcpy>
 8002e5c:	e007      	b.n	8002e6e <parseCommand_Console+0x5e>
			else {
				memcpy(Command,ConsoleBuffer,x);
 8002e5e:	f897 233f 	ldrb.w	r2, [r7, #831]	; 0x33f
 8002e62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e66:	49aa      	ldr	r1, [pc, #680]	; (8003110 <parseCommand_Console+0x300>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f00b ff79 	bl	800ed60 <memcpy>
			}
			sprintf(msg,"%s\r\n", Command);
 8002e6e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002e72:	461a      	mov	r2, r3
 8002e74:	49a8      	ldr	r1, [pc, #672]	; (8003118 <parseCommand_Console+0x308>)
 8002e76:	48a9      	ldr	r0, [pc, #676]	; (800311c <parseCommand_Console+0x30c>)
 8002e78:	f00c fe08 	bl	800fa8c <siprintf>
			Serial_Console(msg);
 8002e7c:	48a7      	ldr	r0, [pc, #668]	; (800311c <parseCommand_Console+0x30c>)
 8002e7e:	f000 ffdd 	bl	8003e3c <Serial_Console>
			for (uint8_t i = 0; i < CONSOLE_BFR_SIZE; i++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
 8002e88:	e026      	b.n	8002ed8 <parseCommand_Console+0xc8>
				Command[i] = toupper(Command[i]);
 8002e8a:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002e8e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002e92:	4413      	add	r3, r2
 8002e94:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002e98:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
 8002e9c:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a9f      	ldr	r2, [pc, #636]	; (8003120 <parseCommand_Console+0x310>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d103      	bne.n	8002eb8 <parseCommand_Console+0xa8>
 8002eb0:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002eb4:	3b20      	subs	r3, #32
 8002eb6:	e001      	b.n	8002ebc <parseCommand_Console+0xac>
 8002eb8:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8002ebc:	f897 233e 	ldrb.w	r2, [r7, #830]	; 0x33e
 8002ec0:	b2d9      	uxtb	r1, r3
 8002ec2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002ec6:	4413      	add	r3, r2
 8002ec8:	460a      	mov	r2, r1
 8002eca:	f803 2c50 	strb.w	r2, [r3, #-80]
			for (uint8_t i = 0; i < CONSOLE_BFR_SIZE; i++) {
 8002ece:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
 8002ed8:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002edc:	2b3f      	cmp	r3, #63	; 0x3f
 8002ede:	d9d4      	bls.n	8002e8a <parseCommand_Console+0x7a>
			}

			if (strcmp(Command, "HELLO") == 0) {
 8002ee0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ee4:	498f      	ldr	r1, [pc, #572]	; (8003124 <parseCommand_Console+0x314>)
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd f972 	bl	80001d0 <strcmp>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <parseCommand_Console+0xe8>
				Serial_Console("Hello fellow user! Welcome to RazorBoard!\r\n");
 8002ef2:	488d      	ldr	r0, [pc, #564]	; (8003128 <parseCommand_Console+0x318>)
 8002ef4:	f000 ffa2 	bl	8003e3c <Serial_Console>
				}
			if (strcmp(Command, "VERSION") == 0) {
 8002ef8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002efc:	498b      	ldr	r1, [pc, #556]	; (800312c <parseCommand_Console+0x31c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd f966 	bl	80001d0 <strcmp>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <parseCommand_Console+0x10a>
				sprintf(msg, "%s\r\n", VERSION);
 8002f0a:	4a89      	ldr	r2, [pc, #548]	; (8003130 <parseCommand_Console+0x320>)
 8002f0c:	4982      	ldr	r1, [pc, #520]	; (8003118 <parseCommand_Console+0x308>)
 8002f0e:	4883      	ldr	r0, [pc, #524]	; (800311c <parseCommand_Console+0x30c>)
 8002f10:	f00c fdbc 	bl	800fa8c <siprintf>
				Serial_Console(msg);
 8002f14:	4881      	ldr	r0, [pc, #516]	; (800311c <parseCommand_Console+0x30c>)
 8002f16:	f000 ff91 	bl	8003e3c <Serial_Console>
				}
			if (strcmp(Command, "DEBUG ON") == 0) {
 8002f1a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f1e:	4985      	ldr	r1, [pc, #532]	; (8003134 <parseCommand_Console+0x324>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd f955 	bl	80001d0 <strcmp>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <parseCommand_Console+0x128>
				DEBUG_RAZORBOARD = 1;
 8002f2c:	4b82      	ldr	r3, [pc, #520]	; (8003138 <parseCommand_Console+0x328>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
				Serial_Console("DEBUG is now ON\r\n");
 8002f32:	4882      	ldr	r0, [pc, #520]	; (800313c <parseCommand_Console+0x32c>)
 8002f34:	f000 ff82 	bl	8003e3c <Serial_Console>
				}
			if (strcmp(Command, "DEBUG OFF") == 0) {
 8002f38:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f3c:	4980      	ldr	r1, [pc, #512]	; (8003140 <parseCommand_Console+0x330>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd f946 	bl	80001d0 <strcmp>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <parseCommand_Console+0x146>
				DEBUG_RAZORBOARD = 0;
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <parseCommand_Console+0x328>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
				Serial_Console("DEBUG is now OFF\r\n");
 8002f50:	487c      	ldr	r0, [pc, #496]	; (8003144 <parseCommand_Console+0x334>)
 8002f52:	f000 ff73 	bl	8003e3c <Serial_Console>
				}
			if (strcmp(Command, "VOLTAGE") == 0) {
 8002f56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f5a:	497b      	ldr	r1, [pc, #492]	; (8003148 <parseCommand_Console+0x338>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd f937 	bl	80001d0 <strcmp>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10d      	bne.n	8002f84 <parseCommand_Console+0x174>
				sprintf(msg, "%.2f\r\n", Voltage);
 8002f68:	4b78      	ldr	r3, [pc, #480]	; (800314c <parseCommand_Console+0x33c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fafb 	bl	8000568 <__aeabi_f2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4976      	ldr	r1, [pc, #472]	; (8003150 <parseCommand_Console+0x340>)
 8002f78:	4868      	ldr	r0, [pc, #416]	; (800311c <parseCommand_Console+0x30c>)
 8002f7a:	f00c fd87 	bl	800fa8c <siprintf>
				Serial_Console(msg);
 8002f7e:	4867      	ldr	r0, [pc, #412]	; (800311c <parseCommand_Console+0x30c>)
 8002f80:	f000 ff5c 	bl	8003e3c <Serial_Console>
				}
			if (strcmp(Command, "UPGRADE") == 0) {
 8002f84:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f88:	4972      	ldr	r1, [pc, #456]	; (8003154 <parseCommand_Console+0x344>)
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd f920 	bl	80001d0 <strcmp>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <parseCommand_Console+0x19a>
				Serial_Console("Entering Bootloader...\r\n");
 8002f96:	4870      	ldr	r0, [pc, #448]	; (8003158 <parseCommand_Console+0x348>)
 8002f98:	f000 ff50 	bl	8003e3c <Serial_Console>
				HAL_Delay(500);
 8002f9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fa0:	f004 ff18 	bl	8007dd4 <HAL_Delay>
				BootLoaderInit(1);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe fd95 	bl	8001ad4 <BootLoaderInit>
			}
			if (strcmp(Command, "SHOW SIG") == 0) {
 8002faa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fae:	496b      	ldr	r1, [pc, #428]	; (800315c <parseCommand_Console+0x34c>)
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd f90d 	bl	80001d0 <strcmp>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d125      	bne.n	8003008 <parseCommand_Console+0x1f8>
				Serial_Console("Signature will be printed in 8 seconds, please start your plotter before.\r\n");
 8002fbc:	4868      	ldr	r0, [pc, #416]	; (8003160 <parseCommand_Console+0x350>)
 8002fbe:	f000 ff3d 	bl	8003e3c <Serial_Console>
				HAL_Delay(8000);
 8002fc2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002fc6:	f004 ff05 	bl	8007dd4 <HAL_Delay>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8002fd0:	e016      	b.n	8003000 <parseCommand_Console+0x1f0>
					sprintf(msg,"%f\r\n", validSignature[x]);
 8002fd2:	4a64      	ldr	r2, [pc, #400]	; (8003164 <parseCommand_Console+0x354>)
 8002fd4:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fac2 	bl	8000568 <__aeabi_f2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	495f      	ldr	r1, [pc, #380]	; (8003168 <parseCommand_Console+0x358>)
 8002fea:	484c      	ldr	r0, [pc, #304]	; (800311c <parseCommand_Console+0x30c>)
 8002fec:	f00c fd4e 	bl	800fa8c <siprintf>
					Serial_Console(msg);
 8002ff0:	484a      	ldr	r0, [pc, #296]	; (800311c <parseCommand_Console+0x30c>)
 8002ff2:	f000 ff23 	bl	8003e3c <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 8002ff6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8003000:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8003004:	2b7f      	cmp	r3, #127	; 0x7f
 8003006:	dde4      	ble.n	8002fd2 <parseCommand_Console+0x1c2>
				}
			}
			if (strcmp(Command, "EXPORT SIG") == 0) {
 8003008:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800300c:	4957      	ldr	r1, [pc, #348]	; (800316c <parseCommand_Console+0x35c>)
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd f8de 	bl	80001d0 <strcmp>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d127      	bne.n	800306a <parseCommand_Console+0x25a>
				Serial_Console("Signature exported as an array\r\n");
 800301a:	4855      	ldr	r0, [pc, #340]	; (8003170 <parseCommand_Console+0x360>)
 800301c:	f000 ff0e 	bl	8003e3c <Serial_Console>
				Serial_Console("{ ");
 8003020:	4854      	ldr	r0, [pc, #336]	; (8003174 <parseCommand_Console+0x364>)
 8003022:	f000 ff0b 	bl	8003e3c <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 8003026:	2300      	movs	r3, #0
 8003028:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800302c:	e016      	b.n	800305c <parseCommand_Console+0x24c>
					sprintf(msg,"%f,", validSignature[x]);
 800302e:	4a4d      	ldr	r2, [pc, #308]	; (8003164 <parseCommand_Console+0x354>)
 8003030:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa94 	bl	8000568 <__aeabi_f2d>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	494c      	ldr	r1, [pc, #304]	; (8003178 <parseCommand_Console+0x368>)
 8003046:	4835      	ldr	r0, [pc, #212]	; (800311c <parseCommand_Console+0x30c>)
 8003048:	f00c fd20 	bl	800fa8c <siprintf>
					Serial_Console(msg);
 800304c:	4833      	ldr	r0, [pc, #204]	; (800311c <parseCommand_Console+0x30c>)
 800304e:	f000 fef5 	bl	8003e3c <Serial_Console>
				for (int x = 0; x < SIGNATURE_LEN; x++) {
 8003052:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003056:	3301      	adds	r3, #1
 8003058:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800305c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003060:	2b7f      	cmp	r3, #127	; 0x7f
 8003062:	dde4      	ble.n	800302e <parseCommand_Console+0x21e>
				}
				Serial_Console(" };\r\n");
 8003064:	4845      	ldr	r0, [pc, #276]	; (800317c <parseCommand_Console+0x36c>)
 8003066:	f000 fee9 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "RECORD SIG") == 0) {
 800306a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800306e:	4944      	ldr	r1, [pc, #272]	; (8003180 <parseCommand_Console+0x370>)
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd f8ad 	bl	80001d0 <strcmp>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <parseCommand_Console+0x278>
				Signature_Record = TRUE;
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <parseCommand_Console+0x374>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
				Serial_Console("Done!\r\n");
 8003082:	4841      	ldr	r0, [pc, #260]	; (8003188 <parseCommand_Console+0x378>)
 8003084:	f000 feda 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "TEST LEFT MOTOR") == 0) {
 8003088:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800308c:	493f      	ldr	r1, [pc, #252]	; (800318c <parseCommand_Console+0x37c>)
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd f89e 	bl	80001d0 <strcmp>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <parseCommand_Console+0x2aa>
				  TIM4->CCR1 = 0;
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <parseCommand_Console+0x380>)
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM4->CCR2 = 2000;
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <parseCommand_Console+0x380>)
 80030a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_Delay(3000);
 80030a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030ac:	f004 fe92 	bl	8007dd4 <HAL_Delay>
				  MotorStop();
 80030b0:	f001 ff1a 	bl	8004ee8 <MotorStop>
				  Serial_Console("Done.\r\n");
 80030b4:	4837      	ldr	r0, [pc, #220]	; (8003194 <parseCommand_Console+0x384>)
 80030b6:	f000 fec1 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "TEST RIGHT MOTOR") == 0) {
 80030ba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030be:	4936      	ldr	r1, [pc, #216]	; (8003198 <parseCommand_Console+0x388>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd f885 	bl	80001d0 <strcmp>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <parseCommand_Console+0x2dc>
				  TIM4->CCR3 = 2000;
 80030cc:	4b30      	ldr	r3, [pc, #192]	; (8003190 <parseCommand_Console+0x380>)
 80030ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM4->CCR4 = 0;
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <parseCommand_Console+0x380>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
				  HAL_Delay(3000);
 80030da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030de:	f004 fe79 	bl	8007dd4 <HAL_Delay>
				  MotorStop();
 80030e2:	f001 ff01 	bl	8004ee8 <MotorStop>
				  Serial_Console("Done.\r\n");
 80030e6:	482b      	ldr	r0, [pc, #172]	; (8003194 <parseCommand_Console+0x384>)
 80030e8:	f000 fea8 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "REBOOT") == 0) {
 80030ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030f0:	492a      	ldr	r1, [pc, #168]	; (800319c <parseCommand_Console+0x38c>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f86c 	bl	80001d0 <strcmp>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d152      	bne.n	80031a4 <parseCommand_Console+0x394>
				Serial_Console("Rebooting...\r\n");
 80030fe:	4828      	ldr	r0, [pc, #160]	; (80031a0 <parseCommand_Console+0x390>)
 8003100:	f000 fe9c 	bl	8003e3c <Serial_Console>
				HAL_Delay(500);
 8003104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003108:	f004 fe64 	bl	8007dd4 <HAL_Delay>
				NVIC_SystemReset();
 800310c:	f7fe fb06 	bl	800171c <__NVIC_SystemReset>
 8003110:	200011f4 	.word	0x200011f4
 8003114:	08015548 	.word	0x08015548
 8003118:	08015550 	.word	0x08015550
 800311c:	20000a80 	.word	0x20000a80
 8003120:	08015d34 	.word	0x08015d34
 8003124:	08015558 	.word	0x08015558
 8003128:	08015560 	.word	0x08015560
 800312c:	0801558c 	.word	0x0801558c
 8003130:	08015d04 	.word	0x08015d04
 8003134:	08015594 	.word	0x08015594
 8003138:	200009bd 	.word	0x200009bd
 800313c:	080155a0 	.word	0x080155a0
 8003140:	080155b4 	.word	0x080155b4
 8003144:	080155c0 	.word	0x080155c0
 8003148:	080155d4 	.word	0x080155d4
 800314c:	20000988 	.word	0x20000988
 8003150:	080155dc 	.word	0x080155dc
 8003154:	080155e4 	.word	0x080155e4
 8003158:	080155ec 	.word	0x080155ec
 800315c:	08015608 	.word	0x08015608
 8003160:	08015614 	.word	0x08015614
 8003164:	20000014 	.word	0x20000014
 8003168:	08015660 	.word	0x08015660
 800316c:	08015668 	.word	0x08015668
 8003170:	08015674 	.word	0x08015674
 8003174:	08015698 	.word	0x08015698
 8003178:	0801569c 	.word	0x0801569c
 800317c:	080156a0 	.word	0x080156a0
 8003180:	080156a8 	.word	0x080156a8
 8003184:	200009b5 	.word	0x200009b5
 8003188:	080156b4 	.word	0x080156b4
 800318c:	080156bc 	.word	0x080156bc
 8003190:	40000800 	.word	0x40000800
 8003194:	080156cc 	.word	0x080156cc
 8003198:	080156d4 	.word	0x080156d4
 800319c:	080156e8 	.word	0x080156e8
 80031a0:	080156f0 	.word	0x080156f0

			}
			if (strcmp(Command, "LOAD CONFIG") == 0) {
 80031a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031a8:	49c4      	ldr	r1, [pc, #784]	; (80034bc <parseCommand_Console+0x6ac>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f810 	bl	80001d0 <strcmp>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <parseCommand_Console+0x3c4>
				settings = read_all_settings();
 80031b6:	4cc2      	ldr	r4, [pc, #776]	; (80034c0 <parseCommand_Console+0x6b0>)
 80031b8:	463b      	mov	r3, r7
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fde2 	bl	8006d84 <read_all_settings>
 80031c0:	463b      	mov	r3, r7
 80031c2:	4620      	mov	r0, r4
 80031c4:	4619      	mov	r1, r3
 80031c6:	2350      	movs	r3, #80	; 0x50
 80031c8:	461a      	mov	r2, r3
 80031ca:	f00b fdc9 	bl	800ed60 <memcpy>
				Serial_Console("Config loaded.\r\n");
 80031ce:	48bd      	ldr	r0, [pc, #756]	; (80034c4 <parseCommand_Console+0x6b4>)
 80031d0:	f000 fe34 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "SHOW CONFIG") == 0) {
 80031d4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d8:	49bb      	ldr	r1, [pc, #748]	; (80034c8 <parseCommand_Console+0x6b8>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fc fff8 	bl	80001d0 <strcmp>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d111      	bne.n	800320a <parseCommand_Console+0x3fa>

				show_config(settings);
 80031e6:	4eb6      	ldr	r6, [pc, #728]	; (80034c0 <parseCommand_Console+0x6b0>)
 80031e8:	466d      	mov	r5, sp
 80031ea:	f106 0410 	add.w	r4, r6, #16
 80031ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003202:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003206:	f7fd ff01 	bl	800100c <show_config>

			}
			if (strcmp(Command, "SAVE CONFIG") == 0) {
 800320a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800320e:	49af      	ldr	r1, [pc, #700]	; (80034cc <parseCommand_Console+0x6bc>)
 8003210:	4618      	mov	r0, r3
 8003212:	f7fc ffdd 	bl	80001d0 <strcmp>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d120      	bne.n	800325e <parseCommand_Console+0x44e>
				write_all_settings(settings);
 800321c:	4ea8      	ldr	r6, [pc, #672]	; (80034c0 <parseCommand_Console+0x6b0>)
 800321e:	466d      	mov	r5, sp
 8003220:	f106 0410 	add.w	r4, r6, #16
 8003224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003230:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003234:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003238:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800323c:	f003 fe6b 	bl	8006f16 <write_all_settings>
				settings = read_all_settings();
 8003240:	4c9f      	ldr	r4, [pc, #636]	; (80034c0 <parseCommand_Console+0x6b0>)
 8003242:	463b      	mov	r3, r7
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fd9d 	bl	8006d84 <read_all_settings>
 800324a:	463b      	mov	r3, r7
 800324c:	4620      	mov	r0, r4
 800324e:	4619      	mov	r1, r3
 8003250:	2350      	movs	r3, #80	; 0x50
 8003252:	461a      	mov	r2, r3
 8003254:	f00b fd84 	bl	800ed60 <memcpy>
				Serial_Console("Settings saved.\r\n");
 8003258:	489d      	ldr	r0, [pc, #628]	; (80034d0 <parseCommand_Console+0x6c0>)
 800325a:	f000 fdef 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "SAVE DEFAULT CONFIG") == 0) {
 800325e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003262:	499c      	ldr	r1, [pc, #624]	; (80034d4 <parseCommand_Console+0x6c4>)
 8003264:	4618      	mov	r0, r3
 8003266:	f7fc ffb3 	bl	80001d0 <strcmp>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d110      	bne.n	8003292 <parseCommand_Console+0x482>
				save_default_settings();
 8003270:	f003 ff18 	bl	80070a4 <save_default_settings>
				settings = read_all_settings();
 8003274:	4c92      	ldr	r4, [pc, #584]	; (80034c0 <parseCommand_Console+0x6b0>)
 8003276:	463b      	mov	r3, r7
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fd83 	bl	8006d84 <read_all_settings>
 800327e:	463b      	mov	r3, r7
 8003280:	4620      	mov	r0, r4
 8003282:	4619      	mov	r1, r3
 8003284:	2350      	movs	r3, #80	; 0x50
 8003286:	461a      	mov	r2, r3
 8003288:	f00b fd6a 	bl	800ed60 <memcpy>
				Serial_Console("Default settings saved.\r\n");
 800328c:	4892      	ldr	r0, [pc, #584]	; (80034d8 <parseCommand_Console+0x6c8>)
 800328e:	f000 fdd5 	bl	8003e3c <Serial_Console>

			}
			if (strcmp(Command, "SHOW CURRENT") == 0) {
 8003292:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003296:	4991      	ldr	r1, [pc, #580]	; (80034dc <parseCommand_Console+0x6cc>)
 8003298:	4618      	mov	r0, r3
 800329a:	f7fc ff99 	bl	80001d0 <strcmp>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d121      	bne.n	80032e8 <parseCommand_Console+0x4d8>
				sprintf(msg, "M1: %.2f\r\nM2: %.2f\r\nC1: %.2f\r\n", M1_amp, M2_amp, C1_amp);
 80032a4:	4b8e      	ldr	r3, [pc, #568]	; (80034e0 <parseCommand_Console+0x6d0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f95d 	bl	8000568 <__aeabi_f2d>
 80032ae:	4680      	mov	r8, r0
 80032b0:	4689      	mov	r9, r1
 80032b2:	4b8c      	ldr	r3, [pc, #560]	; (80034e4 <parseCommand_Console+0x6d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f956 	bl	8000568 <__aeabi_f2d>
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	4b89      	ldr	r3, [pc, #548]	; (80034e8 <parseCommand_Console+0x6d8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f94f 	bl	8000568 <__aeabi_f2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032d2:	e9cd 4500 	strd	r4, r5, [sp]
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	4984      	ldr	r1, [pc, #528]	; (80034ec <parseCommand_Console+0x6dc>)
 80032dc:	4884      	ldr	r0, [pc, #528]	; (80034f0 <parseCommand_Console+0x6e0>)
 80032de:	f00c fbd5 	bl	800fa8c <siprintf>
				Serial_Console(msg);
 80032e2:	4883      	ldr	r0, [pc, #524]	; (80034f0 <parseCommand_Console+0x6e0>)
 80032e4:	f000 fdaa 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "STOP MOTORS") == 0) {
 80032e8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80032ec:	4981      	ldr	r1, [pc, #516]	; (80034f4 <parseCommand_Console+0x6e4>)
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fc ff6e 	bl	80001d0 <strcmp>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <parseCommand_Console+0x4ee>
				MotorStop();
 80032fa:	f001 fdf5 	bl	8004ee8 <MotorStop>
			}
			if (strcmp(Command, "RUN MOTORS FORWARD") == 0) {
 80032fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003302:	497d      	ldr	r1, [pc, #500]	; (80034f8 <parseCommand_Console+0x6e8>)
 8003304:	4618      	mov	r0, r3
 8003306:	f7fc ff63 	bl	80001d0 <strcmp>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d110      	bne.n	8003332 <parseCommand_Console+0x522>
				State = FORWARD;
 8003310:	4b7a      	ldr	r3, [pc, #488]	; (80034fc <parseCommand_Console+0x6ec>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
				TIM4->CCR1 = 0;
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <parseCommand_Console+0x6f0>)
 8003318:	2200      	movs	r2, #0
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 2000;
 800331c:	4b78      	ldr	r3, [pc, #480]	; (8003500 <parseCommand_Console+0x6f0>)
 800331e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
				TIM4->CCR3 = 2000;
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <parseCommand_Console+0x6f0>)
 8003326:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->CCR4 = 0;
 800332c:	4b74      	ldr	r3, [pc, #464]	; (8003500 <parseCommand_Console+0x6f0>)
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (strcmp(Command, "RUN MOTORS REVERSE") == 0) {
 8003332:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003336:	4973      	ldr	r1, [pc, #460]	; (8003504 <parseCommand_Console+0x6f4>)
 8003338:	4618      	mov	r0, r3
 800333a:	f7fc ff49 	bl	80001d0 <strcmp>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d110      	bne.n	8003366 <parseCommand_Console+0x556>
				State = BACKWARD;
 8003344:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <parseCommand_Console+0x6ec>)
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
				TIM4->CCR1 = 2000;
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <parseCommand_Console+0x6f0>)
 800334c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003350:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 0;
 8003352:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <parseCommand_Console+0x6f0>)
 8003354:	2200      	movs	r2, #0
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
				TIM4->CCR3 = 0;
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <parseCommand_Console+0x6f0>)
 800335a:	2200      	movs	r2, #0
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->CCR4 = 2000;
 800335e:	4b68      	ldr	r3, [pc, #416]	; (8003500 <parseCommand_Console+0x6f0>)
 8003360:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (strncmp(Command, "SET PROXIMITY SPEED", 19) == 0) {
 8003366:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800336a:	2213      	movs	r2, #19
 800336c:	4966      	ldr	r1, [pc, #408]	; (8003508 <parseCommand_Console+0x6f8>)
 800336e:	4618      	mov	r0, r3
 8003370:	f00c fc1d 	bl	800fbae <strncmp>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <parseCommand_Console+0x592>
				float speed;
				char cmd1[3], cmd2[9], cmd3[5];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &speed);
 800337a:	f507 7137 	add.w	r1, r7, #732	; 0x2dc
 800337e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8003382:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003386:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	460b      	mov	r3, r1
 8003394:	495d      	ldr	r1, [pc, #372]	; (800350c <parseCommand_Console+0x6fc>)
 8003396:	f00c fb99 	bl	800facc <siscanf>
				settings.proximitySpeed = speed;
 800339a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800339e:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <parseCommand_Console+0x6b0>)
 80033a0:	6493      	str	r3, [r2, #72]	; 0x48
			}
			if (strncmp(Command, "SET VOLTAGE MULTIPLY", 20) == 0) {
 80033a2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033a6:	2214      	movs	r2, #20
 80033a8:	4959      	ldr	r1, [pc, #356]	; (8003510 <parseCommand_Console+0x700>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00c fbff 	bl	800fbae <strncmp>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d113      	bne.n	80033de <parseCommand_Console+0x5ce>
				float multiply;
				char cmd1[3], cmd2[7], cmd3[8];
				sscanf(Command, "%s %s %s %f", cmd1, cmd2, cmd3, &multiply);
 80033b6:	f507 7131 	add.w	r1, r7, #708	; 0x2c4
 80033ba:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80033be:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80033c2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	460b      	mov	r3, r1
 80033d0:	494e      	ldr	r1, [pc, #312]	; (800350c <parseCommand_Console+0x6fc>)
 80033d2:	f00c fb7b 	bl	800facc <siscanf>
				settings.voltageMultiply = multiply;
 80033d6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80033da:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <parseCommand_Console+0x6b0>)
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
			}
			if (strncmp(Command, "SET MOTOR MAX LIMIT", 19) == 0) {
 80033de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80033e2:	2213      	movs	r2, #19
 80033e4:	494b      	ldr	r1, [pc, #300]	; (8003514 <parseCommand_Console+0x704>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f00c fbe1 	bl	800fbae <strncmp>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <parseCommand_Console+0x610>
				float limit;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %f", cmd1, cmd2, cmd3, cmd4, &limit);
 80033f2:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 80033f6:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 80033fa:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80033fe:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	4941      	ldr	r1, [pc, #260]	; (8003518 <parseCommand_Console+0x708>)
 8003414:	f00c fb5a 	bl	800facc <siscanf>
				settings.Motor_Max_Limit = limit;
 8003418:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800341c:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <parseCommand_Console+0x6b0>)
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c
			}
			if (strncmp(Command, "SET MOTOR MIN LIMIT", 19) == 0) {
 8003420:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003424:	2213      	movs	r2, #19
 8003426:	493d      	ldr	r1, [pc, #244]	; (800351c <parseCommand_Console+0x70c>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00c fbc0 	bl	800fbae <strncmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d116      	bne.n	8003462 <parseCommand_Console+0x652>
				float limit;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %f", cmd1, cmd2, cmd3, cmd4, &limit);
 8003434:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003438:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800343c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003440:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	460b      	mov	r3, r1
 8003454:	4930      	ldr	r1, [pc, #192]	; (8003518 <parseCommand_Console+0x708>)
 8003456:	f00c fb39 	bl	800facc <siscanf>
				settings.Motor_Min_Limit = limit;
 800345a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <parseCommand_Console+0x6b0>)
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
			}
			if (strncmp(Command, "SET MOTOR MAX SPEED", 19) == 0) {
 8003462:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003466:	2213      	movs	r2, #19
 8003468:	492d      	ldr	r1, [pc, #180]	; (8003520 <parseCommand_Console+0x710>)
 800346a:	4618      	mov	r0, r3
 800346c:	f00c fb9f 	bl	800fbae <strncmp>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d117      	bne.n	80034a6 <parseCommand_Console+0x696>
				int speed;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %d", cmd1, cmd2, cmd3, cmd4, &speed);
 8003476:	f507 711d 	add.w	r1, r7, #628	; 0x274
 800347a:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800347e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003482:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003486:	9302      	str	r3, [sp, #8]
 8003488:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	460b      	mov	r3, r1
 8003496:	4923      	ldr	r1, [pc, #140]	; (8003524 <parseCommand_Console+0x714>)
 8003498:	f00c fb18 	bl	800facc <siscanf>
				settings.motorMaxSpeed = speed;
 800349c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <parseCommand_Console+0x6b0>)
 80034a4:	821a      	strh	r2, [r3, #16]
			}
			if (strncmp(Command, "SET MOTOR MIN SPEED", 19) == 0) {
 80034a6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80034aa:	2213      	movs	r2, #19
 80034ac:	491e      	ldr	r1, [pc, #120]	; (8003528 <parseCommand_Console+0x718>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f00c fb7d 	bl	800fbae <strncmp>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d150      	bne.n	800355c <parseCommand_Console+0x74c>
 80034ba:	e037      	b.n	800352c <parseCommand_Console+0x71c>
 80034bc:	08015700 	.word	0x08015700
 80034c0:	20000ca4 	.word	0x20000ca4
 80034c4:	0801570c 	.word	0x0801570c
 80034c8:	08015720 	.word	0x08015720
 80034cc:	0801572c 	.word	0x0801572c
 80034d0:	08015738 	.word	0x08015738
 80034d4:	0801574c 	.word	0x0801574c
 80034d8:	08015760 	.word	0x08015760
 80034dc:	0801577c 	.word	0x0801577c
 80034e0:	20000970 	.word	0x20000970
 80034e4:	20000974 	.word	0x20000974
 80034e8:	20000978 	.word	0x20000978
 80034ec:	0801578c 	.word	0x0801578c
 80034f0:	20000a80 	.word	0x20000a80
 80034f4:	080157ac 	.word	0x080157ac
 80034f8:	080157b8 	.word	0x080157b8
 80034fc:	2000098f 	.word	0x2000098f
 8003500:	40000800 	.word	0x40000800
 8003504:	080157cc 	.word	0x080157cc
 8003508:	080157e0 	.word	0x080157e0
 800350c:	080157f4 	.word	0x080157f4
 8003510:	08015800 	.word	0x08015800
 8003514:	08015818 	.word	0x08015818
 8003518:	0801582c 	.word	0x0801582c
 800351c:	0801583c 	.word	0x0801583c
 8003520:	08015850 	.word	0x08015850
 8003524:	08015864 	.word	0x08015864
 8003528:	08015874 	.word	0x08015874
				int speed;
				char cmd1[3], cmd2[5], cmd3[3], cmd4[5];
				sscanf(Command, "%s %s %s %s %d", cmd1, cmd2, cmd3, cmd4, &speed);
 800352c:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8003530:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003534:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003538:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	460b      	mov	r3, r1
 800354c:	49c5      	ldr	r1, [pc, #788]	; (8003864 <parseCommand_Console+0xa54>)
 800354e:	f00c fabd 	bl	800facc <siscanf>
				settings.motorMinSpeed = speed;
 8003552:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003556:	b29a      	uxth	r2, r3
 8003558:	4bc3      	ldr	r3, [pc, #780]	; (8003868 <parseCommand_Console+0xa58>)
 800355a:	825a      	strh	r2, [r3, #18]
			}
			if (strncmp(Command, "SET ADC LEVEL", 13) == 0) {
 800355c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003560:	220d      	movs	r2, #13
 8003562:	49c2      	ldr	r1, [pc, #776]	; (800386c <parseCommand_Console+0xa5c>)
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fb22 	bl	800fbae <strncmp>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d114      	bne.n	800359a <parseCommand_Console+0x78a>
				int adc;
				char cmd1[3], cmd2[3], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &adc);
 8003570:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8003574:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003578:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800357c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	460b      	mov	r3, r1
 800358a:	49b9      	ldr	r1, [pc, #740]	; (8003870 <parseCommand_Console+0xa60>)
 800358c:	f00c fa9e 	bl	800facc <siscanf>
				settings.adcLevel = adc;
 8003590:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003594:	b29a      	uxth	r2, r3
 8003596:	4bb4      	ldr	r3, [pc, #720]	; (8003868 <parseCommand_Console+0xa58>)
 8003598:	82da      	strh	r2, [r3, #22]
			}
			if (strncmp(Command, "SET CUTTER SPEED", 16) == 0) {
 800359a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800359e:	2210      	movs	r2, #16
 80035a0:	49b4      	ldr	r1, [pc, #720]	; (8003874 <parseCommand_Console+0xa64>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00c fb03 	bl	800fbae <strncmp>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <parseCommand_Console+0x7ca>
				int speed;
				char cmd1[3], cmd2[5], cmd3[3];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &speed);
 80035ae:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80035b2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80035b6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80035ba:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	460b      	mov	r3, r1
 80035c8:	49a9      	ldr	r1, [pc, #676]	; (8003870 <parseCommand_Console+0xa60>)
 80035ca:	f00c fa7f 	bl	800facc <siscanf>
				settings.cutterSpeed = speed;
 80035ce:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4ba4      	ldr	r3, [pc, #656]	; (8003868 <parseCommand_Console+0xa58>)
 80035d8:	829a      	strh	r2, [r3, #20]
			}
			if (strncmp(Command, "SET BOUNDARY TIMEOUT", 20) == 0) {
 80035da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80035de:	2214      	movs	r2, #20
 80035e0:	49a5      	ldr	r1, [pc, #660]	; (8003878 <parseCommand_Console+0xa68>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00c fae3 	bl	800fbae <strncmp>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d115      	bne.n	800361a <parseCommand_Console+0x80a>
				int limit;
				char cmd1[3], cmd2[8], cmd3[7];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 80035ee:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80035f2:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80035f6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80035fa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	460b      	mov	r3, r1
 8003608:	499c      	ldr	r1, [pc, #624]	; (800387c <parseCommand_Console+0xa6c>)
 800360a:	f00c fa5f 	bl	800facc <siscanf>
				settings.Boundary_Timeout = limit;
 800360e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b94      	ldr	r3, [pc, #592]	; (8003868 <parseCommand_Console+0xa58>)
 8003618:	709a      	strb	r2, [r3, #2]
			}
			if (strncmp(Command, "SET OVERTURN LIMIT", 18) == 0) {
 800361a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800361e:	2212      	movs	r2, #18
 8003620:	4997      	ldr	r1, [pc, #604]	; (8003880 <parseCommand_Console+0xa70>)
 8003622:	4618      	mov	r0, r3
 8003624:	f00c fac3 	bl	800fbae <strncmp>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <parseCommand_Console+0x84a>
				int limit;
				char cmd1[3], cmd2[8], cmd3[5];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 800362e:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 8003632:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8003636:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800363a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	460b      	mov	r3, r1
 8003648:	498c      	ldr	r1, [pc, #560]	; (800387c <parseCommand_Console+0xa6c>)
 800364a:	f00c fa3f 	bl	800facc <siscanf>
				settings.Overturn_Limit = limit;
 800364e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b84      	ldr	r3, [pc, #528]	; (8003868 <parseCommand_Console+0xa58>)
 8003658:	715a      	strb	r2, [r3, #5]
			}
			if (strncmp(Command, "SET OUTSIDE LIMIT", 17) == 0) {
 800365a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800365e:	2211      	movs	r2, #17
 8003660:	4988      	ldr	r1, [pc, #544]	; (8003884 <parseCommand_Console+0xa74>)
 8003662:	4618      	mov	r0, r3
 8003664:	f00c faa3 	bl	800fbae <strncmp>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <parseCommand_Console+0x88a>
				int limit;
				char cmd1[3], cmd2[7], cmd3[5];
				sscanf(Command, "%s %s %s %d ", cmd1, cmd2, cmd3, &limit);
 800366e:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8003672:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8003676:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800367a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	460b      	mov	r3, r1
 8003688:	497c      	ldr	r1, [pc, #496]	; (800387c <parseCommand_Console+0xa6c>)
 800368a:	f00c fa1f 	bl	800facc <siscanf>
				settings.Outside_Threshold = limit;
 800368e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <parseCommand_Console+0xa58>)
 8003698:	71da      	strb	r2, [r3, #7]
			}
			if (strncmp(Command, "SET BAT HIGH", 12) == 0) {
 800369a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800369e:	220c      	movs	r2, #12
 80036a0:	4979      	ldr	r1, [pc, #484]	; (8003888 <parseCommand_Console+0xa78>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00c fa83 	bl	800fbae <strncmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d114      	bne.n	80036d8 <parseCommand_Console+0x8c8>
				float limit;
				char cmd1[3], cmd2[3], cmd3[4];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 80036ae:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 80036b2:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80036b6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80036ba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	460b      	mov	r3, r1
 80036c8:	4970      	ldr	r1, [pc, #448]	; (800388c <parseCommand_Console+0xa7c>)
 80036ca:	f00c f9ff 	bl	800facc <siscanf>
				settings.Battery_High_Limit = limit;
 80036ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a64      	ldr	r2, [pc, #400]	; (8003868 <parseCommand_Console+0xa58>)
 80036d6:	61d3      	str	r3, [r2, #28]
			}
			if (strncmp(Command, "SET BAT LOW", 11) == 0) {
 80036d8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80036dc:	220b      	movs	r2, #11
 80036de:	496c      	ldr	r1, [pc, #432]	; (8003890 <parseCommand_Console+0xa80>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f00c fa64 	bl	800fbae <strncmp>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d114      	bne.n	8003716 <parseCommand_Console+0x906>
				float limit;
				char cmd1[3], cmd2[3], cmd3[3];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 80036ec:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 80036f0:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80036f4:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80036f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	460b      	mov	r3, r1
 8003706:	4961      	ldr	r1, [pc, #388]	; (800388c <parseCommand_Console+0xa7c>)
 8003708:	f00c f9e0 	bl	800facc <siscanf>
				settings.Battery_Low_Limit = limit;
 800370c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a55      	ldr	r2, [pc, #340]	; (8003868 <parseCommand_Console+0xa58>)
 8003714:	6193      	str	r3, [r2, #24]
			}
			if (strncmp(Command, "SET BWF OUT", 11) == 0) {
 8003716:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800371a:	220b      	movs	r2, #11
 800371c:	495d      	ldr	r1, [pc, #372]	; (8003894 <parseCommand_Console+0xa84>)
 800371e:	4618      	mov	r0, r3
 8003720:	f00c fa45 	bl	800fbae <strncmp>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d114      	bne.n	8003754 <parseCommand_Console+0x944>
				float limit;
				char cmd1[3], cmd2[3], cmd3[3];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 800372a:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800372e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003732:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003736:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	460b      	mov	r3, r1
 8003744:	4951      	ldr	r1, [pc, #324]	; (800388c <parseCommand_Console+0xa7c>)
 8003746:	f00c f9c1 	bl	800facc <siscanf>
				settings.Signal_Integrity_OUT = limit;
 800374a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a45      	ldr	r2, [pc, #276]	; (8003868 <parseCommand_Console+0xa58>)
 8003752:	6253      	str	r3, [r2, #36]	; 0x24
			}
			if (strncmp(Command, "SET BWF IN", 10) == 0) {
 8003754:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003758:	220a      	movs	r2, #10
 800375a:	494f      	ldr	r1, [pc, #316]	; (8003898 <parseCommand_Console+0xa88>)
 800375c:	4618      	mov	r0, r3
 800375e:	f00c fa26 	bl	800fbae <strncmp>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d114      	bne.n	8003792 <parseCommand_Console+0x982>
				float limit;
				char cmd1[3], cmd2[3], cmd3[2];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003768:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800376c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8003770:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003774:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	4942      	ldr	r1, [pc, #264]	; (800388c <parseCommand_Console+0xa7c>)
 8003784:	f00c f9a2 	bl	800facc <siscanf>
				settings.Signal_Integrity_IN = limit;
 8003788:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <parseCommand_Console+0xa58>)
 8003790:	6213      	str	r3, [r2, #32]
			}
			if (strncmp(Command, "SET CHARGE DETECTION", 20) == 0) {
 8003792:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003796:	2214      	movs	r2, #20
 8003798:	4940      	ldr	r1, [pc, #256]	; (800389c <parseCommand_Console+0xa8c>)
 800379a:	4618      	mov	r0, r3
 800379c:	f00c fa07 	bl	800fbae <strncmp>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d115      	bne.n	80037d2 <parseCommand_Console+0x9c2>
				int limit;
				char cmd1[3], cmd2[6], cmd3[9];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &limit);
 80037a6:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80037aa:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80037ae:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80037b2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	460b      	mov	r3, r1
 80037c0:	492b      	ldr	r1, [pc, #172]	; (8003870 <parseCommand_Console+0xa60>)
 80037c2:	f00c f983 	bl	800facc <siscanf>
				settings.HoldChargeDetection = limit;
 80037c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <parseCommand_Console+0xa58>)
 80037d0:	815a      	strh	r2, [r3, #10]
			}
			if (strncmp(Command, "SET CUTTER LIMIT", 16) == 0) {
 80037d2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80037d6:	2210      	movs	r2, #16
 80037d8:	4931      	ldr	r1, [pc, #196]	; (80038a0 <parseCommand_Console+0xa90>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f00c f9e7 	bl	800fbae <strncmp>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d114      	bne.n	8003810 <parseCommand_Console+0xa00>
				float limit;
				char cmd1[3], cmd2[6], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 80037e6:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 80037ea:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80037ee:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80037f2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	460b      	mov	r3, r1
 8003800:	4922      	ldr	r1, [pc, #136]	; (800388c <parseCommand_Console+0xa7c>)
 8003802:	f00c f963 	bl	800facc <siscanf>
				settings.Cutter_Limit = limit;
 8003806:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <parseCommand_Console+0xa58>)
 800380e:	6353      	str	r3, [r2, #52]	; 0x34
			}
			if (strncmp(Command, "SET MOTOR LIMIT", 15) == 0) {
 8003810:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003814:	220f      	movs	r2, #15
 8003816:	4923      	ldr	r1, [pc, #140]	; (80038a4 <parseCommand_Console+0xa94>)
 8003818:	4618      	mov	r0, r3
 800381a:	f00c f9c8 	bl	800fbae <strncmp>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d114      	bne.n	800384e <parseCommand_Console+0xa3e>
				float limit;
				char cmd1[3], cmd2[5], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 8003824:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8003828:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800382c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003830:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	460b      	mov	r3, r1
 800383e:	4913      	ldr	r1, [pc, #76]	; (800388c <parseCommand_Console+0xa7c>)
 8003840:	f00c f944 	bl	800facc <siscanf>
				settings.Motor_Limit = limit;
 8003844:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <parseCommand_Console+0xa58>)
 800384c:	6293      	str	r3, [r2, #40]	; 0x28
			}
			if (strncmp(Command, "SET MOVEMENT LIMIT", 18) == 0) {
 800384e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003852:	2212      	movs	r2, #18
 8003854:	4914      	ldr	r1, [pc, #80]	; (80038a8 <parseCommand_Console+0xa98>)
 8003856:	4618      	mov	r0, r3
 8003858:	f00c f9a9 	bl	800fbae <strncmp>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d139      	bne.n	80038d6 <parseCommand_Console+0xac6>
 8003862:	e023      	b.n	80038ac <parseCommand_Console+0xa9c>
 8003864:	08015864 	.word	0x08015864
 8003868:	20000ca4 	.word	0x20000ca4
 800386c:	08015888 	.word	0x08015888
 8003870:	08015898 	.word	0x08015898
 8003874:	080158a4 	.word	0x080158a4
 8003878:	080158b8 	.word	0x080158b8
 800387c:	080158d0 	.word	0x080158d0
 8003880:	080158e0 	.word	0x080158e0
 8003884:	080158f4 	.word	0x080158f4
 8003888:	08015908 	.word	0x08015908
 800388c:	08015918 	.word	0x08015918
 8003890:	08015928 	.word	0x08015928
 8003894:	08015934 	.word	0x08015934
 8003898:	08015940 	.word	0x08015940
 800389c:	0801594c 	.word	0x0801594c
 80038a0:	08015964 	.word	0x08015964
 80038a4:	08015978 	.word	0x08015978
 80038a8:	08015988 	.word	0x08015988
				float limit;
				char cmd1[3], cmd2[8], cmd3[5];
				sscanf(Command, "%s %s %s %f ", cmd1, cmd2, cmd3, &limit);
 80038ac:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80038b0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80038b4:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80038b8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	460b      	mov	r3, r1
 80038c6:	49c3      	ldr	r1, [pc, #780]	; (8003bd4 <parseCommand_Console+0xdc4>)
 80038c8:	f00c f900 	bl	800facc <siscanf>
				settings.movement = limit;
 80038cc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4ac1      	ldr	r2, [pc, #772]	; (8003bd8 <parseCommand_Console+0xdc8>)
 80038d4:	64d3      	str	r3, [r2, #76]	; 0x4c
			}
			if (strncmp(Command, "SET MOVEMENT COUNT LIMIT", 24) == 0) {
 80038d6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80038da:	2218      	movs	r2, #24
 80038dc:	49bf      	ldr	r1, [pc, #764]	; (8003bdc <parseCommand_Console+0xdcc>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f00c f965 	bl	800fbae <strncmp>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <parseCommand_Console+0xb0c>
				int limit;
				char cmd1[3], cmd2[8], cmd3[5], cmd4[5];
				sscanf(Command, "%s %s %s %s %d ", cmd1, cmd2, cmd3, cmd4, &limit);
 80038ea:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80038ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80038f2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80038f6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	460b      	mov	r3, r1
 800390a:	49b5      	ldr	r1, [pc, #724]	; (8003be0 <parseCommand_Console+0xdd0>)
 800390c:	f00c f8de 	bl	800facc <siscanf>
				settings.move_count_limit = limit;
 8003910:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4baf      	ldr	r3, [pc, #700]	; (8003bd8 <parseCommand_Console+0xdc8>)
 800391a:	721a      	strb	r2, [r3, #8]
			}
			if (strncmp(Command, "SET BUMBER COUNT LIMIT", 22) == 0) {
 800391c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003920:	2216      	movs	r2, #22
 8003922:	49b0      	ldr	r1, [pc, #704]	; (8003be4 <parseCommand_Console+0xdd4>)
 8003924:	4618      	mov	r0, r3
 8003926:	f00c f942 	bl	800fbae <strncmp>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d118      	bne.n	8003962 <parseCommand_Console+0xb52>
				int limit;
				char cmd1[3], cmd2[6], cmd3[5], cmd4[5];
				sscanf(Command, "%s %s %s %s %d ", cmd1, cmd2, cmd3, cmd4, &limit);
 8003930:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003934:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003938:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 800393c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	460b      	mov	r3, r1
 8003950:	49a3      	ldr	r1, [pc, #652]	; (8003be0 <parseCommand_Console+0xdd0>)
 8003952:	f00c f8bb 	bl	800facc <siscanf>
				settings.bumber_count_limit = limit;
 8003956:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003960:	725a      	strb	r2, [r3, #9]
			}
			if (strncmp(Command, "SET DATE", 8) == 0) {
 8003962:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003966:	2208      	movs	r2, #8
 8003968:	499f      	ldr	r1, [pc, #636]	; (8003be8 <parseCommand_Console+0xdd8>)
 800396a:	4618      	mov	r0, r3
 800396c:	f00c f91f 	bl	800fbae <strncmp>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d137      	bne.n	80039e6 <parseCommand_Console+0xbd6>
				int year = 0, month = 0, day = 0, weekday = 0;
 8003976:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
				char cmd1[3], cmd2[4];
				sscanf(Command, "%s %s %d %d %d %d", cmd1, cmd2, &year, &month, &day, &weekday);
 8003996:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800399a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800399e:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80039a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	460b      	mov	r3, r1
 80039bc:	498b      	ldr	r1, [pc, #556]	; (8003bec <parseCommand_Console+0xddc>)
 80039be:	f00c f885 	bl	800facc <siscanf>
				setDate(year, month, day, weekday);
 80039c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	b2d8      	uxtb	r0, r3
 80039ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	b2d9      	uxtb	r1, r3
 80039d2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f7fe f841 	bl	8001a68 <setDate>
			}
			if (strncmp(Command, "SET TIME", 8) == 0) {
 80039e6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80039ea:	2208      	movs	r2, #8
 80039ec:	4980      	ldr	r1, [pc, #512]	; (8003bf0 <parseCommand_Console+0xde0>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f00c f8dd 	bl	800fbae <strncmp>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d12d      	bne.n	8003a56 <parseCommand_Console+0xc46>
				int hour = 0, minute = 0, second = 0;
 80039fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
				char cmd1[3], cmd2[4];
				sscanf(Command, "%s %s %d %d %d", cmd1, cmd2, &hour, &minute, &second);
 8003a12:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003a16:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003a1a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003a1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	460b      	mov	r3, r1
 8003a32:	4970      	ldr	r1, [pc, #448]	; (8003bf4 <parseCommand_Console+0xde4>)
 8003a34:	f00c f84a 	bl	800facc <siscanf>
				setTime(hour, minute, second);
 8003a38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	b2d8      	uxtb	r0, r3
 8003a40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b2d9      	uxtb	r1, r3
 8003a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7fd ffd3 	bl	80019fc <setTime>
			}
			if (strncmp(Command, "SET KP", 6) == 0) {
 8003a56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	4966      	ldr	r1, [pc, #408]	; (8003bf8 <parseCommand_Console+0xde8>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f00c f8a5 	bl	800fbae <strncmp>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d111      	bne.n	8003a8e <parseCommand_Console+0xc7e>
				float pid_kp;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_kp);
 8003a6a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8003a6e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003a72:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	495f      	ldr	r1, [pc, #380]	; (8003bfc <parseCommand_Console+0xdec>)
 8003a80:	f00c f824 	bl	800facc <siscanf>
				settings.kp = pid_kp;
 8003a84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a53      	ldr	r2, [pc, #332]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003a8c:	6393      	str	r3, [r2, #56]	; 0x38
			}
			if (strncmp(Command, "SET KI", 6) == 0) {
 8003a8e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003a92:	2206      	movs	r2, #6
 8003a94:	495a      	ldr	r1, [pc, #360]	; (8003c00 <parseCommand_Console+0xdf0>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00c f889 	bl	800fbae <strncmp>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d111      	bne.n	8003ac6 <parseCommand_Console+0xcb6>
				float pid_ki;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_ki);
 8003aa2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003aa6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003aaa:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003aae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4951      	ldr	r1, [pc, #324]	; (8003bfc <parseCommand_Console+0xdec>)
 8003ab8:	f00c f808 	bl	800facc <siscanf>
				settings.ki = pid_ki;
 8003abc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a45      	ldr	r2, [pc, #276]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003ac4:	63d3      	str	r3, [r2, #60]	; 0x3c
			}
			if (strncmp(Command, "SET KD", 6) == 0) {
 8003ac6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003aca:	2206      	movs	r2, #6
 8003acc:	494d      	ldr	r1, [pc, #308]	; (8003c04 <parseCommand_Console+0xdf4>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00c f86d 	bl	800fbae <strncmp>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d111      	bne.n	8003afe <parseCommand_Console+0xcee>
				float pid_kd;
				char cmd1[3], cmd2[2];
				sscanf(Command, "%s %s %f", cmd1, cmd2, &pid_kd);
 8003ada:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8003ade:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003ae2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003ae6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	4943      	ldr	r1, [pc, #268]	; (8003bfc <parseCommand_Console+0xdec>)
 8003af0:	f00b ffec 	bl	800facc <siscanf>
				settings.kd = pid_kd;
 8003af4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (strncmp(Command, "SET WORKING START", 17) == 0) {
 8003afe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b02:	2211      	movs	r2, #17
 8003b04:	4940      	ldr	r1, [pc, #256]	; (8003c08 <parseCommand_Console+0xdf8>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f00c f851 	bl	800fbae <strncmp>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d115      	bne.n	8003b3e <parseCommand_Console+0xd2e>
				int start;
				char cmd1[3], cmd2[7], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &start);
 8003b12:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003b16:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003b1a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003b1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <parseCommand_Console+0xdfc>)
 8003b2e:	f00b ffcd 	bl	800facc <siscanf>
				settings.WorkingHourStart = start;
 8003b32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003b3c:	70da      	strb	r2, [r3, #3]
			}
			if (strncmp(Command, "SET WORKING END", 15) == 0) {
 8003b3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b42:	220f      	movs	r2, #15
 8003b44:	4932      	ldr	r1, [pc, #200]	; (8003c10 <parseCommand_Console+0xe00>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	f00c f831 	bl	800fbae <strncmp>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d115      	bne.n	8003b7e <parseCommand_Console+0xd6e>
				int end;
				char cmd1[3], cmd2[7], cmd3[3];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &end);
 8003b52:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003b56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003b5a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003b5e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4927      	ldr	r1, [pc, #156]	; (8003c0c <parseCommand_Console+0xdfc>)
 8003b6e:	f00b ffad 	bl	800facc <siscanf>
				settings.WorkingHourEnd = end;
 8003b72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003b7c:	711a      	strb	r2, [r3, #4]
			}
			if (strncmp(Command, "SET MAG VALUE", 13) == 0) {
 8003b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003b82:	220d      	movs	r2, #13
 8003b84:	4923      	ldr	r1, [pc, #140]	; (8003c14 <parseCommand_Console+0xe04>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f00c f811 	bl	800fbae <strncmp>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <parseCommand_Console+0xdae>
				int magValue;
				char cmd1[3], cmd2[3], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &magValue);
 8003b92:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003b96:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003b9a:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003b9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	460b      	mov	r3, r1
 8003bac:	4917      	ldr	r1, [pc, #92]	; (8003c0c <parseCommand_Console+0xdfc>)
 8003bae:	f00b ff8d 	bl	800facc <siscanf>
				settings.magValue = magValue;
 8003bb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <parseCommand_Console+0xdc8>)
 8003bbc:	819a      	strh	r2, [r3, #12]
			}
			if (strncmp(Command, "SET MAGMIN VALUE", 16) == 0) {
 8003bbe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	4914      	ldr	r1, [pc, #80]	; (8003c18 <parseCommand_Console+0xe08>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f00b fff1 	bl	800fbae <strncmp>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d13a      	bne.n	8003c48 <parseCommand_Console+0xe38>
 8003bd2:	e023      	b.n	8003c1c <parseCommand_Console+0xe0c>
 8003bd4:	08015918 	.word	0x08015918
 8003bd8:	20000ca4 	.word	0x20000ca4
 8003bdc:	0801599c 	.word	0x0801599c
 8003be0:	080159b8 	.word	0x080159b8
 8003be4:	080159c8 	.word	0x080159c8
 8003be8:	080159e0 	.word	0x080159e0
 8003bec:	080159ec 	.word	0x080159ec
 8003bf0:	08015a00 	.word	0x08015a00
 8003bf4:	08015a0c 	.word	0x08015a0c
 8003bf8:	08015a1c 	.word	0x08015a1c
 8003bfc:	08015a24 	.word	0x08015a24
 8003c00:	08015a30 	.word	0x08015a30
 8003c04:	08015a38 	.word	0x08015a38
 8003c08:	08015a40 	.word	0x08015a40
 8003c0c:	08015898 	.word	0x08015898
 8003c10:	08015a54 	.word	0x08015a54
 8003c14:	08015a64 	.word	0x08015a64
 8003c18:	08015a74 	.word	0x08015a74
				int magMinValue;
				char cmd1[3], cmd2[6], cmd3[5];
				sscanf(Command, "%s %s %s %d", cmd1, cmd2, cmd3, &magMinValue);
 8003c1c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003c20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c24:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	460b      	mov	r3, r1
 8003c36:	4934      	ldr	r1, [pc, #208]	; (8003d08 <parseCommand_Console+0xef8>)
 8003c38:	f00b ff48 	bl	800facc <siscanf>
				settings.magMinValue = magMinValue;
 8003c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <parseCommand_Console+0xefc>)
 8003c46:	81da      	strh	r2, [r3, #14]
			}
			if (strcmp(Command, "DISABLE") == 0) {
 8003c48:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c4c:	4930      	ldr	r1, [pc, #192]	; (8003d10 <parseCommand_Console+0xf00>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fabe 	bl	80001d0 <strcmp>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <parseCommand_Console+0xe5c>
				MasterSwitch = 0;
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <parseCommand_Console+0xf04>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
				Serial_Console("RazorBoard DISABLED.\r\n");
 8003c60:	482d      	ldr	r0, [pc, #180]	; (8003d18 <parseCommand_Console+0xf08>)
 8003c62:	f000 f8eb 	bl	8003e3c <Serial_Console>
				Serial_Console("Please type <help> to see available commands\r\n");
 8003c66:	482d      	ldr	r0, [pc, #180]	; (8003d1c <parseCommand_Console+0xf0c>)
 8003c68:	f000 f8e8 	bl	8003e3c <Serial_Console>
			}

			if (strcmp(Command, "ENABLE") == 0) {
 8003c6c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c70:	492b      	ldr	r1, [pc, #172]	; (8003d20 <parseCommand_Console+0xf10>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc faac 	bl	80001d0 <strcmp>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <parseCommand_Console+0xe86>
				MasterSwitch = 1;
 8003c7e:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <parseCommand_Console+0xf04>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	701a      	strb	r2, [r3, #0]
				Serial_Console("RazorBoard ENABLED. STEP AWAY FROM THE VEHICLE!\r\n");
 8003c84:	4827      	ldr	r0, [pc, #156]	; (8003d24 <parseCommand_Console+0xf14>)
 8003c86:	f000 f8d9 	bl	8003e3c <Serial_Console>
				Initial_Start = 0;
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <parseCommand_Console+0xf18>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
				Initial_Start = 0;
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <parseCommand_Console+0xf18>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(Command, "TRACK PERIMETER") == 0) {
 8003c96:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c9a:	4924      	ldr	r1, [pc, #144]	; (8003d2c <parseCommand_Console+0xf1c>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fa97 	bl	80001d0 <strcmp>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d107      	bne.n	8003cb8 <parseCommand_Console+0xea8>
				perimeterTracking = 1;
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <parseCommand_Console+0xf20>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
				cutterOFF();
 8003cae:	f000 fa45 	bl	800413c <cutterOFF>
				Serial_Console("Perimeter tracking ENABLED\r\n");
 8003cb2:	4820      	ldr	r0, [pc, #128]	; (8003d34 <parseCommand_Console+0xf24>)
 8003cb4:	f000 f8c2 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "HELP") == 0) {
 8003cb8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003cbc:	491e      	ldr	r1, [pc, #120]	; (8003d38 <parseCommand_Console+0xf28>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fa86 	bl	80001d0 <strcmp>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <parseCommand_Console+0xebe>
				help();
 8003cca:	f7fd fb31 	bl	8001330 <help>
			}

			memset(ConsoleBuffer, 0, sizeof(CONSOLE_BFR_SIZE));
 8003cce:	2204      	movs	r2, #4
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	481a      	ldr	r0, [pc, #104]	; (8003d3c <parseCommand_Console+0xf2c>)
 8003cd4:	f00b f852 	bl	800ed7c <memset>

			UART1_ready = 0;
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <parseCommand_Console+0xf30>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
			break;
 8003cde:	e009      	b.n	8003cf4 <parseCommand_Console+0xee4>
	for (uint8_t x = 0; x < sizeof(ConsoleBuffer); x++) {
 8003ce0:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
 8003cea:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8003cee:	2b3f      	cmp	r3, #63	; 0x3f
 8003cf0:	f67f a8a2 	bls.w	8002e38 <parseCommand_Console+0x28>
			}
	}
	UART1_ready = 0;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <parseCommand_Console+0xf30>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d06:	bf00      	nop
 8003d08:	08015898 	.word	0x08015898
 8003d0c:	20000ca4 	.word	0x20000ca4
 8003d10:	08015548 	.word	0x08015548
 8003d14:	20000215 	.word	0x20000215
 8003d18:	08015a88 	.word	0x08015a88
 8003d1c:	08015aa0 	.word	0x08015aa0
 8003d20:	08015ad0 	.word	0x08015ad0
 8003d24:	08015ad8 	.word	0x08015ad8
 8003d28:	20000952 	.word	0x20000952
 8003d2c:	08015b0c 	.word	0x08015b0c
 8003d30:	20000950 	.word	0x20000950
 8003d34:	08015b1c 	.word	0x08015b1c
 8003d38:	08015b3c 	.word	0x08015b3c
 8003d3c:	200011f4 	.word	0x200011f4
 8003d40:	200009a2 	.word	0x200009a2

08003d44 <parseCommand_RPI>:
void parseCommand_RPI() {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b092      	sub	sp, #72	; 0x48
 8003d48:	af00      	add	r7, sp, #0

	// Parse commands from the Raspberry PI

	char Command[64] = {"\0"};
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f107 0308 	add.w	r3, r7, #8
 8003d52:	223c      	movs	r2, #60	; 0x3c
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f00b f810 	bl	800ed7c <memset>

	for (uint8_t x = 0; x < sizeof(PIBuffer); x++) {
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d62:	e04b      	b.n	8003dfc <parseCommand_RPI+0xb8>
		if (PIBuffer[x] == 13) {
 8003d64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d68:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <parseCommand_RPI+0xcc>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	2b0d      	cmp	r3, #13
 8003d6e:	d140      	bne.n	8003df2 <parseCommand_RPI+0xae>
			memcpy(Command,PIBuffer,x);
 8003d70:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	4926      	ldr	r1, [pc, #152]	; (8003e10 <parseCommand_RPI+0xcc>)
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f00a fff1 	bl	800ed60 <memcpy>
			sprintf(msg,"%s\r\n", Command);
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	461a      	mov	r2, r3
 8003d82:	4924      	ldr	r1, [pc, #144]	; (8003e14 <parseCommand_RPI+0xd0>)
 8003d84:	4824      	ldr	r0, [pc, #144]	; (8003e18 <parseCommand_RPI+0xd4>)
 8003d86:	f00b fe81 	bl	800fa8c <siprintf>
			if (strcmp(Command, "RUN") == 0) {
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	4923      	ldr	r1, [pc, #140]	; (8003e1c <parseCommand_RPI+0xd8>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc fa1e 	bl	80001d0 <strcmp>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <parseCommand_RPI+0x68>
				MasterSwitch = 1;
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <parseCommand_RPI+0xdc>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
				Serial_RPi("Status: RUN\r\n");
 8003da0:	4820      	ldr	r0, [pc, #128]	; (8003e24 <parseCommand_RPI+0xe0>)
 8003da2:	f000 f85f 	bl	8003e64 <Serial_RPi>
				Serial_Console("Status: RUN\r\n");
 8003da6:	481f      	ldr	r0, [pc, #124]	; (8003e24 <parseCommand_RPI+0xe0>)
 8003da8:	f000 f848 	bl	8003e3c <Serial_Console>
			}
			if (strcmp(Command, "GOHOME") == 0) {
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	491e      	ldr	r1, [pc, #120]	; (8003e28 <parseCommand_RPI+0xe4>)
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc fa0d 	bl	80001d0 <strcmp>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <parseCommand_RPI+0x7e>
				perimeterTracking = 1;
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <parseCommand_RPI+0xe8>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
			}
			if (strcmp(Command, "STOP") == 0) {
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	491a      	ldr	r1, [pc, #104]	; (8003e30 <parseCommand_RPI+0xec>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fa02 	bl	80001d0 <strcmp>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <parseCommand_RPI+0xa0>
				MasterSwitch = 0;
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <parseCommand_RPI+0xdc>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]

				Serial_RPi("Status: STOP\r\n");
 8003dd8:	4816      	ldr	r0, [pc, #88]	; (8003e34 <parseCommand_RPI+0xf0>)
 8003dda:	f000 f843 	bl	8003e64 <Serial_RPi>
				Serial_Console("Status: STOP\r\n");
 8003dde:	4815      	ldr	r0, [pc, #84]	; (8003e34 <parseCommand_RPI+0xf0>)
 8003de0:	f000 f82c 	bl	8003e3c <Serial_Console>
			}
			Serial_Console(msg);
 8003de4:	480c      	ldr	r0, [pc, #48]	; (8003e18 <parseCommand_RPI+0xd4>)
 8003de6:	f000 f829 	bl	8003e3c <Serial_Console>
			UART2_ready = 0;
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <parseCommand_RPI+0xf4>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]

			break;
 8003df0:	e009      	b.n	8003e06 <parseCommand_RPI+0xc2>
	for (uint8_t x = 0; x < sizeof(PIBuffer); x++) {
 8003df2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003df6:	3301      	adds	r3, #1
 8003df8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e00:	2b3f      	cmp	r3, #63	; 0x3f
 8003e02:	d9af      	bls.n	8003d64 <parseCommand_RPI+0x20>
		}
	}
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3748      	adds	r7, #72	; 0x48
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20002964 	.word	0x20002964
 8003e14:	08015550 	.word	0x08015550
 8003e18:	20000a80 	.word	0x20000a80
 8003e1c:	08015b44 	.word	0x08015b44
 8003e20:	20000215 	.word	0x20000215
 8003e24:	08015b48 	.word	0x08015b48
 8003e28:	08015b58 	.word	0x08015b58
 8003e2c:	20000950 	.word	0x20000950
 8003e30:	08015b60 	.word	0x08015b60
 8003e34:	08015b68 	.word	0x08015b68
 8003e38:	200009a3 	.word	0x200009a3

08003e3c <Serial_Console>:

void Serial_Console(char *msg) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

	// Write to USB/Serial

	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 100);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fc f9cd 	bl	80001e4 <strlen>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	2364      	movs	r3, #100	; 0x64
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4803      	ldr	r0, [pc, #12]	; (8003e60 <Serial_Console+0x24>)
 8003e54:	f009 fc8d 	bl	800d772 <HAL_UART_Transmit>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20002384 	.word	0x20002384

08003e64 <Serial_RPi>:
void Serial_RPi(char *msg) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

	// Write to Raspberry PI

	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fc f9b9 	bl	80001e4 <strlen>
 8003e72:	4603      	mov	r3, r0
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	2364      	movs	r3, #100	; 0x64
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4803      	ldr	r0, [pc, #12]	; (8003e88 <Serial_RPi+0x24>)
 8003e7c:	f009 fc79 	bl	800d772 <HAL_UART_Transmit>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20002e00 	.word	0x20002e00

08003e8c <CheckSecurity>:
uint8_t CheckSecurity(void) {
 8003e8c:	b5b0      	push	{r4, r5, r7, lr}
 8003e8e:	af00      	add	r7, sp, #0

	// Check security, what is our status with the boundary signals

    CheckBWF();
 8003e90:	f000 fa88 	bl	80043a4 <CheckBWF>
    if (State == BACKWARD) {
 8003e94:	4b65      	ldr	r3, [pc, #404]	; (800402c <CheckSecurity+0x1a0>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d107      	bne.n	8003eac <CheckSecurity+0x20>
    	CheckBWF_Rear();
 8003e9c:	f000 f962 	bl	8004164 <CheckBWF_Rear>
    	if (BWF3_Status == OUTSIDE) {
 8003ea0:	4b63      	ldr	r3, [pc, #396]	; (8004030 <CheckSecurity+0x1a4>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d101      	bne.n	8003eac <CheckSecurity+0x20>
    		return SECURITY_BACKWARD_OUTSIDE;
 8003ea8:	2309      	movs	r3, #9
 8003eaa:	e0bd      	b.n	8004028 <CheckSecurity+0x19c>
    	}
    }

	if (abs(mpu.pitch) >= settings.Overturn_Limit || abs(mpu.roll) >= settings.Overturn_Limit) {
 8003eac:	4b61      	ldr	r3, [pc, #388]	; (8004034 <CheckSecurity+0x1a8>)
 8003eae:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb6:	ee17 3a90 	vmov	r3, s15
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfb8      	it	lt
 8003ebe:	425b      	neglt	r3, r3
 8003ec0:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <CheckSecurity+0x1ac>)
 8003ec2:	7952      	ldrb	r2, [r2, #5]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	da0d      	bge.n	8003ee4 <CheckSecurity+0x58>
 8003ec8:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <CheckSecurity+0x1a8>)
 8003eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed2:	ee17 3a90 	vmov	r3, s15
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfb8      	it	lt
 8003eda:	425b      	neglt	r3, r3
 8003edc:	4a56      	ldr	r2, [pc, #344]	; (8004038 <CheckSecurity+0x1ac>)
 8003ede:	7952      	ldrb	r2, [r2, #5]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	db05      	blt.n	8003ef0 <CheckSecurity+0x64>
		MotorHardBrake();
 8003ee4:	f001 f89a 	bl	800501c <MotorHardBrake>
		cutterHardBreak();
 8003ee8:	f000 f8bc 	bl	8004064 <cutterHardBreak>
		return SECURITY_IMU_FAIL;
 8003eec:	2306      	movs	r3, #6
 8003eee:	e09b      	b.n	8004028 <CheckSecurity+0x19c>
	}

    if (HAL_GetTick() - Boundary_Timer >= (settings.Boundary_Timeout * 1000)) {
 8003ef0:	f003 ff64 	bl	8007dbc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b51      	ldr	r3, [pc, #324]	; (800403c <CheckSecurity+0x1b0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	4a4e      	ldr	r2, [pc, #312]	; (8004038 <CheckSecurity+0x1ac>)
 8003efe:	7892      	ldrb	r2, [r2, #2]
 8003f00:	4611      	mov	r1, r2
 8003f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f06:	fb02 f201 	mul.w	r2, r2, r1
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d30d      	bcc.n	8003f2a <CheckSecurity+0x9e>
    	BWF1_Status = NOSIGNAL;
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <CheckSecurity+0x1b4>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
    	BWF2_Status = NOSIGNAL;
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <CheckSecurity+0x1b8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    	State = FAIL;
 8003f1a:	4b44      	ldr	r3, [pc, #272]	; (800402c <CheckSecurity+0x1a0>)
 8003f1c:	2206      	movs	r2, #6
 8003f1e:	701a      	strb	r2, [r3, #0]
    	Security = NOSIGNAL;
 8003f20:	4b49      	ldr	r3, [pc, #292]	; (8004048 <CheckSecurity+0x1bc>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
    	return SECURITY_NOSIGNAL;
 8003f26:	2302      	movs	r3, #2
 8003f28:	e07e      	b.n	8004028 <CheckSecurity+0x19c>
    }

    if (Initial_Start == 0) {
 8003f2a:	4b48      	ldr	r3, [pc, #288]	; (800404c <CheckSecurity+0x1c0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <CheckSecurity+0xb0>
    	move_timer = HAL_GetTick();
 8003f32:	f003 ff43 	bl	8007dbc <HAL_GetTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a45      	ldr	r2, [pc, #276]	; (8004050 <CheckSecurity+0x1c4>)
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    if ((TIM4->CCR2 >= (settings.motorMaxSpeed * 0.5) || TIM4->CCR3 >= (settings.motorMaxSpeed * 0.5)) && mpu.movement < settings.movement) {
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <CheckSecurity+0x1c8>)
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc faef 	bl	8000524 <__aeabi_ui2d>
 8003f46:	4604      	mov	r4, r0
 8003f48:	460d      	mov	r5, r1
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <CheckSecurity+0x1ac>)
 8003f4c:	8a1b      	ldrh	r3, [r3, #16]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc faf8 	bl	8000544 <__aeabi_i2d>
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <CheckSecurity+0x1cc>)
 8003f5a:	f7fc fb5d 	bl	8000618 <__aeabi_dmul>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc fddd 	bl	8000b24 <__aeabi_dcmpge>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d119      	bne.n	8003fa4 <CheckSecurity+0x118>
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <CheckSecurity+0x1c8>)
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fad5 	bl	8000524 <__aeabi_ui2d>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <CheckSecurity+0x1ac>)
 8003f80:	8a1b      	ldrh	r3, [r3, #16]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fade 	bl	8000544 <__aeabi_i2d>
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	4b32      	ldr	r3, [pc, #200]	; (8004058 <CheckSecurity+0x1cc>)
 8003f8e:	f7fc fb43 	bl	8000618 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fdc3 	bl	8000b24 <__aeabi_dcmpge>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01c      	beq.n	8003fde <CheckSecurity+0x152>
 8003fa4:	4b23      	ldr	r3, [pc, #140]	; (8004034 <CheckSecurity+0x1a8>)
 8003fa6:	ed93 7a08 	vldr	s14, [r3, #32]
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <CheckSecurity+0x1ac>)
 8003fac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	d511      	bpl.n	8003fde <CheckSecurity+0x152>
        if (HAL_GetTick() - move_timer >= 5000) {
 8003fba:	f003 feff 	bl	8007dbc <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b23      	ldr	r3, [pc, #140]	; (8004050 <CheckSecurity+0x1c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3287 	movw	r2, #4999	; 0x1387
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d90c      	bls.n	8003fe8 <CheckSecurity+0x15c>
        	move_count++;
 8003fce:	4b23      	ldr	r3, [pc, #140]	; (800405c <CheckSecurity+0x1d0>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <CheckSecurity+0x1d0>)
 8003fd8:	701a      	strb	r2, [r3, #0]
        	return SECURITY_MOVEMENT;
 8003fda:	2308      	movs	r3, #8
 8003fdc:	e024      	b.n	8004028 <CheckSecurity+0x19c>
        }
    }
    else {
    	move_timer = HAL_GetTick();
 8003fde:	f003 feed 	bl	8007dbc <HAL_GetTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <CheckSecurity+0x1c4>)
 8003fe6:	6013      	str	r3, [r2, #0]
    }

    if (BWF1_Status == INSIDE && BWF2_Status == INSIDE) {
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <CheckSecurity+0x1b4>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10d      	bne.n	800400c <CheckSecurity+0x180>
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <CheckSecurity+0x1b8>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d109      	bne.n	800400c <CheckSecurity+0x180>
    	Security = INSIDE;
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <CheckSecurity+0x1bc>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
    	OUTSIDE_timer = HAL_GetTick();		// We are inside, reset OUTSIDE_timer
 8003ffe:	f003 fedd 	bl	8007dbc <HAL_GetTick>
 8004002:	4603      	mov	r3, r0
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <CheckSecurity+0x1d4>)
 8004006:	6013      	str	r3, [r2, #0]
		return SECURITY_OK;
 8004008:	2301      	movs	r3, #1
 800400a:	e00d      	b.n	8004028 <CheckSecurity+0x19c>
	}
	else if (BWF1_Status == OUTSIDE || BWF2_Status == OUTSIDE) {
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <CheckSecurity+0x1b4>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d003      	beq.n	800401c <CheckSecurity+0x190>
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <CheckSecurity+0x1b8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d104      	bne.n	8004026 <CheckSecurity+0x19a>
		Security = OUTSIDE;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <CheckSecurity+0x1bc>)
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
		return SECURITY_FAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <CheckSecurity+0x19c>
	}

	return SECURITY_FAIL;
 8004026:	2300      	movs	r3, #0

}
 8004028:	4618      	mov	r0, r3
 800402a:	bdb0      	pop	{r4, r5, r7, pc}
 800402c:	2000098f 	.word	0x2000098f
 8004030:	2000098e 	.word	0x2000098e
 8004034:	200023cc 	.word	0x200023cc
 8004038:	20000ca4 	.word	0x20000ca4
 800403c:	2000127c 	.word	0x2000127c
 8004040:	2000098c 	.word	0x2000098c
 8004044:	2000098d 	.word	0x2000098d
 8004048:	200009a4 	.word	0x200009a4
 800404c:	20000952 	.word	0x20000952
 8004050:	200009c4 	.word	0x200009c4
 8004054:	40000800 	.word	0x40000800
 8004058:	3fe00000 	.word	0x3fe00000
 800405c:	200009c9 	.word	0x200009c9
 8004060:	2000099c 	.word	0x2000099c

08004064 <cutterHardBreak>:

void cutterHardBreak() {
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0

	// Cutter disc hard brake

	TIM3->CCR1 = settings.motorMaxSpeed;		// Motor will hard brake when both "pins" go HIGH
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <cutterHardBreak+0x24>)
 800406a:	8a1a      	ldrh	r2, [r3, #16]
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <cutterHardBreak+0x28>)
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = settings.motorMaxSpeed;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <cutterHardBreak+0x24>)
 8004072:	8a1a      	ldrh	r2, [r3, #16]
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <cutterHardBreak+0x28>)
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(3000);
 8004078:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800407c:	f003 feaa 	bl	8007dd4 <HAL_Delay>
	cutterOFF();
 8004080:	f000 f85c 	bl	800413c <cutterOFF>

}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000ca4 	.word	0x20000ca4
 800408c:	40000400 	.word	0x40000400

08004090 <cutterON>:

void cutterON(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0

	cutterStatus = 1;
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <cutterON+0x98>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]

	Serial_Console("Cutter Motor ON\r\n");
 800409c:	4823      	ldr	r0, [pc, #140]	; (800412c <cutterON+0x9c>)
 800409e:	f7ff fecd 	bl	8003e3c <Serial_Console>

	if (rnd(10000) < 5000 ) {			// Randomly select CW or CCW
 80040a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80040a6:	f7fd fe53 	bl	8001d50 <rnd>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d81a      	bhi.n	80040ea <cutterON+0x5a>

		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 80040b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040b8:	80fb      	strh	r3, [r7, #6]
 80040ba:	e010      	b.n	80040de <cutterON+0x4e>

			Boundary_Timer = HAL_GetTick();
 80040bc:	f003 fe7e 	bl	8007dbc <HAL_GetTick>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <cutterON+0xa0>)
 80040c4:	6013      	str	r3, [r2, #0]
			TIM3->CCR1 = cutterSpeed;
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <cutterON+0xa4>)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <cutterON+0xa4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(2);
 80040d2:	2002      	movs	r0, #2
 80040d4:	f003 fe7e 	bl	8007dd4 <HAL_Delay>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	3301      	adds	r3, #1
 80040dc:	80fb      	strh	r3, [r7, #6]
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <cutterON+0xa8>)
 80040e0:	8a9b      	ldrh	r3, [r3, #20]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3e9      	bcc.n	80040bc <cutterON+0x2c>
			HAL_Delay(2);

		}
	}

}
 80040e8:	e019      	b.n	800411e <cutterON+0x8e>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 80040ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ee:	80bb      	strh	r3, [r7, #4]
 80040f0:	e010      	b.n	8004114 <cutterON+0x84>
			Boundary_Timer = HAL_GetTick();
 80040f2:	f003 fe63 	bl	8007dbc <HAL_GetTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <cutterON+0xa0>)
 80040fa:	6013      	str	r3, [r2, #0]
			TIM3->CCR1 = 0;
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <cutterON+0xa4>)
 80040fe:	2200      	movs	r2, #0
 8004100:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = cutterSpeed;
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <cutterON+0xa4>)
 8004104:	88bb      	ldrh	r3, [r7, #4]
 8004106:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_Delay(2);
 8004108:	2002      	movs	r0, #2
 800410a:	f003 fe63 	bl	8007dd4 <HAL_Delay>
		for (uint16_t cutterSpeed = 1000; cutterSpeed < settings.cutterSpeed; cutterSpeed++) {
 800410e:	88bb      	ldrh	r3, [r7, #4]
 8004110:	3301      	adds	r3, #1
 8004112:	80bb      	strh	r3, [r7, #4]
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <cutterON+0xa8>)
 8004116:	8a9b      	ldrh	r3, [r3, #20]
 8004118:	88ba      	ldrh	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d3e9      	bcc.n	80040f2 <cutterON+0x62>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000991 	.word	0x20000991
 800412c:	08015b78 	.word	0x08015b78
 8004130:	2000127c 	.word	0x2000127c
 8004134:	40000400 	.word	0x40000400
 8004138:	20000ca4 	.word	0x20000ca4

0800413c <cutterOFF>:

void cutterOFF(void) {
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0

	cutterStatus = 0;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <cutterOFF+0x20>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]

	TIM3->CCR1 = 0;
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <cutterOFF+0x24>)
 8004148:	2200      	movs	r2, #0
 800414a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <cutterOFF+0x24>)
 800414e:	2200      	movs	r2, #0
 8004150:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	20000991 	.word	0x20000991
 8004160:	40000400 	.word	0x40000400

08004164 <CheckBWF_Rear>:
void CheckBWF_Rear() {
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af00      	add	r7, sp, #0

	float BWF3_Mixed_Signal = 0;
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float BWF3_Received_Signal = 0;
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t myID = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t BWF3_reply = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float Match_Signal = 0;
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
	float Result_Signal = 0;
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	603b      	str	r3, [r7, #0]
	float BWF3_Verdict_Signal = 0.0;
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]

	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e01d      	b.n	80041d8 <CheckBWF_Rear+0x74>
		if (x%2) {
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <CheckBWF_Rear+0x4a>
			count++;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e011      	b.n	80041d2 <CheckBWF_Rear+0x6e>
		}
		else {
			BWF3[count] = ADC_REAR_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 80041ae:	4a75      	ldr	r2, [pc, #468]	; (8004384 <CheckBWF_Rear+0x220>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b73      	ldr	r3, [pc, #460]	; (8004388 <CheckBWF_Rear+0x224>)
 80041ba:	8adb      	ldrh	r3, [r3, #22]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c6:	4a71      	ldr	r2, [pc, #452]	; (800438c <CheckBWF_Rear+0x228>)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	edc3 7a00 	vstr	s15, [r3]
	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3301      	adds	r3, #1
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041de:	dbdd      	blt.n	800419c <CheckBWF_Rear+0x38>
		}
	}

	FIR_REAR();
 80041e0:	f7fd fd70 	bl	8001cc4 <FIR_REAR>

	for (uint16_t idx = 0; idx < 96; idx++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	82fb      	strh	r3, [r7, #22]
 80041e8:	e0c1      	b.n	800436e <CheckBWF_Rear+0x20a>
        if (BWF3_reply == 1) {
 80041ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f000 80c2 	beq.w	8004378 <CheckBWF_Rear+0x214>
        	break;
        }
		myID = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	84fb      	strh	r3, [r7, #38]	; 0x26
		BWF3_Mixed_Signal = 0;
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		BWF3_Received_Signal = 0;
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
		Match_Signal = 0;
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	623b      	str	r3, [r7, #32]


		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 800420a:	8afb      	ldrh	r3, [r7, #22]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e041      	b.n	8004294 <CheckBWF_Rear+0x130>

			BWF3_Mixed_Signal += (BWF3[x] * validSignature[myID]);
 8004210:	4a5e      	ldr	r2, [pc, #376]	; (800438c <CheckBWF_Rear+0x228>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	ed93 7a00 	vldr	s14, [r3]
 800421c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800421e:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <CheckBWF_Rear+0x22c>)
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004234:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			BWF3_Received_Signal += BWF3[x] * BWF3[x];
 8004238:	4a54      	ldr	r2, [pc, #336]	; (800438c <CheckBWF_Rear+0x228>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	ed93 7a00 	vldr	s14, [r3]
 8004244:	4a51      	ldr	r2, [pc, #324]	; (800438c <CheckBWF_Rear+0x228>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	edd3 7a00 	vldr	s15, [r3]
 8004250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004254:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

			Match_Signal += validSignature[myID] * validSignature[myID];
 8004260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004262:	4a4b      	ldr	r2, [pc, #300]	; (8004390 <CheckBWF_Rear+0x22c>)
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	ed93 7a00 	vldr	s14, [r3]
 800426c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800426e:	4a48      	ldr	r2, [pc, #288]	; (8004390 <CheckBWF_Rear+0x22c>)
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004284:	edc7 7a08 	vstr	s15, [r7, #32]
			myID++;
 8004288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800428a:	3301      	adds	r3, #1
 800428c:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	3301      	adds	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	8afb      	ldrh	r3, [r7, #22]
 8004296:	337e      	adds	r3, #126	; 0x7e
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	ddb8      	ble.n	8004210 <CheckBWF_Rear+0xac>
		}

	arm_sqrt_f32((BWF3_Received_Signal * Match_Signal), &Result_Signal);
 800429e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80042a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80042a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042aa:	edc7 7a02 	vstr	s15, [r7, #8]
 80042ae:	463b      	mov	r3, r7
 80042b0:	607b      	str	r3, [r7, #4]
    if (in >= 0.0f)
 80042b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	db09      	blt.n	80042d4 <CheckBWF_Rear+0x170>
      *pOut = __builtin_sqrtf(in);
 80042c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80042c4:	f00f fdfe 	bl	8013ec4 <sqrtf>
 80042c8:	eef0 7a40 	vmov.f32	s15, s0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80042d2:	e004      	b.n	80042de <CheckBWF_Rear+0x17a>
      *pOut = 0.0f;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80042dc:	bf00      	nop
	BWF3_Verdict_Signal = (BWF3_Mixed_Signal / Result_Signal);
 80042de:	ed97 7a00 	vldr	s14, [r7]
 80042e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80042e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ea:	edc7 7a03 	vstr	s15, [r7, #12]

    if (BWF3_Verdict_Signal >= settings.Signal_Integrity_IN && BWF3_reply == 0) {
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <CheckBWF_Rear+0x224>)
 80042f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80042f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80042f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	db14      	blt.n	800432c <CheckBWF_Rear+0x1c8>
 8004302:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004306:	2b00      	cmp	r3, #0
 8004308:	d110      	bne.n	800432c <CheckBWF_Rear+0x1c8>
    	BWF3_Status = INSIDE;
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <CheckBWF_Rear+0x230>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004310:	f003 fd54 	bl	8007dbc <HAL_GetTick>
 8004314:	4603      	mov	r3, r0
 8004316:	4a20      	ldr	r2, [pc, #128]	; (8004398 <CheckBWF_Rear+0x234>)
 8004318:	6013      	str	r3, [r2, #0]
    	BWF3_reply = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	bwf3_inside++;
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <CheckBWF_Rear+0x238>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a1d      	ldr	r2, [pc, #116]	; (800439c <CheckBWF_Rear+0x238>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e01d      	b.n	8004368 <CheckBWF_Rear+0x204>
    }

    else if (BWF3_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF3_reply == 0) {
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <CheckBWF_Rear+0x224>)
 800432e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004332:	ed97 7a03 	vldr	s14, [r7, #12]
 8004336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	d813      	bhi.n	8004368 <CheckBWF_Rear+0x204>
 8004340:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <CheckBWF_Rear+0x204>
    	BWF3_Status = OUTSIDE;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <CheckBWF_Rear+0x230>)
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 800434e:	f003 fd35 	bl	8007dbc <HAL_GetTick>
 8004352:	4603      	mov	r3, r0
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <CheckBWF_Rear+0x234>)
 8004356:	6013      	str	r3, [r2, #0]
    	BWF3_reply = 1;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	bwf3_outside++;
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <CheckBWF_Rear+0x23c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <CheckBWF_Rear+0x23c>)
 8004366:	6013      	str	r3, [r2, #0]
	for (uint16_t idx = 0; idx < 96; idx++) {
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	3301      	adds	r3, #1
 800436c:	82fb      	strh	r3, [r7, #22]
 800436e:	8afb      	ldrh	r3, [r7, #22]
 8004370:	2b5f      	cmp	r3, #95	; 0x5f
 8004372:	f67f af3a 	bls.w	80041ea <CheckBWF_Rear+0x86>
    }
	}
}
 8004376:	e000      	b.n	800437a <CheckBWF_Rear+0x216>
        	break;
 8004378:	bf00      	nop
}
 800437a:	bf00      	nop
 800437c:	3730      	adds	r7, #48	; 0x30
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20001724 	.word	0x20001724
 8004388:	20000ca4 	.word	0x20000ca4
 800438c:	200012dc 	.word	0x200012dc
 8004390:	20000014 	.word	0x20000014
 8004394:	2000098e 	.word	0x2000098e
 8004398:	2000127c 	.word	0x2000127c
 800439c:	20000960 	.word	0x20000960
 80043a0:	2000096c 	.word	0x2000096c

080043a4 <CheckBWF>:
void CheckBWF() {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b092      	sub	sp, #72	; 0x48
 80043a8:	af00      	add	r7, sp, #0
	 * 0.85 = 85% match for INSIDE
	 * -0.75 = 75% match for OUTSIDE
	 * -1.0 = 100% match for OUTSIDE
	 */

	float BWF1_Mixed_Signal = 0;
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	647b      	str	r3, [r7, #68]	; 0x44
	float BWF1_Received_Signal = 0;
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	643b      	str	r3, [r7, #64]	; 0x40
	float BWF2_Mixed_Signal = 0;
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	float BWF2_Received_Signal = 0;
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t myID = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t BWF1_reply = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t BWF2_reply = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	float Match_Signal = 0;
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	633b      	str	r3, [r7, #48]	; 0x30
	float Result_Signal = 0;
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
	float BWF1_Verdict_Signal = 0.0;
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
	float BWF2_Verdict_Signal = 0.0;
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
	int count = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 80043ee:	2300      	movs	r3, #0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f2:	e02f      	b.n	8004454 <CheckBWF+0xb0>
		if (x%2) {
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <CheckBWF+0x86>
			BWF2[count] = ADC_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 80043fe:	4ab0      	ldr	r2, [pc, #704]	; (80046c0 <CheckBWF+0x31c>)
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004406:	461a      	mov	r2, r3
 8004408:	4bae      	ldr	r3, [pc, #696]	; (80046c4 <CheckBWF+0x320>)
 800440a:	8adb      	ldrh	r3, [r3, #22]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004416:	4aac      	ldr	r2, [pc, #688]	; (80046c8 <CheckBWF+0x324>)
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	edc3 7a00 	vstr	s15, [r3]
			count++;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	3301      	adds	r3, #1
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004428:	e011      	b.n	800444e <CheckBWF+0xaa>
		}
		else {
			BWF1[count] = ADC_BUFFER[x] - settings.adcLevel;		// Normalize the ADC signal
 800442a:	4aa5      	ldr	r2, [pc, #660]	; (80046c0 <CheckBWF+0x31c>)
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004432:	461a      	mov	r2, r3
 8004434:	4ba3      	ldr	r3, [pc, #652]	; (80046c4 <CheckBWF+0x320>)
 8004436:	8adb      	ldrh	r3, [r3, #22]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004442:	4aa2      	ldr	r2, [pc, #648]	; (80046cc <CheckBWF+0x328>)
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	edc3 7a00 	vstr	s15, [r3]
	for (int x = 0; x < ADC_SAMPLE_LEN; x++) {
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	3301      	adds	r3, #1
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	dbcb      	blt.n	80043f4 <CheckBWF+0x50>
		}
	}

	FIR_LEFT();		// Run FIR on left BWF	(BWF1)
 800445c:	f7fd fba6 	bl	8001bac <FIR_LEFT>
	FIR_RIGHT();	// Run FIR on right BWF	(BWF2)
 8004460:	f7fd fbea 	bl	8001c38 <FIR_RIGHT>

	if (Signature_Record == TRUE) {
 8004464:	4b9a      	ldr	r3, [pc, #616]	; (80046d0 <CheckBWF+0x32c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d115      	bne.n	8004498 <CheckBWF+0xf4>
		for (uint16_t x = 0; x < SIGNATURE_LEN; x++) {
 800446c:	2300      	movs	r3, #0
 800446e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004470:	e00c      	b.n	800448c <CheckBWF+0xe8>
			validSignature[x] = BWF1[x];
 8004472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004476:	4995      	ldr	r1, [pc, #596]	; (80046cc <CheckBWF+0x328>)
 8004478:	0092      	lsls	r2, r2, #2
 800447a:	440a      	add	r2, r1
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	4995      	ldr	r1, [pc, #596]	; (80046d4 <CheckBWF+0x330>)
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	601a      	str	r2, [r3, #0]
		for (uint16_t x = 0; x < SIGNATURE_LEN; x++) {
 8004486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004488:	3301      	adds	r3, #1
 800448a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800448c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800448e:	2b7f      	cmp	r3, #127	; 0x7f
 8004490:	d9ef      	bls.n	8004472 <CheckBWF+0xce>
		}
		Signature_Record = FALSE;
 8004492:	4b8f      	ldr	r3, [pc, #572]	; (80046d0 <CheckBWF+0x32c>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
	}

	for (uint16_t idx = 0; idx < 96; idx++) {
 8004498:	2300      	movs	r3, #0
 800449a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800449c:	e1ae      	b.n	80047fc <CheckBWF+0x458>
        if (BWF1_reply == 1 && BWF2_reply == 1) {
 800449e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d104      	bne.n	80044b0 <CheckBWF+0x10c>
 80044a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	f000 81ab 	beq.w	8004806 <CheckBWF+0x462>
        	break;
        }
		myID = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	86fb      	strh	r3, [r7, #54]	; 0x36
		BWF1_Mixed_Signal = 0;
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	647b      	str	r3, [r7, #68]	; 0x44
		BWF1_Received_Signal = 0;
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	643b      	str	r3, [r7, #64]	; 0x40
		BWF2_Mixed_Signal = 0;
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		BWF2_Received_Signal = 0;
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
		Match_Signal = 0;
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30


		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 80044d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	e069      	b.n	80045ac <CheckBWF+0x208>

			BWF1_Mixed_Signal += (BWF1[x] * validSignature[myID]);
 80044d8:	4a7c      	ldr	r2, [pc, #496]	; (80046cc <CheckBWF+0x328>)
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	ed93 7a00 	vldr	s14, [r3]
 80044e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044e6:	4a7b      	ldr	r2, [pc, #492]	; (80046d4 <CheckBWF+0x330>)
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80044f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			BWF1_Received_Signal += BWF1[x] * BWF1[x];
 8004500:	4a72      	ldr	r2, [pc, #456]	; (80046cc <CheckBWF+0x328>)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	ed93 7a00 	vldr	s14, [r3]
 800450c:	4a6f      	ldr	r2, [pc, #444]	; (80046cc <CheckBWF+0x328>)
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004524:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			BWF2_Mixed_Signal += (BWF2[x] * validSignature[myID]);
 8004528:	4a67      	ldr	r2, [pc, #412]	; (80046c8 <CheckBWF+0x324>)
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	ed93 7a00 	vldr	s14, [r3]
 8004534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004536:	4a67      	ldr	r2, [pc, #412]	; (80046d4 <CheckBWF+0x330>)
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			BWF2_Received_Signal += BWF2[x] * BWF2[x];
 8004550:	4a5d      	ldr	r2, [pc, #372]	; (80046c8 <CheckBWF+0x324>)
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	ed93 7a00 	vldr	s14, [r3]
 800455c:	4a5a      	ldr	r2, [pc, #360]	; (80046c8 <CheckBWF+0x324>)
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004574:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			Match_Signal += validSignature[myID] * validSignature[myID];
 8004578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800457a:	4a56      	ldr	r2, [pc, #344]	; (80046d4 <CheckBWF+0x330>)
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004586:	4a53      	ldr	r2, [pc, #332]	; (80046d4 <CheckBWF+0x330>)
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			myID++;
 80045a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045a2:	3301      	adds	r3, #1
 80045a4:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int x = idx; x < (idx+SIGNATURE_LEN - 1); x++) {
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	3301      	adds	r3, #1
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ae:	337e      	adds	r3, #126	; 0x7e
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	dd90      	ble.n	80044d8 <CheckBWF+0x134>
		}

	arm_sqrt_f32((BWF1_Received_Signal * Match_Signal), &Result_Signal);
 80045b6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80045ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a03 	vstr	s15, [r7, #12]
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	60bb      	str	r3, [r7, #8]
    if (in >= 0.0f)
 80045ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	db09      	blt.n	80045ec <CheckBWF+0x248>
      *pOut = __builtin_sqrtf(in);
 80045d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80045dc:	f00f fc72 	bl	8013ec4 <sqrtf>
 80045e0:	eef0 7a40 	vmov.f32	s15, s0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80045ea:	e004      	b.n	80045f6 <CheckBWF+0x252>
      *pOut = 0.0f;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80045f4:	bf00      	nop
	BWF1_Verdict_Signal = (BWF1_Mixed_Signal / Result_Signal);
 80045f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80045fa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80045fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]

	arm_sqrt_f32((BWF2_Received_Signal * Match_Signal), &Result_Signal);
 8004606:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800460a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a05 	vstr	s15, [r7, #20]
 8004616:	1d3b      	adds	r3, r7, #4
 8004618:	613b      	str	r3, [r7, #16]
    if (in >= 0.0f)
 800461a:	edd7 7a05 	vldr	s15, [r7, #20]
 800461e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	db09      	blt.n	800463c <CheckBWF+0x298>
      *pOut = __builtin_sqrtf(in);
 8004628:	ed97 0a05 	vldr	s0, [r7, #20]
 800462c:	f00f fc4a 	bl	8013ec4 <sqrtf>
 8004630:	eef0 7a40 	vmov.f32	s15, s0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800463a:	e004      	b.n	8004646 <CheckBWF+0x2a2>
      *pOut = 0.0f;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004644:	bf00      	nop
	BWF2_Verdict_Signal = (BWF2_Mixed_Signal / Result_Signal);
 8004646:	ed97 7a01 	vldr	s14, [r7, #4]
 800464a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800464e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004652:	edc7 7a06 	vstr	s15, [r7, #24]

    if (BWF1_Verdict_Signal >= settings.Signal_Integrity_IN && BWF1_reply == 0) {
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <CheckBWF+0x320>)
 8004658:	edd3 7a08 	vldr	s15, [r3, #32]
 800465c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	db40      	blt.n	80046ec <CheckBWF+0x348>
 800466a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800466e:	2b00      	cmp	r3, #0
 8004670:	d13c      	bne.n	80046ec <CheckBWF+0x348>
    	BWF1_Status = INSIDE;
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <CheckBWF+0x334>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 8004678:	f003 fba0 	bl	8007dbc <HAL_GetTick>
 800467c:	4603      	mov	r3, r0
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <CheckBWF+0x338>)
 8004680:	6013      	str	r3, [r2, #0]
    	BWF1_reply = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    	if (Initial_Start == 0) {
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <CheckBWF+0x33c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10e      	bne.n	80046ae <CheckBWF+0x30a>
    		Start_Threshold++;
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <CheckBWF+0x340>)
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <CheckBWF+0x340>)
 800469a:	801a      	strh	r2, [r3, #0]
    		if (Start_Threshold >= INITIAL_MAX_THRESHOLD) {
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <CheckBWF+0x340>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d902      	bls.n	80046ae <CheckBWF+0x30a>
    			Initial_Start = 1;
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <CheckBWF+0x33c>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
    		}
    	}
    	bwf1_inside++;
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <CheckBWF+0x344>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <CheckBWF+0x344>)
 80046b6:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(1);
 80046b8:	2001      	movs	r0, #1
 80046ba:	f7fd f88f 	bl	80017dc <CalcMagnitude>
 80046be:	e03d      	b.n	800473c <CheckBWF+0x398>
 80046c0:	20001b24 	.word	0x20001b24
 80046c4:	20000ca4 	.word	0x20000ca4
 80046c8:	20000df4 	.word	0x20000df4
 80046cc:	20002564 	.word	0x20002564
 80046d0:	200009b5 	.word	0x200009b5
 80046d4:	20000014 	.word	0x20000014
 80046d8:	2000098c 	.word	0x2000098c
 80046dc:	2000127c 	.word	0x2000127c
 80046e0:	20000952 	.word	0x20000952
 80046e4:	20000954 	.word	0x20000954
 80046e8:	20000958 	.word	0x20000958

    }

    else if (BWF1_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF1_reply == 0) {
 80046ec:	4b48      	ldr	r3, [pc, #288]	; (8004810 <CheckBWF+0x46c>)
 80046ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80046f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80046f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	d81d      	bhi.n	800473c <CheckBWF+0x398>
 8004700:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004704:	2b00      	cmp	r3, #0
 8004706:	d119      	bne.n	800473c <CheckBWF+0x398>
    	BWF1_Status = OUTSIDE;
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <CheckBWF+0x470>)
 800470a:	2202      	movs	r2, #2
 800470c:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 800470e:	f003 fb55 	bl	8007dbc <HAL_GetTick>
 8004712:	4603      	mov	r3, r0
 8004714:	4a40      	ldr	r2, [pc, #256]	; (8004818 <CheckBWF+0x474>)
 8004716:	6013      	str	r3, [r2, #0]
    	BWF1_reply = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    	if (Initial_Start == 0) Start_Threshold = 0;
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <CheckBWF+0x478>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <CheckBWF+0x388>
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <CheckBWF+0x47c>)
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
    	bwf1_outside++;
 800472c:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <CheckBWF+0x480>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a3c      	ldr	r2, [pc, #240]	; (8004824 <CheckBWF+0x480>)
 8004734:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(1);
 8004736:	2001      	movs	r0, #1
 8004738:	f7fd f850 	bl	80017dc <CalcMagnitude>
    }

    if (BWF2_Verdict_Signal >= settings.Signal_Integrity_IN && BWF2_reply == 0) {
 800473c:	4b34      	ldr	r3, [pc, #208]	; (8004810 <CheckBWF+0x46c>)
 800473e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004742:	ed97 7a06 	vldr	s14, [r7, #24]
 8004746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474e:	db2a      	blt.n	80047a6 <CheckBWF+0x402>
 8004750:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d126      	bne.n	80047a6 <CheckBWF+0x402>
    	BWF2_Status = INSIDE;
 8004758:	4b33      	ldr	r3, [pc, #204]	; (8004828 <CheckBWF+0x484>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 800475e:	f003 fb2d 	bl	8007dbc <HAL_GetTick>
 8004762:	4603      	mov	r3, r0
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <CheckBWF+0x474>)
 8004766:	6013      	str	r3, [r2, #0]
    	BWF2_reply = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    	if (Initial_Start == 0) {
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <CheckBWF+0x478>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10e      	bne.n	8004794 <CheckBWF+0x3f0>
    		Start_Threshold++;
 8004776:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <CheckBWF+0x47c>)
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	4b28      	ldr	r3, [pc, #160]	; (8004820 <CheckBWF+0x47c>)
 8004780:	801a      	strh	r2, [r3, #0]
    		if (Start_Threshold >= INITIAL_MAX_THRESHOLD) {
 8004782:	4b27      	ldr	r3, [pc, #156]	; (8004820 <CheckBWF+0x47c>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	f242 720f 	movw	r2, #9999	; 0x270f
 800478a:	4293      	cmp	r3, r2
 800478c:	d902      	bls.n	8004794 <CheckBWF+0x3f0>
    			Initial_Start = 1;
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <CheckBWF+0x478>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
    		}
    	}
    	bwf2_inside++;
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <CheckBWF+0x488>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <CheckBWF+0x488>)
 800479c:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(2);
 800479e:	2002      	movs	r0, #2
 80047a0:	f7fd f81c 	bl	80017dc <CalcMagnitude>
 80047a4:	e027      	b.n	80047f6 <CheckBWF+0x452>

    }
    else if (BWF2_Verdict_Signal <= settings.Signal_Integrity_OUT && BWF2_reply == 0) {
 80047a6:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <CheckBWF+0x46c>)
 80047a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80047ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80047b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b8:	d81d      	bhi.n	80047f6 <CheckBWF+0x452>
 80047ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d119      	bne.n	80047f6 <CheckBWF+0x452>
    	BWF2_Status = OUTSIDE;
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <CheckBWF+0x484>)
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
    	Boundary_Timer = HAL_GetTick();
 80047c8:	f003 faf8 	bl	8007dbc <HAL_GetTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <CheckBWF+0x474>)
 80047d0:	6013      	str	r3, [r2, #0]
    	BWF2_reply = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    	if (Initial_Start == 0) Start_Threshold = 0;
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <CheckBWF+0x478>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <CheckBWF+0x442>
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <CheckBWF+0x47c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
    	bwf2_outside++;
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <CheckBWF+0x48c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a10      	ldr	r2, [pc, #64]	; (8004830 <CheckBWF+0x48c>)
 80047ee:	6013      	str	r3, [r2, #0]
    	CalcMagnitude(2);
 80047f0:	2002      	movs	r0, #2
 80047f2:	f7fc fff3 	bl	80017dc <CalcMagnitude>
	for (uint16_t idx = 0; idx < 96; idx++) {
 80047f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047f8:	3301      	adds	r3, #1
 80047fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047fe:	2b5f      	cmp	r3, #95	; 0x5f
 8004800:	f67f ae4d 	bls.w	800449e <CheckBWF+0xfa>
    }
	}
}
 8004804:	e000      	b.n	8004808 <CheckBWF+0x464>
        	break;
 8004806:	bf00      	nop
}
 8004808:	bf00      	nop
 800480a:	3748      	adds	r7, #72	; 0x48
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000ca4 	.word	0x20000ca4
 8004814:	2000098c 	.word	0x2000098c
 8004818:	2000127c 	.word	0x2000127c
 800481c:	20000952 	.word	0x20000952
 8004820:	20000954 	.word	0x20000954
 8004824:	20000964 	.word	0x20000964
 8004828:	2000098d 	.word	0x2000098d
 800482c:	2000095c 	.word	0x2000095c
 8004830:	20000968 	.word	0x20000968

08004834 <ADC_Send>:

void ADC_Send(uint8_t Channel) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]

	// Send ADC data

	unsigned char ADSwrite[6];

	ADSwrite[0] = 0x01;
 800483e:	2301      	movs	r3, #1
 8004840:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = Channel;
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83;
 8004846:	2383      	movs	r3, #131	; 0x83
 8004848:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 800484a:	f107 0208 	add.w	r2, r7, #8
 800484e:	2364      	movs	r3, #100	; 0x64
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2303      	movs	r3, #3
 8004854:	2190      	movs	r1, #144	; 0x90
 8004856:	4809      	ldr	r0, [pc, #36]	; (800487c <ADC_Send+0x48>)
 8004858:	f005 f98e 	bl	8009b78 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 800485c:	2300      	movs	r3, #0
 800485e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 1, 100);
 8004860:	f107 0208 	add.w	r2, r7, #8
 8004864:	2364      	movs	r3, #100	; 0x64
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2301      	movs	r3, #1
 800486a:	2190      	movs	r1, #144	; 0x90
 800486c:	4803      	ldr	r0, [pc, #12]	; (800487c <ADC_Send+0x48>)
 800486e:	f005 f983 	bl	8009b78 <HAL_I2C_Master_Transmit>

}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000d3c 	.word	0x20000d3c

08004880 <ADC_Receive>:

int ADC_Receive() {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
	// Receive ADC data

	unsigned char ADSwrite[6];
	int reading;

	HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8004886:	1d3a      	adds	r2, r7, #4
 8004888:	2364      	movs	r3, #100	; 0x64
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2302      	movs	r3, #2
 800488e:	2190      	movs	r1, #144	; 0x90
 8004890:	480a      	ldr	r0, [pc, #40]	; (80048bc <ADC_Receive+0x3c>)
 8004892:	f005 fa6f 	bl	8009d74 <HAL_I2C_Master_Receive>

	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8004896:	793b      	ldrb	r3, [r7, #4]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	797a      	ldrb	r2, [r7, #5]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

	if(reading < 0 || reading > 32768) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db03      	blt.n	80048ae <ADC_Receive+0x2e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	dd01      	ble.n	80048b2 <ADC_Receive+0x32>
		reading = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
	}

	return reading;
 80048b2:	68fb      	ldr	r3, [r7, #12]

}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000d3c 	.word	0x20000d3c

080048c0 <UpdateMotorSpeed>:

void UpdateMotorSpeed() {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
	 * A simple motor speed controller, for each degree off, we simply decrease the speed with 120.
	 * TODO - a proper PID controller
	 */

	int16_t diff;
	int8_t dir = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	737b      	strb	r3, [r7, #13]

	// Calculate the difference in bearing, 0-360 accounted for. (Circular heading)
	diff = (((((int)mpu.heading - (int)mpu.hold_heading) % 360) + 540 ) % 360) - 180;
 80048ca:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <UpdateMotorSpeed+0x18c>)
 80048cc:	edd3 7a00 	vldr	s15, [r3]
 80048d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048d4:	ee17 2a90 	vmov	r2, s15
 80048d8:	4b5c      	ldr	r3, [pc, #368]	; (8004a4c <UpdateMotorSpeed+0x18c>)
 80048da:	edd3 7a04 	vldr	s15, [r3, #16]
 80048de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	4a59      	ldr	r2, [pc, #356]	; (8004a50 <UpdateMotorSpeed+0x190>)
 80048ea:	fb82 1203 	smull	r1, r2, r2, r3
 80048ee:	441a      	add	r2, r3
 80048f0:	1211      	asrs	r1, r2, #8
 80048f2:	17da      	asrs	r2, r3, #31
 80048f4:	1a8a      	subs	r2, r1, r2
 80048f6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80048fa:	fb01 f202 	mul.w	r2, r1, r2
 80048fe:	1a9a      	subs	r2, r3, r2
 8004900:	f502 7307 	add.w	r3, r2, #540	; 0x21c
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <UpdateMotorSpeed+0x190>)
 8004906:	fb82 1203 	smull	r1, r2, r2, r3
 800490a:	441a      	add	r2, r3
 800490c:	1211      	asrs	r1, r2, #8
 800490e:	17da      	asrs	r2, r3, #31
 8004910:	1a8a      	subs	r2, r1, r2
 8004912:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004916:	fb01 f202 	mul.w	r2, r1, r2
 800491a:	1a9a      	subs	r2, r3, r2
 800491c:	b293      	uxth	r3, r2
 800491e:	3bb4      	subs	r3, #180	; 0xb4
 8004920:	b29b      	uxth	r3, r3
 8004922:	81fb      	strh	r3, [r7, #14]
	diff *= 120.0;
 8004924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fb fe0b 	bl	8000544 <__aeabi_i2d>
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <UpdateMotorSpeed+0x194>)
 8004934:	f7fb fe70 	bl	8000618 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f7fc f91a 	bl	8000b78 <__aeabi_d2iz>
 8004944:	4603      	mov	r3, r0
 8004946:	81fb      	strh	r3, [r7, #14]

	if (diff < 0) dir = -1;
 8004948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800494c:	2b00      	cmp	r3, #0
 800494e:	da02      	bge.n	8004956 <UpdateMotorSpeed+0x96>
 8004950:	23ff      	movs	r3, #255	; 0xff
 8004952:	737b      	strb	r3, [r7, #13]
 8004954:	e00c      	b.n	8004970 <UpdateMotorSpeed+0xb0>
	else if (diff > 0) dir = 1;
 8004956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800495a:	2b00      	cmp	r3, #0
 800495c:	dd02      	ble.n	8004964 <UpdateMotorSpeed+0xa4>
 800495e:	2301      	movs	r3, #1
 8004960:	737b      	strb	r3, [r7, #13]
 8004962:	e005      	b.n	8004970 <UpdateMotorSpeed+0xb0>
	else if (diff == 0) dir = 0;
 8004964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <UpdateMotorSpeed+0xb0>
 800496c:	2300      	movs	r3, #0
 800496e:	737b      	strb	r3, [r7, #13]

		// Do not change speed more than 1000
	if (diff > 1000) diff = 1000;
 8004970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	dd02      	ble.n	8004980 <UpdateMotorSpeed+0xc0>
 800497a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800497e:	81fb      	strh	r3, [r7, #14]
	if (diff < -1000) diff = -1000;
 8004980:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004984:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8004988:	da02      	bge.n	8004990 <UpdateMotorSpeed+0xd0>
 800498a:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800498e:	81fb      	strh	r3, [r7, #14]

	uint16_t Speed;
	if (mag_near_bwf == 1) {
 8004990:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <UpdateMotorSpeed+0x198>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d11f      	bne.n	80049d8 <UpdateMotorSpeed+0x118>
		Speed = settings.motorMaxSpeed;
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <UpdateMotorSpeed+0x19c>)
 800499a:	8a1b      	ldrh	r3, [r3, #16]
 800499c:	817b      	strh	r3, [r7, #10]
		Speed = round(Speed * settings.proximitySpeed);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <UpdateMotorSpeed+0x19c>)
 80049aa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	ee17 0a90 	vmov	r0, s15
 80049b6:	f7fb fdd7 	bl	8000568 <__aeabi_f2d>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	ec43 2b10 	vmov	d0, r2, r3
 80049c2:	f00f fa37 	bl	8013e34 <round>
 80049c6:	ec53 2b10 	vmov	r2, r3, d0
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7fc f8fb 	bl	8000bc8 <__aeabi_d2uiz>
 80049d2:	4603      	mov	r3, r0
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	e002      	b.n	80049de <UpdateMotorSpeed+0x11e>
	}

	else Speed = settings.motorMaxSpeed;
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <UpdateMotorSpeed+0x19c>)
 80049da:	8a1b      	ldrh	r3, [r3, #16]
 80049dc:	817b      	strh	r3, [r7, #10]

		// Target is on the Left side
		if (dir > 0) {
 80049de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dd0f      	ble.n	8004a06 <UpdateMotorSpeed+0x146>
			int CorrectedSpeed = Speed - abs(diff);
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	bfb8      	it	lt
 80049f0:	4252      	neglt	r2, r2
 80049f2:	b292      	uxth	r2, r2
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	603b      	str	r3, [r7, #0]
			TIM4->CCR2 = CorrectedSpeed;
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = Speed;
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 8004a00:	897b      	ldrh	r3, [r7, #10]
 8004a02:	63d3      	str	r3, [r2, #60]	; 0x3c
		else if (dir == 0) {
			TIM4->CCR2 = Speed;
			TIM4->CCR3 = Speed;
		}

}
 8004a04:	e01d      	b.n	8004a42 <UpdateMotorSpeed+0x182>
		else if (dir < 0){
 8004a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da0f      	bge.n	8004a2e <UpdateMotorSpeed+0x16e>
			int CorrectedSpeed = Speed - abs(diff);
 8004a0e:	897b      	ldrh	r3, [r7, #10]
 8004a10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	bfb8      	it	lt
 8004a18:	4252      	neglt	r2, r2
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	607b      	str	r3, [r7, #4]
			TIM4->CCR2 = Speed;
 8004a20:	4a0f      	ldr	r2, [pc, #60]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = CorrectedSpeed;
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004a2c:	e009      	b.n	8004a42 <UpdateMotorSpeed+0x182>
		else if (dir == 0) {
 8004a2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <UpdateMotorSpeed+0x182>
			TIM4->CCR2 = Speed;
 8004a36:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 8004a38:	897b      	ldrh	r3, [r7, #10]
 8004a3a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM4->CCR3 = Speed;
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <UpdateMotorSpeed+0x1a0>)
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200023cc 	.word	0x200023cc
 8004a50:	b60b60b7 	.word	0xb60b60b7
 8004a54:	405e0000 	.word	0x405e0000
 8004a58:	200009be 	.word	0x200009be
 8004a5c:	20000ca4 	.word	0x20000ca4
 8004a60:	40000800 	.word	0x40000800

08004a64 <MotorForward>:

void MotorForward(uint16_t minSpeed, uint16_t maxSpeed) {
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	4613      	mov	r3, r2
 8004a72:	80bb      	strh	r3, [r7, #4]

	State = FORWARD;
 8004a74:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <MotorForward+0x140>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]

	MPU6050_Read_Accel();		// Get fresh data for Pitch/Roll
 8004a7a:	f001 fde1 	bl	8006640 <MPU6050_Read_Accel>
	ProcessIMUData();			// Compute Pitch/Roll
 8004a7e:	f001 fcdb 	bl	8006438 <ProcessIMUData>
	move_timer = HAL_GetTick();
 8004a82:	f003 f99b 	bl	8007dbc <HAL_GetTick>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <MotorForward+0x144>)
 8004a8a:	6013      	str	r3, [r2, #0]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	81fb      	strh	r3, [r7, #14]
 8004a90:	e07c      	b.n	8004b8c <MotorForward+0x128>

	  currentSpeed += 3;
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	3303      	adds	r3, #3
 8004a96:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8004a98:	89fa      	ldrh	r2, [r7, #14]
 8004a9a:	88bb      	ldrh	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d27b      	bcs.n	8004b98 <MotorForward+0x134>
		  break;
	  }

	  uint16_t leftTilt = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	81bb      	strh	r3, [r7, #12]
	  uint16_t rightTilt = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	817b      	strh	r3, [r7, #10]

	  if (mpu.roll < 0) {
 8004aa8:	4b40      	ldr	r3, [pc, #256]	; (8004bac <MotorForward+0x148>)
 8004aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	d50d      	bpl.n	8004ad4 <MotorForward+0x70>
		  leftTilt = fabs(mpu.roll * 50);
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <MotorForward+0x148>)
 8004aba:	edd3 7a02 	vldr	s15, [r3, #8]
 8004abe:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004bb0 <MotorForward+0x14c>
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8004aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ace:	ee17 3a90 	vmov	r3, s15
 8004ad2:	81bb      	strh	r3, [r7, #12]
	  }
	  if (mpu.roll > 0) {
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <MotorForward+0x148>)
 8004ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	dd0d      	ble.n	8004b00 <MotorForward+0x9c>
		  rightTilt = fabs(mpu.roll * 50);
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <MotorForward+0x148>)
 8004ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004bb0 <MotorForward+0x14c>
 8004aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af2:	eef0 7ae7 	vabs.f32	s15, s15
 8004af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afa:	ee17 3a90 	vmov	r3, s15
 8004afe:	817b      	strh	r3, [r7, #10]
	  }

	  TIM4->CCR1 = 0;
 8004b00:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <MotorForward+0x150>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM4->CCR2 = currentSpeed - round(leftTilt);
 8004b06:	89fb      	ldrh	r3, [r7, #14]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fd1b 	bl	8000544 <__aeabi_i2d>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460d      	mov	r5, r1
 8004b12:	89bb      	ldrh	r3, [r7, #12]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fd05 	bl	8000524 <__aeabi_ui2d>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb fbc1 	bl	80002a8 <__aeabi_dsub>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4c22      	ldr	r4, [pc, #136]	; (8004bb4 <MotorForward+0x150>)
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f7fc f84a 	bl	8000bc8 <__aeabi_d2uiz>
 8004b34:	4603      	mov	r3, r0
 8004b36:	63a3      	str	r3, [r4, #56]	; 0x38

	  TIM4->CCR3 = currentSpeed - round(rightTilt);
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fd02 	bl	8000544 <__aeabi_i2d>
 8004b40:	4604      	mov	r4, r0
 8004b42:	460d      	mov	r5, r1
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fb fcec 	bl	8000524 <__aeabi_ui2d>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4620      	mov	r0, r4
 8004b52:	4629      	mov	r1, r5
 8004b54:	f7fb fba8 	bl	80002a8 <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4c15      	ldr	r4, [pc, #84]	; (8004bb4 <MotorForward+0x150>)
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fc f831 	bl	8000bc8 <__aeabi_d2uiz>
 8004b66:	4603      	mov	r3, r0
 8004b68:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM4->CCR4 = 0;
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <MotorForward+0x150>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

	  HAL_Delay(1);
 8004b70:	2001      	movs	r0, #1
 8004b72:	f003 f92f 	bl	8007dd4 <HAL_Delay>

	  if (CheckSecurity() == SECURITY_FAIL) {
 8004b76:	f7ff f989 	bl	8003e8c <CheckSecurity>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <MotorForward+0x122>
		  MotorStop();
 8004b80:	f000 f9b2 	bl	8004ee8 <MotorStop>
		  break;
 8004b84:	e009      	b.n	8004b9a <MotorForward+0x136>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004b86:	89fb      	ldrh	r3, [r7, #14]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	81fb      	strh	r3, [r7, #14]
 8004b8c:	89fa      	ldrh	r2, [r7, #14]
 8004b8e:	88bb      	ldrh	r3, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f4ff af7e 	bcc.w	8004a92 <MotorForward+0x2e>
	  }

 }
}
 8004b96:	e000      	b.n	8004b9a <MotorForward+0x136>
		  break;
 8004b98:	bf00      	nop
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	2000098f 	.word	0x2000098f
 8004ba8:	200009c4 	.word	0x200009c4
 8004bac:	200023cc 	.word	0x200023cc
 8004bb0:	42480000 	.word	0x42480000
 8004bb4:	40000800 	.word	0x40000800

08004bb8 <MotorBackward>:
void MotorBackward(uint16_t minSpeed, uint16_t maxSpeed, uint16_t time_ms) {
 8004bb8:	b5b0      	push	{r4, r5, r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	80bb      	strh	r3, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	807b      	strh	r3, [r7, #2]

	uint32_t motor_timer;
	State = BACKWARD;
 8004bca:	4b6f      	ldr	r3, [pc, #444]	; (8004d88 <MotorBackward+0x1d0>)
 8004bcc:	2202      	movs	r2, #2
 8004bce:	701a      	strb	r2, [r3, #0]
	motor_timer = HAL_GetTick();
 8004bd0:	f003 f8f4 	bl	8007dbc <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]
	MPU6050_Read_Accel();		// Get fresh data for Pitch/Roll
 8004bd6:	f001 fd33 	bl	8006640 <MPU6050_Read_Accel>
	ProcessIMUData();			// Compute Pitch/Roll
 8004bda:	f001 fc2d 	bl	8006438 <ProcessIMUData>

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	82fb      	strh	r3, [r7, #22]
 8004be2:	e09b      	b.n	8004d1c <MotorBackward+0x164>

	  currentSpeed += 3;
 8004be4:	8afb      	ldrh	r3, [r7, #22]
 8004be6:	3303      	adds	r3, #3
 8004be8:	82fb      	strh	r3, [r7, #22]
	  if (currentSpeed >= maxSpeed) {
 8004bea:	8afa      	ldrh	r2, [r7, #22]
 8004bec:	88bb      	ldrh	r3, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	f080 809a 	bcs.w	8004d28 <MotorBackward+0x170>
		  break;
	  }

	  uint16_t leftTilt = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	82bb      	strh	r3, [r7, #20]
	  uint16_t rightTilt = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	827b      	strh	r3, [r7, #18]

	  if (mpu.roll < 0) {
 8004bfc:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <MotorBackward+0x1d4>)
 8004bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d50d      	bpl.n	8004c28 <MotorBackward+0x70>
		  leftTilt = fabs(mpu.roll * 50);
 8004c0c:	4b5f      	ldr	r3, [pc, #380]	; (8004d8c <MotorBackward+0x1d4>)
 8004c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c12:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004d90 <MotorBackward+0x1d8>
 8004c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8004c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c22:	ee17 3a90 	vmov	r3, s15
 8004c26:	82bb      	strh	r3, [r7, #20]
	  }
	  if (mpu.roll > 0) {
 8004c28:	4b58      	ldr	r3, [pc, #352]	; (8004d8c <MotorBackward+0x1d4>)
 8004c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	dd0d      	ble.n	8004c54 <MotorBackward+0x9c>
		  rightTilt = fabs(mpu.roll * 50);
 8004c38:	4b54      	ldr	r3, [pc, #336]	; (8004d8c <MotorBackward+0x1d4>)
 8004c3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c3e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004d90 <MotorBackward+0x1d8>
 8004c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c46:	eef0 7ae7 	vabs.f32	s15, s15
 8004c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4e:	ee17 3a90 	vmov	r3, s15
 8004c52:	827b      	strh	r3, [r7, #18]
	  }

	  TIM4->CCR1 = currentSpeed - round(rightTilt);
 8004c54:	8afb      	ldrh	r3, [r7, #22]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb fc74 	bl	8000544 <__aeabi_i2d>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	8a7b      	ldrh	r3, [r7, #18]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fc5e 	bl	8000524 <__aeabi_ui2d>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fb1a 	bl	80002a8 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4c46      	ldr	r4, [pc, #280]	; (8004d94 <MotorBackward+0x1dc>)
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f7fb ffa3 	bl	8000bc8 <__aeabi_d2uiz>
 8004c82:	4603      	mov	r3, r0
 8004c84:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM4->CCR2 = 0;
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <MotorBackward+0x1dc>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM4->CCR3 = 0;
 8004c8c:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <MotorBackward+0x1dc>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4->CCR4 = currentSpeed - round(leftTilt);
 8004c92:	8afb      	ldrh	r3, [r7, #22]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fb fc55 	bl	8000544 <__aeabi_i2d>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	8abb      	ldrh	r3, [r7, #20]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fb fc3f 	bl	8000524 <__aeabi_ui2d>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4620      	mov	r0, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	f7fb fafb 	bl	80002a8 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4c37      	ldr	r4, [pc, #220]	; (8004d94 <MotorBackward+0x1dc>)
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f7fb ff84 	bl	8000bc8 <__aeabi_d2uiz>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	6423      	str	r3, [r4, #64]	; 0x40

	  HAL_Delay(1);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f003 f885 	bl	8007dd4 <HAL_Delay>

	  if (CheckSecurity() == SECURITY_BACKWARD_OUTSIDE) {
 8004cca:	f7ff f8df 	bl	8003e8c <CheckSecurity>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	d118      	bne.n	8004d06 <MotorBackward+0x14e>
		  MotorHardBrake();
 8004cd4:	f000 f9a2 	bl	800501c <MotorHardBrake>
		  HAL_Delay(1000);
 8004cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cdc:	f003 f87a 	bl	8007dd4 <HAL_Delay>
		  MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <MotorBackward+0x1e0>)
 8004ce2:	8a5b      	ldrh	r3, [r3, #18]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <MotorBackward+0x1e0>)
 8004ce6:	8a12      	ldrh	r2, [r2, #16]
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff feba 	bl	8004a64 <MotorForward>
		  HAL_Delay(500);
 8004cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cf4:	f003 f86e 	bl	8007dd4 <HAL_Delay>
		  MotorStop();
 8004cf8:	f000 f8f6 	bl	8004ee8 <MotorStop>
		  HAL_Delay(500);
 8004cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d00:	f003 f868 	bl	8007dd4 <HAL_Delay>
		  return;
 8004d04:	e03c      	b.n	8004d80 <MotorBackward+0x1c8>
	  }

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 8004d06:	f003 f859 	bl	8007dbc <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20a      	bcs.n	8004d2c <MotorBackward+0x174>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004d16:	8afb      	ldrh	r3, [r7, #22]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	82fb      	strh	r3, [r7, #22]
 8004d1c:	8afa      	ldrh	r2, [r7, #22]
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	f4ff af5f 	bcc.w	8004be4 <MotorBackward+0x2c>
 8004d26:	e021      	b.n	8004d6c <MotorBackward+0x1b4>
		  break;
 8004d28:	bf00      	nop
 8004d2a:	e01f      	b.n	8004d6c <MotorBackward+0x1b4>
		  break;
 8004d2c:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 8004d2e:	e01d      	b.n	8004d6c <MotorBackward+0x1b4>
	if (CheckSecurity() == SECURITY_BACKWARD_OUTSIDE) {
 8004d30:	f7ff f8ac 	bl	8003e8c <CheckSecurity>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b09      	cmp	r3, #9
 8004d38:	d118      	bne.n	8004d6c <MotorBackward+0x1b4>
		MotorHardBrake();
 8004d3a:	f000 f96f 	bl	800501c <MotorHardBrake>
		HAL_Delay(1000);
 8004d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d42:	f003 f847 	bl	8007dd4 <HAL_Delay>
		MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <MotorBackward+0x1e0>)
 8004d48:	8a5b      	ldrh	r3, [r3, #18]
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <MotorBackward+0x1e0>)
 8004d4c:	8a12      	ldrh	r2, [r2, #16]
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fe87 	bl	8004a64 <MotorForward>
		HAL_Delay(500);
 8004d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d5a:	f003 f83b 	bl	8007dd4 <HAL_Delay>
		MotorStop();
 8004d5e:	f000 f8c3 	bl	8004ee8 <MotorStop>
		HAL_Delay(500);
 8004d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d66:	f003 f835 	bl	8007dd4 <HAL_Delay>
		return;
 8004d6a:	e009      	b.n	8004d80 <MotorBackward+0x1c8>
while (HAL_GetTick() - motor_timer < time_ms) {
 8004d6c:	f003 f826 	bl	8007dbc <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d3d9      	bcc.n	8004d30 <MotorBackward+0x178>
	}
}
	MotorStop();
 8004d7c:	f000 f8b4 	bl	8004ee8 <MotorStop>
}
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000098f 	.word	0x2000098f
 8004d8c:	200023cc 	.word	0x200023cc
 8004d90:	42480000 	.word	0x42480000
 8004d94:	40000800 	.word	0x40000800
 8004d98:	20000ca4 	.word	0x20000ca4

08004d9c <MotorRight>:
void MotorRight(uint16_t minSpeed, uint16_t maxSpeed, uint16_t time_ms) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
 8004da6:	460b      	mov	r3, r1
 8004da8:	80bb      	strh	r3, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	807b      	strh	r3, [r7, #2]

	State = RIGHT;
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <MotorRight+0x9c>)
 8004db0:	2204      	movs	r2, #4
 8004db2:	701a      	strb	r2, [r3, #0]
	uint32_t motor_timer;
	motor_timer = HAL_GetTick();
 8004db4:	f003 f802 	bl	8007dbc <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	81fb      	strh	r3, [r7, #14]
 8004dbe:	e022      	b.n	8004e06 <MotorRight+0x6a>

	  currentSpeed += 3;
 8004dc0:	89fb      	ldrh	r3, [r7, #14]
 8004dc2:	3303      	adds	r3, #3
 8004dc4:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8004dc6:	89fa      	ldrh	r2, [r7, #14]
 8004dc8:	88bb      	ldrh	r3, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d220      	bcs.n	8004e10 <MotorRight+0x74>
		  break;
	  }
	  TIM4->CCR1 = 0;
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <MotorRight+0xa0>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM4->CCR2 = currentSpeed;
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <MotorRight+0xa0>)
 8004dd6:	89fb      	ldrh	r3, [r7, #14]
 8004dd8:	6393      	str	r3, [r2, #56]	; 0x38

	  TIM4->CCR3 = 0;
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <MotorRight+0xa0>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4->CCR4 = currentSpeed;
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <MotorRight+0xa0>)
 8004de2:	89fb      	ldrh	r3, [r7, #14]
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40

	  HAL_Delay(1);
 8004de6:	2001      	movs	r0, #1
 8004de8:	f002 fff4 	bl	8007dd4 <HAL_Delay>

	  CheckSecurity();
 8004dec:	f7ff f84e 	bl	8003e8c <CheckSecurity>

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 8004df0:	f002 ffe4 	bl	8007dbc <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	887b      	ldrh	r3, [r7, #2]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d209      	bcs.n	8004e14 <MotorRight+0x78>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	3301      	adds	r3, #1
 8004e04:	81fb      	strh	r3, [r7, #14]
 8004e06:	89fa      	ldrh	r2, [r7, #14]
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3d8      	bcc.n	8004dc0 <MotorRight+0x24>
 8004e0e:	e005      	b.n	8004e1c <MotorRight+0x80>
		  break;
 8004e10:	bf00      	nop
 8004e12:	e003      	b.n	8004e1c <MotorRight+0x80>
		  break;
 8004e14:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 8004e16:	e001      	b.n	8004e1c <MotorRight+0x80>
	CheckSecurity();
 8004e18:	f7ff f838 	bl	8003e8c <CheckSecurity>
while (HAL_GetTick() - motor_timer < time_ms) {
 8004e1c:	f002 ffce 	bl	8007dbc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad2      	subs	r2, r2, r3
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3f5      	bcc.n	8004e18 <MotorRight+0x7c>
}
	MotorStop();
 8004e2c:	f000 f85c 	bl	8004ee8 <MotorStop>
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000098f 	.word	0x2000098f
 8004e3c:	40000800 	.word	0x40000800

08004e40 <MotorLeft>:
void MotorLeft(uint16_t minSpeed, uint16_t maxSpeed, uint16_t time_ms) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	80fb      	strh	r3, [r7, #6]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	80bb      	strh	r3, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	807b      	strh	r3, [r7, #2]

	State = LEFT;
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <MotorLeft+0x9c>)
 8004e54:	2203      	movs	r2, #3
 8004e56:	701a      	strb	r2, [r3, #0]
	uint32_t motor_timer;
	motor_timer = HAL_GetTick();
 8004e58:	f002 ffb0 	bl	8007dbc <HAL_GetTick>
 8004e5c:	60b8      	str	r0, [r7, #8]

for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	81fb      	strh	r3, [r7, #14]
 8004e62:	e022      	b.n	8004eaa <MotorLeft+0x6a>

	  currentSpeed += 3;
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	3303      	adds	r3, #3
 8004e68:	81fb      	strh	r3, [r7, #14]
	  if (currentSpeed >= maxSpeed) {
 8004e6a:	89fa      	ldrh	r2, [r7, #14]
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d220      	bcs.n	8004eb4 <MotorLeft+0x74>
		  break;
	  }
	  TIM4->CCR1 = currentSpeed;
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <MotorLeft+0xa0>)
 8004e74:	89fb      	ldrh	r3, [r7, #14]
 8004e76:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM4->CCR2 = 0;
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <MotorLeft+0xa0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

	  TIM4->CCR3 = currentSpeed;
 8004e7e:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <MotorLeft+0xa0>)
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	63d3      	str	r3, [r2, #60]	; 0x3c
	  TIM4->CCR4 = 0;
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <MotorLeft+0xa0>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40

	  HAL_Delay(1);
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	f002 ffa2 	bl	8007dd4 <HAL_Delay>

	  CheckSecurity();
 8004e90:	f7fe fffc 	bl	8003e8c <CheckSecurity>

	  if (HAL_GetTick() - motor_timer >= time_ms) {
 8004e94:	f002 ff92 	bl	8007dbc <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad2      	subs	r2, r2, r3
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d209      	bcs.n	8004eb8 <MotorLeft+0x78>
for (uint16_t currentSpeed = minSpeed; currentSpeed < maxSpeed; currentSpeed++) {
 8004ea4:	89fb      	ldrh	r3, [r7, #14]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	81fb      	strh	r3, [r7, #14]
 8004eaa:	89fa      	ldrh	r2, [r7, #14]
 8004eac:	88bb      	ldrh	r3, [r7, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d3d8      	bcc.n	8004e64 <MotorLeft+0x24>
 8004eb2:	e005      	b.n	8004ec0 <MotorLeft+0x80>
		  break;
 8004eb4:	bf00      	nop
 8004eb6:	e003      	b.n	8004ec0 <MotorLeft+0x80>
		  break;
 8004eb8:	bf00      	nop
	  }
 }
while (HAL_GetTick() - motor_timer < time_ms) {
 8004eba:	e001      	b.n	8004ec0 <MotorLeft+0x80>
	CheckSecurity();
 8004ebc:	f7fe ffe6 	bl	8003e8c <CheckSecurity>
while (HAL_GetTick() - motor_timer < time_ms) {
 8004ec0:	f002 ff7c 	bl	8007dbc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad2      	subs	r2, r2, r3
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3f5      	bcc.n	8004ebc <MotorLeft+0x7c>
}
	MotorStop();
 8004ed0:	f000 f80a 	bl	8004ee8 <MotorStop>
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2000098f 	.word	0x2000098f
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	00000000 	.word	0x00000000

08004ee8 <MotorStop>:
void MotorStop(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0

	LastState = State;
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <MotorStop+0xe8>)
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <MotorStop+0xec>)
 8004ef4:	701a      	strb	r2, [r3, #0]
	State = STOP;
 8004ef6:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <MotorStop+0xe8>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
	int speed = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	603b      	str	r3, [r7, #0]

	speed = (TIM4->CCR1 + TIM4->CCR2 + TIM4->CCR3 + TIM4->CCR4) / 2;
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <MotorStop+0xf0>)
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	4b34      	ldr	r3, [pc, #208]	; (8004fd8 <MotorStop+0xf0>)
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	441a      	add	r2, r3
 8004f0a:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <MotorStop+0xf0>)
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	441a      	add	r2, r3
 8004f10:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <MotorStop+0xf0>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4413      	add	r3, r2
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	603b      	str	r3, [r7, #0]
	speed *= 0.90;
 8004f1a:	6838      	ldr	r0, [r7, #0]
 8004f1c:	f7fb fb12 	bl	8000544 <__aeabi_i2d>
 8004f20:	a329      	add	r3, pc, #164	; (adr r3, 8004fc8 <MotorStop+0xe0>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fb77 	bl	8000618 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	f7fb fe21 	bl	8000b78 <__aeabi_d2iz>
 8004f36:	4603      	mov	r3, r0
 8004f38:	603b      	str	r3, [r7, #0]

	if (speed == 0) return;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03e      	beq.n	8004fbe <MotorStop+0xd6>

	for (int x = speed; x > 1000; x--) {
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e028      	b.n	8004f98 <MotorStop+0xb0>

		x -= 4;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	607b      	str	r3, [r7, #4]

		if (x < 1000) break;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f52:	db26      	blt.n	8004fa2 <MotorStop+0xba>

		if (TIM4->CCR1 != 0) TIM4->CCR1 = x;
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <MotorStop+0xf0>)
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <MotorStop+0x7a>
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <MotorStop+0xf0>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6353      	str	r3, [r2, #52]	; 0x34
		if (TIM4->CCR2 != 0) TIM4->CCR2 = x;
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <MotorStop+0xf0>)
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <MotorStop+0x88>
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <MotorStop+0xf0>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6393      	str	r3, [r2, #56]	; 0x38
		if (TIM4->CCR3 != 0) TIM4->CCR3 = x;
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <MotorStop+0xf0>)
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <MotorStop+0x96>
 8004f78:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <MotorStop+0xf0>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (TIM4->CCR4 != 0) TIM4->CCR4 = x;
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <MotorStop+0xf0>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <MotorStop+0xa4>
 8004f86:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <MotorStop+0xf0>)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40

		HAL_Delay(1);
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f002 ff21 	bl	8007dd4 <HAL_Delay>
	for (int x = speed; x > 1000; x--) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f9e:	dcd2      	bgt.n	8004f46 <MotorStop+0x5e>
 8004fa0:	e000      	b.n	8004fa4 <MotorStop+0xbc>
		if (x < 1000) break;
 8004fa2:	bf00      	nop
	}

	TIM4->CCR1 = 0;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <MotorStop+0xf0>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = 0;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <MotorStop+0xf0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = 0;
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <MotorStop+0xf0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <MotorStop+0xf0>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	641a      	str	r2, [r3, #64]	; 0x40
 8004fbc:	e000      	b.n	8004fc0 <MotorStop+0xd8>
	if (speed == 0) return;
 8004fbe:	bf00      	nop

}
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	3feccccc 	.word	0x3feccccc
 8004fd0:	2000098f 	.word	0x2000098f
 8004fd4:	20000990 	.word	0x20000990
 8004fd8:	40000800 	.word	0x40000800

08004fdc <MotorBrake>:

void MotorBrake(void) {
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0

	LastState = State;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <MotorBrake+0x34>)
 8004fe2:	781a      	ldrb	r2, [r3, #0]
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <MotorBrake+0x38>)
 8004fe6:	701a      	strb	r2, [r3, #0]
	State = BRAKE;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <MotorBrake+0x34>)
 8004fea:	2207      	movs	r2, #7
 8004fec:	701a      	strb	r2, [r3, #0]

	// Brake - free wheeling
	TIM4->CCR1 = 0;
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <MotorBrake+0x3c>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = 0;
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <MotorBrake+0x3c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = 0;
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <MotorBrake+0x3c>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 0;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <MotorBrake+0x3c>)
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	; 0x40

}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	2000098f 	.word	0x2000098f
 8005014:	20000990 	.word	0x20000990
 8005018:	40000800 	.word	0x40000800

0800501c <MotorHardBrake>:
void MotorHardBrake(void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0

	LastState = State;
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <MotorHardBrake+0x40>)
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <MotorHardBrake+0x44>)
 8005026:	701a      	strb	r2, [r3, #0]

	State = HARDBRAKE;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <MotorHardBrake+0x40>)
 800502a:	2208      	movs	r2, #8
 800502c:	701a      	strb	r2, [r3, #0]

	// Wheels will do a hard brake when both pins go HIGH.
	TIM4->CCR1 = settings.motorMaxSpeed;
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <MotorHardBrake+0x48>)
 8005030:	8a1a      	ldrh	r2, [r3, #16]
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <MotorHardBrake+0x4c>)
 8005034:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = settings.motorMaxSpeed;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <MotorHardBrake+0x48>)
 8005038:	8a1a      	ldrh	r2, [r3, #16]
 800503a:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <MotorHardBrake+0x4c>)
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = settings.motorMaxSpeed;
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <MotorHardBrake+0x48>)
 8005040:	8a1a      	ldrh	r2, [r3, #16]
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <MotorHardBrake+0x4c>)
 8005044:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = settings.motorMaxSpeed;
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <MotorHardBrake+0x48>)
 8005048:	8a1a      	ldrh	r2, [r3, #16]
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <MotorHardBrake+0x4c>)
 800504c:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_Delay(250);
 800504e:	20fa      	movs	r0, #250	; 0xfa
 8005050:	f002 fec0 	bl	8007dd4 <HAL_Delay>

	MotorBrake();	//Release motors
 8005054:	f7ff ffc2 	bl	8004fdc <MotorBrake>

}
 8005058:	bf00      	nop
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000098f 	.word	0x2000098f
 8005060:	20000990 	.word	0x20000990
 8005064:	20000ca4 	.word	0x20000ca4
 8005068:	40000800 	.word	0x40000800
 800506c:	00000000 	.word	0x00000000

08005070 <CheckState>:
void CheckState(void) {
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0

	/* This is our main loop function, this is where all the states are
	 * What state is the mower in? and what to do next.
	 */
	if (Initial_Start == 0) return;
 8005076:	4bac      	ldr	r3, [pc, #688]	; (8005328 <CheckState+0x2b8>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 829e 	beq.w	80055bc <CheckState+0x54c>

	if (MasterSwitch == 0) {
 8005080:	4baa      	ldr	r3, [pc, #680]	; (800532c <CheckState+0x2bc>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <CheckState+0x22>
		cutterOFF();
 8005088:	f7ff f858 	bl	800413c <cutterOFF>
		MotorStop();
 800508c:	f7ff ff2c 	bl	8004ee8 <MotorStop>
		return;
 8005090:	e295      	b.n	80055be <CheckState+0x54e>
	}

	if (Security == NOSIGNAL) {
 8005092:	4ba7      	ldr	r3, [pc, #668]	; (8005330 <CheckState+0x2c0>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <CheckState+0x34>
		MotorStop();
 800509a:	f7ff ff25 	bl	8004ee8 <MotorStop>
		cutterOFF();
 800509e:	f7ff f84d 	bl	800413c <cutterOFF>
		return;
 80050a2:	e28c      	b.n	80055be <CheckState+0x54e>
	}

	if (HAL_GetTick() - OUTSIDE_timer >= (settings.Outside_Threshold * 1000) && Docked == 0) {
 80050a4:	f002 fe8a 	bl	8007dbc <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4ba2      	ldr	r3, [pc, #648]	; (8005334 <CheckState+0x2c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	4aa1      	ldr	r2, [pc, #644]	; (8005338 <CheckState+0x2c8>)
 80050b2:	79d2      	ldrb	r2, [r2, #7]
 80050b4:	4611      	mov	r1, r2
 80050b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ba:	fb02 f201 	mul.w	r2, r2, r1
 80050be:	4293      	cmp	r3, r2
 80050c0:	d30b      	bcc.n	80050da <CheckState+0x6a>
 80050c2:	4b9e      	ldr	r3, [pc, #632]	; (800533c <CheckState+0x2cc>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <CheckState+0x6a>
		Serial_Console("OUTSIDE timer triggered\r\n");
 80050ca:	489d      	ldr	r0, [pc, #628]	; (8005340 <CheckState+0x2d0>)
 80050cc:	f7fe feb6 	bl	8003e3c <Serial_Console>
		MotorStop();
 80050d0:	f7ff ff0a 	bl	8004ee8 <MotorStop>
		cutterOFF();
 80050d4:	f7ff f832 	bl	800413c <cutterOFF>
		return;
 80050d8:	e271      	b.n	80055be <CheckState+0x54e>
	}
	if (Docked == 1) {
 80050da:	4b98      	ldr	r3, [pc, #608]	; (800533c <CheckState+0x2cc>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <CheckState+0x78>
		unDock();
 80050e2:	f7fd fc01 	bl	80028e8 <unDock>
		return;
 80050e6:	e26a      	b.n	80055be <CheckState+0x54e>
		}
	if (bumber_count >= settings.bumber_count_limit) {
 80050e8:	4b93      	ldr	r3, [pc, #588]	; (8005338 <CheckState+0x2c8>)
 80050ea:	7a5a      	ldrb	r2, [r3, #9]
 80050ec:	4b95      	ldr	r3, [pc, #596]	; (8005344 <CheckState+0x2d4>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d808      	bhi.n	8005106 <CheckState+0x96>
		MotorStop();
 80050f4:	f7ff fef8 	bl	8004ee8 <MotorStop>
		MasterSwitch = 0;
 80050f8:	4b8c      	ldr	r3, [pc, #560]	; (800532c <CheckState+0x2bc>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
		Serial_Console("Bumber detection - HALT\r\n");
 80050fe:	4892      	ldr	r0, [pc, #584]	; (8005348 <CheckState+0x2d8>)
 8005100:	f7fe fe9c 	bl	8003e3c <Serial_Console>
		return;
 8005104:	e25b      	b.n	80055be <CheckState+0x54e>
	}

	if (CheckSecurity() == SECURITY_MOVEMENT) {
 8005106:	f7fe fec1 	bl	8003e8c <CheckSecurity>
 800510a:	4603      	mov	r3, r0
 800510c:	2b08      	cmp	r3, #8
 800510e:	d125      	bne.n	800515c <CheckState+0xec>
		MotorStop();
 8005110:	f7ff feea 	bl	8004ee8 <MotorStop>
		if (move_count >= settings.move_count_limit) {
 8005114:	4b88      	ldr	r3, [pc, #544]	; (8005338 <CheckState+0x2c8>)
 8005116:	7a1a      	ldrb	r2, [r3, #8]
 8005118:	4b8c      	ldr	r3, [pc, #560]	; (800534c <CheckState+0x2dc>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d806      	bhi.n	800512e <CheckState+0xbe>
			MasterSwitch = 0;
 8005120:	4b82      	ldr	r3, [pc, #520]	; (800532c <CheckState+0x2bc>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
			Serial_Console("Movement detection - HALT\r\n");
 8005126:	488a      	ldr	r0, [pc, #552]	; (8005350 <CheckState+0x2e0>)
 8005128:	f7fe fe88 	bl	8003e3c <Serial_Console>
			return;
 800512c:	e247      	b.n	80055be <CheckState+0x54e>
		}
		HAL_Delay(500);
 800512e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005132:	f002 fe4f 	bl	8007dd4 <HAL_Delay>
		MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005136:	4b80      	ldr	r3, [pc, #512]	; (8005338 <CheckState+0x2c8>)
 8005138:	8a5b      	ldrh	r3, [r3, #18]
 800513a:	4a7f      	ldr	r2, [pc, #508]	; (8005338 <CheckState+0x2c8>)
 800513c:	8a11      	ldrh	r1, [r2, #16]
 800513e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fd38 	bl	8004bb8 <MotorBackward>
		MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005148:	4b7b      	ldr	r3, [pc, #492]	; (8005338 <CheckState+0x2c8>)
 800514a:	8a5b      	ldrh	r3, [r3, #18]
 800514c:	4a7a      	ldr	r2, [pc, #488]	; (8005338 <CheckState+0x2c8>)
 800514e:	8a11      	ldrh	r1, [r2, #16]
 8005150:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fe73 	bl	8004e40 <MotorLeft>
		return;
 800515a:	e230      	b.n	80055be <CheckState+0x54e>
	}
	if (State == FAIL) {
 800515c:	4b7d      	ldr	r3, [pc, #500]	; (8005354 <CheckState+0x2e4>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b06      	cmp	r3, #6
 8005162:	d110      	bne.n	8005186 <CheckState+0x116>
		MotorStop();
 8005164:	f7ff fec0 	bl	8004ee8 <MotorStop>
		cutterOFF();
 8005168:	f7fe ffe8 	bl	800413c <cutterOFF>
		while (CheckSecurity() != SECURITY_OK) {
 800516c:	e002      	b.n	8005174 <CheckState+0x104>
			Serial_Console("State Fail, waiting...\r\n");
 800516e:	487a      	ldr	r0, [pc, #488]	; (8005358 <CheckState+0x2e8>)
 8005170:	f7fe fe64 	bl	8003e3c <Serial_Console>
		while (CheckSecurity() != SECURITY_OK) {
 8005174:	f7fe fe8a 	bl	8003e8c <CheckSecurity>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d1f7      	bne.n	800516e <CheckState+0xfe>
		}
		State = STOP;
 800517e:	4b75      	ldr	r3, [pc, #468]	; (8005354 <CheckState+0x2e4>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
		return;
 8005184:	e21b      	b.n	80055be <CheckState+0x54e>
	}

	else if (State == FORWARD && CheckSecurity() == SECURITY_FAIL) {
 8005186:	4b73      	ldr	r3, [pc, #460]	; (8005354 <CheckState+0x2e4>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b01      	cmp	r3, #1
 800518c:	f040 8166 	bne.w	800545c <CheckState+0x3ec>
 8005190:	f7fe fe7c 	bl	8003e8c <CheckSecurity>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 8160 	bne.w	800545c <CheckState+0x3ec>
		MotorStop();
 800519c:	f7ff fea4 	bl	8004ee8 <MotorStop>
		move_count = 0;
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <CheckState+0x2dc>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
		bumber_count = 0;
 80051a6:	4b67      	ldr	r3, [pc, #412]	; (8005344 <CheckState+0x2d4>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
		TimeToGoHome();			// Check if within working hours, if not, go home
 80051ac:	f7fc fbfc 	bl	80019a8 <TimeToGoHome>
		if (perimeterTracking == 1) {
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <CheckState+0x2ec>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f040 8085 	bne.w	80052c4 <CheckState+0x254>
			cutterOFF();
 80051ba:	f7fe ffbf 	bl	800413c <cutterOFF>
			perimeterTrackingActive = 1;
 80051be:	4b68      	ldr	r3, [pc, #416]	; (8005360 <CheckState+0x2f0>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 80051c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051c8:	f002 fe04 	bl	8007dd4 <HAL_Delay>

			while (BWF2_Status != OUTSIDE) {
 80051cc:	e063      	b.n	8005296 <CheckState+0x226>

				MPU6050_Read_Accel();		// Get fresh data for Pitch/Roll
 80051ce:	f001 fa37 	bl	8006640 <MPU6050_Read_Accel>
				ProcessIMUData();			// Compute Pitch/Roll
 80051d2:	f001 f931 	bl	8006438 <ProcessIMUData>

				uint16_t leftTilt = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	80fb      	strh	r3, [r7, #6]
				uint16_t rightTilt = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	80bb      	strh	r3, [r7, #4]

				if (mpu.roll > 0) {
 80051de:	4b61      	ldr	r3, [pc, #388]	; (8005364 <CheckState+0x2f4>)
 80051e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80051e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	dd0d      	ble.n	800520a <CheckState+0x19a>
					leftTilt = fabs(mpu.roll * 50);
 80051ee:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <CheckState+0x2f4>)
 80051f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80051f4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005368 <CheckState+0x2f8>
 80051f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051fc:	eef0 7ae7 	vabs.f32	s15, s15
 8005200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005204:	ee17 3a90 	vmov	r3, s15
 8005208:	80fb      	strh	r3, [r7, #6]

				}
				if (mpu.roll < 0) {
 800520a:	4b56      	ldr	r3, [pc, #344]	; (8005364 <CheckState+0x2f4>)
 800520c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	d50d      	bpl.n	8005236 <CheckState+0x1c6>
					rightTilt = fabs(mpu.roll * 50);
 800521a:	4b52      	ldr	r3, [pc, #328]	; (8005364 <CheckState+0x2f4>)
 800521c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005220:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005368 <CheckState+0x2f8>
 8005224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005228:	eef0 7ae7 	vabs.f32	s15, s15
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	ee17 3a90 	vmov	r3, s15
 8005234:	80bb      	strh	r3, [r7, #4]

				}

				TIM4->CCR1 = 0;
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <CheckState+0x2fc>)
 8005238:	2200      	movs	r2, #0
 800523a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 2700 - round(leftTilt);
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	4618      	mov	r0, r3
 8005240:	f7fb f970 	bl	8000524 <__aeabi_ui2d>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	a135      	add	r1, pc, #212	; (adr r1, 8005320 <CheckState+0x2b0>)
 800524a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800524e:	f7fb f82b 	bl	80002a8 <__aeabi_dsub>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4c45      	ldr	r4, [pc, #276]	; (800536c <CheckState+0x2fc>)
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb fcb4 	bl	8000bc8 <__aeabi_d2uiz>
 8005260:	4603      	mov	r3, r0
 8005262:	63a3      	str	r3, [r4, #56]	; 0x38

				TIM4->CCR3 = 2700 - round(rightTilt);
 8005264:	88bb      	ldrh	r3, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb f95c 	bl	8000524 <__aeabi_ui2d>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	a12b      	add	r1, pc, #172	; (adr r1, 8005320 <CheckState+0x2b0>)
 8005272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005276:	f7fb f817 	bl	80002a8 <__aeabi_dsub>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4c3b      	ldr	r4, [pc, #236]	; (800536c <CheckState+0x2fc>)
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	f7fb fca0 	bl	8000bc8 <__aeabi_d2uiz>
 8005288:	4603      	mov	r3, r0
 800528a:	63e3      	str	r3, [r4, #60]	; 0x3c
				TIM4->CCR4 = 0;
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <CheckState+0x2fc>)
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
				CheckSecurity();
 8005292:	f7fe fdfb 	bl	8003e8c <CheckSecurity>
			while (BWF2_Status != OUTSIDE) {
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <CheckState+0x300>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d197      	bne.n	80051ce <CheckState+0x15e>

			}
			MotorStop();
 800529e:	f7ff fe23 	bl	8004ee8 <MotorStop>
			while (BWF2_Status != INSIDE) {
 80052a2:	e00a      	b.n	80052ba <CheckState+0x24a>

				MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 800);
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <CheckState+0x2c8>)
 80052a6:	8a5b      	ldrh	r3, [r3, #18]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <CheckState+0x2c8>)
 80052aa:	8a11      	ldrh	r1, [r2, #16]
 80052ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fdc5 	bl	8004e40 <MotorLeft>
				CheckSecurity();
 80052b6:	f7fe fde9 	bl	8003e8c <CheckSecurity>
			while (BWF2_Status != INSIDE) {
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <CheckState+0x300>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d1f0      	bne.n	80052a4 <CheckState+0x234>

			}
			return;
 80052c2:	e17c      	b.n	80055be <CheckState+0x54e>
		}
		HAL_Delay(500);
 80052c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052c8:	f002 fd84 	bl	8007dd4 <HAL_Delay>

		CheckSecurity();				// Double check status of the sensors when we are standing still
 80052cc:	f7fe fdde 	bl	8003e8c <CheckSecurity>

		if (BWF1_Status == OUTSIDE && BWF2_Status == INSIDE) {
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <CheckState+0x304>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d14f      	bne.n	8005378 <CheckState+0x308>
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <CheckState+0x300>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d14b      	bne.n	8005378 <CheckState+0x308>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 80052e0:	4b15      	ldr	r3, [pc, #84]	; (8005338 <CheckState+0x2c8>)
 80052e2:	8a5b      	ldrh	r3, [r3, #18]
 80052e4:	4a14      	ldr	r2, [pc, #80]	; (8005338 <CheckState+0x2c8>)
 80052e6:	8a11      	ldrh	r1, [r2, #16]
 80052e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff fc63 	bl	8004bb8 <MotorBackward>
			HAL_Delay(500);
 80052f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052f6:	f002 fd6d 	bl	8007dd4 <HAL_Delay>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 80052fa:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <CheckState+0x2c8>)
 80052fc:	8a5c      	ldrh	r4, [r3, #18]
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <CheckState+0x2c8>)
 8005300:	8a1d      	ldrh	r5, [r3, #16]
 8005302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005306:	f7fc fd23 	bl	8001d50 <rnd>
 800530a:	4603      	mov	r3, r0
 800530c:	b29b      	uxth	r3, r3
 800530e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005312:	b29b      	uxth	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	4629      	mov	r1, r5
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff fd3f 	bl	8004d9c <MotorRight>
 800531e:	e098      	b.n	8005452 <CheckState+0x3e2>
 8005320:	00000000 	.word	0x00000000
 8005324:	40a51800 	.word	0x40a51800
 8005328:	20000952 	.word	0x20000952
 800532c:	20000215 	.word	0x20000215
 8005330:	200009a4 	.word	0x200009a4
 8005334:	2000099c 	.word	0x2000099c
 8005338:	20000ca4 	.word	0x20000ca4
 800533c:	200009a1 	.word	0x200009a1
 8005340:	08015b8c 	.word	0x08015b8c
 8005344:	200009c8 	.word	0x200009c8
 8005348:	08015ba8 	.word	0x08015ba8
 800534c:	200009c9 	.word	0x200009c9
 8005350:	08015bc4 	.word	0x08015bc4
 8005354:	2000098f 	.word	0x2000098f
 8005358:	08015be0 	.word	0x08015be0
 800535c:	20000950 	.word	0x20000950
 8005360:	20000951 	.word	0x20000951
 8005364:	200023cc 	.word	0x200023cc
 8005368:	42480000 	.word	0x42480000
 800536c:	40000800 	.word	0x40000800
 8005370:	2000098d 	.word	0x2000098d
 8005374:	2000098c 	.word	0x2000098c
		}
		else if (BWF1_Status == INSIDE && BWF2_Status == OUTSIDE) {
 8005378:	4b92      	ldr	r3, [pc, #584]	; (80055c4 <CheckState+0x554>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d123      	bne.n	80053c8 <CheckState+0x358>
 8005380:	4b91      	ldr	r3, [pc, #580]	; (80055c8 <CheckState+0x558>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d11f      	bne.n	80053c8 <CheckState+0x358>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005388:	4b90      	ldr	r3, [pc, #576]	; (80055cc <CheckState+0x55c>)
 800538a:	8a5b      	ldrh	r3, [r3, #18]
 800538c:	4a8f      	ldr	r2, [pc, #572]	; (80055cc <CheckState+0x55c>)
 800538e:	8a11      	ldrh	r1, [r2, #16]
 8005390:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fc0f 	bl	8004bb8 <MotorBackward>
			HAL_Delay(500);
 800539a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800539e:	f002 fd19 	bl	8007dd4 <HAL_Delay>
			MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 80053a2:	4b8a      	ldr	r3, [pc, #552]	; (80055cc <CheckState+0x55c>)
 80053a4:	8a5c      	ldrh	r4, [r3, #18]
 80053a6:	4b89      	ldr	r3, [pc, #548]	; (80055cc <CheckState+0x55c>)
 80053a8:	8a1d      	ldrh	r5, [r3, #16]
 80053aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053ae:	f7fc fccf 	bl	8001d50 <rnd>
 80053b2:	4603      	mov	r3, r0
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	4629      	mov	r1, r5
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff fd3d 	bl	8004e40 <MotorLeft>
 80053c6:	e044      	b.n	8005452 <CheckState+0x3e2>
		}
		else if (BWF1_Status == OUTSIDE && BWF2_Status == OUTSIDE) {
 80053c8:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <CheckState+0x554>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d140      	bne.n	8005452 <CheckState+0x3e2>
 80053d0:	4b7d      	ldr	r3, [pc, #500]	; (80055c8 <CheckState+0x558>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d13c      	bne.n	8005452 <CheckState+0x3e2>

			Serial_Console("Going Backward\r\n");
 80053d8:	487d      	ldr	r0, [pc, #500]	; (80055d0 <CheckState+0x560>)
 80053da:	f7fe fd2f 	bl	8003e3c <Serial_Console>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 80053de:	4b7b      	ldr	r3, [pc, #492]	; (80055cc <CheckState+0x55c>)
 80053e0:	8a5b      	ldrh	r3, [r3, #18]
 80053e2:	4a7a      	ldr	r2, [pc, #488]	; (80055cc <CheckState+0x55c>)
 80053e4:	8a11      	ldrh	r1, [r2, #16]
 80053e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fbe4 	bl	8004bb8 <MotorBackward>
			HAL_Delay(500);
 80053f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053f4:	f002 fcee 	bl	8007dd4 <HAL_Delay>
			if (rnd(1000) < 500 ) {
 80053f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053fc:	f7fc fca8 	bl	8001d50 <rnd>
 8005400:	4603      	mov	r3, r0
 8005402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005406:	d212      	bcs.n	800542e <CheckState+0x3be>
				MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005408:	4b70      	ldr	r3, [pc, #448]	; (80055cc <CheckState+0x55c>)
 800540a:	8a5c      	ldrh	r4, [r3, #18]
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <CheckState+0x55c>)
 800540e:	8a1d      	ldrh	r5, [r3, #16]
 8005410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005414:	f7fc fc9c 	bl	8001d50 <rnd>
 8005418:	4603      	mov	r3, r0
 800541a:	b29b      	uxth	r3, r3
 800541c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	4629      	mov	r1, r5
 8005426:	4620      	mov	r0, r4
 8005428:	f7ff fd0a 	bl	8004e40 <MotorLeft>
 800542c:	e011      	b.n	8005452 <CheckState+0x3e2>
			}
			else {
				MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 800542e:	4b67      	ldr	r3, [pc, #412]	; (80055cc <CheckState+0x55c>)
 8005430:	8a5c      	ldrh	r4, [r3, #18]
 8005432:	4b66      	ldr	r3, [pc, #408]	; (80055cc <CheckState+0x55c>)
 8005434:	8a1d      	ldrh	r5, [r3, #16]
 8005436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800543a:	f7fc fc89 	bl	8001d50 <rnd>
 800543e:	4603      	mov	r3, r0
 8005440:	b29b      	uxth	r3, r3
 8005442:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005446:	b29b      	uxth	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	4629      	mov	r1, r5
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff fca5 	bl	8004d9c <MotorRight>
				}
		}

		HAL_Delay(500);
 8005452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005456:	f002 fcbd 	bl	8007dd4 <HAL_Delay>
 800545a:	e0b0      	b.n	80055be <CheckState+0x54e>
	}
	else if (State == FORWARD) {
 800545c:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <CheckState+0x564>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10d      	bne.n	8005480 <CheckState+0x410>

		if (TIM4->CCR2 == 0 && TIM4->CCR3  == 0) {
 8005464:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <CheckState+0x568>)
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	f040 80a8 	bne.w	80055be <CheckState+0x54e>
 800546e:	4b5a      	ldr	r3, [pc, #360]	; (80055d8 <CheckState+0x568>)
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 80a3 	bne.w	80055be <CheckState+0x54e>
			State = STOP;
 8005478:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <CheckState+0x564>)
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e09e      	b.n	80055be <CheckState+0x54e>
		}
	}
	else if (State == STOP && CheckSecurity() == SECURITY_OK) {
 8005480:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <CheckState+0x564>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d125      	bne.n	80054d4 <CheckState+0x464>
 8005488:	f7fe fd00 	bl	8003e8c <CheckSecurity>
 800548c:	4603      	mov	r3, r0
 800548e:	2b01      	cmp	r3, #1
 8005490:	d120      	bne.n	80054d4 <CheckState+0x464>
		HAL_Delay(500);
 8005492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005496:	f002 fc9d 	bl	8007dd4 <HAL_Delay>
		mpu.hold_heading = mpu.heading;
 800549a:	4b50      	ldr	r3, [pc, #320]	; (80055dc <CheckState+0x56c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4f      	ldr	r2, [pc, #316]	; (80055dc <CheckState+0x56c>)
 80054a0:	6113      	str	r3, [r2, #16]
		if (cutterStatus == 0 && perimeterTracking == 0) {
 80054a2:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <CheckState+0x570>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <CheckState+0x446>
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <CheckState+0x574>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <CheckState+0x446>
			cutterON();
 80054b2:	f7fe fded 	bl	8004090 <cutterON>
		}
		Serial_Console("Going Forward\r\n");
 80054b6:	484c      	ldr	r0, [pc, #304]	; (80055e8 <CheckState+0x578>)
 80054b8:	f7fe fcc0 	bl	8003e3c <Serial_Console>
		mag_near_bwf = 0;
 80054bc:	4b4b      	ldr	r3, [pc, #300]	; (80055ec <CheckState+0x57c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
		MotorForward(settings.motorMinSpeed, settings.motorMaxSpeed);
 80054c2:	4b42      	ldr	r3, [pc, #264]	; (80055cc <CheckState+0x55c>)
 80054c4:	8a5b      	ldrh	r3, [r3, #18]
 80054c6:	4a41      	ldr	r2, [pc, #260]	; (80055cc <CheckState+0x55c>)
 80054c8:	8a12      	ldrh	r2, [r2, #16]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fac9 	bl	8004a64 <MotorForward>
 80054d2:	e074      	b.n	80055be <CheckState+0x54e>

	}
	else if (State == STOP && CheckSecurity() == SECURITY_FAIL) {
 80054d4:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <CheckState+0x564>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d170      	bne.n	80055be <CheckState+0x54e>
 80054dc:	f7fe fcd6 	bl	8003e8c <CheckSecurity>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d16b      	bne.n	80055be <CheckState+0x54e>
		HAL_Delay(500);
 80054e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054ea:	f002 fc73 	bl	8007dd4 <HAL_Delay>
		Serial_Console("STOP + Security Fail\r\n");
 80054ee:	4840      	ldr	r0, [pc, #256]	; (80055f0 <CheckState+0x580>)
 80054f0:	f7fe fca4 	bl	8003e3c <Serial_Console>

		CheckSecurity();
 80054f4:	f7fe fcca 	bl	8003e8c <CheckSecurity>

		if (BWF1_Status == INSIDE && (BWF2_Status == OUTSIDE || BWF2_Status == NOSIGNAL)) {
 80054f8:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <CheckState+0x554>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d11a      	bne.n	8005536 <CheckState+0x4c6>
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <CheckState+0x558>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d003      	beq.n	8005510 <CheckState+0x4a0>
 8005508:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <CheckState+0x558>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d112      	bne.n	8005536 <CheckState+0x4c6>
			MotorLeft(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005510:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <CheckState+0x55c>)
 8005512:	8a5c      	ldrh	r4, [r3, #18]
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <CheckState+0x55c>)
 8005516:	8a1d      	ldrh	r5, [r3, #16]
 8005518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800551c:	f7fc fc18 	bl	8001d50 <rnd>
 8005520:	4603      	mov	r3, r0
 8005522:	b29b      	uxth	r3, r3
 8005524:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	4629      	mov	r1, r5
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff fc86 	bl	8004e40 <MotorLeft>
 8005534:	e043      	b.n	80055be <CheckState+0x54e>
		}
		else if (BWF2_Status == INSIDE && (BWF1_Status == OUTSIDE || BWF1_Status == NOSIGNAL)) {
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <CheckState+0x558>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d11a      	bne.n	8005574 <CheckState+0x504>
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <CheckState+0x554>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d003      	beq.n	800554e <CheckState+0x4de>
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <CheckState+0x554>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d112      	bne.n	8005574 <CheckState+0x504>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 800554e:	4b1f      	ldr	r3, [pc, #124]	; (80055cc <CheckState+0x55c>)
 8005550:	8a5c      	ldrh	r4, [r3, #18]
 8005552:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <CheckState+0x55c>)
 8005554:	8a1d      	ldrh	r5, [r3, #16]
 8005556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800555a:	f7fc fbf9 	bl	8001d50 <rnd>
 800555e:	4603      	mov	r3, r0
 8005560:	b29b      	uxth	r3, r3
 8005562:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	4629      	mov	r1, r5
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fc15 	bl	8004d9c <MotorRight>
 8005572:	e024      	b.n	80055be <CheckState+0x54e>
		}
		else if (BWF1_Status == OUTSIDE && BWF2_Status == OUTSIDE) {
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <CheckState+0x554>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d120      	bne.n	80055be <CheckState+0x54e>
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <CheckState+0x558>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d11c      	bne.n	80055be <CheckState+0x54e>
			MotorBackward(settings.motorMinSpeed, settings.motorMaxSpeed, 1500);
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <CheckState+0x55c>)
 8005586:	8a5b      	ldrh	r3, [r3, #18]
 8005588:	4a10      	ldr	r2, [pc, #64]	; (80055cc <CheckState+0x55c>)
 800558a:	8a11      	ldrh	r1, [r2, #16]
 800558c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fb11 	bl	8004bb8 <MotorBackward>
			MotorRight(settings.motorMinSpeed, settings.motorMaxSpeed, 600 + rnd(500) );
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <CheckState+0x55c>)
 8005598:	8a5c      	ldrh	r4, [r3, #18]
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <CheckState+0x55c>)
 800559c:	8a1d      	ldrh	r5, [r3, #16]
 800559e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055a2:	f7fc fbd5 	bl	8001d50 <rnd>
 80055a6:	4603      	mov	r3, r0
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	4629      	mov	r1, r5
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fbf1 	bl	8004d9c <MotorRight>
 80055ba:	e000      	b.n	80055be <CheckState+0x54e>
	if (Initial_Start == 0) return;
 80055bc:	bf00      	nop
		}
	}

}
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}
 80055c4:	2000098c 	.word	0x2000098c
 80055c8:	2000098d 	.word	0x2000098d
 80055cc:	20000ca4 	.word	0x20000ca4
 80055d0:	08015bfc 	.word	0x08015bfc
 80055d4:	2000098f 	.word	0x2000098f
 80055d8:	40000800 	.word	0x40000800
 80055dc:	200023cc 	.word	0x200023cc
 80055e0:	20000991 	.word	0x20000991
 80055e4:	20000950 	.word	0x20000950
 80055e8:	08015c10 	.word	0x08015c10
 80055ec:	200009be 	.word	0x200009be
 80055f0:	08015c20 	.word	0x08015c20

080055f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b097      	sub	sp, #92	; 0x5c
 80055f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055fa:	f002 fb45 	bl	8007c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055fe:	f000 f987 	bl	8005910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005602:	f000 fdc9 	bl	8006198 <MX_GPIO_Init>
  MX_DMA_Init();
 8005606:	f000 fd81 	bl	800610c <MX_DMA_Init>
  MX_ADC1_Init();
 800560a:	f000 fa05 	bl	8005a18 <MX_ADC1_Init>
  MX_IWDG_Init();
 800560e:	f000 fb1f 	bl	8005c50 <MX_IWDG_Init>
  MX_RNG_Init();
 8005612:	f000 fb37 	bl	8005c84 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8005616:	f000 fd25 	bl	8006064 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800561a:	f000 fd4d 	bl	80060b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800561e:	f000 fbb9 	bl	8005d94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005622:	f000 fc39 	bl	8005e98 <MX_TIM4_Init>
  MX_RTC_Init();
 8005626:	f000 fb41 	bl	8005cac <MX_RTC_Init>
  MX_TIM2_Init();
 800562a:	f000 fb65 	bl	8005cf8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800562e:	f000 fccb 	bl	8005fc8 <MX_TIM5_Init>
  MX_I2C1_Init();
 8005632:	f000 fab1 	bl	8005b98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005636:	f000 fadd 	bl	8005bf4 <MX_I2C2_Init>
  MX_ADC2_Init();
 800563a:	f000 fa4d 	bl	8005ad8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);					// Start TIM4 on wheel motors
 800563e:	4891      	ldr	r0, [pc, #580]	; (8005884 <main+0x290>)
 8005640:	f006 fffe 	bl	800c640 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Start TIM3 on cutter motor
 8005644:	4890      	ldr	r0, [pc, #576]	; (8005888 <main+0x294>)
 8005646:	f006 fffb 	bl	800c640 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);		//M1 Motor PWM
 800564a:	2100      	movs	r1, #0
 800564c:	488d      	ldr	r0, [pc, #564]	; (8005884 <main+0x290>)
 800564e:	f007 f929 	bl	800c8a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);		//M1 Motor PWM
 8005652:	2104      	movs	r1, #4
 8005654:	488b      	ldr	r0, [pc, #556]	; (8005884 <main+0x290>)
 8005656:	f007 f925 	bl	800c8a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);		//M2 Motor PWM
 800565a:	2108      	movs	r1, #8
 800565c:	4889      	ldr	r0, [pc, #548]	; (8005884 <main+0x290>)
 800565e:	f007 f921 	bl	800c8a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);		//M2 Motor PWM
 8005662:	210c      	movs	r1, #12
 8005664:	4887      	ldr	r0, [pc, #540]	; (8005884 <main+0x290>)
 8005666:	f007 f91d 	bl	800c8a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);		//C1 Motor PWM
 800566a:	2100      	movs	r1, #0
 800566c:	4886      	ldr	r0, [pc, #536]	; (8005888 <main+0x294>)
 800566e:	f007 f919 	bl	800c8a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);		//C1 Motor PWM
 8005672:	2104      	movs	r1, #4
 8005674:	4884      	ldr	r0, [pc, #528]	; (8005888 <main+0x294>)
 8005676:	f007 f915 	bl	800c8a4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim5);					//Start Timer5 for MicroSeconds delay
 800567a:	4884      	ldr	r0, [pc, #528]	; (800588c <main+0x298>)
 800567c:	f006 ffe0 	bl	800c640 <HAL_TIM_Base_Start>

  TIM4->CCR1 = 0;								//M1 Motor - Make sure PWM is 0
 8005680:	4b83      	ldr	r3, [pc, #524]	; (8005890 <main+0x29c>)
 8005682:	2200      	movs	r2, #0
 8005684:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;								//M1 Motor - Make sure PWM is 0
 8005686:	4b82      	ldr	r3, [pc, #520]	; (8005890 <main+0x29c>)
 8005688:	2200      	movs	r2, #0
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 0;								//M2 Motor - Make sure PWM is 0
 800568c:	4b80      	ldr	r3, [pc, #512]	; (8005890 <main+0x29c>)
 800568e:	2200      	movs	r2, #0
 8005690:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0;								//M2 Motor - Make sure PWM is 0
 8005692:	4b7f      	ldr	r3, [pc, #508]	; (8005890 <main+0x29c>)
 8005694:	2200      	movs	r2, #0
 8005696:	641a      	str	r2, [r3, #64]	; 0x40
  TIM3->CCR1 = 0;								//C1 Motor - Make sure PWM is 0
 8005698:	4b7e      	ldr	r3, [pc, #504]	; (8005894 <main+0x2a0>)
 800569a:	2200      	movs	r2, #0
 800569c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;								//C1 Motor - Make sure PWM is 0
 800569e:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <main+0x2a0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  WatchdogInit();								// STM32 Watchdog - NEVER DISABLE THIS (for safety!)
 80056a4:	f7fc fa4a 	bl	8001b3c <WatchdogInit>
  HAL_TIM_Base_Start_IT(&htim2);				// 1 second interrupt, will update the watchdog and send info to Serial Console
 80056a8:	487b      	ldr	r0, [pc, #492]	; (8005898 <main+0x2a4>)
 80056aa:	f007 f831 	bl	800c710 <HAL_TIM_Base_Start_IT>

  Serial_RPi("RazorBoard booting...please wait!\r\n");
 80056ae:	487b      	ldr	r0, [pc, #492]	; (800589c <main+0x2a8>)
 80056b0:	f7fe fbd8 	bl	8003e64 <Serial_RPi>
  Serial_Console("RazorBoard booting...please wait!\r\n");
 80056b4:	4879      	ldr	r0, [pc, #484]	; (800589c <main+0x2a8>)
 80056b6:	f7fe fbc1 	bl	8003e3c <Serial_Console>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_BUFFER, ADC_SAMPLE_LEN);		// Start the DMA for continues scan mode
 80056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056be:	4978      	ldr	r1, [pc, #480]	; (80058a0 <main+0x2ac>)
 80056c0:	4878      	ldr	r0, [pc, #480]	; (80058a4 <main+0x2b0>)
 80056c2:	f002 fd2f 	bl	8008124 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC_REAR_BUFFER, ADC_SAMPLE_LEN);
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	4977      	ldr	r1, [pc, #476]	; (80058a8 <main+0x2b4>)
 80056cc:	4877      	ldr	r0, [pc, #476]	; (80058ac <main+0x2b8>)
 80056ce:	f002 fd29 	bl	8008124 <HAL_ADC_Start_DMA>

  InitFIR();									// Initiate the FIR functions in hardware
 80056d2:	f7fc fa53 	bl	8001b7c <InitFIR>

  HAL_RNG_Init(&hrng);							// Initiate the True Random Number generator
 80056d6:	4876      	ldr	r0, [pc, #472]	; (80058b0 <main+0x2bc>)
 80056d8:	f006 fb38 	bl	800bd4c <HAL_RNG_Init>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);	// Enable interrupt for Serial Console
 80056dc:	4b75      	ldr	r3, [pc, #468]	; (80058b4 <main+0x2c0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4b74      	ldr	r3, [pc, #464]	; (80058b4 <main+0x2c0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0210 	orr.w	r2, r2, #16
 80056ea:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);	// Enable interrupt for the Raspberry Pi
 80056ec:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <main+0x2c4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	4b71      	ldr	r3, [pc, #452]	; (80058b8 <main+0x2c4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0210 	orr.w	r2, r2, #16
 80056fa:	60da      	str	r2, [r3, #12]

  ADC_timer = HAL_GetTick();					// Initial load of the ADC timer
 80056fc:	f002 fb5e 	bl	8007dbc <HAL_GetTick>
 8005700:	4603      	mov	r3, r0
 8005702:	4a6e      	ldr	r2, [pc, #440]	; (80058bc <main+0x2c8>)
 8005704:	6013      	str	r3, [r2, #0]
  IMU_timer = HAL_GetTick();					// Initial load of the IMU timer
 8005706:	f002 fb59 	bl	8007dbc <HAL_GetTick>
 800570a:	4603      	mov	r3, r0
 800570c:	4a6c      	ldr	r2, [pc, #432]	; (80058c0 <main+0x2cc>)
 800570e:	6013      	str	r3, [r2, #0]
  MotorSpeedUpdateFreq_timer =  HAL_GetTick();	// Initial load of the MotorSpeedUpdateFreq
 8005710:	f002 fb54 	bl	8007dbc <HAL_GetTick>
 8005714:	4603      	mov	r3, r0
 8005716:	4a6b      	ldr	r2, [pc, #428]	; (80058c4 <main+0x2d0>)
 8005718:	6013      	str	r3, [r2, #0]

  HAL_Delay(5000);
 800571a:	f241 3088 	movw	r0, #5000	; 0x1388
 800571e:	f002 fb59 	bl	8007dd4 <HAL_Delay>

  Init6050();									// Start the MPU-6050
 8005722:	f000 fe3d 	bl	80063a0 <Init6050>

  Boundary_Timer = HAL_GetTick();				// Initiate timer for the Boundary Wire
 8005726:	f002 fb49 	bl	8007dbc <HAL_GetTick>
 800572a:	4603      	mov	r3, r0
 800572c:	4a66      	ldr	r2, [pc, #408]	; (80058c8 <main+0x2d4>)
 800572e:	6013      	str	r3, [r2, #0]

  enable_backup_sram();
 8005730:	f001 fb0c 	bl	8006d4c <enable_backup_sram>

  delay_us(100);
 8005734:	2064      	movs	r0, #100	; 0x64
 8005736:	f7fd f8bd 	bl	80028b4 <delay_us>

  settings = read_all_settings();
 800573a:	4c64      	ldr	r4, [pc, #400]	; (80058cc <main+0x2d8>)
 800573c:	463b      	mov	r3, r7
 800573e:	4618      	mov	r0, r3
 8005740:	f001 fb20 	bl	8006d84 <read_all_settings>
 8005744:	4620      	mov	r0, r4
 8005746:	463b      	mov	r3, r7
 8005748:	2250      	movs	r2, #80	; 0x50
 800574a:	4619      	mov	r1, r3
 800574c:	f009 fb08 	bl	800ed60 <memcpy>
  if (settings.Config_Set != 42) {
 8005750:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <main+0x2d8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b2a      	cmp	r3, #42	; 0x2a
 8005756:	d015      	beq.n	8005784 <main+0x190>
	  save_default_settings();
 8005758:	f001 fca4 	bl	80070a4 <save_default_settings>
	  Serial_Console("No config found - Saving factory defaults\r\n");
 800575c:	485c      	ldr	r0, [pc, #368]	; (80058d0 <main+0x2dc>)
 800575e:	f7fe fb6d 	bl	8003e3c <Serial_Console>
	  Serial_Console("Masterswitch set to OFF - please configure settings and reboot\r\n");
 8005762:	485c      	ldr	r0, [pc, #368]	; (80058d4 <main+0x2e0>)
 8005764:	f7fe fb6a 	bl	8003e3c <Serial_Console>
	  MasterSwitch = 0;
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <main+0x2e4>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
	  settings = read_all_settings();
 800576e:	4c57      	ldr	r4, [pc, #348]	; (80058cc <main+0x2d8>)
 8005770:	463b      	mov	r3, r7
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fb06 	bl	8006d84 <read_all_settings>
 8005778:	4620      	mov	r0, r4
 800577a:	463b      	mov	r3, r7
 800577c:	2250      	movs	r2, #80	; 0x50
 800577e:	4619      	mov	r1, r3
 8005780:	f009 faee 	bl	800ed60 <memcpy>
  }
  Serial_Console("Config loaded from SRAM\r\n");
 8005784:	4855      	ldr	r0, [pc, #340]	; (80058dc <main+0x2e8>)
 8005786:	f7fe fb59 	bl	8003e3c <Serial_Console>

  for (uint8_t x = 0; x < 60; x++) {
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005790:	e00c      	b.n	80057ac <main+0x1b8>
  	V1_array[x] = settings.Battery_High_Limit;
 8005792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005796:	4a4d      	ldr	r2, [pc, #308]	; (80058cc <main+0x2d8>)
 8005798:	69d2      	ldr	r2, [r2, #28]
 800579a:	4951      	ldr	r1, [pc, #324]	; (80058e0 <main+0x2ec>)
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	601a      	str	r2, [r3, #0]
  for (uint8_t x = 0; x < 60; x++) {
 80057a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a6:	3301      	adds	r3, #1
 80057a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80057ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b0:	2b3b      	cmp	r3, #59	; 0x3b
 80057b2:	d9ee      	bls.n	8005792 <main+0x19e>
  }

  Serial_RPi("Booting done!\r\n");
 80057b4:	484b      	ldr	r0, [pc, #300]	; (80058e4 <main+0x2f0>)
 80057b6:	f7fe fb55 	bl	8003e64 <Serial_RPi>
  Serial_Console("Booting done!\r\n");
 80057ba:	484a      	ldr	r0, [pc, #296]	; (80058e4 <main+0x2f0>)
 80057bc:	f7fe fb3e 	bl	8003e3c <Serial_Console>

  while (1)
    {

    	// Collect IMU data every 20 ms, non-blocking.
  	if (HAL_GetTick() - IMU_timer >= 20) {
 80057c0:	f002 fafc 	bl	8007dbc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <main+0x2cc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b13      	cmp	r3, #19
 80057ce:	d90a      	bls.n	80057e6 <main+0x1f2>
   	  MPU6050_Read_Accel();
 80057d0:	f000 ff36 	bl	8006640 <MPU6050_Read_Accel>
  	  MPU6050_Read_Gyro();
 80057d4:	f001 f870 	bl	80068b8 <MPU6050_Read_Gyro>
  	  ProcessIMUData();
 80057d8:	f000 fe2e 	bl	8006438 <ProcessIMUData>
  	  IMU_timer = HAL_GetTick();
 80057dc:	f002 faee 	bl	8007dbc <HAL_GetTick>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4a37      	ldr	r2, [pc, #220]	; (80058c0 <main+0x2cc>)
 80057e4:	6013      	str	r3, [r2, #0]
  	  }


  	if (perimeterTrackingActive == 0) {
 80057e6:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <main+0x2f4>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d129      	bne.n	8005842 <main+0x24e>

  		CheckSecurity();
 80057ee:	f7fe fb4d 	bl	8003e8c <CheckSecurity>

  		CheckState();
 80057f2:	f7ff fc3d 	bl	8005070 <CheckState>

  		if (State == FORWARD && Force_Active == 1) {
 80057f6:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <main+0x2f8>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d114      	bne.n	8005828 <main+0x234>
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <main+0x2fc>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d110      	bne.n	8005828 <main+0x234>
  			if (HAL_GetTick() - MotorSpeedUpdateFreq_timer >= MotorSpeedUpdateFreq) {
 8005806:	f002 fad9 	bl	8007dbc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <main+0x2d0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a38      	ldr	r2, [pc, #224]	; (80058f4 <main+0x300>)
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	4293      	cmp	r3, r2
 8005818:	d306      	bcc.n	8005828 <main+0x234>

  			 UpdateMotorSpeed();
 800581a:	f7ff f851 	bl	80048c0 <UpdateMotorSpeed>
  			 MotorSpeedUpdateFreq_timer =  HAL_GetTick();
 800581e:	f002 facd 	bl	8007dbc <HAL_GetTick>
 8005822:	4603      	mov	r3, r0
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <main+0x2d0>)
 8005826:	6013      	str	r3, [r2, #0]

  			}
  		}
  		CollectADC();
 8005828:	f7fc fed2 	bl	80025d0 <CollectADC>
  		if (Voltage != 0) CheckVoltage();
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <main+0x304>)
 800582e:	edd3 7a00 	vldr	s15, [r3]
 8005832:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	d004      	beq.n	8005846 <main+0x252>
 800583c:	f7fc fcd6 	bl	80021ec <CheckVoltage>
 8005840:	e001      	b.n	8005846 <main+0x252>
  	}
  	else {
  		perimeterTracker();
 8005842:	f7fd f969 	bl	8002b18 <perimeterTracker>
  	}

    if (SendInfoStatus == 1) SendInfo();
 8005846:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <main+0x308>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <main+0x25e>
 800584e:	f7fc fcfb 	bl	8002248 <SendInfo>

  	ChargerConnected();
 8005852:	f7fd f8d7 	bl	8002a04 <ChargerConnected>

  	HAL_UART_Receive_DMA(&huart1, ConsoleBuffer, CONSOLE_BFR_SIZE);
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	4929      	ldr	r1, [pc, #164]	; (8005900 <main+0x30c>)
 800585a:	4816      	ldr	r0, [pc, #88]	; (80058b4 <main+0x2c0>)
 800585c:	f008 f81b 	bl	800d896 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, PIBuffer, PI_BFR_SIZE);
 8005860:	2240      	movs	r2, #64	; 0x40
 8005862:	4928      	ldr	r1, [pc, #160]	; (8005904 <main+0x310>)
 8005864:	4814      	ldr	r0, [pc, #80]	; (80058b8 <main+0x2c4>)
 8005866:	f008 f816 	bl	800d896 <HAL_UART_Receive_DMA>

    if (UART1_ready == 1) {
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <main+0x314>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <main+0x282>
    	parseCommand_Console();
 8005872:	f7fd facd 	bl	8002e10 <parseCommand_Console>
    }
  	if (UART2_ready == 1) {
 8005876:	4b25      	ldr	r3, [pc, #148]	; (800590c <main+0x318>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d1a0      	bne.n	80057c0 <main+0x1cc>
  		parseCommand_RPI();
 800587e:	f7fe fa61 	bl	8003d44 <parseCommand_RPI>
  	if (HAL_GetTick() - IMU_timer >= 20) {
 8005882:	e79d      	b.n	80057c0 <main+0x1cc>
 8005884:	20000c5c 	.word	0x20000c5c
 8005888:	2000128c 	.word	0x2000128c
 800588c:	20001234 	.word	0x20001234
 8005890:	40000800 	.word	0x40000800
 8005894:	40000400 	.word	0x40000400
 8005898:	20002db8 	.word	0x20002db8
 800589c:	08015c38 	.word	0x08015c38
 80058a0:	20001b24 	.word	0x20001b24
 80058a4:	200016dc 	.word	0x200016dc
 80058a8:	20001724 	.word	0x20001724
 80058ac:	20000cf4 	.word	0x20000cf4
 80058b0:	200029a4 	.word	0x200029a4
 80058b4:	20002384 	.word	0x20002384
 80058b8:	20002e00 	.word	0x20002e00
 80058bc:	20000994 	.word	0x20000994
 80058c0:	20000998 	.word	0x20000998
 80058c4:	200009b8 	.word	0x200009b8
 80058c8:	2000127c 	.word	0x2000127c
 80058cc:	20000ca4 	.word	0x20000ca4
 80058d0:	08015c5c 	.word	0x08015c5c
 80058d4:	08015c88 	.word	0x08015c88
 80058d8:	20000215 	.word	0x20000215
 80058dc:	08015ccc 	.word	0x08015ccc
 80058e0:	20002474 	.word	0x20002474
 80058e4:	08015ce8 	.word	0x08015ce8
 80058e8:	20000951 	.word	0x20000951
 80058ec:	2000098f 	.word	0x2000098f
 80058f0:	200009b4 	.word	0x200009b4
 80058f4:	20000216 	.word	0x20000216
 80058f8:	20000988 	.word	0x20000988
 80058fc:	200009a0 	.word	0x200009a0
 8005900:	200011f4 	.word	0x200011f4
 8005904:	20002964 	.word	0x20002964
 8005908:	200009a2 	.word	0x200009a2
 800590c:	200009a3 	.word	0x200009a3

08005910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b098      	sub	sp, #96	; 0x60
 8005914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800591a:	2230      	movs	r2, #48	; 0x30
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f009 fa2c 	bl	800ed7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005924:	f107 031c 	add.w	r3, r7, #28
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	4b32      	ldr	r3, [pc, #200]	; (8005a10 <SystemClock_Config+0x100>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	4a31      	ldr	r2, [pc, #196]	; (8005a10 <SystemClock_Config+0x100>)
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005950:	6413      	str	r3, [r2, #64]	; 0x40
 8005952:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <SystemClock_Config+0x100>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595a:	60bb      	str	r3, [r7, #8]
 800595c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <SystemClock_Config+0x104>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <SystemClock_Config+0x104>)
 8005968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <SystemClock_Config+0x104>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800597a:	230d      	movs	r3, #13
 800597c:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800597e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005984:	2301      	movs	r3, #1
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005988:	2301      	movs	r3, #1
 800598a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800598c:	2302      	movs	r3, #2
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005996:	2308      	movs	r3, #8
 8005998:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800599a:	23a8      	movs	r3, #168	; 0xa8
 800599c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800599e:	2302      	movs	r3, #2
 80059a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80059a2:	2307      	movs	r3, #7
 80059a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059aa:	4618      	mov	r0, r3
 80059ac:	f005 fc7a 	bl	800b2a4 <HAL_RCC_OscConfig>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80059b6:	f000 fced 	bl	8006394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059ba:	230f      	movs	r3, #15
 80059bc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059be:	2302      	movs	r3, #2
 80059c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80059c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80059cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80059d2:	f107 031c 	add.w	r3, r7, #28
 80059d6:	2105      	movs	r1, #5
 80059d8:	4618      	mov	r0, r3
 80059da:	f005 fedb 	bl	800b794 <HAL_RCC_ClockConfig>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80059e4:	f000 fcd6 	bl	8006394 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80059e8:	2302      	movs	r3, #2
 80059ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80059ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	4618      	mov	r0, r3
 80059f8:	f006 f8c6 	bl	800bb88 <HAL_RCCEx_PeriphCLKConfig>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005a02:	f000 fcc7 	bl	8006394 <Error_Handler>
  }
}
 8005a06:	bf00      	nop
 8005a08:	3760      	adds	r7, #96	; 0x60
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	40007000 	.word	0x40007000

08005a18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a1e:	463b      	mov	r3, r7
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	609a      	str	r2, [r3, #8]
 8005a28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a2c:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <MX_ADC1_Init+0xb8>)
 8005a2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005a30:	4b26      	ldr	r3, [pc, #152]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a38:	4b24      	ldr	r3, [pc, #144]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005a3e:	4b23      	ldr	r3, [pc, #140]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <MX_ADC1_Init+0xbc>)
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a66:	2202      	movs	r2, #2
 8005a68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a78:	4814      	ldr	r0, [pc, #80]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a7a:	f002 f9cf 	bl	8007e1c <HAL_ADC_Init>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005a84:	f000 fc86 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a88:	230d      	movs	r3, #13
 8005a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005a90:	2306      	movs	r3, #6
 8005a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a94:	463b      	mov	r3, r7
 8005a96:	4619      	mov	r1, r3
 8005a98:	480c      	ldr	r0, [pc, #48]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005a9a:	f002 fc71 	bl	8008380 <HAL_ADC_ConfigChannel>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005aa4:	f000 fc76 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005aac:	2302      	movs	r3, #2
 8005aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4805      	ldr	r0, [pc, #20]	; (8005acc <MX_ADC1_Init+0xb4>)
 8005ab6:	f002 fc63 	bl	8008380 <HAL_ADC_ConfigChannel>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005ac0:	f000 fc68 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200016dc 	.word	0x200016dc
 8005ad0:	40012000 	.word	0x40012000
 8005ad4:	0f000001 	.word	0x0f000001

08005ad8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ade:	463b      	mov	r3, r7
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005aea:	4b28      	ldr	r3, [pc, #160]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <MX_ADC2_Init+0xb8>)
 8005aee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005af0:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005af2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005af6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b12:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b18:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <MX_ADC2_Init+0xbc>)
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8005b24:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b26:	2202      	movs	r2, #2
 8005b28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005b32:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b38:	4814      	ldr	r0, [pc, #80]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b3a:	f002 f96f 	bl	8007e1c <HAL_ADC_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005b44:	f000 fc26 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005b48:	230b      	movs	r3, #11
 8005b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005b50:	2306      	movs	r3, #6
 8005b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b54:	463b      	mov	r3, r7
 8005b56:	4619      	mov	r1, r3
 8005b58:	480c      	ldr	r0, [pc, #48]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b5a:	f002 fc11 	bl	8008380 <HAL_ADC_ConfigChannel>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005b64:	f000 fc16 	bl	8006394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b68:	230a      	movs	r3, #10
 8005b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b70:	463b      	mov	r3, r7
 8005b72:	4619      	mov	r1, r3
 8005b74:	4805      	ldr	r0, [pc, #20]	; (8005b8c <MX_ADC2_Init+0xb4>)
 8005b76:	f002 fc03 	bl	8008380 <HAL_ADC_ConfigChannel>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005b80:	f000 fc08 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000cf4 	.word	0x20000cf4
 8005b90:	40012100 	.word	0x40012100
 8005b94:	0f000001 	.word	0x0f000001

08005b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b9c:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005b9e:	4a13      	ldr	r2, [pc, #76]	; (8005bec <MX_I2C1_Init+0x54>)
 8005ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005ba4:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <MX_I2C1_Init+0x58>)
 8005ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bd4:	4804      	ldr	r0, [pc, #16]	; (8005be8 <MX_I2C1_Init+0x50>)
 8005bd6:	f003 fe5b 	bl	8009890 <HAL_I2C_Init>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005be0:	f000 fbd8 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005be4:	bf00      	nop
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000d3c 	.word	0x20000d3c
 8005bec:	40005400 	.word	0x40005400
 8005bf0:	000186a0 	.word	0x000186a0

08005bf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <MX_I2C2_Init+0x54>)
 8005bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c00:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <MX_I2C2_Init+0x58>)
 8005c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c30:	4804      	ldr	r0, [pc, #16]	; (8005c44 <MX_I2C2_Init+0x50>)
 8005c32:	f003 fe2d 	bl	8009890 <HAL_I2C_Init>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c3c:	f000 fbaa 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c40:	bf00      	nop
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000d9c 	.word	0x20000d9c
 8005c48:	40005800 	.word	0x40005800
 8005c4c:	000186a0 	.word	0x000186a0

08005c50 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <MX_IWDG_Init+0x2c>)
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <MX_IWDG_Init+0x30>)
 8005c58:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <MX_IWDG_Init+0x2c>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <MX_IWDG_Init+0x2c>)
 8005c62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005c66:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005c68:	4804      	ldr	r0, [pc, #16]	; (8005c7c <MX_IWDG_Init+0x2c>)
 8005c6a:	f005 fa74 	bl	800b156 <HAL_IWDG_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005c74:	f000 fb8e 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000d90 	.word	0x20000d90
 8005c80:	40003000 	.word	0x40003000

08005c84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <MX_RNG_Init+0x20>)
 8005c8a:	4a07      	ldr	r2, [pc, #28]	; (8005ca8 <MX_RNG_Init+0x24>)
 8005c8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8005c8e:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <MX_RNG_Init+0x20>)
 8005c90:	f006 f85c 	bl	800bd4c <HAL_RNG_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8005c9a:	f000 fb7b 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200029a4 	.word	0x200029a4
 8005ca8:	50060800 	.word	0x50060800

08005cac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cb2:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <MX_RTC_Init+0x48>)
 8005cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cbe:	227f      	movs	r2, #127	; 0x7f
 8005cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005cda:	4805      	ldr	r0, [pc, #20]	; (8005cf0 <MX_RTC_Init+0x44>)
 8005cdc:	f006 f92f 	bl	800bf3e <HAL_RTC_Init>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8005ce6:	f000 fb55 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20002450 	.word	0x20002450
 8005cf4:	40002800 	.word	0x40002800

08005cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cfe:	f107 0308 	add.w	r3, r7, #8
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	609a      	str	r2, [r3, #8]
 8005d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d14:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8005d2a:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d2c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005d3e:	4814      	ldr	r0, [pc, #80]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d40:	f006 fc2f 	bl	800c5a2 <HAL_TIM_Base_Init>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005d4a:	f000 fb23 	bl	8006394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005d54:	f107 0308 	add.w	r3, r7, #8
 8005d58:	4619      	mov	r1, r3
 8005d5a:	480d      	ldr	r0, [pc, #52]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d5c:	f007 f830 	bl	800cdc0 <HAL_TIM_ConfigClockSource>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d66:	f000 fb15 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d72:	463b      	mov	r3, r7
 8005d74:	4619      	mov	r1, r3
 8005d76:	4806      	ldr	r0, [pc, #24]	; (8005d90 <MX_TIM2_Init+0x98>)
 8005d78:	f007 fc1e 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005d82:	f000 fb07 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20002db8 	.word	0x20002db8

08005d94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08e      	sub	sp, #56	; 0x38
 8005d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005da8:	f107 0320 	add.w	r3, r7, #32
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
 8005dc0:	615a      	str	r2, [r3, #20]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005dc4:	4b32      	ldr	r3, [pc, #200]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005dc6:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <MX_TIM3_Init+0x100>)
 8005dc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005dca:	4b31      	ldr	r3, [pc, #196]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3360-1;
 8005dd6:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005dd8:	f640 521f 	movw	r2, #3359	; 0xd1f
 8005ddc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005de4:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005dea:	4829      	ldr	r0, [pc, #164]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005dec:	f006 fbd9 	bl	800c5a2 <HAL_TIM_Base_Init>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005df6:	f000 facd 	bl	8006394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e04:	4619      	mov	r1, r3
 8005e06:	4822      	ldr	r0, [pc, #136]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e08:	f006 ffda 	bl	800cdc0 <HAL_TIM_ConfigClockSource>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005e12:	f000 fabf 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e16:	481e      	ldr	r0, [pc, #120]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e18:	f006 fcea 	bl	800c7f0 <HAL_TIM_PWM_Init>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005e22:	f000 fab7 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e26:	2300      	movs	r3, #0
 8005e28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e2e:	f107 0320 	add.w	r3, r7, #32
 8005e32:	4619      	mov	r1, r3
 8005e34:	4816      	ldr	r0, [pc, #88]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e36:	f007 fbbf 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005e40:	f000 faa8 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e44:	2360      	movs	r3, #96	; 0x60
 8005e46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	2200      	movs	r2, #0
 8005e58:	4619      	mov	r1, r3
 8005e5a:	480d      	ldr	r0, [pc, #52]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e5c:	f006 fef2 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005e66:	f000 fa95 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4807      	ldr	r0, [pc, #28]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e72:	f006 fee7 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005e7c:	f000 fa8a 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005e80:	4803      	ldr	r0, [pc, #12]	; (8005e90 <MX_TIM3_Init+0xfc>)
 8005e82:	f001 fc01 	bl	8007688 <HAL_TIM_MspPostInit>

}
 8005e86:	bf00      	nop
 8005e88:	3738      	adds	r7, #56	; 0x38
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000128c 	.word	0x2000128c
 8005e94:	40000400 	.word	0x40000400

08005e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eac:	f107 0320 	add.w	r3, r7, #32
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005eb6:	1d3b      	adds	r3, r7, #4
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	60da      	str	r2, [r3, #12]
 8005ec2:	611a      	str	r2, [r3, #16]
 8005ec4:	615a      	str	r2, [r3, #20]
 8005ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ec8:	4b3d      	ldr	r3, [pc, #244]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005eca:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <MX_TIM4_Init+0x12c>)
 8005ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005ece:	4b3c      	ldr	r3, [pc, #240]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed4:	4b3a      	ldr	r3, [pc, #232]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3360-1;
 8005eda:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005edc:	f640 521f 	movw	r2, #3359	; 0xd1f
 8005ee0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ee2:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ee8:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005eee:	4834      	ldr	r0, [pc, #208]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005ef0:	f006 fb57 	bl	800c5a2 <HAL_TIM_Base_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005efa:	f000 fa4b 	bl	8006394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f08:	4619      	mov	r1, r3
 8005f0a:	482d      	ldr	r0, [pc, #180]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f0c:	f006 ff58 	bl	800cdc0 <HAL_TIM_ConfigClockSource>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005f16:	f000 fa3d 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f1a:	4829      	ldr	r0, [pc, #164]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f1c:	f006 fc68 	bl	800c7f0 <HAL_TIM_PWM_Init>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005f26:	f000 fa35 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f32:	f107 0320 	add.w	r3, r7, #32
 8005f36:	4619      	mov	r1, r3
 8005f38:	4821      	ldr	r0, [pc, #132]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f3a:	f007 fb3d 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005f44:	f000 fa26 	bl	8006394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f48:	2360      	movs	r3, #96	; 0x60
 8005f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f58:	1d3b      	adds	r3, r7, #4
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4818      	ldr	r0, [pc, #96]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f60:	f006 fe70 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005f6a:	f000 fa13 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	2204      	movs	r2, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4812      	ldr	r0, [pc, #72]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f76:	f006 fe65 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005f80:	f000 fa08 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	2208      	movs	r2, #8
 8005f88:	4619      	mov	r1, r3
 8005f8a:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005f8c:	f006 fe5a 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8005f96:	f000 f9fd 	bl	8006394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	220c      	movs	r2, #12
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4807      	ldr	r0, [pc, #28]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005fa2:	f006 fe4f 	bl	800cc44 <HAL_TIM_PWM_ConfigChannel>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8005fac:	f000 f9f2 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005fb0:	4803      	ldr	r0, [pc, #12]	; (8005fc0 <MX_TIM4_Init+0x128>)
 8005fb2:	f001 fb69 	bl	8007688 <HAL_TIM_MspPostInit>

}
 8005fb6:	bf00      	nop
 8005fb8:	3738      	adds	r7, #56	; 0x38
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000c5c 	.word	0x20000c5c
 8005fc4:	40000800 	.word	0x40000800

08005fc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
 8005fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fdc:	463b      	mov	r3, r7
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <MX_TIM5_Init+0x94>)
 8005fe6:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <MX_TIM5_Init+0x98>)
 8005fe8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8005fea:	4b1c      	ldr	r3, [pc, #112]	; (800605c <MX_TIM5_Init+0x94>)
 8005fec:	2253      	movs	r2, #83	; 0x53
 8005fee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <MX_TIM5_Init+0x94>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005ff6:	4b19      	ldr	r3, [pc, #100]	; (800605c <MX_TIM5_Init+0x94>)
 8005ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ffc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <MX_TIM5_Init+0x94>)
 8006000:	2200      	movs	r2, #0
 8006002:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <MX_TIM5_Init+0x94>)
 8006006:	2200      	movs	r2, #0
 8006008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800600a:	4814      	ldr	r0, [pc, #80]	; (800605c <MX_TIM5_Init+0x94>)
 800600c:	f006 fac9 	bl	800c5a2 <HAL_TIM_Base_Init>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8006016:	f000 f9bd 	bl	8006394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800601a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	4619      	mov	r1, r3
 8006026:	480d      	ldr	r0, [pc, #52]	; (800605c <MX_TIM5_Init+0x94>)
 8006028:	f006 feca 	bl	800cdc0 <HAL_TIM_ConfigClockSource>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8006032:	f000 f9af 	bl	8006394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800603e:	463b      	mov	r3, r7
 8006040:	4619      	mov	r1, r3
 8006042:	4806      	ldr	r0, [pc, #24]	; (800605c <MX_TIM5_Init+0x94>)
 8006044:	f007 fab8 	bl	800d5b8 <HAL_TIMEx_MasterConfigSynchronization>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800604e:	f000 f9a1 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20001234 	.word	0x20001234
 8006060:	40000c00 	.word	0x40000c00

08006064 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 800606a:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <MX_USART1_UART_Init+0x50>)
 800606c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 8006070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 8006078:	2200      	movs	r2, #0
 800607a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 800607e:	2200      	movs	r2, #0
 8006080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 8006084:	2200      	movs	r2, #0
 8006086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006088:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 800608a:	220c      	movs	r2, #12
 800608c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800608e:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 8006090:	2200      	movs	r2, #0
 8006092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 8006096:	2200      	movs	r2, #0
 8006098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800609a:	4805      	ldr	r0, [pc, #20]	; (80060b0 <MX_USART1_UART_Init+0x4c>)
 800609c:	f007 fb1c 	bl	800d6d8 <HAL_UART_Init>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80060a6:	f000 f975 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20002384 	.word	0x20002384
 80060b4:	40011000 	.word	0x40011000

080060b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80060bc:	4b10      	ldr	r3, [pc, #64]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060be:	4a11      	ldr	r2, [pc, #68]	; (8006104 <MX_USART2_UART_Init+0x4c>)
 80060c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060c4:	4a10      	ldr	r2, [pc, #64]	; (8006108 <MX_USART2_UART_Init+0x50>)
 80060c6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060d4:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060dc:	220c      	movs	r2, #12
 80060de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060ec:	4804      	ldr	r0, [pc, #16]	; (8006100 <MX_USART2_UART_Init+0x48>)
 80060ee:	f007 faf3 	bl	800d6d8 <HAL_UART_Init>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80060f8:	f000 f94c 	bl	8006394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060fc:	bf00      	nop
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20002e00 	.word	0x20002e00
 8006104:	40004400 	.word	0x40004400
 8006108:	000f4240 	.word	0x000f4240

0800610c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <MX_DMA_Init+0x88>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <MX_DMA_Init+0x88>)
 800611c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006120:	6313      	str	r3, [r2, #48]	; 0x30
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <MX_DMA_Init+0x88>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <MX_DMA_Init+0x88>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4a17      	ldr	r2, [pc, #92]	; (8006194 <MX_DMA_Init+0x88>)
 8006138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800613c:	6313      	str	r3, [r2, #48]	; 0x30
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <MX_DMA_Init+0x88>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	2100      	movs	r1, #0
 800614e:	2010      	movs	r0, #16
 8006150:	f002 fc9b 	bl	8008a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006154:	2010      	movs	r0, #16
 8006156:	f002 fcb4 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	2038      	movs	r0, #56	; 0x38
 8006160:	f002 fc93 	bl	8008a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006164:	2038      	movs	r0, #56	; 0x38
 8006166:	f002 fcac 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	203a      	movs	r0, #58	; 0x3a
 8006170:	f002 fc8b 	bl	8008a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006174:	203a      	movs	r0, #58	; 0x3a
 8006176:	f002 fca4 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800617a:	2200      	movs	r2, #0
 800617c:	2100      	movs	r1, #0
 800617e:	203b      	movs	r0, #59	; 0x3b
 8006180:	f002 fc83 	bl	8008a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006184:	203b      	movs	r0, #59	; 0x3b
 8006186:	f002 fc9c 	bl	8008ac2 <HAL_NVIC_EnableIRQ>

}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800

08006198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	605a      	str	r2, [r3, #4]
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <MX_GPIO_Init+0x114>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	4a3d      	ldr	r2, [pc, #244]	; (80062ac <MX_GPIO_Init+0x114>)
 80061b8:	f043 0304 	orr.w	r3, r3, #4
 80061bc:	6313      	str	r3, [r2, #48]	; 0x30
 80061be:	4b3b      	ldr	r3, [pc, #236]	; (80062ac <MX_GPIO_Init+0x114>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	4b37      	ldr	r3, [pc, #220]	; (80062ac <MX_GPIO_Init+0x114>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	4a36      	ldr	r2, [pc, #216]	; (80062ac <MX_GPIO_Init+0x114>)
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	6313      	str	r3, [r2, #48]	; 0x30
 80061da:	4b34      	ldr	r3, [pc, #208]	; (80062ac <MX_GPIO_Init+0x114>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <MX_GPIO_Init+0x114>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	4a2f      	ldr	r2, [pc, #188]	; (80062ac <MX_GPIO_Init+0x114>)
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	6313      	str	r3, [r2, #48]	; 0x30
 80061f6:	4b2d      	ldr	r3, [pc, #180]	; (80062ac <MX_GPIO_Init+0x114>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006202:	2300      	movs	r3, #0
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	4b29      	ldr	r3, [pc, #164]	; (80062ac <MX_GPIO_Init+0x114>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4a28      	ldr	r2, [pc, #160]	; (80062ac <MX_GPIO_Init+0x114>)
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	6313      	str	r3, [r2, #48]	; 0x30
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <MX_GPIO_Init+0x114>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	4b22      	ldr	r3, [pc, #136]	; (80062ac <MX_GPIO_Init+0x114>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a21      	ldr	r2, [pc, #132]	; (80062ac <MX_GPIO_Init+0x114>)
 8006228:	f043 0308 	orr.w	r3, r3, #8
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
 800622e:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <MX_GPIO_Init+0x114>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800623a:	2200      	movs	r2, #0
 800623c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006240:	481b      	ldr	r0, [pc, #108]	; (80062b0 <MX_GPIO_Init+0x118>)
 8006242:	f003 fb0b 	bl	800985c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8006246:	2200      	movs	r2, #0
 8006248:	2101      	movs	r1, #1
 800624a:	481a      	ldr	r0, [pc, #104]	; (80062b4 <MX_GPIO_Init+0x11c>)
 800624c:	f003 fb06 	bl	800985c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006256:	2300      	movs	r3, #0
 8006258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	4619      	mov	r1, r3
 8006264:	4814      	ldr	r0, [pc, #80]	; (80062b8 <MX_GPIO_Init+0x120>)
 8006266:	f003 f849 	bl	80092fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800626a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006270:	2301      	movs	r3, #1
 8006272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006278:	2300      	movs	r3, #0
 800627a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4619      	mov	r1, r3
 8006282:	480b      	ldr	r0, [pc, #44]	; (80062b0 <MX_GPIO_Init+0x118>)
 8006284:	f003 f83a 	bl	80092fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006288:	2301      	movs	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800628c:	2301      	movs	r3, #1
 800628e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	4619      	mov	r1, r3
 800629e:	4805      	ldr	r0, [pc, #20]	; (80062b4 <MX_GPIO_Init+0x11c>)
 80062a0:	f003 f82c 	bl	80092fc <HAL_GPIO_Init>

}
 80062a4:	bf00      	nop
 80062a6:	3728      	adds	r7, #40	; 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40023800 	.word	0x40023800
 80062b0:	40020800 	.word	0x40020800
 80062b4:	40020c00 	.word	0x40020c00
 80062b8:	40020000 	.word	0x40020000

080062bc <HAL_TIM_PeriodElapsedCallback>:

    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

	WatchdogRefresh();		// STM32 Watchdog - NEVER DISABLE THIS (for safety!)
 80062c4:	f7fb fc50 	bl	8001b68 <WatchdogRefresh>
	SendInfoStatus = 1;		// Ready to send Serial Console info
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]

}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200009a0 	.word	0x200009a0

080062dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_RxCpltCallback_UART1>:
void HAL_UART_RxCpltCallback_UART1(UART_HandleTypeDef *huart) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.

	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {					// Check if it is an "Idle Interrupt"
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b10      	cmp	r3, #16
 8006304:	d110      	bne.n	8006328 <HAL_UART_RxCpltCallback_UART1+0x38>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);								// clear the interrupt
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_UART_RxCpltCallback_UART1+0x40>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_UART_RxCpltCallback_UART1+0x40>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart1);
 800631c:	4804      	ldr	r0, [pc, #16]	; (8006330 <HAL_UART_RxCpltCallback_UART1+0x40>)
 800631e:	f007 faea 	bl	800d8f6 <HAL_UART_DMAStop>
		UART1_ready = 1;												// Serial Console data is now ready to be processed
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <HAL_UART_RxCpltCallback_UART1+0x44>)
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]

	}

}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20002384 	.word	0x20002384
 8006334:	200009a2 	.word	0x200009a2

08006338 <HAL_UART_RxCpltCallback_UART2>:
void HAL_UART_RxCpltCallback_UART2(UART_HandleTypeDef *huart) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.

	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {					// Check if it is an "Idle Interrupt"
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d110      	bne.n	8006370 <HAL_UART_RxCpltCallback_UART2+0x38>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);								// clear the interrupt
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <HAL_UART_RxCpltCallback_UART2+0x40>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	4b07      	ldr	r3, [pc, #28]	; (8006378 <HAL_UART_RxCpltCallback_UART2+0x40>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
		HAL_UART_DMAStop(&huart2);
 8006364:	4804      	ldr	r0, [pc, #16]	; (8006378 <HAL_UART_RxCpltCallback_UART2+0x40>)
 8006366:	f007 fac6 	bl	800d8f6 <HAL_UART_DMAStop>
		UART2_ready = 1;												// // Raspberry Pi data is now ready to be processed
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <HAL_UART_RxCpltCallback_UART2+0x44>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]

	}

}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20002e00 	.word	0x20002e00
 800637c:	200009a3 	.word	0x200009a3

08006380 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;

}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006398:	b672      	cpsid	i
}
 800639a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800639c:	e7fe      	b.n	800639c <Error_Handler+0x8>
	...

080063a0 <Init6050>:
uint8_t roll_limit_idx = 0;
float a,b;
float move_array[20] = {1.0};
uint8_t move_index = 0;

void Init6050() {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 50);
 80063a6:	2332      	movs	r3, #50	; 0x32
 80063a8:	9302      	str	r3, [sp, #8]
 80063aa:	2301      	movs	r3, #1
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	1dfb      	adds	r3, r7, #7
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	2301      	movs	r3, #1
 80063b4:	2275      	movs	r2, #117	; 0x75
 80063b6:	21d0      	movs	r1, #208	; 0xd0
 80063b8:	481e      	ldr	r0, [pc, #120]	; (8006434 <Init6050+0x94>)
 80063ba:	f003 fffb 	bl	800a3b4 <HAL_I2C_Mem_Read>
	HAL_Delay(20);
 80063be:	2014      	movs	r0, #20
 80063c0:	f001 fd08 	bl	8007dd4 <HAL_Delay>

	Data = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 50);
 80063c8:	2332      	movs	r3, #50	; 0x32
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	2301      	movs	r3, #1
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	1dbb      	adds	r3, r7, #6
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2301      	movs	r3, #1
 80063d6:	226b      	movs	r2, #107	; 0x6b
 80063d8:	21d0      	movs	r1, #208	; 0xd0
 80063da:	4816      	ldr	r0, [pc, #88]	; (8006434 <Init6050+0x94>)
 80063dc:	f003 fef0 	bl	800a1c0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80063e0:	2014      	movs	r0, #20
 80063e2:	f001 fcf7 	bl	8007dd4 <HAL_Delay>

	Data = 0x07;
 80063e6:	2307      	movs	r3, #7
 80063e8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 50);
 80063ea:	2332      	movs	r3, #50	; 0x32
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	2301      	movs	r3, #1
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	1dbb      	adds	r3, r7, #6
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2301      	movs	r3, #1
 80063f8:	2219      	movs	r2, #25
 80063fa:	21d0      	movs	r1, #208	; 0xd0
 80063fc:	480d      	ldr	r0, [pc, #52]	; (8006434 <Init6050+0x94>)
 80063fe:	f003 fedf 	bl	800a1c0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8006402:	2014      	movs	r0, #20
 8006404:	f001 fce6 	bl	8007dd4 <HAL_Delay>

	Data = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 50);
 800640c:	2332      	movs	r3, #50	; 0x32
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	2301      	movs	r3, #1
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	1dbb      	adds	r3, r7, #6
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2301      	movs	r3, #1
 800641a:	221b      	movs	r2, #27
 800641c:	21d0      	movs	r1, #208	; 0xd0
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <Init6050+0x94>)
 8006420:	f003 fece 	bl	800a1c0 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8006424:	2014      	movs	r0, #20
 8006426:	f001 fcd5 	bl	8007dd4 <HAL_Delay>

}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000d9c 	.word	0x20000d9c

08006438 <ProcessIMUData>:

void ProcessIMUData() {
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0

	pitch_limit[pitch_limit_idx] = raw_pitch;
 800643e:	4b72      	ldr	r3, [pc, #456]	; (8006608 <ProcessIMUData+0x1d0>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	4b71      	ldr	r3, [pc, #452]	; (800660c <ProcessIMUData+0x1d4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4971      	ldr	r1, [pc, #452]	; (8006610 <ProcessIMUData+0x1d8>)
 800644a:	0083      	lsls	r3, r0, #2
 800644c:	440b      	add	r3, r1
 800644e:	601a      	str	r2, [r3, #0]
	roll_limit[roll_limit_idx] = raw_roll;
 8006450:	4b70      	ldr	r3, [pc, #448]	; (8006614 <ProcessIMUData+0x1dc>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	4618      	mov	r0, r3
 8006456:	4b70      	ldr	r3, [pc, #448]	; (8006618 <ProcessIMUData+0x1e0>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4970      	ldr	r1, [pc, #448]	; (800661c <ProcessIMUData+0x1e4>)
 800645c:	0083      	lsls	r3, r0, #2
 800645e:	440b      	add	r3, r1
 8006460:	601a      	str	r2, [r3, #0]

	pitch_limit_idx++;
 8006462:	4b69      	ldr	r3, [pc, #420]	; (8006608 <ProcessIMUData+0x1d0>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b67      	ldr	r3, [pc, #412]	; (8006608 <ProcessIMUData+0x1d0>)
 800646c:	701a      	strb	r2, [r3, #0]
	roll_limit_idx++;
 800646e:	4b69      	ldr	r3, [pc, #420]	; (8006614 <ProcessIMUData+0x1dc>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	b2da      	uxtb	r2, r3
 8006476:	4b67      	ldr	r3, [pc, #412]	; (8006614 <ProcessIMUData+0x1dc>)
 8006478:	701a      	strb	r2, [r3, #0]

	if (pitch_limit_idx == 20) pitch_limit_idx = 0;
 800647a:	4b63      	ldr	r3, [pc, #396]	; (8006608 <ProcessIMUData+0x1d0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b14      	cmp	r3, #20
 8006480:	d102      	bne.n	8006488 <ProcessIMUData+0x50>
 8006482:	4b61      	ldr	r3, [pc, #388]	; (8006608 <ProcessIMUData+0x1d0>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
	if (roll_limit_idx == 20) roll_limit_idx = 0;
 8006488:	4b62      	ldr	r3, [pc, #392]	; (8006614 <ProcessIMUData+0x1dc>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b14      	cmp	r3, #20
 800648e:	d102      	bne.n	8006496 <ProcessIMUData+0x5e>
 8006490:	4b60      	ldr	r3, [pc, #384]	; (8006614 <ProcessIMUData+0x1dc>)
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]

	int p = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
	int r = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]

	for (int x = 0; x < 20; x++) {
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e026      	b.n	80064f2 <ProcessIMUData+0xba>

		p += pitch_limit[x];
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ae:	4a58      	ldr	r2, [pc, #352]	; (8006610 <ProcessIMUData+0x1d8>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c2:	ee17 3a90 	vmov	r3, s15
 80064c6:	617b      	str	r3, [r7, #20]
		r += roll_limit[x];
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064d2:	4a52      	ldr	r2, [pc, #328]	; (800661c <ProcessIMUData+0x1e4>)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	edd3 7a00 	vldr	s15, [r3]
 80064de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064e6:	ee17 3a90 	vmov	r3, s15
 80064ea:	613b      	str	r3, [r7, #16]
	for (int x = 0; x < 20; x++) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b13      	cmp	r3, #19
 80064f6:	ddd5      	ble.n	80064a4 <ProcessIMUData+0x6c>

	}

	move_array[move_index] = sqrtf(a + b);
 80064f8:	4b49      	ldr	r3, [pc, #292]	; (8006620 <ProcessIMUData+0x1e8>)
 80064fa:	ed93 7a00 	vldr	s14, [r3]
 80064fe:	4b49      	ldr	r3, [pc, #292]	; (8006624 <ProcessIMUData+0x1ec>)
 8006500:	edd3 7a00 	vldr	s15, [r3]
 8006504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006508:	4b47      	ldr	r3, [pc, #284]	; (8006628 <ProcessIMUData+0x1f0>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461c      	mov	r4, r3
 800650e:	eeb0 0a67 	vmov.f32	s0, s15
 8006512:	f00d fcd7 	bl	8013ec4 <sqrtf>
 8006516:	eef0 7a40 	vmov.f32	s15, s0
 800651a:	4a44      	ldr	r2, [pc, #272]	; (800662c <ProcessIMUData+0x1f4>)
 800651c:	00a3      	lsls	r3, r4, #2
 800651e:	4413      	add	r3, r2
 8006520:	edc3 7a00 	vstr	s15, [r3]
	move_index++;
 8006524:	4b40      	ldr	r3, [pc, #256]	; (8006628 <ProcessIMUData+0x1f0>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b3e      	ldr	r3, [pc, #248]	; (8006628 <ProcessIMUData+0x1f0>)
 800652e:	701a      	strb	r2, [r3, #0]
	if (move_index == 20) move_index = 0;
 8006530:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <ProcessIMUData+0x1f0>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b14      	cmp	r3, #20
 8006536:	d102      	bne.n	800653e <ProcessIMUData+0x106>
 8006538:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <ProcessIMUData+0x1f0>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
	float sum = 0;
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	60bb      	str	r3, [r7, #8]
	for (int x = 0; x < 20; x++) {
 8006544:	2300      	movs	r3, #0
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e00e      	b.n	8006568 <ProcessIMUData+0x130>
		sum += move_array[x];
 800654a:	4a38      	ldr	r2, [pc, #224]	; (800662c <ProcessIMUData+0x1f4>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	edd3 7a00 	vldr	s15, [r3]
 8006556:	ed97 7a02 	vldr	s14, [r7, #8]
 800655a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655e:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int x = 0; x < 20; x++) {
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3301      	adds	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b13      	cmp	r3, #19
 800656c:	dded      	ble.n	800654a <ProcessIMUData+0x112>
	}
	mpu.movement = sum / 20;
 800656e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006572:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800657a:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <ProcessIMUData+0x1f8>)
 800657c:	edc3 7a08 	vstr	s15, [r3, #32]

	mpu.roll = r / 20;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4a2c      	ldr	r2, [pc, #176]	; (8006634 <ProcessIMUData+0x1fc>)
 8006584:	fb82 1203 	smull	r1, r2, r2, r3
 8006588:	10d2      	asrs	r2, r2, #3
 800658a:	17db      	asrs	r3, r3, #31
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <ProcessIMUData+0x1f8>)
 8006598:	edc3 7a02 	vstr	s15, [r3, #8]
	mpu.pitch = p / 20;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <ProcessIMUData+0x1fc>)
 80065a0:	fb82 1203 	smull	r1, r2, r2, r3
 80065a4:	10d2      	asrs	r2, r2, #3
 80065a6:	17db      	asrs	r3, r3, #31
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b2:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <ProcessIMUData+0x1f8>)
 80065b4:	edc3 7a03 	vstr	s15, [r3, #12]

	if (mpu.yaw > 359.9) mpu.yaw = 0;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <ProcessIMUData+0x1f8>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7f9 ffd3 	bl	8000568 <__aeabi_f2d>
 80065c2:	a30f      	add	r3, pc, #60	; (adr r3, 8006600 <ProcessIMUData+0x1c8>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7fa fab6 	bl	8000b38 <__aeabi_dcmpgt>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <ProcessIMUData+0x1a2>
 80065d2:	4b17      	ldr	r3, [pc, #92]	; (8006630 <ProcessIMUData+0x1f8>)
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	605a      	str	r2, [r3, #4]
	if (mpu.yaw < 0) mpu.yaw = 359.9;
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <ProcessIMUData+0x1f8>)
 80065dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80065e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	d502      	bpl.n	80065f0 <ProcessIMUData+0x1b8>
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <ProcessIMUData+0x1f8>)
 80065ec:	4a12      	ldr	r2, [pc, #72]	; (8006638 <ProcessIMUData+0x200>)
 80065ee:	605a      	str	r2, [r3, #4]

	mpu.heading = mpu.yaw;
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <ProcessIMUData+0x1f8>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <ProcessIMUData+0x1f8>)
 80065f6:	6013      	str	r3, [r2, #0]

}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd90      	pop	{r4, r7, pc}
 8006600:	66666666 	.word	0x66666666
 8006604:	40767e66 	.word	0x40767e66
 8006608:	20000a70 	.word	0x20000a70
 800660c:	20000c58 	.word	0x20000c58
 8006610:	200009d0 	.word	0x200009d0
 8006614:	20000a71 	.word	0x20000a71
 8006618:	20002ea8 	.word	0x20002ea8
 800661c:	20000a20 	.word	0x20000a20
 8006620:	20002eb0 	.word	0x20002eb0
 8006624:	20002eac 	.word	0x20002eac
 8006628:	20000a72 	.word	0x20000a72
 800662c:	20000218 	.word	0x20000218
 8006630:	200023cc 	.word	0x200023cc
 8006634:	66666667 	.word	0x66666667
 8006638:	43b3f333 	.word	0x43b3f333
 800663c:	00000000 	.word	0x00000000

08006640 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void) {
 8006640:	b5b0      	push	{r4, r5, r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];
	int16_t Accel_X_RAW = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	82fb      	strh	r3, [r7, #22]
	int16_t Accel_Y_RAW = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	82bb      	strh	r3, [r7, #20]
	int16_t Accel_Z_RAW = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	827b      	strh	r3, [r7, #18]

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if (HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 50) != HAL_OK) {
 8006652:	2332      	movs	r3, #50	; 0x32
 8006654:	9302      	str	r3, [sp, #8]
 8006656:	2306      	movs	r3, #6
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	463b      	mov	r3, r7
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	2301      	movs	r3, #1
 8006660:	223b      	movs	r2, #59	; 0x3b
 8006662:	21d0      	movs	r1, #208	; 0xd0
 8006664:	488a      	ldr	r0, [pc, #552]	; (8006890 <MPU6050_Read_Accel+0x250>)
 8006666:	f003 fea5 	bl	800a3b4 <HAL_I2C_Mem_Read>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <MPU6050_Read_Accel+0x36>
		reInitIMU();		// if the MPU-6050 does not respond within 50ms, re-init
 8006670:	f7fb f86a 	bl	8001748 <reInitIMU>
 8006674:	e101      	b.n	800687a <MPU6050_Read_Accel+0x23a>
		return;
	}

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8006676:	783b      	ldrb	r3, [r7, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	b21a      	sxth	r2, r3
 800667c:	787b      	ldrb	r3, [r7, #1]
 800667e:	b21b      	sxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	82fb      	strh	r3, [r7, #22]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	b21a      	sxth	r2, r3
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	b21b      	sxth	r3, r3
 800668e:	4313      	orrs	r3, r2
 8006690:	82bb      	strh	r3, [r7, #20]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8006692:	793b      	ldrb	r3, [r7, #4]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	b21a      	sxth	r2, r3
 8006698:	797b      	ldrb	r3, [r7, #5]
 800669a:	b21b      	sxth	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	827b      	strh	r3, [r7, #18]

	Ax = Accel_X_RAW/16384.0;
 80066a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7f9 ff4d 	bl	8000544 <__aeabi_i2d>
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	4b79      	ldr	r3, [pc, #484]	; (8006894 <MPU6050_Read_Accel+0x254>)
 80066b0:	f7fa f8dc 	bl	800086c <__aeabi_ddiv>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	f7fa faa4 	bl	8000c08 <__aeabi_d2f>
 80066c0:	4603      	mov	r3, r0
 80066c2:	4a75      	ldr	r2, [pc, #468]	; (8006898 <MPU6050_Read_Accel+0x258>)
 80066c4:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 80066c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7f9 ff3a 	bl	8000544 <__aeabi_i2d>
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	4b6f      	ldr	r3, [pc, #444]	; (8006894 <MPU6050_Read_Accel+0x254>)
 80066d6:	f7fa f8c9 	bl	800086c <__aeabi_ddiv>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4610      	mov	r0, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	f7fa fa91 	bl	8000c08 <__aeabi_d2f>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4a6c      	ldr	r2, [pc, #432]	; (800689c <MPU6050_Read_Accel+0x25c>)
 80066ea:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 80066ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7f9 ff27 	bl	8000544 <__aeabi_i2d>
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	4b66      	ldr	r3, [pc, #408]	; (8006894 <MPU6050_Read_Accel+0x254>)
 80066fc:	f7fa f8b6 	bl	800086c <__aeabi_ddiv>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	f7fa fa7e 	bl	8000c08 <__aeabi_d2f>
 800670c:	4603      	mov	r3, r0
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <MPU6050_Read_Accel+0x260>)
 8006710:	6013      	str	r3, [r2, #0]

	b = (fabs(Ax) + fabs(Ay) + fabs(Az))* 0.02;
 8006712:	4b61      	ldr	r3, [pc, #388]	; (8006898 <MPU6050_Read_Accel+0x258>)
 8006714:	edd3 7a00 	vldr	s15, [r3]
 8006718:	eef0 7ae7 	vabs.f32	s15, s15
 800671c:	ee17 0a90 	vmov	r0, s15
 8006720:	f7f9 ff22 	bl	8000568 <__aeabi_f2d>
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
 8006728:	4b5c      	ldr	r3, [pc, #368]	; (800689c <MPU6050_Read_Accel+0x25c>)
 800672a:	edd3 7a00 	vldr	s15, [r3]
 800672e:	eef0 7ae7 	vabs.f32	s15, s15
 8006732:	ee17 0a90 	vmov	r0, s15
 8006736:	f7f9 ff17 	bl	8000568 <__aeabi_f2d>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7f9 fdb3 	bl	80002ac <__adddf3>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	4b54      	ldr	r3, [pc, #336]	; (80068a0 <MPU6050_Read_Accel+0x260>)
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	eef0 7ae7 	vabs.f32	s15, s15
 8006758:	ee17 0a90 	vmov	r0, s15
 800675c:	f7f9 ff04 	bl	8000568 <__aeabi_f2d>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7f9 fda0 	bl	80002ac <__adddf3>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	a342      	add	r3, pc, #264	; (adr r3, 8006880 <MPU6050_Read_Accel+0x240>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f7f9 ff4d 	bl	8000618 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4610      	mov	r0, r2
 8006784:	4619      	mov	r1, r3
 8006786:	f7fa fa3f 	bl	8000c08 <__aeabi_d2f>
 800678a:	4603      	mov	r3, r0
 800678c:	4a45      	ldr	r2, [pc, #276]	; (80068a4 <MPU6050_Read_Accel+0x264>)
 800678e:	6013      	str	r3, [r2, #0]

	float r, p;
	p = atan2(Ay , Az) * 57.3;										// Ay, Az
 8006790:	4b42      	ldr	r3, [pc, #264]	; (800689c <MPU6050_Read_Accel+0x25c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7f9 fee7 	bl	8000568 <__aeabi_f2d>
 800679a:	4604      	mov	r4, r0
 800679c:	460d      	mov	r5, r1
 800679e:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <MPU6050_Read_Accel+0x260>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fee0 	bl	8000568 <__aeabi_f2d>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	ec43 2b11 	vmov	d1, r2, r3
 80067b0:	ec45 4b10 	vmov	d0, r4, r5
 80067b4:	f00d fb84 	bl	8013ec0 <atan2>
 80067b8:	ec51 0b10 	vmov	r0, r1, d0
 80067bc:	a332      	add	r3, pc, #200	; (adr r3, 8006888 <MPU6050_Read_Accel+0x248>)
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f7f9 ff29 	bl	8000618 <__aeabi_dmul>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fa fa1b 	bl	8000c08 <__aeabi_d2f>
 80067d2:	4603      	mov	r3, r0
 80067d4:	60fb      	str	r3, [r7, #12]
	r = atan2((- Ax) , sqrtf(Ax * Ay + Az * Az)) * 57.3;			// Ax, Ay, Az, Az
 80067d6:	4b30      	ldr	r3, [pc, #192]	; (8006898 <MPU6050_Read_Accel+0x258>)
 80067d8:	edd3 7a00 	vldr	s15, [r3]
 80067dc:	eef1 7a67 	vneg.f32	s15, s15
 80067e0:	ee17 3a90 	vmov	r3, s15
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7f9 febf 	bl	8000568 <__aeabi_f2d>
 80067ea:	4604      	mov	r4, r0
 80067ec:	460d      	mov	r5, r1
 80067ee:	4b2a      	ldr	r3, [pc, #168]	; (8006898 <MPU6050_Read_Accel+0x258>)
 80067f0:	ed93 7a00 	vldr	s14, [r3]
 80067f4:	4b29      	ldr	r3, [pc, #164]	; (800689c <MPU6050_Read_Accel+0x25c>)
 80067f6:	edd3 7a00 	vldr	s15, [r3]
 80067fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067fe:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <MPU6050_Read_Accel+0x260>)
 8006800:	edd3 6a00 	vldr	s13, [r3]
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <MPU6050_Read_Accel+0x260>)
 8006806:	edd3 7a00 	vldr	s15, [r3]
 800680a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800680e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006812:	eeb0 0a67 	vmov.f32	s0, s15
 8006816:	f00d fb55 	bl	8013ec4 <sqrtf>
 800681a:	ee10 3a10 	vmov	r3, s0
 800681e:	4618      	mov	r0, r3
 8006820:	f7f9 fea2 	bl	8000568 <__aeabi_f2d>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	ec43 2b11 	vmov	d1, r2, r3
 800682c:	ec45 4b10 	vmov	d0, r4, r5
 8006830:	f00d fb46 	bl	8013ec0 <atan2>
 8006834:	ec51 0b10 	vmov	r0, r1, d0
 8006838:	a313      	add	r3, pc, #76	; (adr r3, 8006888 <MPU6050_Read_Accel+0x248>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 feeb 	bl	8000618 <__aeabi_dmul>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f7fa f9dd 	bl	8000c08 <__aeabi_d2f>
 800684e:	4603      	mov	r3, r0
 8006850:	60bb      	str	r3, [r7, #8]

	raw_roll = r + mpu.roll_error;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <MPU6050_Read_Accel+0x268>)
 8006854:	ed93 7a06 	vldr	s14, [r3, #24]
 8006858:	edd7 7a02 	vldr	s15, [r7, #8]
 800685c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <MPU6050_Read_Accel+0x26c>)
 8006862:	edc3 7a00 	vstr	s15, [r3]
	raw_pitch = p + mpu.pitch_error;
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <MPU6050_Read_Accel+0x268>)
 8006868:	ed93 7a07 	vldr	s14, [r3, #28]
 800686c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <MPU6050_Read_Accel+0x270>)
 8006876:	edc3 7a00 	vstr	s15, [r3]


}
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bdb0      	pop	{r4, r5, r7, pc}
 8006880:	47ae147b 	.word	0x47ae147b
 8006884:	3f947ae1 	.word	0x3f947ae1
 8006888:	66666666 	.word	0x66666666
 800688c:	404ca666 	.word	0x404ca666
 8006890:	20000d9c 	.word	0x20000d9c
 8006894:	40d00000 	.word	0x40d00000
 8006898:	20002470 	.word	0x20002470
 800689c:	200012d4 	.word	0x200012d4
 80068a0:	20002db4 	.word	0x20002db4
 80068a4:	20002eac 	.word	0x20002eac
 80068a8:	200023cc 	.word	0x200023cc
 80068ac:	20002ea8 	.word	0x20002ea8
 80068b0:	20000c58 	.word	0x20000c58
 80068b4:	00000000 	.word	0x00000000

080068b8 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro(void) {
 80068b8:	b5b0      	push	{r4, r5, r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];
	int16_t Gyro_X_RAW = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	81fb      	strh	r3, [r7, #14]
	int16_t Gyro_Y_RAW = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	81bb      	strh	r3, [r7, #12]
	int16_t Gyro_Z_RAW = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	817b      	strh	r3, [r7, #10]

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	if (HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 50) != HAL_OK) {
 80068ca:	2332      	movs	r3, #50	; 0x32
 80068cc:	9302      	str	r3, [sp, #8]
 80068ce:	2306      	movs	r3, #6
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	1d3b      	adds	r3, r7, #4
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2301      	movs	r3, #1
 80068d8:	2243      	movs	r2, #67	; 0x43
 80068da:	21d0      	movs	r1, #208	; 0xd0
 80068dc:	487c      	ldr	r0, [pc, #496]	; (8006ad0 <MPU6050_Read_Gyro+0x218>)
 80068de:	f003 fd69 	bl	800a3b4 <HAL_I2C_Mem_Read>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <MPU6050_Read_Gyro+0x36>
		reInitIMU();	// if the MPU-6050 does not respond within 50ms, re-init
 80068e8:	f7fa ff2e 	bl	8001748 <reInitIMU>
 80068ec:	e0e3      	b.n	8006ab6 <MPU6050_Read_Gyro+0x1fe>
		return;
	}

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80068ee:	793b      	ldrb	r3, [r7, #4]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	b21a      	sxth	r2, r3
 80068f4:	797b      	ldrb	r3, [r7, #5]
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80068fc:	79bb      	ldrb	r3, [r7, #6]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	b21a      	sxth	r2, r3
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	b21b      	sxth	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800690a:	7a3b      	ldrb	r3, [r7, #8]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	b21a      	sxth	r2, r3
 8006910:	7a7b      	ldrb	r3, [r7, #9]
 8006912:	b21b      	sxth	r3, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	817b      	strh	r3, [r7, #10]

	Gx = Gyro_X_RAW/131.0;
 8006918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800691c:	4618      	mov	r0, r3
 800691e:	f7f9 fe11 	bl	8000544 <__aeabi_i2d>
 8006922:	a367      	add	r3, pc, #412	; (adr r3, 8006ac0 <MPU6050_Read_Gyro+0x208>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	f7f9 ffa0 	bl	800086c <__aeabi_ddiv>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	f7fa f968 	bl	8000c08 <__aeabi_d2f>
 8006938:	4603      	mov	r3, r0
 800693a:	4a66      	ldr	r2, [pc, #408]	; (8006ad4 <MPU6050_Read_Gyro+0x21c>)
 800693c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 800693e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006942:	4618      	mov	r0, r3
 8006944:	f7f9 fdfe 	bl	8000544 <__aeabi_i2d>
 8006948:	a35d      	add	r3, pc, #372	; (adr r3, 8006ac0 <MPU6050_Read_Gyro+0x208>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f7f9 ff8d 	bl	800086c <__aeabi_ddiv>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	f7fa f955 	bl	8000c08 <__aeabi_d2f>
 800695e:	4603      	mov	r3, r0
 8006960:	4a5d      	ldr	r2, [pc, #372]	; (8006ad8 <MPU6050_Read_Gyro+0x220>)
 8006962:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8006964:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fdeb 	bl	8000544 <__aeabi_i2d>
 800696e:	a354      	add	r3, pc, #336	; (adr r3, 8006ac0 <MPU6050_Read_Gyro+0x208>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7f9 ff7a 	bl	800086c <__aeabi_ddiv>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	f7fa f942 	bl	8000c08 <__aeabi_d2f>
 8006984:	4603      	mov	r3, r0
 8006986:	4a55      	ldr	r2, [pc, #340]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006988:	6013      	str	r3, [r2, #0]

	a = (fabs(Gx) + fabs(Gy) + fabs(Gz))* 0.02;
 800698a:	4b52      	ldr	r3, [pc, #328]	; (8006ad4 <MPU6050_Read_Gyro+0x21c>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	eef0 7ae7 	vabs.f32	s15, s15
 8006994:	ee17 0a90 	vmov	r0, s15
 8006998:	f7f9 fde6 	bl	8000568 <__aeabi_f2d>
 800699c:	4604      	mov	r4, r0
 800699e:	460d      	mov	r5, r1
 80069a0:	4b4d      	ldr	r3, [pc, #308]	; (8006ad8 <MPU6050_Read_Gyro+0x220>)
 80069a2:	edd3 7a00 	vldr	s15, [r3]
 80069a6:	eef0 7ae7 	vabs.f32	s15, s15
 80069aa:	ee17 0a90 	vmov	r0, s15
 80069ae:	f7f9 fddb 	bl	8000568 <__aeabi_f2d>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fc77 	bl	80002ac <__adddf3>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4614      	mov	r4, r2
 80069c4:	461d      	mov	r5, r3
 80069c6:	4b45      	ldr	r3, [pc, #276]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 80069c8:	edd3 7a00 	vldr	s15, [r3]
 80069cc:	eef0 7ae7 	vabs.f32	s15, s15
 80069d0:	ee17 0a90 	vmov	r0, s15
 80069d4:	f7f9 fdc8 	bl	8000568 <__aeabi_f2d>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f7f9 fc64 	bl	80002ac <__adddf3>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	a336      	add	r3, pc, #216	; (adr r3, 8006ac8 <MPU6050_Read_Gyro+0x210>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fe11 	bl	8000618 <__aeabi_dmul>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4610      	mov	r0, r2
 80069fc:	4619      	mov	r1, r3
 80069fe:	f7fa f903 	bl	8000c08 <__aeabi_d2f>
 8006a02:	4603      	mov	r3, r0
 8006a04:	4a36      	ldr	r2, [pc, #216]	; (8006ae0 <MPU6050_Read_Gyro+0x228>)
 8006a06:	6013      	str	r3, [r2, #0]

	if (Initial_Start == 0) {
 8006a08:	4b36      	ldr	r3, [pc, #216]	; (8006ae4 <MPU6050_Read_Gyro+0x22c>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d113      	bne.n	8006a38 <MPU6050_Read_Gyro+0x180>
		if (fabs(Gz) < 1.0) {
 8006a10:	4b32      	ldr	r3, [pc, #200]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a12:	edd3 7a00 	vldr	s15, [r3]
 8006a16:	eef0 7ae7 	vabs.f32	s15, s15
 8006a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a26:	d507      	bpl.n	8006a38 <MPU6050_Read_Gyro+0x180>
			mpu.yaw_error = fabs(Gz);		// Auto calibrate the Gyro error at startup
 8006a28:	4b2c      	ldr	r3, [pc, #176]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a2a:	edd3 7a00 	vldr	s15, [r3]
 8006a2e:	eef0 7ae7 	vabs.f32	s15, s15
 8006a32:	4b2d      	ldr	r3, [pc, #180]	; (8006ae8 <MPU6050_Read_Gyro+0x230>)
 8006a34:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}
	Gz += mpu.yaw_error;					//Cancel out error
 8006a38:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <MPU6050_Read_Gyro+0x230>)
 8006a3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8006a3e:	4b27      	ldr	r3, [pc, #156]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a40:	edd3 7a00 	vldr	s15, [r3]
 8006a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a48:	4b24      	ldr	r3, [pc, #144]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a4a:	edc3 7a00 	vstr	s15, [r3]

	if (Gz < -1.00 || Gz > 1.00) {		//if not moving, do not change
 8006a4e:	4b23      	ldr	r3, [pc, #140]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a50:	edd3 7a00 	vldr	s15, [r3]
 8006a54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a60:	d409      	bmi.n	8006a76 <MPU6050_Read_Gyro+0x1be>
 8006a62:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a64:	edd3 7a00 	vldr	s15, [r3]
 8006a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	dd1f      	ble.n	8006ab6 <MPU6050_Read_Gyro+0x1fe>
		mpu.yaw = mpu.yaw - (Gz * 0.02);
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <MPU6050_Read_Gyro+0x230>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7f9 fd74 	bl	8000568 <__aeabi_f2d>
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <MPU6050_Read_Gyro+0x224>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7f9 fd6d 	bl	8000568 <__aeabi_f2d>
 8006a8e:	a30e      	add	r3, pc, #56	; (adr r3, 8006ac8 <MPU6050_Read_Gyro+0x210>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fdc0 	bl	8000618 <__aeabi_dmul>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fc02 	bl	80002a8 <__aeabi_dsub>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7fa f8ac 	bl	8000c08 <__aeabi_d2f>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <MPU6050_Read_Gyro+0x230>)
 8006ab4:	6053      	str	r3, [r2, #4]
	}

}
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bdb0      	pop	{r4, r5, r7, pc}
 8006abc:	f3af 8000 	nop.w
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	40606000 	.word	0x40606000
 8006ac8:	47ae147b 	.word	0x47ae147b
 8006acc:	3f947ae1 	.word	0x3f947ae1
 8006ad0:	20000d9c 	.word	0x20000d9c
 8006ad4:	20000b50 	.word	0x20000b50
 8006ad8:	200012d8 	.word	0x200012d8
 8006adc:	20002ea4 	.word	0x20002ea4
 8006ae0:	20002eb0 	.word	0x20002eb0
 8006ae4:	20000952 	.word	0x20000952
 8006ae8:	200023cc 	.word	0x200023cc

08006aec <read_sram_uint8>:
#include "stdio.h"
#include <stdlib.h>


uint8_t read_sram_uint8(uint8_t addr)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
   uint8_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]
 8006afa:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <read_sram_uint8+0x50>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4a0f      	ldr	r2, [pc, #60]	; (8006b3c <read_sram_uint8+0x50>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6313      	str	r3, [r2, #48]	; 0x30
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <read_sram_uint8+0x50>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint8_t*) (BKPSRAM_BASE + addr);
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006b18:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	73fb      	strb	r3, [r7, #15]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <read_sram_uint8+0x50>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	4a05      	ldr	r2, [pc, #20]	; (8006b3c <read_sram_uint8+0x50>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800

08006b40 <write_sram_uint8>:

void write_sram_uint8(uint8_t l_data, uint8_t addr)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	460a      	mov	r2, r1
 8006b4a:	71fb      	strb	r3, [r7, #7]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71bb      	strb	r3, [r7, #6]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <write_sram_uint8+0x54>)
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <write_sram_uint8+0x54>)
 8006b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <write_sram_uint8+0x54>)
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint8_t *) (BKPSRAM_BASE + addr) = l_data;
 8006b6c:	79bb      	ldrb	r3, [r7, #6]
 8006b6e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006b72:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006b76:	461a      	mov	r2, r3
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	7013      	strb	r3, [r2, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <write_sram_uint8+0x54>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <write_sram_uint8+0x54>)
 8006b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40023800 	.word	0x40023800

08006b98 <read_sram_uint16>:

uint16_t read_sram_uint16(uint8_t addr)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	71fb      	strb	r3, [r7, #7]
   uint16_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <read_sram_uint16+0x50>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <read_sram_uint16+0x50>)
 8006bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <read_sram_uint16+0x50>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint16_t*) (BKPSRAM_BASE + addr);
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006bc4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	81fb      	strh	r3, [r7, #14]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <read_sram_uint16+0x50>)
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <read_sram_uint16+0x50>)
 8006bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd6:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40023800 	.word	0x40023800

08006bec <write_sram_uint16>:

void write_sram_uint16(uint16_t l_data, uint8_t addr)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	80fb      	strh	r3, [r7, #6]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	717b      	strb	r3, [r7, #5]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <write_sram_uint16+0x54>)
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <write_sram_uint16+0x54>)
 8006c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <write_sram_uint16+0x54>)
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint16_t *) (BKPSRAM_BASE + addr) = l_data;
 8006c18:	797b      	ldrb	r3, [r7, #5]
 8006c1a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006c1e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006c22:	461a      	mov	r2, r3
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	8013      	strh	r3, [r2, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <write_sram_uint16+0x54>)
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <write_sram_uint16+0x54>)
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40023800 	.word	0x40023800

08006c44 <read_sram_uint32>:

uint32_t read_sram_uint32(uint8_t addr)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
   uint32_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <read_sram_uint32+0x50>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	4a0f      	ldr	r2, [pc, #60]	; (8006c94 <read_sram_uint32+0x50>)
 8006c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <read_sram_uint32+0x50>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval =  *(uint32_t*) (BKPSRAM_BASE + addr);
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006c70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <read_sram_uint32+0x50>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	4a05      	ldr	r2, [pc, #20]	; (8006c94 <read_sram_uint32+0x50>)
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c82:	6313      	str	r3, [r2, #48]	; 0x30
  return i_retval;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800

08006c98 <read_sram_float>:
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
}

float read_sram_float(uint8_t addr)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	71fb      	strb	r3, [r7, #7]
   uint32_t i_retval;

  /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <read_sram_float+0x58>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	4a11      	ldr	r2, [pc, #68]	; (8006cf0 <read_sram_float+0x58>)
 8006cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <read_sram_float+0x58>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
  /* Pointer write from specific location of backup SRAM */
  i_retval = *(uint32_t*) (BKPSRAM_BASE + addr);
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006cc4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Disable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <read_sram_float+0x58>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <read_sram_float+0x58>)
 8006cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cd6:	6313      	str	r3, [r2, #48]	; 0x30
  return *(float *) &i_retval;
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	ee07 3a90 	vmov	s15, r3
}
 8006ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40023800 	.word	0x40023800

08006cf4 <write_sram_float>:

void write_sram_float(float l_data, uint8_t addr)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	70fb      	strb	r3, [r7, #3]
   /* Enable clock to BKPSRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <write_sram_float+0x54>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <write_sram_float+0x54>)
 8006d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d10:	6313      	str	r3, [r2, #48]	; 0x30
 8006d12:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <write_sram_float+0x54>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
  /* Pointer write on specific location of backup SRAM */
  *(uint32_t *) (BKPSRAM_BASE + addr) = *(uint32_t *) &l_data;
 8006d1e:	1d3a      	adds	r2, r7, #4
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
 8006d26:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	600b      	str	r3, [r1, #0]
 /* Disable clock to BKPSRAM */
 __HAL_RCC_BKPSRAM_CLK_DISABLE();
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <write_sram_float+0x54>)
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <write_sram_float+0x54>)
 8006d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40023800 	.word	0x40023800

08006d4c <enable_backup_sram>:

void enable_backup_sram(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
    /*DBP : Enable access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006d52:	f004 fa53 	bl	800b1fc <HAL_PWR_EnableBkUpAccess>
    /*PWREN : Enable backup domain access  */
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <enable_backup_sram+0x34>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <enable_backup_sram+0x34>)
 8006d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6413      	str	r3, [r2, #64]	; 0x40
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <enable_backup_sram+0x34>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
    /*BRE : Enable backup regulator
      BRR : Wait for backup regulator to stabilize */
    HAL_PWREx_EnableBkUpReg();
 8006d72:	f004 fa71 	bl	800b258 <HAL_PWREx_EnableBkUpReg>
   /*DBP : Disable access to Backup domain */
//    HAL_PWR_DisableBkUpAccess();
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800

08006d84 <read_all_settings>:

sram_settings read_all_settings(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b096      	sub	sp, #88	; 0x58
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	sram_settings settings;

	settings.Config_Set = read_sram_uint8(CONFIG_SET_ADDR);
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7ff fead 	bl	8006aec <read_sram_uint8>
 8006d92:	4603      	mov	r3, r0
 8006d94:	723b      	strb	r3, [r7, #8]
	settings.Go_Home_Direction = read_sram_uint8(GO_GOME_DIRECTION_ADDR);
 8006d96:	2002      	movs	r0, #2
 8006d98:	f7ff fea8 	bl	8006aec <read_sram_uint8>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	727b      	strb	r3, [r7, #9]
	settings.Boundary_Timeout = read_sram_uint32(BOUNDARY_TIMEOUT_ADDR);
 8006da0:	2003      	movs	r0, #3
 8006da2:	f7ff ff4f 	bl	8006c44 <read_sram_uint32>
 8006da6:	4603      	mov	r3, r0
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	72bb      	strb	r3, [r7, #10]
	settings.WorkingHourStart = read_sram_uint8(WORKINGHOURSTART_ADDR);
 8006dac:	2004      	movs	r0, #4
 8006dae:	f7ff fe9d 	bl	8006aec <read_sram_uint8>
 8006db2:	4603      	mov	r3, r0
 8006db4:	72fb      	strb	r3, [r7, #11]
	settings.WorkingHourEnd = read_sram_uint32(WORKINGHOUREND_ADDR);
 8006db6:	2005      	movs	r0, #5
 8006db8:	f7ff ff44 	bl	8006c44 <read_sram_uint32>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	733b      	strb	r3, [r7, #12]
	settings.Overturn_Limit = read_sram_uint8(OVERTURN_LIMIT_ADDR);
 8006dc2:	2006      	movs	r0, #6
 8006dc4:	f7ff fe92 	bl	8006aec <read_sram_uint8>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	737b      	strb	r3, [r7, #13]
	settings.MotorSpeedUpdateFreq = read_sram_uint8(MOTORSPEEDUPDATEFREQ_ADDR);
 8006dcc:	2007      	movs	r0, #7
 8006dce:	f7ff fe8d 	bl	8006aec <read_sram_uint8>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73bb      	strb	r3, [r7, #14]
	settings.Outside_Threshold = read_sram_uint8(OUTSIDE_THRESHOLD_ADDR);
 8006dd6:	2008      	movs	r0, #8
 8006dd8:	f7ff fe88 	bl	8006aec <read_sram_uint8>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
	settings.move_count_limit = read_sram_uint8(MOVE_COUNT_ADDR);
 8006de0:	2009      	movs	r0, #9
 8006de2:	f7ff fe83 	bl	8006aec <read_sram_uint8>
 8006de6:	4603      	mov	r3, r0
 8006de8:	743b      	strb	r3, [r7, #16]
	settings.bumber_count_limit = read_sram_uint8(BUMPER_COUNT_ADDR);
 8006dea:	200a      	movs	r0, #10
 8006dec:	f7ff fe7e 	bl	8006aec <read_sram_uint8>
 8006df0:	4603      	mov	r3, r0
 8006df2:	747b      	strb	r3, [r7, #17]

	settings.HoldChargeDetection = read_sram_uint16(HOLDCHARGEDETECTION_ADDR);
 8006df4:	2032      	movs	r0, #50	; 0x32
 8006df6:	f7ff fecf 	bl	8006b98 <read_sram_uint16>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	827b      	strh	r3, [r7, #18]
	settings.magValue = read_sram_uint16(MAGVALUE_ADDR);
 8006dfe:	2034      	movs	r0, #52	; 0x34
 8006e00:	f7ff feca 	bl	8006b98 <read_sram_uint16>
 8006e04:	4603      	mov	r3, r0
 8006e06:	82bb      	strh	r3, [r7, #20]
	settings.magMinValue = read_sram_uint16(MAGMINVALUE_ADDR);
 8006e08:	2036      	movs	r0, #54	; 0x36
 8006e0a:	f7ff fec5 	bl	8006b98 <read_sram_uint16>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	82fb      	strh	r3, [r7, #22]
	settings.motorMaxSpeed = read_sram_uint16(MOTORMAXSPEED_ADDR);
 8006e12:	2038      	movs	r0, #56	; 0x38
 8006e14:	f7ff fec0 	bl	8006b98 <read_sram_uint16>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	833b      	strh	r3, [r7, #24]
	settings.motorMinSpeed = read_sram_uint16(MOTORMINSPEED_ADDR);
 8006e1c:	203a      	movs	r0, #58	; 0x3a
 8006e1e:	f7ff febb 	bl	8006b98 <read_sram_uint16>
 8006e22:	4603      	mov	r3, r0
 8006e24:	837b      	strh	r3, [r7, #26]
	settings.cutterSpeed = read_sram_uint16(CUTTERSPEED_ADDR);
 8006e26:	203c      	movs	r0, #60	; 0x3c
 8006e28:	f7ff feb6 	bl	8006b98 <read_sram_uint16>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	83bb      	strh	r3, [r7, #28]
	settings.adcLevel = read_sram_uint16(ADC_LEVEL_ADDR);
 8006e30:	203e      	movs	r0, #62	; 0x3e
 8006e32:	f7ff feb1 	bl	8006b98 <read_sram_uint16>
 8006e36:	4603      	mov	r3, r0
 8006e38:	83fb      	strh	r3, [r7, #30]

	settings.Battery_High_Limit = read_sram_float(BATTERY_HIGH_LIMIT_ADDR);
 8006e3a:	2068      	movs	r0, #104	; 0x68
 8006e3c:	f7ff ff2c 	bl	8006c98 <read_sram_float>
 8006e40:	eef0 7a40 	vmov.f32	s15, s0
 8006e44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	settings.Battery_Low_Limit = read_sram_float(BATTERY_LOW_LIMIT_ADDR);
 8006e48:	2064      	movs	r0, #100	; 0x64
 8006e4a:	f7ff ff25 	bl	8006c98 <read_sram_float>
 8006e4e:	eef0 7a40 	vmov.f32	s15, s0
 8006e52:	edc7 7a08 	vstr	s15, [r7, #32]

	settings.Signal_Integrity_IN = read_sram_float(SIGNAL_INTEGRITY_IN_ADDR);
 8006e56:	206c      	movs	r0, #108	; 0x6c
 8006e58:	f7ff ff1e 	bl	8006c98 <read_sram_float>
 8006e5c:	eef0 7a40 	vmov.f32	s15, s0
 8006e60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	settings.Signal_Integrity_OUT = read_sram_float(SIGNAL_INTEGRITY_OUT_ADDR);
 8006e64:	2070      	movs	r0, #112	; 0x70
 8006e66:	f7ff ff17 	bl	8006c98 <read_sram_float>
 8006e6a:	eef0 7a40 	vmov.f32	s15, s0
 8006e6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	settings.Motor_Limit = read_sram_float(MOTOR_LIMIT_ADDR);
 8006e72:	2074      	movs	r0, #116	; 0x74
 8006e74:	f7ff ff10 	bl	8006c98 <read_sram_float>
 8006e78:	eef0 7a40 	vmov.f32	s15, s0
 8006e7c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	settings.Cutter_Limit = read_sram_float(CUTTER_LIMIT_ADDR);
 8006e80:	2078      	movs	r0, #120	; 0x78
 8006e82:	f7ff ff09 	bl	8006c98 <read_sram_float>
 8006e86:	eef0 7a40 	vmov.f32	s15, s0
 8006e8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	settings.kp = read_sram_float(KP_ADDR);
 8006e8e:	207c      	movs	r0, #124	; 0x7c
 8006e90:	f7ff ff02 	bl	8006c98 <read_sram_float>
 8006e94:	eef0 7a40 	vmov.f32	s15, s0
 8006e98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	settings.ki = read_sram_float(KI_ADDR);
 8006e9c:	2080      	movs	r0, #128	; 0x80
 8006e9e:	f7ff fefb 	bl	8006c98 <read_sram_float>
 8006ea2:	eef0 7a40 	vmov.f32	s15, s0
 8006ea6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	settings.kd = read_sram_float(KD_ADDR);
 8006eaa:	2084      	movs	r0, #132	; 0x84
 8006eac:	f7ff fef4 	bl	8006c98 <read_sram_float>
 8006eb0:	eef0 7a40 	vmov.f32	s15, s0
 8006eb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

	settings.Motor_Max_Limit = read_sram_float(Motor_Max_Limit_ADDR);
 8006eb8:	2090      	movs	r0, #144	; 0x90
 8006eba:	f7ff feed 	bl	8006c98 <read_sram_float>
 8006ebe:	eef0 7a40 	vmov.f32	s15, s0
 8006ec2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	settings.Motor_Min_Limit = read_sram_float(Motor_Min_Limit_ADDR);
 8006ec6:	209c      	movs	r0, #156	; 0x9c
 8006ec8:	f7ff fee6 	bl	8006c98 <read_sram_float>
 8006ecc:	eef0 7a40 	vmov.f32	s15, s0
 8006ed0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	settings.voltageMultiply = read_sram_float(voltageMultiply_ADDR);
 8006ed4:	2094      	movs	r0, #148	; 0x94
 8006ed6:	f7ff fedf 	bl	8006c98 <read_sram_float>
 8006eda:	eef0 7a40 	vmov.f32	s15, s0
 8006ede:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	settings.proximitySpeed = read_sram_float(proximitySpeed_ADDR);
 8006ee2:	2098      	movs	r0, #152	; 0x98
 8006ee4:	f7ff fed8 	bl	8006c98 <read_sram_float>
 8006ee8:	eef0 7a40 	vmov.f32	s15, s0
 8006eec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	settings.movement = read_sram_float(MOVEMENT_ADDR);
 8006ef0:	2088      	movs	r0, #136	; 0x88
 8006ef2:	f7ff fed1 	bl	8006c98 <read_sram_float>
 8006ef6:	eef0 7a40 	vmov.f32	s15, s0
 8006efa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54


	return settings;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	2250      	movs	r2, #80	; 0x50
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f007 ff29 	bl	800ed60 <memcpy>
}
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	3758      	adds	r7, #88	; 0x58
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <write_all_settings>:
void write_all_settings(sram_settings settings)
{
 8006f16:	b084      	sub	sp, #16
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	f107 0c08 	add.w	ip, r7, #8
 8006f20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// uint16_t = 2 byte
	//uint32_t = 4 byte
	//float = 4 byte

	// uint8_t
	settings.Config_Set = 42;
 8006f24:	232a      	movs	r3, #42	; 0x2a
 8006f26:	723b      	strb	r3, [r7, #8]
	write_sram_uint8(settings.Config_Set, CONFIG_SET_ADDR);
 8006f28:	7a3b      	ldrb	r3, [r7, #8]
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff fe07 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.Go_Home_Direction, GO_GOME_DIRECTION_ADDR);
 8006f32:	7a7b      	ldrb	r3, [r7, #9]
 8006f34:	2102      	movs	r1, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fe02 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.Boundary_Timeout, BOUNDARY_TIMEOUT_ADDR);
 8006f3c:	7abb      	ldrb	r3, [r7, #10]
 8006f3e:	2103      	movs	r1, #3
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff fdfd 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.WorkingHourStart, WORKINGHOURSTART_ADDR);
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	2104      	movs	r1, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fdf8 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.WorkingHourEnd, WORKINGHOUREND_ADDR);
 8006f50:	7b3b      	ldrb	r3, [r7, #12]
 8006f52:	2105      	movs	r1, #5
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff fdf3 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.Overturn_Limit, OVERTURN_LIMIT_ADDR);
 8006f5a:	7b7b      	ldrb	r3, [r7, #13]
 8006f5c:	2106      	movs	r1, #6
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fdee 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.MotorSpeedUpdateFreq, MOTORSPEEDUPDATEFREQ_ADDR);
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2107      	movs	r1, #7
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fde9 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.Outside_Threshold, OUTSIDE_THRESHOLD_ADDR);
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2108      	movs	r1, #8
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fde4 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.move_count_limit, MOVE_COUNT_ADDR);
 8006f78:	7c3b      	ldrb	r3, [r7, #16]
 8006f7a:	2109      	movs	r1, #9
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fddf 	bl	8006b40 <write_sram_uint8>
	write_sram_uint8(settings.bumber_count_limit, BUMPER_COUNT_ADDR);
 8006f82:	7c7b      	ldrb	r3, [r7, #17]
 8006f84:	210a      	movs	r1, #10
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fdda 	bl	8006b40 <write_sram_uint8>


	// uint16_t
	write_sram_uint16(settings.HoldChargeDetection, HOLDCHARGEDETECTION_ADDR);
 8006f8c:	8a7b      	ldrh	r3, [r7, #18]
 8006f8e:	2132      	movs	r1, #50	; 0x32
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fe2b 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.magValue, MAGVALUE_ADDR);
 8006f96:	8abb      	ldrh	r3, [r7, #20]
 8006f98:	2134      	movs	r1, #52	; 0x34
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fe26 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.magMinValue, MAGMINVALUE_ADDR);
 8006fa0:	8afb      	ldrh	r3, [r7, #22]
 8006fa2:	2136      	movs	r1, #54	; 0x36
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fe21 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.motorMaxSpeed, MOTORMAXSPEED_ADDR);
 8006faa:	8b3b      	ldrh	r3, [r7, #24]
 8006fac:	2138      	movs	r1, #56	; 0x38
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fe1c 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.motorMinSpeed, MOTORMINSPEED_ADDR);
 8006fb4:	8b7b      	ldrh	r3, [r7, #26]
 8006fb6:	213a      	movs	r1, #58	; 0x3a
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fe17 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.cutterSpeed, CUTTERSPEED_ADDR);
 8006fbe:	8bbb      	ldrh	r3, [r7, #28]
 8006fc0:	213c      	movs	r1, #60	; 0x3c
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fe12 	bl	8006bec <write_sram_uint16>
	write_sram_uint16(settings.adcLevel, ADC_LEVEL_ADDR);
 8006fc8:	8bfb      	ldrh	r3, [r7, #30]
 8006fca:	213e      	movs	r1, #62	; 0x3e
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fe0d 	bl	8006bec <write_sram_uint16>


	// uint32_t & float
	write_sram_float(settings.Battery_High_Limit, BATTERY_HIGH_LIMIT_ADDR);
 8006fd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006fd6:	2068      	movs	r0, #104	; 0x68
 8006fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fdc:	f7ff fe8a 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Battery_Low_Limit, BATTERY_LOW_LIMIT_ADDR);
 8006fe0:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fe4:	2064      	movs	r0, #100	; 0x64
 8006fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8006fea:	f7ff fe83 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Signal_Integrity_IN, SIGNAL_INTEGRITY_IN_ADDR);
 8006fee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006ff2:	206c      	movs	r0, #108	; 0x6c
 8006ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ff8:	f7ff fe7c 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Signal_Integrity_OUT, SIGNAL_INTEGRITY_OUT_ADDR);
 8006ffc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007000:	2070      	movs	r0, #112	; 0x70
 8007002:	eeb0 0a67 	vmov.f32	s0, s15
 8007006:	f7ff fe75 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Motor_Limit, MOTOR_LIMIT_ADDR);
 800700a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800700e:	2074      	movs	r0, #116	; 0x74
 8007010:	eeb0 0a67 	vmov.f32	s0, s15
 8007014:	f7ff fe6e 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Cutter_Limit, CUTTER_LIMIT_ADDR);
 8007018:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800701c:	2078      	movs	r0, #120	; 0x78
 800701e:	eeb0 0a67 	vmov.f32	s0, s15
 8007022:	f7ff fe67 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.kp, KP_ADDR);
 8007026:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800702a:	207c      	movs	r0, #124	; 0x7c
 800702c:	eeb0 0a67 	vmov.f32	s0, s15
 8007030:	f7ff fe60 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.ki, KI_ADDR);
 8007034:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007038:	2080      	movs	r0, #128	; 0x80
 800703a:	eeb0 0a67 	vmov.f32	s0, s15
 800703e:	f7ff fe59 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.kd, KD_ADDR);
 8007042:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007046:	2084      	movs	r0, #132	; 0x84
 8007048:	eeb0 0a67 	vmov.f32	s0, s15
 800704c:	f7ff fe52 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Motor_Max_Limit, Motor_Max_Limit_ADDR);
 8007050:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007054:	2090      	movs	r0, #144	; 0x90
 8007056:	eeb0 0a67 	vmov.f32	s0, s15
 800705a:	f7ff fe4b 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.Motor_Min_Limit, Motor_Min_Limit_ADDR);
 800705e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007062:	209c      	movs	r0, #156	; 0x9c
 8007064:	eeb0 0a67 	vmov.f32	s0, s15
 8007068:	f7ff fe44 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.voltageMultiply, voltageMultiply_ADDR);
 800706c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007070:	2094      	movs	r0, #148	; 0x94
 8007072:	eeb0 0a67 	vmov.f32	s0, s15
 8007076:	f7ff fe3d 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.proximitySpeed, proximitySpeed_ADDR);
 800707a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800707e:	2098      	movs	r0, #152	; 0x98
 8007080:	eeb0 0a67 	vmov.f32	s0, s15
 8007084:	f7ff fe36 	bl	8006cf4 <write_sram_float>
	write_sram_float(settings.movement, MOVEMENT_ADDR);
 8007088:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800708c:	2088      	movs	r0, #136	; 0x88
 800708e:	eeb0 0a67 	vmov.f32	s0, s15
 8007092:	f7ff fe2f 	bl	8006cf4 <write_sram_float>

}
 8007096:	bf00      	nop
 8007098:	46bd      	mov	sp, r7
 800709a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800709e:	b004      	add	sp, #16
 80070a0:	4770      	bx	lr
	...

080070a4 <save_default_settings>:

void save_default_settings(void) {
 80070a4:	b5b0      	push	{r4, r5, r7, lr}
 80070a6:	b0a4      	sub	sp, #144	; 0x90
 80070a8:	af10      	add	r7, sp, #64	; 0x40

	sram_settings settings;

	settings.Config_Set = 42;
 80070aa:	232a      	movs	r3, #42	; 0x2a
 80070ac:	703b      	strb	r3, [r7, #0]
	settings.Go_Home_Direction = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	707b      	strb	r3, [r7, #1]
	settings.Battery_Low_Limit = 22.00;
 80070b2:	4b2d      	ldr	r3, [pc, #180]	; (8007168 <save_default_settings+0xc4>)
 80070b4:	61bb      	str	r3, [r7, #24]
	settings.Battery_High_Limit = 25.00;
 80070b6:	4b2d      	ldr	r3, [pc, #180]	; (800716c <save_default_settings+0xc8>)
 80070b8:	61fb      	str	r3, [r7, #28]
	settings.Boundary_Timeout = 6;
 80070ba:	2306      	movs	r3, #6
 80070bc:	70bb      	strb	r3, [r7, #2]
	settings.Cutter_Limit = 2.0;
 80070be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
	settings.HoldChargeDetection = 350;
 80070c4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80070c8:	817b      	strh	r3, [r7, #10]
	settings.MotorSpeedUpdateFreq = 100;
 80070ca:	2364      	movs	r3, #100	; 0x64
 80070cc:	71bb      	strb	r3, [r7, #6]
	settings.Outside_Threshold = 8;
 80070ce:	2308      	movs	r3, #8
 80070d0:	71fb      	strb	r3, [r7, #7]
	settings.Motor_Limit = 4.0;
 80070d2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
	settings.Overturn_Limit = 35;
 80070d8:	2323      	movs	r3, #35	; 0x23
 80070da:	717b      	strb	r3, [r7, #5]
	settings.Signal_Integrity_IN = 0.80;
 80070dc:	4b24      	ldr	r3, [pc, #144]	; (8007170 <save_default_settings+0xcc>)
 80070de:	623b      	str	r3, [r7, #32]
	settings.Signal_Integrity_OUT = -0.80;
 80070e0:	4b24      	ldr	r3, [pc, #144]	; (8007174 <save_default_settings+0xd0>)
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
	settings.WorkingHourStart = 10;
 80070e4:	230a      	movs	r3, #10
 80070e6:	70fb      	strb	r3, [r7, #3]
	settings.WorkingHourEnd = 20;
 80070e8:	2314      	movs	r3, #20
 80070ea:	713b      	strb	r3, [r7, #4]
	settings.kp = 0.12;
 80070ec:	4b22      	ldr	r3, [pc, #136]	; (8007178 <save_default_settings+0xd4>)
 80070ee:	63bb      	str	r3, [r7, #56]	; 0x38
	settings.ki = 0.0;
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	settings.kd = 0.03;
 80070f6:	4b21      	ldr	r3, [pc, #132]	; (800717c <save_default_settings+0xd8>)
 80070f8:	643b      	str	r3, [r7, #64]	; 0x40
	settings.Motor_Max_Limit = 0.3;
 80070fa:	4b21      	ldr	r3, [pc, #132]	; (8007180 <save_default_settings+0xdc>)
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	settings.Motor_Min_Limit = 0.1;
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <save_default_settings+0xe0>)
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
	settings.magValue = 400;
 8007102:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007106:	81bb      	strh	r3, [r7, #12]
	settings.magMinValue = 370;
 8007108:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800710c:	81fb      	strh	r3, [r7, #14]
	settings.voltageMultiply = 5.0;
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <save_default_settings+0xe4>)
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
	settings.proximitySpeed = 0.80;
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <save_default_settings+0xcc>)
 8007114:	64bb      	str	r3, [r7, #72]	; 0x48
	settings.movement = 0.5;
 8007116:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
	settings.motorMaxSpeed = 3360 -1;
 800711c:	f640 531f 	movw	r3, #3359	; 0xd1f
 8007120:	823b      	strh	r3, [r7, #16]
	settings.motorMinSpeed = 2000;
 8007122:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007126:	827b      	strh	r3, [r7, #18]
	settings.cutterSpeed = 3000;
 8007128:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800712c:	82bb      	strh	r3, [r7, #20]
	settings.adcLevel = 1267;
 800712e:	f240 43f3 	movw	r3, #1267	; 0x4f3
 8007132:	82fb      	strh	r3, [r7, #22]
	settings.move_count_limit = 5;
 8007134:	2305      	movs	r3, #5
 8007136:	723b      	strb	r3, [r7, #8]
	settings.bumber_count_limit = 10;
 8007138:	230a      	movs	r3, #10
 800713a:	727b      	strb	r3, [r7, #9]

	write_all_settings(settings);
 800713c:	466d      	mov	r5, sp
 800713e:	f107 0410 	add.w	r4, r7, #16
 8007142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800714a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800714c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800714e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007152:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007156:	463b      	mov	r3, r7
 8007158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800715a:	f7ff fedc 	bl	8006f16 <write_all_settings>

}
 800715e:	bf00      	nop
 8007160:	3750      	adds	r7, #80	; 0x50
 8007162:	46bd      	mov	sp, r7
 8007164:	bdb0      	pop	{r4, r5, r7, pc}
 8007166:	bf00      	nop
 8007168:	41b00000 	.word	0x41b00000
 800716c:	41c80000 	.word	0x41c80000
 8007170:	3f4ccccd 	.word	0x3f4ccccd
 8007174:	bf4ccccd 	.word	0xbf4ccccd
 8007178:	3df5c28f 	.word	0x3df5c28f
 800717c:	3cf5c28f 	.word	0x3cf5c28f
 8007180:	3e99999a 	.word	0x3e99999a
 8007184:	3dcccccd 	.word	0x3dcccccd
 8007188:	40a00000 	.word	0x40a00000

0800718c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007192:	2300      	movs	r3, #0
 8007194:	607b      	str	r3, [r7, #4]
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <HAL_MspInit+0x58>)
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <HAL_MspInit+0x58>)
 800719c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071a0:	6453      	str	r3, [r2, #68]	; 0x44
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <HAL_MspInit+0x58>)
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071aa:	607b      	str	r3, [r7, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071ae:	2300      	movs	r3, #0
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <HAL_MspInit+0x58>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	4a0b      	ldr	r2, [pc, #44]	; (80071e4 <HAL_MspInit+0x58>)
 80071b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071bc:	6413      	str	r3, [r2, #64]	; 0x40
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <HAL_MspInit+0x58>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	2100      	movs	r1, #0
 80071ce:	2001      	movs	r0, #1
 80071d0:	f001 fc5b 	bl	8008a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80071d4:	2001      	movs	r0, #1
 80071d6:	f001 fc74 	bl	8008ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800

080071e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	; 0x30
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f0:	f107 031c 	add.w	r3, r7, #28
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a66      	ldr	r2, [pc, #408]	; (80073a0 <HAL_ADC_MspInit+0x1b8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d160      	bne.n	80072cc <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	4b65      	ldr	r3, [pc, #404]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	4a64      	ldr	r2, [pc, #400]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007218:	6453      	str	r3, [r2, #68]	; 0x44
 800721a:	4b62      	ldr	r3, [pc, #392]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	4b5e      	ldr	r3, [pc, #376]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	4a5d      	ldr	r2, [pc, #372]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	6313      	str	r3, [r2, #48]	; 0x30
 8007236:	4b5b      	ldr	r3, [pc, #364]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007242:	230c      	movs	r3, #12
 8007244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007246:	2303      	movs	r3, #3
 8007248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800724e:	f107 031c 	add.w	r3, r7, #28
 8007252:	4619      	mov	r1, r3
 8007254:	4854      	ldr	r0, [pc, #336]	; (80073a8 <HAL_ADC_MspInit+0x1c0>)
 8007256:	f002 f851 	bl	80092fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800725a:	4b54      	ldr	r3, [pc, #336]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 800725c:	4a54      	ldr	r2, [pc, #336]	; (80073b0 <HAL_ADC_MspInit+0x1c8>)
 800725e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007260:	4b52      	ldr	r3, [pc, #328]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 8007262:	2200      	movs	r2, #0
 8007264:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007266:	4b51      	ldr	r3, [pc, #324]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 8007268:	2200      	movs	r2, #0
 800726a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800726c:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007272:	4b4e      	ldr	r3, [pc, #312]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 8007274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007278:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800727a:	4b4c      	ldr	r3, [pc, #304]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007282:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 8007284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007288:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800728a:	4b48      	ldr	r3, [pc, #288]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 800728c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007292:	4b46      	ldr	r3, [pc, #280]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 8007294:	2200      	movs	r2, #0
 8007296:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007298:	4b44      	ldr	r3, [pc, #272]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 800729a:	2200      	movs	r2, #0
 800729c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800729e:	4843      	ldr	r0, [pc, #268]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 80072a0:	f001 fc2a 	bl	8008af8 <HAL_DMA_Init>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80072aa:	f7ff f873 	bl	8006394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a3e      	ldr	r2, [pc, #248]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
 80072b4:	4a3d      	ldr	r2, [pc, #244]	; (80073ac <HAL_ADC_MspInit+0x1c4>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	2012      	movs	r0, #18
 80072c0:	f001 fbe3 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80072c4:	2012      	movs	r0, #18
 80072c6:	f001 fbfc 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80072ca:	e065      	b.n	8007398 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a38      	ldr	r2, [pc, #224]	; (80073b4 <HAL_ADC_MspInit+0x1cc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d160      	bne.n	8007398 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80072d6:	2300      	movs	r3, #0
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	4a31      	ldr	r2, [pc, #196]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 80072e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072e4:	6453      	str	r3, [r2, #68]	; 0x44
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 80072e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 80072fc:	f043 0304 	orr.w	r3, r3, #4
 8007300:	6313      	str	r3, [r2, #48]	; 0x30
 8007302:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <HAL_ADC_MspInit+0x1bc>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800730e:	2303      	movs	r3, #3
 8007310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007312:	2303      	movs	r3, #3
 8007314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800731a:	f107 031c 	add.w	r3, r7, #28
 800731e:	4619      	mov	r1, r3
 8007320:	4821      	ldr	r0, [pc, #132]	; (80073a8 <HAL_ADC_MspInit+0x1c0>)
 8007322:	f001 ffeb 	bl	80092fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007328:	4a24      	ldr	r2, [pc, #144]	; (80073bc <HAL_ADC_MspInit+0x1d4>)
 800732a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 800732e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007332:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007334:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007336:	2200      	movs	r2, #0
 8007338:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800733a:	4b1f      	ldr	r3, [pc, #124]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 800733c:	2200      	movs	r2, #0
 800733e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007340:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007346:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 800734a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800734e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007350:	4b19      	ldr	r3, [pc, #100]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007356:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 800735a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800735e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007362:	2200      	movs	r2, #0
 8007364:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007368:	2200      	movs	r2, #0
 800736a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800736c:	4812      	ldr	r0, [pc, #72]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 800736e:	f001 fbc3 	bl	8008af8 <HAL_DMA_Init>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8007378:	f7ff f80c 	bl	8006394 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a0e      	ldr	r2, [pc, #56]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
 8007382:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <HAL_ADC_MspInit+0x1d0>)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	2012      	movs	r0, #18
 800738e:	f001 fb7c 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007392:	2012      	movs	r0, #18
 8007394:	f001 fb95 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
}
 8007398:	bf00      	nop
 800739a:	3730      	adds	r7, #48	; 0x30
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40012000 	.word	0x40012000
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40020800 	.word	0x40020800
 80073ac:	200023f0 	.word	0x200023f0
 80073b0:	40026410 	.word	0x40026410
 80073b4:	40012100 	.word	0x40012100
 80073b8:	20002e44 	.word	0x20002e44
 80073bc:	40026458 	.word	0x40026458

080073c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c8:	f107 031c 	add.w	r3, r7, #28
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a32      	ldr	r2, [pc, #200]	; (80074a8 <HAL_I2C_MspInit+0xe8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d12c      	bne.n	800743c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	4b31      	ldr	r3, [pc, #196]	; (80074ac <HAL_I2C_MspInit+0xec>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4a30      	ldr	r2, [pc, #192]	; (80074ac <HAL_I2C_MspInit+0xec>)
 80073ec:	f043 0302 	orr.w	r3, r3, #2
 80073f0:	6313      	str	r3, [r2, #48]	; 0x30
 80073f2:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <HAL_I2C_MspInit+0xec>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073fe:	23c0      	movs	r3, #192	; 0xc0
 8007400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007402:	2312      	movs	r3, #18
 8007404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007406:	2301      	movs	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800740a:	2303      	movs	r3, #3
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800740e:	2304      	movs	r3, #4
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007412:	f107 031c 	add.w	r3, r7, #28
 8007416:	4619      	mov	r1, r3
 8007418:	4825      	ldr	r0, [pc, #148]	; (80074b0 <HAL_I2C_MspInit+0xf0>)
 800741a:	f001 ff6f 	bl	80092fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	4b22      	ldr	r3, [pc, #136]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	4a21      	ldr	r2, [pc, #132]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800742c:	6413      	str	r3, [r2, #64]	; 0x40
 800742e:	4b1f      	ldr	r3, [pc, #124]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800743a:	e031      	b.n	80074a0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <HAL_I2C_MspInit+0xf4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d12c      	bne.n	80074a0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <HAL_I2C_MspInit+0xec>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007450:	f043 0302 	orr.w	r3, r3, #2
 8007454:	6313      	str	r3, [r2, #48]	; 0x30
 8007456:	4b15      	ldr	r3, [pc, #84]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007462:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007468:	2312      	movs	r3, #18
 800746a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800746c:	2301      	movs	r3, #1
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007470:	2303      	movs	r3, #3
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007474:	2304      	movs	r3, #4
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007478:	f107 031c 	add.w	r3, r7, #28
 800747c:	4619      	mov	r1, r3
 800747e:	480c      	ldr	r0, [pc, #48]	; (80074b0 <HAL_I2C_MspInit+0xf0>)
 8007480:	f001 ff3c 	bl	80092fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <HAL_I2C_MspInit+0xec>)
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	4a07      	ldr	r2, [pc, #28]	; (80074ac <HAL_I2C_MspInit+0xec>)
 800748e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007492:	6413      	str	r3, [r2, #64]	; 0x40
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <HAL_I2C_MspInit+0xec>)
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	3730      	adds	r7, #48	; 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40005400 	.word	0x40005400
 80074ac:	40023800 	.word	0x40023800
 80074b0:	40020400 	.word	0x40020400
 80074b4:	40005800 	.word	0x40005800

080074b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <HAL_I2C_MspDeInit+0x64>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10e      	bne.n	80074e8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80074ca:	4b15      	ldr	r3, [pc, #84]	; (8007520 <HAL_I2C_MspDeInit+0x68>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	4a14      	ldr	r2, [pc, #80]	; (8007520 <HAL_I2C_MspDeInit+0x68>)
 80074d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074d4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80074d6:	2140      	movs	r1, #64	; 0x40
 80074d8:	4812      	ldr	r0, [pc, #72]	; (8007524 <HAL_I2C_MspDeInit+0x6c>)
 80074da:	f002 f8ab 	bl	8009634 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	4810      	ldr	r0, [pc, #64]	; (8007524 <HAL_I2C_MspDeInit+0x6c>)
 80074e2:	f002 f8a7 	bl	8009634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80074e6:	e014      	b.n	8007512 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a0e      	ldr	r2, [pc, #56]	; (8007528 <HAL_I2C_MspDeInit+0x70>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10f      	bne.n	8007512 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_I2C_MspDeInit+0x68>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_I2C_MspDeInit+0x68>)
 80074f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80074fc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80074fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007502:	4808      	ldr	r0, [pc, #32]	; (8007524 <HAL_I2C_MspDeInit+0x6c>)
 8007504:	f002 f896 	bl	8009634 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8007508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800750c:	4805      	ldr	r0, [pc, #20]	; (8007524 <HAL_I2C_MspDeInit+0x6c>)
 800750e:	f002 f891 	bl	8009634 <HAL_GPIO_DeInit>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40005400 	.word	0x40005400
 8007520:	40023800 	.word	0x40023800
 8007524:	40020400 	.word	0x40020400
 8007528:	40005800 	.word	0x40005800

0800752c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a0e      	ldr	r2, [pc, #56]	; (8007574 <HAL_RNG_MspInit+0x48>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d115      	bne.n	800756a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <HAL_RNG_MspInit+0x4c>)
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <HAL_RNG_MspInit+0x4c>)
 8007548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754c:	6353      	str	r3, [r2, #52]	; 0x34
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <HAL_RNG_MspInit+0x4c>)
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	2050      	movs	r0, #80	; 0x50
 8007560:	f001 fa93 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8007564:	2050      	movs	r0, #80	; 0x50
 8007566:	f001 faac 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	50060800 	.word	0x50060800
 8007578:	40023800 	.word	0x40023800

0800757c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <HAL_RTC_MspInit+0x24>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d102      	bne.n	8007594 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <HAL_RTC_MspInit+0x28>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40002800 	.word	0x40002800
 80075a4:	42470e3c 	.word	0x42470e3c

080075a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d116      	bne.n	80075e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	4b2e      	ldr	r3, [pc, #184]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	4a2d      	ldr	r2, [pc, #180]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ca:	4b2b      	ldr	r3, [pc, #172]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2100      	movs	r1, #0
 80075da:	201c      	movs	r0, #28
 80075dc:	f001 fa55 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80075e0:	201c      	movs	r0, #28
 80075e2:	f001 fa6e 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80075e6:	e042      	b.n	800766e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a23      	ldr	r2, [pc, #140]	; (800767c <HAL_TIM_Base_MspInit+0xd4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80075f2:	2300      	movs	r3, #0
 80075f4:	613b      	str	r3, [r7, #16]
 80075f6:	4b20      	ldr	r3, [pc, #128]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	4a1f      	ldr	r2, [pc, #124]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	6413      	str	r3, [r2, #64]	; 0x40
 8007602:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	693b      	ldr	r3, [r7, #16]
}
 800760e:	e02e      	b.n	800766e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1a      	ldr	r2, [pc, #104]	; (8007680 <HAL_TIM_Base_MspInit+0xd8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10e      	bne.n	8007638 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	4b16      	ldr	r3, [pc, #88]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 8007624:	f043 0304 	orr.w	r3, r3, #4
 8007628:	6413      	str	r3, [r2, #64]	; 0x40
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	e01a      	b.n	800766e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a11      	ldr	r2, [pc, #68]	; (8007684 <HAL_TIM_Base_MspInit+0xdc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d115      	bne.n	800766e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	4a0b      	ldr	r2, [pc, #44]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 800764c:	f043 0308 	orr.w	r3, r3, #8
 8007650:	6413      	str	r3, [r2, #64]	; 0x40
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_TIM_Base_MspInit+0xd0>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	2032      	movs	r0, #50	; 0x32
 8007664:	f001 fa11 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007668:	2032      	movs	r0, #50	; 0x32
 800766a:	f001 fa2a 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
}
 800766e:	bf00      	nop
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40023800 	.word	0x40023800
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00

08007688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a24      	ldr	r2, [pc, #144]	; (8007738 <HAL_TIM_MspPostInit+0xb0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d11e      	bne.n	80076e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a22      	ldr	r2, [pc, #136]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 80076b4:	f043 0304 	orr.w	r3, r3, #4
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076c6:	23c0      	movs	r3, #192	; 0xc0
 80076c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ca:	2302      	movs	r3, #2
 80076cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80076ce:	2302      	movs	r3, #2
 80076d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076d2:	2303      	movs	r3, #3
 80076d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80076d6:	2302      	movs	r3, #2
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076da:	f107 0314 	add.w	r3, r7, #20
 80076de:	4619      	mov	r1, r3
 80076e0:	4817      	ldr	r0, [pc, #92]	; (8007740 <HAL_TIM_MspPostInit+0xb8>)
 80076e2:	f001 fe0b 	bl	80092fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80076e6:	e023      	b.n	8007730 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a15      	ldr	r2, [pc, #84]	; (8007744 <HAL_TIM_MspPostInit+0xbc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d11e      	bne.n	8007730 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	4a10      	ldr	r2, [pc, #64]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	6313      	str	r3, [r2, #48]	; 0x30
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <HAL_TIM_MspPostInit+0xb4>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800770e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007714:	2302      	movs	r3, #2
 8007716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007718:	2302      	movs	r3, #2
 800771a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771c:	2303      	movs	r3, #3
 800771e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007720:	2302      	movs	r3, #2
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	4619      	mov	r1, r3
 800772a:	4807      	ldr	r0, [pc, #28]	; (8007748 <HAL_TIM_MspPostInit+0xc0>)
 800772c:	f001 fde6 	bl	80092fc <HAL_GPIO_Init>
}
 8007730:	bf00      	nop
 8007732:	3728      	adds	r7, #40	; 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40000400 	.word	0x40000400
 800773c:	40023800 	.word	0x40023800
 8007740:	40020800 	.word	0x40020800
 8007744:	40000800 	.word	0x40000800
 8007748:	40020c00 	.word	0x40020c00

0800774c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08c      	sub	sp, #48	; 0x30
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 031c 	add.w	r3, r7, #28
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a68      	ldr	r2, [pc, #416]	; (800790c <HAL_UART_MspInit+0x1c0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d163      	bne.n	8007836 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	4b67      	ldr	r3, [pc, #412]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	4a66      	ldr	r2, [pc, #408]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007778:	f043 0310 	orr.w	r3, r3, #16
 800777c:	6453      	str	r3, [r2, #68]	; 0x44
 800777e:	4b64      	ldr	r3, [pc, #400]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	4b60      	ldr	r3, [pc, #384]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	4a5f      	ldr	r2, [pc, #380]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b5d      	ldr	r3, [pc, #372]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80077a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80077aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ac:	2302      	movs	r3, #2
 80077ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077b4:	2303      	movs	r3, #3
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80077b8:	2307      	movs	r3, #7
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077bc:	f107 031c 	add.w	r3, r7, #28
 80077c0:	4619      	mov	r1, r3
 80077c2:	4854      	ldr	r0, [pc, #336]	; (8007914 <HAL_UART_MspInit+0x1c8>)
 80077c4:	f001 fd9a 	bl	80092fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80077c8:	4b53      	ldr	r3, [pc, #332]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077ca:	4a54      	ldr	r2, [pc, #336]	; (800791c <HAL_UART_MspInit+0x1d0>)
 80077cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80077ce:	4b52      	ldr	r3, [pc, #328]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077d6:	4b50      	ldr	r3, [pc, #320]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077dc:	4b4e      	ldr	r3, [pc, #312]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077de:	2200      	movs	r2, #0
 80077e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077e2:	4b4d      	ldr	r3, [pc, #308]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077ea:	4b4b      	ldr	r3, [pc, #300]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077f0:	4b49      	ldr	r3, [pc, #292]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80077f6:	4b48      	ldr	r3, [pc, #288]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077fc:	4b46      	ldr	r3, [pc, #280]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 80077fe:	2200      	movs	r2, #0
 8007800:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007802:	4b45      	ldr	r3, [pc, #276]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 8007804:	2200      	movs	r2, #0
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007808:	4843      	ldr	r0, [pc, #268]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 800780a:	f001 f975 	bl	8008af8 <HAL_DMA_Init>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007814:	f7fe fdbe 	bl	8006394 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3f      	ldr	r2, [pc, #252]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
 800781e:	4a3e      	ldr	r2, [pc, #248]	; (8007918 <HAL_UART_MspInit+0x1cc>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	2025      	movs	r0, #37	; 0x25
 800782a:	f001 f92e 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800782e:	2025      	movs	r0, #37	; 0x25
 8007830:	f001 f947 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007834:	e066      	b.n	8007904 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a39      	ldr	r2, [pc, #228]	; (8007920 <HAL_UART_MspInit+0x1d4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d161      	bne.n	8007904 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	4b32      	ldr	r3, [pc, #200]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	4a31      	ldr	r2, [pc, #196]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 800784a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784e:	6413      	str	r3, [r2, #64]	; 0x40
 8007850:	4b2f      	ldr	r3, [pc, #188]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	6313      	str	r3, [r2, #48]	; 0x30
 800786c:	4b28      	ldr	r3, [pc, #160]	; (8007910 <HAL_UART_MspInit+0x1c4>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007878:	230c      	movs	r3, #12
 800787a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787c:	2302      	movs	r3, #2
 800787e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007880:	2300      	movs	r3, #0
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007884:	2303      	movs	r3, #3
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007888:	2307      	movs	r3, #7
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800788c:	f107 031c 	add.w	r3, r7, #28
 8007890:	4619      	mov	r1, r3
 8007892:	4820      	ldr	r0, [pc, #128]	; (8007914 <HAL_UART_MspInit+0x1c8>)
 8007894:	f001 fd32 	bl	80092fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007898:	4b22      	ldr	r3, [pc, #136]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 800789a:	4a23      	ldr	r2, [pc, #140]	; (8007928 <HAL_UART_MspInit+0x1dc>)
 800789c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800789e:	4b21      	ldr	r3, [pc, #132]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078a6:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078ac:	4b1d      	ldr	r3, [pc, #116]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078ba:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078bc:	2200      	movs	r2, #0
 80078be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078c0:	4b18      	ldr	r3, [pc, #96]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80078c6:	4b17      	ldr	r3, [pc, #92]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078d2:	4b14      	ldr	r3, [pc, #80]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80078d8:	4812      	ldr	r0, [pc, #72]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078da:	f001 f90d 	bl	8008af8 <HAL_DMA_Init>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80078e4:	f7fe fd56 	bl	8006394 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
 80078ee:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <HAL_UART_MspInit+0x1d8>)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	2026      	movs	r0, #38	; 0x26
 80078fa:	f001 f8c6 	bl	8008a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80078fe:	2026      	movs	r0, #38	; 0x26
 8007900:	f001 f8df 	bl	8008ac2 <HAL_NVIC_EnableIRQ>
}
 8007904:	bf00      	nop
 8007906:	3730      	adds	r7, #48	; 0x30
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40011000 	.word	0x40011000
 8007910:	40023800 	.word	0x40023800
 8007914:	40020000 	.word	0x40020000
 8007918:	20001f24 	.word	0x20001f24
 800791c:	40026440 	.word	0x40026440
 8007920:	40004400 	.word	0x40004400
 8007924:	20000b54 	.word	0x20000b54
 8007928:	40026088 	.word	0x40026088

0800792c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007930:	e7fe      	b.n	8007930 <NMI_Handler+0x4>

08007932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007932:	b480      	push	{r7}
 8007934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007936:	e7fe      	b.n	8007936 <HardFault_Handler+0x4>

08007938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800793c:	e7fe      	b.n	800793c <MemManage_Handler+0x4>

0800793e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800793e:	b480      	push	{r7}
 8007940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007942:	e7fe      	b.n	8007942 <BusFault_Handler+0x4>

08007944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007948:	e7fe      	b.n	8007948 <UsageFault_Handler+0x4>

0800794a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800794a:	b480      	push	{r7}
 800794c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800794e:	bf00      	nop
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800795c:	bf00      	nop
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800796a:	bf00      	nop
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007978:	f000 fa0c 	bl	8007d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800797c:	bf00      	nop
 800797e:	bd80      	pop	{r7, pc}

08007980 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8007984:	f003 fc4e 	bl	800b224 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8007988:	bf00      	nop
 800798a:	bd80      	pop	{r7, pc}

0800798c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007990:	4802      	ldr	r0, [pc, #8]	; (800799c <DMA1_Stream5_IRQHandler+0x10>)
 8007992:	f001 fa49 	bl	8008e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007996:	bf00      	nop
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000b54 	.word	0x20000b54

080079a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80079a4:	4803      	ldr	r0, [pc, #12]	; (80079b4 <ADC_IRQHandler+0x14>)
 80079a6:	f000 fa7c 	bl	8007ea2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80079aa:	4803      	ldr	r0, [pc, #12]	; (80079b8 <ADC_IRQHandler+0x18>)
 80079ac:	f000 fa79 	bl	8007ea2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80079b0:	bf00      	nop
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	200016dc 	.word	0x200016dc
 80079b8:	20000cf4 	.word	0x20000cf4

080079bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80079c0:	4802      	ldr	r0, [pc, #8]	; (80079cc <TIM2_IRQHandler+0x10>)
 80079c2:	f005 f837 	bl	800ca34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20002db8 	.word	0x20002db8

080079d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80079d4:	4807      	ldr	r0, [pc, #28]	; (80079f4 <USART1_IRQHandler+0x24>)
 80079d6:	f005 ffe9 	bl	800d9ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 80079da:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <USART1_IRQHandler+0x24>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d102      	bne.n	80079ee <USART1_IRQHandler+0x1e>
	  HAL_UART_RxCpltCallback_UART1(&huart1);
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <USART1_IRQHandler+0x24>)
 80079ea:	f7fe fc81 	bl	80062f0 <HAL_UART_RxCpltCallback_UART1>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20002384 	.word	0x20002384

080079f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80079fc:	4807      	ldr	r0, [pc, #28]	; (8007a1c <USART2_IRQHandler+0x24>)
 80079fe:	f005 ffd5 	bl	800d9ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <USART2_IRQHandler+0x24>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	d102      	bne.n	8007a16 <USART2_IRQHandler+0x1e>
	  HAL_UART_RxCpltCallback_UART2(&huart2);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <USART2_IRQHandler+0x24>)
 8007a12:	f7fe fc91 	bl	8006338 <HAL_UART_RxCpltCallback_UART2>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20002e00 	.word	0x20002e00

08007a20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <TIM5_IRQHandler+0x10>)
 8007a26:	f005 f805 	bl	800ca34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20001234 	.word	0x20001234

08007a34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <DMA2_Stream0_IRQHandler+0x10>)
 8007a3a:	f001 f9f5 	bl	8008e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200023f0 	.word	0x200023f0

08007a48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <DMA2_Stream2_IRQHandler+0x10>)
 8007a4e:	f001 f9eb 	bl	8008e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20001f24 	.word	0x20001f24

08007a5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <DMA2_Stream3_IRQHandler+0x10>)
 8007a62:	f001 f9e1 	bl	8008e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20002e44 	.word	0x20002e44

08007a70 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8007a74:	4802      	ldr	r0, [pc, #8]	; (8007a80 <HASH_RNG_IRQHandler+0x10>)
 8007a76:	f004 f9f7 	bl	800be68 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200029a4 	.word	0x200029a4

08007a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
	return 1;
 8007a88:	2301      	movs	r3, #1
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <_kill>:

int _kill(int pid, int sig)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007a9e:	f007 f935 	bl	800ed0c <__errno>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2216      	movs	r2, #22
 8007aa6:	601a      	str	r2, [r3, #0]
	return -1;
 8007aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_exit>:

void _exit (int status)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007abc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ffe7 	bl	8007a94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007ac6:	e7fe      	b.n	8007ac6 <_exit+0x12>

08007ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e00a      	b.n	8007af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007ada:	f3af 8000 	nop.w
 8007ade:	4601      	mov	r1, r0
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	60ba      	str	r2, [r7, #8]
 8007ae6:	b2ca      	uxtb	r2, r1
 8007ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3301      	adds	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	dbf0      	blt.n	8007ada <_read+0x12>
	}

return len;
 8007af8:	687b      	ldr	r3, [r7, #4]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e009      	b.n	8007b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	60ba      	str	r2, [r7, #8]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	3301      	adds	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dbf1      	blt.n	8007b14 <_write+0x12>
	}
	return len;
 8007b30:	687b      	ldr	r3, [r7, #4]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <_close>:

int _close(int file)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
	return -1;
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b62:	605a      	str	r2, [r3, #4]
	return 0;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <_isatty>:

int _isatty(int file)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
	return 1;
 8007b7a:	2301      	movs	r3, #1
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	return 0;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007bac:	4a14      	ldr	r2, [pc, #80]	; (8007c00 <_sbrk+0x5c>)
 8007bae:	4b15      	ldr	r3, [pc, #84]	; (8007c04 <_sbrk+0x60>)
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <_sbrk+0x64>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <_sbrk+0x64>)
 8007bc2:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <_sbrk+0x68>)
 8007bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <_sbrk+0x64>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d207      	bcs.n	8007be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007bd4:	f007 f89a 	bl	800ed0c <__errno>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	220c      	movs	r2, #12
 8007bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007bde:	f04f 33ff 	mov.w	r3, #4294967295
 8007be2:	e009      	b.n	8007bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <_sbrk+0x64>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <_sbrk+0x64>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	4a05      	ldr	r2, [pc, #20]	; (8007c08 <_sbrk+0x64>)
 8007bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20020000 	.word	0x20020000
 8007c04:	00000400 	.word	0x00000400
 8007c08:	20000a74 	.word	0x20000a74
 8007c0c:	20002ec8 	.word	0x20002ec8

08007c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <SystemInit+0x20>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1a:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <SystemInit+0x20>)
 8007c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	e000ed00 	.word	0xe000ed00

08007c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c38:	480d      	ldr	r0, [pc, #52]	; (8007c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007c3a:	490e      	ldr	r1, [pc, #56]	; (8007c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007c3c:	4a0e      	ldr	r2, [pc, #56]	; (8007c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c40:	e002      	b.n	8007c48 <LoopCopyDataInit>

08007c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c46:	3304      	adds	r3, #4

08007c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c4c:	d3f9      	bcc.n	8007c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c4e:	4a0b      	ldr	r2, [pc, #44]	; (8007c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007c50:	4c0b      	ldr	r4, [pc, #44]	; (8007c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c54:	e001      	b.n	8007c5a <LoopFillZerobss>

08007c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c58:	3204      	adds	r2, #4

08007c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c5c:	d3fb      	bcc.n	8007c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c5e:	f7ff ffd7 	bl	8007c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c62:	f007 f859 	bl	800ed18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c66:	f7fd fcc5 	bl	80055f4 <main>
  bx  lr    
 8007c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c74:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 8007c78:	08016288 	.word	0x08016288
  ldr r2, =_sbss
 8007c7c:	20000450 	.word	0x20000450
  ldr r4, =_ebss
 8007c80:	20002ec8 	.word	0x20002ec8

08007c84 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c84:	e7fe      	b.n	8007c84 <CAN1_RX0_IRQHandler>
	...

08007c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <HAL_Init+0x40>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <HAL_Init+0x40>)
 8007c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <HAL_Init+0x40>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <HAL_Init+0x40>)
 8007c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <HAL_Init+0x40>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <HAL_Init+0x40>)
 8007caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cb0:	2003      	movs	r0, #3
 8007cb2:	f000 fedf 	bl	8008a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f000 f83c 	bl	8007d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cbc:	f7ff fa66 	bl	800718c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40023c00 	.word	0x40023c00

08007ccc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8007cd0:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <HAL_DeInit+0x54>)
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <HAL_DeInit+0x54>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <HAL_DeInit+0x54>)
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <HAL_DeInit+0x54>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <HAL_DeInit+0x54>)
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <HAL_DeInit+0x54>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <HAL_DeInit+0x54>)
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007d00:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8007d02:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <HAL_DeInit+0x54>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <HAL_DeInit+0x54>)
 8007d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8007d10:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <HAL_DeInit+0x54>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8007d16:	f000 f805 	bl	8007d24 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40023800 	.word	0x40023800

08007d24 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d3c:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <HAL_InitTick+0x54>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <HAL_InitTick+0x58>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	4619      	mov	r1, r3
 8007d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fec3 	bl	8008ade <HAL_SYSTICK_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e00e      	b.n	8007d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b0f      	cmp	r3, #15
 8007d66:	d80a      	bhi.n	8007d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	f000 fe8b 	bl	8008a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d74:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <HAL_InitTick+0x5c>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e000      	b.n	8007d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000268 	.word	0x20000268
 8007d8c:	20000270 	.word	0x20000270
 8007d90:	2000026c 	.word	0x2000026c

08007d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_IncTick+0x20>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <HAL_IncTick+0x24>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4413      	add	r3, r2
 8007da4:	4a04      	ldr	r2, [pc, #16]	; (8007db8 <HAL_IncTick+0x24>)
 8007da6:	6013      	str	r3, [r2, #0]
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000270 	.word	0x20000270
 8007db8:	20002eb4 	.word	0x20002eb4

08007dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <HAL_GetTick+0x14>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20002eb4 	.word	0x20002eb4

08007dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ddc:	f7ff ffee 	bl	8007dbc <HAL_GetTick>
 8007de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d005      	beq.n	8007dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <HAL_Delay+0x44>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007dfa:	bf00      	nop
 8007dfc:	f7ff ffde 	bl	8007dbc <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d8f7      	bhi.n	8007dfc <HAL_Delay+0x28>
  {
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000270 	.word	0x20000270

08007e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e033      	b.n	8007e9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9d4 	bl	80071e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d118      	bne.n	8007e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e62:	f023 0302 	bic.w	r3, r3, #2
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fba8 	bl	80085c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	f043 0201 	orr.w	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
 8007e8a:	e001      	b.n	8007e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d049      	beq.n	8007f78 <HAL_ADC_IRQHandler+0xd6>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d046      	beq.n	8007f78 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d12b      	bne.n	8007f68 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d127      	bne.n	8007f68 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d119      	bne.n	8007f68 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0220 	bic.w	r2, r2, #32
 8007f42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d105      	bne.n	8007f68 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	f043 0201 	orr.w	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe f9b7 	bl	80062dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0212 	mvn.w	r2, #18
 8007f76:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	bf0c      	ite	eq
 8007f86:	2301      	moveq	r3, #1
 8007f88:	2300      	movne	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2301      	moveq	r3, #1
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d057      	beq.n	800805a <HAL_ADC_IRQHandler+0x1b8>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d054      	beq.n	800805a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d139      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d006      	beq.n	8007ff2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d12b      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d124      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	d11d      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008012:	2b00      	cmp	r3, #0
 8008014:	d119      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008024:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f043 0201 	orr.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fc38 	bl	80088c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f06f 020c 	mvn.w	r2, #12
 8008058:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b01      	cmp	r3, #1
 8008066:	bf0c      	ite	eq
 8008068:	2301      	moveq	r3, #1
 800806a:	2300      	movne	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807a:	2b40      	cmp	r3, #64	; 0x40
 800807c:	bf0c      	ite	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	2300      	movne	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <HAL_ADC_IRQHandler+0x21a>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d014      	beq.n	80080bc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10d      	bne.n	80080bc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f953 	bl	8008358 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f06f 0201 	mvn.w	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	bf0c      	ite	eq
 80080ca:	2301      	moveq	r3, #1
 80080cc:	2300      	movne	r3, #0
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080e0:	bf0c      	ite	eq
 80080e2:	2301      	moveq	r3, #1
 80080e4:	2300      	movne	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d015      	beq.n	800811c <HAL_ADC_IRQHandler+0x27a>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	f043 0202 	orr.w	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f06f 0220 	mvn.w	r2, #32
 800810a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f92d 	bl	800836c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f06f 0220 	mvn.w	r2, #32
 800811a:	601a      	str	r2, [r3, #0]
  }
}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_ADC_Start_DMA+0x1e>
 800813e:	2302      	movs	r3, #2
 8008140:	e0e9      	b.n	8008316 <HAL_ADC_Start_DMA+0x1f2>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b01      	cmp	r3, #1
 8008156:	d018      	beq.n	800818a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008168:	4b6d      	ldr	r3, [pc, #436]	; (8008320 <HAL_ADC_Start_DMA+0x1fc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a6d      	ldr	r2, [pc, #436]	; (8008324 <HAL_ADC_Start_DMA+0x200>)
 800816e:	fba2 2303 	umull	r2, r3, r2, r3
 8008172:	0c9a      	lsrs	r2, r3, #18
 8008174:	4613      	mov	r3, r2
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	4413      	add	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800817c:	e002      	b.n	8008184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3b01      	subs	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f9      	bne.n	800817e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008198:	d107      	bne.n	80081aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	f040 80a1 	bne.w	80082fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f8:	d106      	bne.n	8008208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	f023 0206 	bic.w	r2, r3, #6
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	645a      	str	r2, [r3, #68]	; 0x44
 8008206:	e002      	b.n	800820e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008216:	4b44      	ldr	r3, [pc, #272]	; (8008328 <HAL_ADC_Start_DMA+0x204>)
 8008218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	4a43      	ldr	r2, [pc, #268]	; (800832c <HAL_ADC_Start_DMA+0x208>)
 8008220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	4a42      	ldr	r2, [pc, #264]	; (8008330 <HAL_ADC_Start_DMA+0x20c>)
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	4a41      	ldr	r2, [pc, #260]	; (8008334 <HAL_ADC_Start_DMA+0x210>)
 8008230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800823a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800824a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800825a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	334c      	adds	r3, #76	; 0x4c
 8008266:	4619      	mov	r1, r3
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f000 fcf2 	bl	8008c54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	2b00      	cmp	r3, #0
 800827a:	d12a      	bne.n	80082d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a2d      	ldr	r2, [pc, #180]	; (8008338 <HAL_ADC_Start_DMA+0x214>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d015      	beq.n	80082b2 <HAL_ADC_Start_DMA+0x18e>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2c      	ldr	r2, [pc, #176]	; (800833c <HAL_ADC_Start_DMA+0x218>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d105      	bne.n	800829c <HAL_ADC_Start_DMA+0x178>
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <HAL_ADC_Start_DMA+0x204>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a27      	ldr	r2, [pc, #156]	; (8008340 <HAL_ADC_Start_DMA+0x21c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d136      	bne.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
 80082a6:	4b20      	ldr	r3, [pc, #128]	; (8008328 <HAL_ADC_Start_DMA+0x204>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d130      	bne.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d129      	bne.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082ce:	609a      	str	r2, [r3, #8]
 80082d0:	e020      	b.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_ADC_Start_DMA+0x214>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d11b      	bne.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d114      	bne.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082f8:	609a      	str	r2, [r3, #8]
 80082fa:	e00b      	b.n	8008314 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008300:	f043 0210 	orr.w	r2, r3, #16
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830c:	f043 0201 	orr.w	r2, r3, #1
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000268 	.word	0x20000268
 8008324:	431bde83 	.word	0x431bde83
 8008328:	40012300 	.word	0x40012300
 800832c:	080087bd 	.word	0x080087bd
 8008330:	08008877 	.word	0x08008877
 8008334:	08008893 	.word	0x08008893
 8008338:	40012000 	.word	0x40012000
 800833c:	40012100 	.word	0x40012100
 8008340:	40012200 	.word	0x40012200

08008344 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_ADC_ConfigChannel+0x1c>
 8008398:	2302      	movs	r3, #2
 800839a:	e105      	b.n	80085a8 <HAL_ADC_ConfigChannel+0x228>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b09      	cmp	r3, #9
 80083aa:	d925      	bls.n	80083f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68d9      	ldr	r1, [r3, #12]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	4613      	mov	r3, r2
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	4413      	add	r3, r2
 80083c0:	3b1e      	subs	r3, #30
 80083c2:	2207      	movs	r2, #7
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	43da      	mvns	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	400a      	ands	r2, r1
 80083d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68d9      	ldr	r1, [r3, #12]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4618      	mov	r0, r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	4403      	add	r3, r0
 80083ea:	3b1e      	subs	r3, #30
 80083ec:	409a      	lsls	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	60da      	str	r2, [r3, #12]
 80083f6:	e022      	b.n	800843e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6919      	ldr	r1, [r3, #16]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	4613      	mov	r3, r2
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	4413      	add	r3, r2
 800840c:	2207      	movs	r2, #7
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43da      	mvns	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	400a      	ands	r2, r1
 800841a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6919      	ldr	r1, [r3, #16]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	4618      	mov	r0, r3
 800842e:	4603      	mov	r3, r0
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4403      	add	r3, r0
 8008434:	409a      	lsls	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b06      	cmp	r3, #6
 8008444:	d824      	bhi.n	8008490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	3b05      	subs	r3, #5
 8008458:	221f      	movs	r2, #31
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	43da      	mvns	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	400a      	ands	r2, r1
 8008466:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	4618      	mov	r0, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	3b05      	subs	r3, #5
 8008482:	fa00 f203 	lsl.w	r2, r0, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	635a      	str	r2, [r3, #52]	; 0x34
 800848e:	e04c      	b.n	800852a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b0c      	cmp	r3, #12
 8008496:	d824      	bhi.n	80084e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	3b23      	subs	r3, #35	; 0x23
 80084aa:	221f      	movs	r2, #31
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	43da      	mvns	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	400a      	ands	r2, r1
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4618      	mov	r0, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	3b23      	subs	r3, #35	; 0x23
 80084d4:	fa00 f203 	lsl.w	r2, r0, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	631a      	str	r2, [r3, #48]	; 0x30
 80084e0:	e023      	b.n	800852a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	3b41      	subs	r3, #65	; 0x41
 80084f4:	221f      	movs	r2, #31
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43da      	mvns	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	400a      	ands	r2, r1
 8008502:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	4618      	mov	r0, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	3b41      	subs	r3, #65	; 0x41
 800851e:	fa00 f203 	lsl.w	r2, r0, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800852a:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <HAL_ADC_ConfigChannel+0x234>)
 800852c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a21      	ldr	r2, [pc, #132]	; (80085b8 <HAL_ADC_ConfigChannel+0x238>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d109      	bne.n	800854c <HAL_ADC_ConfigChannel+0x1cc>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b12      	cmp	r3, #18
 800853e:	d105      	bne.n	800854c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_ADC_ConfigChannel+0x238>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d123      	bne.n	800859e <HAL_ADC_ConfigChannel+0x21e>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b10      	cmp	r3, #16
 800855c:	d003      	beq.n	8008566 <HAL_ADC_ConfigChannel+0x1e6>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b11      	cmp	r3, #17
 8008564:	d11b      	bne.n	800859e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b10      	cmp	r3, #16
 8008578:	d111      	bne.n	800859e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800857a:	4b10      	ldr	r3, [pc, #64]	; (80085bc <HAL_ADC_ConfigChannel+0x23c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a10      	ldr	r2, [pc, #64]	; (80085c0 <HAL_ADC_ConfigChannel+0x240>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	0c9a      	lsrs	r2, r3, #18
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008590:	e002      	b.n	8008598 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	3b01      	subs	r3, #1
 8008596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f9      	bne.n	8008592 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40012300 	.word	0x40012300
 80085b8:	40012000 	.word	0x40012000
 80085bc:	20000268 	.word	0x20000268
 80085c0:	431bde83 	.word	0x431bde83

080085c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80085cc:	4b79      	ldr	r3, [pc, #484]	; (80087b4 <ADC_Init+0x1f0>)
 80085ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	431a      	orrs	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6859      	ldr	r1, [r3, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	021a      	lsls	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800861c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6859      	ldr	r1, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800863e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6899      	ldr	r1, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	4a58      	ldr	r2, [pc, #352]	; (80087b8 <ADC_Init+0x1f4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d022      	beq.n	80086a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800866a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6899      	ldr	r1, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800868c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6899      	ldr	r1, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	609a      	str	r2, [r3, #8]
 80086a0:	e00f      	b.n	80086c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0202 	bic.w	r2, r2, #2
 80086d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6899      	ldr	r1, [r3, #8]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7e1b      	ldrb	r3, [r3, #24]
 80086dc:	005a      	lsls	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01b      	beq.n	8008728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800870e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6859      	ldr	r1, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	3b01      	subs	r3, #1
 800871c:	035a      	lsls	r2, r3, #13
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	e007      	b.n	8008738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008736:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	3b01      	subs	r3, #1
 8008754:	051a      	lsls	r2, r3, #20
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800876c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6899      	ldr	r1, [r3, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800877a:	025a      	lsls	r2, r3, #9
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6899      	ldr	r1, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	029a      	lsls	r2, r3, #10
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	40012300 	.word	0x40012300
 80087b8:	0f000001 	.word	0x0f000001

080087bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d13c      	bne.n	8008850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d12b      	bne.n	8008848 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d127      	bne.n	8008848 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008810:	2b00      	cmp	r3, #0
 8008812:	d119      	bne.n	8008848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0220 	bic.w	r2, r2, #32
 8008822:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	f043 0201 	orr.w	r2, r3, #1
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7fd fd47 	bl	80062dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800884e:	e00e      	b.n	800886e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fd85 	bl	800836c <HAL_ADC_ErrorCallback>
}
 8008862:	e004      	b.n	800886e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fd5d 	bl	8008344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2240      	movs	r2, #64	; 0x40
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff fd5a 	bl	800836c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <__NVIC_SetPriorityGrouping>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <__NVIC_SetPriorityGrouping+0x44>)
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088f0:	4013      	ands	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008906:	4a04      	ldr	r2, [pc, #16]	; (8008918 <__NVIC_SetPriorityGrouping+0x44>)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	60d3      	str	r3, [r2, #12]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <__NVIC_GetPriorityGrouping>:
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <__NVIC_GetPriorityGrouping+0x18>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	0a1b      	lsrs	r3, r3, #8
 8008926:	f003 0307 	and.w	r3, r3, #7
}
 800892a:	4618      	mov	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <__NVIC_EnableIRQ>:
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008946:	2b00      	cmp	r3, #0
 8008948:	db0b      	blt.n	8008962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	f003 021f 	and.w	r2, r3, #31
 8008950:	4907      	ldr	r1, [pc, #28]	; (8008970 <__NVIC_EnableIRQ+0x38>)
 8008952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	2001      	movs	r0, #1
 800895a:	fa00 f202 	lsl.w	r2, r0, r2
 800895e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	e000e100 	.word	0xe000e100

08008974 <__NVIC_SetPriority>:
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008984:	2b00      	cmp	r3, #0
 8008986:	db0a      	blt.n	800899e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	490c      	ldr	r1, [pc, #48]	; (80089c0 <__NVIC_SetPriority+0x4c>)
 800898e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008992:	0112      	lsls	r2, r2, #4
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	440b      	add	r3, r1
 8008998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800899c:	e00a      	b.n	80089b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	4908      	ldr	r1, [pc, #32]	; (80089c4 <__NVIC_SetPriority+0x50>)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	3b04      	subs	r3, #4
 80089ac:	0112      	lsls	r2, r2, #4
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	440b      	add	r3, r1
 80089b2:	761a      	strb	r2, [r3, #24]
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	e000e100 	.word	0xe000e100
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <NVIC_EncodePriority>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	b089      	sub	sp, #36	; 0x24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f1c3 0307 	rsb	r3, r3, #7
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	bf28      	it	cs
 80089e6:	2304      	movcs	r3, #4
 80089e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	3304      	adds	r3, #4
 80089ee:	2b06      	cmp	r3, #6
 80089f0:	d902      	bls.n	80089f8 <NVIC_EncodePriority+0x30>
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	3b03      	subs	r3, #3
 80089f6:	e000      	b.n	80089fa <NVIC_EncodePriority+0x32>
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	43da      	mvns	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	401a      	ands	r2, r3
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a10:	f04f 31ff 	mov.w	r1, #4294967295
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1a:	43d9      	mvns	r1, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a20:	4313      	orrs	r3, r2
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3724      	adds	r7, #36	; 0x24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a40:	d301      	bcc.n	8008a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a42:	2301      	movs	r3, #1
 8008a44:	e00f      	b.n	8008a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a46:	4a0a      	ldr	r2, [pc, #40]	; (8008a70 <SysTick_Config+0x40>)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a4e:	210f      	movs	r1, #15
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	f7ff ff8e 	bl	8008974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <SysTick_Config+0x40>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <SysTick_Config+0x40>)
 8008a60:	2207      	movs	r2, #7
 8008a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	e000e010 	.word	0xe000e010

08008a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ff29 	bl	80088d4 <__NVIC_SetPriorityGrouping>
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	4603      	mov	r3, r0
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
 8008a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a9c:	f7ff ff3e 	bl	800891c <__NVIC_GetPriorityGrouping>
 8008aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	f7ff ff8e 	bl	80089c8 <NVIC_EncodePriority>
 8008aac:	4602      	mov	r2, r0
 8008aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff ff5d 	bl	8008974 <__NVIC_SetPriority>
}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	4603      	mov	r3, r0
 8008aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff ff31 	bl	8008938 <__NVIC_EnableIRQ>
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ffa2 	bl	8008a30 <SysTick_Config>
 8008aec:	4603      	mov	r3, r0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008b04:	f7ff f95a 	bl	8007dbc <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e099      	b.n	8008c48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0201 	bic.w	r2, r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b34:	e00f      	b.n	8008b56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b36:	f7ff f941 	bl	8007dbc <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	d908      	bls.n	8008b56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2220      	movs	r2, #32
 8008b48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e078      	b.n	8008c48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e8      	bne.n	8008b36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4b38      	ldr	r3, [pc, #224]	; (8008c50 <HAL_DMA_Init+0x158>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d107      	bne.n	8008bc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d117      	bne.n	8008c1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00e      	beq.n	8008c1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb01 	bl	8009204 <DMA_CheckFifoParam>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d008      	beq.n	8008c1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2240      	movs	r2, #64	; 0x40
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008c16:	2301      	movs	r3, #1
 8008c18:	e016      	b.n	8008c48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fab8 	bl	8009198 <DMA_CalcBaseAndBitshift>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	223f      	movs	r2, #63	; 0x3f
 8008c32:	409a      	lsls	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	f010803f 	.word	0xf010803f

08008c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_DMA_Start_IT+0x26>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e040      	b.n	8008cfc <HAL_DMA_Start_IT+0xa8>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d12f      	bne.n	8008cee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2202      	movs	r2, #2
 8008c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fa4a 	bl	800913c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cac:	223f      	movs	r2, #63	; 0x3f
 8008cae:	409a      	lsls	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0216 	orr.w	r2, r2, #22
 8008cc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0208 	orr.w	r2, r2, #8
 8008cda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e005      	b.n	8008cfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008d12:	f7ff f853 	bl	8007dbc <HAL_GetTick>
 8008d16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d008      	beq.n	8008d36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2280      	movs	r2, #128	; 0x80
 8008d28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e052      	b.n	8008ddc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0216 	bic.w	r2, r2, #22
 8008d44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	695a      	ldr	r2, [r3, #20]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <HAL_DMA_Abort+0x62>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0208 	bic.w	r2, r2, #8
 8008d74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d86:	e013      	b.n	8008db0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d88:	f7ff f818 	bl	8007dbc <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	d90c      	bls.n	8008db0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2203      	movs	r2, #3
 8008da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e015      	b.n	8008ddc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e4      	bne.n	8008d88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc2:	223f      	movs	r2, #63	; 0x3f
 8008dc4:	409a      	lsls	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d004      	beq.n	8008e02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2280      	movs	r2, #128	; 0x80
 8008dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e00c      	b.n	8008e1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2205      	movs	r2, #5
 8008e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0201 	bic.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008e34:	4b92      	ldr	r3, [pc, #584]	; (8009080 <HAL_DMA_IRQHandler+0x258>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a92      	ldr	r2, [pc, #584]	; (8009084 <HAL_DMA_IRQHandler+0x25c>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	0a9b      	lsrs	r3, r3, #10
 8008e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	2208      	movs	r2, #8
 8008e54:	409a      	lsls	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01a      	beq.n	8008e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d013      	beq.n	8008e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0204 	bic.w	r2, r2, #4
 8008e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e80:	2208      	movs	r2, #8
 8008e82:	409a      	lsls	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8c:	f043 0201 	orr.w	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e98:	2201      	movs	r2, #1
 8008e9a:	409a      	lsls	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d012      	beq.n	8008eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	409a      	lsls	r2, r3
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec2:	f043 0202 	orr.w	r2, r3, #2
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ece:	2204      	movs	r2, #4
 8008ed0:	409a      	lsls	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d012      	beq.n	8008f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eec:	2204      	movs	r2, #4
 8008eee:	409a      	lsls	r2, r3
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef8:	f043 0204 	orr.w	r2, r3, #4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f04:	2210      	movs	r2, #16
 8008f06:	409a      	lsls	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d043      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0308 	and.w	r3, r3, #8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d03c      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f22:	2210      	movs	r2, #16
 8008f24:	409a      	lsls	r2, r3
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d018      	beq.n	8008f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d108      	bne.n	8008f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d024      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4798      	blx	r3
 8008f56:	e01f      	b.n	8008f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
 8008f68:	e016      	b.n	8008f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d107      	bne.n	8008f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0208 	bic.w	r2, r2, #8
 8008f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 808e 	beq.w	80090c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8086 	beq.w	80090c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d136      	bne.n	8009040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0216 	bic.w	r2, r2, #22
 8008fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <HAL_DMA_IRQHandler+0x1da>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0208 	bic.w	r2, r2, #8
 8009010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009016:	223f      	movs	r2, #63	; 0x3f
 8009018:	409a      	lsls	r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009032:	2b00      	cmp	r3, #0
 8009034:	d07d      	beq.n	8009132 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
        }
        return;
 800903e:	e078      	b.n	8009132 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01c      	beq.n	8009088 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d108      	bne.n	800906e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009060:	2b00      	cmp	r3, #0
 8009062:	d030      	beq.n	80090c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
 800906c:	e02b      	b.n	80090c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d027      	beq.n	80090c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	e022      	b.n	80090c6 <HAL_DMA_IRQHandler+0x29e>
 8009080:	20000268 	.word	0x20000268
 8009084:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10f      	bne.n	80090b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0210 	bic.w	r2, r2, #16
 80090a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d032      	beq.n	8009134 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d022      	beq.n	8009120 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2205      	movs	r2, #5
 80090de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0201 	bic.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d307      	bcc.n	800910e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f2      	bne.n	80090f2 <HAL_DMA_IRQHandler+0x2ca>
 800910c:	e000      	b.n	8009110 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800910e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
 8009130:	e000      	b.n	8009134 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009132:	bf00      	nop
    }
  }
}
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop

0800913c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009158:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d108      	bne.n	800917c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800917a:	e007      	b.n	800918c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]
}
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	3b10      	subs	r3, #16
 80091a8:	4a14      	ldr	r2, [pc, #80]	; (80091fc <DMA_CalcBaseAndBitshift+0x64>)
 80091aa:	fba2 2303 	umull	r2, r3, r2, r3
 80091ae:	091b      	lsrs	r3, r3, #4
 80091b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80091b2:	4a13      	ldr	r2, [pc, #76]	; (8009200 <DMA_CalcBaseAndBitshift+0x68>)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d909      	bls.n	80091da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	659a      	str	r2, [r3, #88]	; 0x58
 80091d8:	e007      	b.n	80091ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80091e2:	f023 0303 	bic.w	r3, r3, #3
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	aaaaaaab 	.word	0xaaaaaaab
 8009200:	08015d2c 	.word	0x08015d2c

08009204 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d11f      	bne.n	800925e <DMA_CheckFifoParam+0x5a>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b03      	cmp	r3, #3
 8009222:	d856      	bhi.n	80092d2 <DMA_CheckFifoParam+0xce>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <DMA_CheckFifoParam+0x28>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	0800923d 	.word	0x0800923d
 8009230:	0800924f 	.word	0x0800924f
 8009234:	0800923d 	.word	0x0800923d
 8009238:	080092d3 	.word	0x080092d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d046      	beq.n	80092d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800924c:	e043      	b.n	80092d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009256:	d140      	bne.n	80092da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800925c:	e03d      	b.n	80092da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009266:	d121      	bne.n	80092ac <DMA_CheckFifoParam+0xa8>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d837      	bhi.n	80092de <DMA_CheckFifoParam+0xda>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <DMA_CheckFifoParam+0x70>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009285 	.word	0x08009285
 8009278:	0800928b 	.word	0x0800928b
 800927c:	08009285 	.word	0x08009285
 8009280:	0800929d 	.word	0x0800929d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
      break;
 8009288:	e030      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d025      	beq.n	80092e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800929a:	e022      	b.n	80092e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092a4:	d11f      	bne.n	80092e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80092aa:	e01c      	b.n	80092e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d903      	bls.n	80092ba <DMA_CheckFifoParam+0xb6>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d003      	beq.n	80092c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80092b8:	e018      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
      break;
 80092be:	e015      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
      break;
 80092d0:	e00b      	b.n	80092ea <DMA_CheckFifoParam+0xe6>
      break;
 80092d2:	bf00      	nop
 80092d4:	e00a      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;
 80092d6:	bf00      	nop
 80092d8:	e008      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;
 80092da:	bf00      	nop
 80092dc:	e006      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;
 80092de:	bf00      	nop
 80092e0:	e004      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;
 80092e2:	bf00      	nop
 80092e4:	e002      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;   
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <DMA_CheckFifoParam+0xe8>
      break;
 80092ea:	bf00      	nop
    }
  } 
  
  return status; 
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop

080092fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b089      	sub	sp, #36	; 0x24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800930e:	2300      	movs	r3, #0
 8009310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009312:	2300      	movs	r3, #0
 8009314:	61fb      	str	r3, [r7, #28]
 8009316:	e16b      	b.n	80095f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009318:	2201      	movs	r2, #1
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4013      	ands	r3, r2
 800932a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	f040 815a 	bne.w	80095ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	2b01      	cmp	r3, #1
 8009340:	d005      	beq.n	800934e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800934a:	2b02      	cmp	r3, #2
 800934c:	d130      	bne.n	80093b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	2203      	movs	r2, #3
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	43db      	mvns	r3, r3
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	4013      	ands	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	4313      	orrs	r3, r2
 8009376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009384:	2201      	movs	r2, #1
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43db      	mvns	r3, r3
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	f003 0201 	and.w	r2, r3, #1
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d017      	beq.n	80093ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	2203      	movs	r2, #3
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	43db      	mvns	r3, r3
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	4013      	ands	r3, r2
 80093d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d123      	bne.n	8009440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	08da      	lsrs	r2, r3, #3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3208      	adds	r2, #8
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	220f      	movs	r2, #15
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	43db      	mvns	r3, r3
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	4013      	ands	r3, r2
 800941a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	4313      	orrs	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	08da      	lsrs	r2, r3, #3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3208      	adds	r2, #8
 800943a:	69b9      	ldr	r1, [r7, #24]
 800943c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	2203      	movs	r2, #3
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	43db      	mvns	r3, r3
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	4013      	ands	r3, r2
 8009456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f003 0203 	and.w	r2, r3, #3
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	4313      	orrs	r3, r2
 800946c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80b4 	beq.w	80095ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	4b60      	ldr	r3, [pc, #384]	; (8009608 <HAL_GPIO_Init+0x30c>)
 8009488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948a:	4a5f      	ldr	r2, [pc, #380]	; (8009608 <HAL_GPIO_Init+0x30c>)
 800948c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009490:	6453      	str	r3, [r2, #68]	; 0x44
 8009492:	4b5d      	ldr	r3, [pc, #372]	; (8009608 <HAL_GPIO_Init+0x30c>)
 8009494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800949e:	4a5b      	ldr	r2, [pc, #364]	; (800960c <HAL_GPIO_Init+0x310>)
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	089b      	lsrs	r3, r3, #2
 80094a4:	3302      	adds	r3, #2
 80094a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	220f      	movs	r2, #15
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	43db      	mvns	r3, r3
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	4013      	ands	r3, r2
 80094c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a52      	ldr	r2, [pc, #328]	; (8009610 <HAL_GPIO_Init+0x314>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d02b      	beq.n	8009522 <HAL_GPIO_Init+0x226>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a51      	ldr	r2, [pc, #324]	; (8009614 <HAL_GPIO_Init+0x318>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d025      	beq.n	800951e <HAL_GPIO_Init+0x222>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a50      	ldr	r2, [pc, #320]	; (8009618 <HAL_GPIO_Init+0x31c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01f      	beq.n	800951a <HAL_GPIO_Init+0x21e>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a4f      	ldr	r2, [pc, #316]	; (800961c <HAL_GPIO_Init+0x320>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d019      	beq.n	8009516 <HAL_GPIO_Init+0x21a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a4e      	ldr	r2, [pc, #312]	; (8009620 <HAL_GPIO_Init+0x324>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <HAL_GPIO_Init+0x216>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a4d      	ldr	r2, [pc, #308]	; (8009624 <HAL_GPIO_Init+0x328>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00d      	beq.n	800950e <HAL_GPIO_Init+0x212>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a4c      	ldr	r2, [pc, #304]	; (8009628 <HAL_GPIO_Init+0x32c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d007      	beq.n	800950a <HAL_GPIO_Init+0x20e>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a4b      	ldr	r2, [pc, #300]	; (800962c <HAL_GPIO_Init+0x330>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d101      	bne.n	8009506 <HAL_GPIO_Init+0x20a>
 8009502:	2307      	movs	r3, #7
 8009504:	e00e      	b.n	8009524 <HAL_GPIO_Init+0x228>
 8009506:	2308      	movs	r3, #8
 8009508:	e00c      	b.n	8009524 <HAL_GPIO_Init+0x228>
 800950a:	2306      	movs	r3, #6
 800950c:	e00a      	b.n	8009524 <HAL_GPIO_Init+0x228>
 800950e:	2305      	movs	r3, #5
 8009510:	e008      	b.n	8009524 <HAL_GPIO_Init+0x228>
 8009512:	2304      	movs	r3, #4
 8009514:	e006      	b.n	8009524 <HAL_GPIO_Init+0x228>
 8009516:	2303      	movs	r3, #3
 8009518:	e004      	b.n	8009524 <HAL_GPIO_Init+0x228>
 800951a:	2302      	movs	r3, #2
 800951c:	e002      	b.n	8009524 <HAL_GPIO_Init+0x228>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <HAL_GPIO_Init+0x228>
 8009522:	2300      	movs	r3, #0
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	f002 0203 	and.w	r2, r2, #3
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	4093      	lsls	r3, r2
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	4313      	orrs	r3, r2
 8009532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009534:	4935      	ldr	r1, [pc, #212]	; (800960c <HAL_GPIO_Init+0x310>)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	089b      	lsrs	r3, r3, #2
 800953a:	3302      	adds	r3, #2
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009542:	4b3b      	ldr	r3, [pc, #236]	; (8009630 <HAL_GPIO_Init+0x334>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	43db      	mvns	r3, r3
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	4013      	ands	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009566:	4a32      	ldr	r2, [pc, #200]	; (8009630 <HAL_GPIO_Init+0x334>)
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800956c:	4b30      	ldr	r3, [pc, #192]	; (8009630 <HAL_GPIO_Init+0x334>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	43db      	mvns	r3, r3
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	4013      	ands	r3, r2
 800957a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009590:	4a27      	ldr	r2, [pc, #156]	; (8009630 <HAL_GPIO_Init+0x334>)
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009596:	4b26      	ldr	r3, [pc, #152]	; (8009630 <HAL_GPIO_Init+0x334>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	43db      	mvns	r3, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	4013      	ands	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80095ba:	4a1d      	ldr	r2, [pc, #116]	; (8009630 <HAL_GPIO_Init+0x334>)
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <HAL_GPIO_Init+0x334>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	43db      	mvns	r3, r3
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	4013      	ands	r3, r2
 80095ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80095e4:	4a12      	ldr	r2, [pc, #72]	; (8009630 <HAL_GPIO_Init+0x334>)
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	3301      	adds	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	2b0f      	cmp	r3, #15
 80095f4:	f67f ae90 	bls.w	8009318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	3724      	adds	r7, #36	; 0x24
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40023800 	.word	0x40023800
 800960c:	40013800 	.word	0x40013800
 8009610:	40020000 	.word	0x40020000
 8009614:	40020400 	.word	0x40020400
 8009618:	40020800 	.word	0x40020800
 800961c:	40020c00 	.word	0x40020c00
 8009620:	40021000 	.word	0x40021000
 8009624:	40021400 	.word	0x40021400
 8009628:	40021800 	.word	0x40021800
 800962c:	40021c00 	.word	0x40021c00
 8009630:	40013c00 	.word	0x40013c00

08009634 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e0cd      	b.n	80097ec <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009650:	2201      	movs	r2, #1
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	4013      	ands	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	f040 80bd 	bne.w	80097e6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800966c:	4a65      	ldr	r2, [pc, #404]	; (8009804 <HAL_GPIO_DeInit+0x1d0>)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	089b      	lsrs	r3, r3, #2
 8009672:	3302      	adds	r3, #2
 8009674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009678:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	220f      	movs	r2, #15
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	4013      	ands	r3, r2
 800968c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a5d      	ldr	r2, [pc, #372]	; (8009808 <HAL_GPIO_DeInit+0x1d4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d02b      	beq.n	80096ee <HAL_GPIO_DeInit+0xba>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a5c      	ldr	r2, [pc, #368]	; (800980c <HAL_GPIO_DeInit+0x1d8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d025      	beq.n	80096ea <HAL_GPIO_DeInit+0xb6>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a5b      	ldr	r2, [pc, #364]	; (8009810 <HAL_GPIO_DeInit+0x1dc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d01f      	beq.n	80096e6 <HAL_GPIO_DeInit+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a5a      	ldr	r2, [pc, #360]	; (8009814 <HAL_GPIO_DeInit+0x1e0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d019      	beq.n	80096e2 <HAL_GPIO_DeInit+0xae>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a59      	ldr	r2, [pc, #356]	; (8009818 <HAL_GPIO_DeInit+0x1e4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d013      	beq.n	80096de <HAL_GPIO_DeInit+0xaa>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a58      	ldr	r2, [pc, #352]	; (800981c <HAL_GPIO_DeInit+0x1e8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00d      	beq.n	80096da <HAL_GPIO_DeInit+0xa6>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a57      	ldr	r2, [pc, #348]	; (8009820 <HAL_GPIO_DeInit+0x1ec>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <HAL_GPIO_DeInit+0xa2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a56      	ldr	r2, [pc, #344]	; (8009824 <HAL_GPIO_DeInit+0x1f0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d101      	bne.n	80096d2 <HAL_GPIO_DeInit+0x9e>
 80096ce:	2307      	movs	r3, #7
 80096d0:	e00e      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096d2:	2308      	movs	r3, #8
 80096d4:	e00c      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096d6:	2306      	movs	r3, #6
 80096d8:	e00a      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096da:	2305      	movs	r3, #5
 80096dc:	e008      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096de:	2304      	movs	r3, #4
 80096e0:	e006      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096e2:	2303      	movs	r3, #3
 80096e4:	e004      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e002      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <HAL_GPIO_DeInit+0xbc>
 80096ee:	2300      	movs	r3, #0
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	f002 0203 	and.w	r2, r2, #3
 80096f6:	0092      	lsls	r2, r2, #2
 80096f8:	4093      	lsls	r3, r2
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d132      	bne.n	8009766 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009700:	4b49      	ldr	r3, [pc, #292]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	43db      	mvns	r3, r3
 8009708:	4947      	ldr	r1, [pc, #284]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 800970a:	4013      	ands	r3, r2
 800970c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800970e:	4b46      	ldr	r3, [pc, #280]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	43db      	mvns	r3, r3
 8009716:	4944      	ldr	r1, [pc, #272]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 8009718:	4013      	ands	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800971c:	4b42      	ldr	r3, [pc, #264]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	43db      	mvns	r3, r3
 8009724:	4940      	ldr	r1, [pc, #256]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 8009726:	4013      	ands	r3, r2
 8009728:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800972a:	4b3f      	ldr	r3, [pc, #252]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	43db      	mvns	r3, r3
 8009732:	493d      	ldr	r1, [pc, #244]	; (8009828 <HAL_GPIO_DeInit+0x1f4>)
 8009734:	4013      	ands	r3, r2
 8009736:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	220f      	movs	r2, #15
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009748:	4a2e      	ldr	r2, [pc, #184]	; (8009804 <HAL_GPIO_DeInit+0x1d0>)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	089b      	lsrs	r3, r3, #2
 800974e:	3302      	adds	r3, #2
 8009750:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	43da      	mvns	r2, r3
 8009758:	482a      	ldr	r0, [pc, #168]	; (8009804 <HAL_GPIO_DeInit+0x1d0>)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	089b      	lsrs	r3, r3, #2
 800975e:	400a      	ands	r2, r1
 8009760:	3302      	adds	r3, #2
 8009762:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	2103      	movs	r1, #3
 8009770:	fa01 f303 	lsl.w	r3, r1, r3
 8009774:	43db      	mvns	r3, r3
 8009776:	401a      	ands	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	08da      	lsrs	r2, r3, #3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3208      	adds	r2, #8
 8009784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	220f      	movs	r2, #15
 8009792:	fa02 f303 	lsl.w	r3, r2, r3
 8009796:	43db      	mvns	r3, r3
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	08d2      	lsrs	r2, r2, #3
 800979c:	4019      	ands	r1, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3208      	adds	r2, #8
 80097a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	2103      	movs	r1, #3
 80097b0:	fa01 f303 	lsl.w	r3, r1, r3
 80097b4:	43db      	mvns	r3, r3
 80097b6:	401a      	ands	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	2101      	movs	r1, #1
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	fa01 f303 	lsl.w	r3, r1, r3
 80097c8:	43db      	mvns	r3, r3
 80097ca:	401a      	ands	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	2103      	movs	r1, #3
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	43db      	mvns	r3, r3
 80097e0:	401a      	ands	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	3301      	adds	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b0f      	cmp	r3, #15
 80097f0:	f67f af2e 	bls.w	8009650 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40013800 	.word	0x40013800
 8009808:	40020000 	.word	0x40020000
 800980c:	40020400 	.word	0x40020400
 8009810:	40020800 	.word	0x40020800
 8009814:	40020c00 	.word	0x40020c00
 8009818:	40021000 	.word	0x40021000
 800981c:	40021400 	.word	0x40021400
 8009820:	40021800 	.word	0x40021800
 8009824:	40021c00 	.word	0x40021c00
 8009828:	40013c00 	.word	0x40013c00

0800982c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	887b      	ldrh	r3, [r7, #2]
 800983e:	4013      	ands	r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009844:	2301      	movs	r3, #1
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e001      	b.n	800984e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	807b      	strh	r3, [r7, #2]
 8009868:	4613      	mov	r3, r2
 800986a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800986c:	787b      	ldrb	r3, [r7, #1]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009872:	887a      	ldrh	r2, [r7, #2]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009878:	e003      	b.n	8009882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800987a:	887b      	ldrh	r3, [r7, #2]
 800987c:	041a      	lsls	r2, r3, #16
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	619a      	str	r2, [r3, #24]
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e12b      	b.n	8009afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fd fd82 	bl	80073c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2224      	movs	r2, #36	; 0x24
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098f4:	f002 f920 	bl	800bb38 <HAL_RCC_GetPCLK1Freq>
 80098f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	4a81      	ldr	r2, [pc, #516]	; (8009b04 <HAL_I2C_Init+0x274>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d807      	bhi.n	8009914 <HAL_I2C_Init+0x84>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4a80      	ldr	r2, [pc, #512]	; (8009b08 <HAL_I2C_Init+0x278>)
 8009908:	4293      	cmp	r3, r2
 800990a:	bf94      	ite	ls
 800990c:	2301      	movls	r3, #1
 800990e:	2300      	movhi	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e006      	b.n	8009922 <HAL_I2C_Init+0x92>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4a7d      	ldr	r2, [pc, #500]	; (8009b0c <HAL_I2C_Init+0x27c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	bf94      	ite	ls
 800991c:	2301      	movls	r3, #1
 800991e:	2300      	movhi	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e0e7      	b.n	8009afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4a78      	ldr	r2, [pc, #480]	; (8009b10 <HAL_I2C_Init+0x280>)
 800992e:	fba2 2303 	umull	r2, r3, r2, r3
 8009932:	0c9b      	lsrs	r3, r3, #18
 8009934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	4a6a      	ldr	r2, [pc, #424]	; (8009b04 <HAL_I2C_Init+0x274>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d802      	bhi.n	8009964 <HAL_I2C_Init+0xd4>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	3301      	adds	r3, #1
 8009962:	e009      	b.n	8009978 <HAL_I2C_Init+0xe8>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800996a:	fb02 f303 	mul.w	r3, r2, r3
 800996e:	4a69      	ldr	r2, [pc, #420]	; (8009b14 <HAL_I2C_Init+0x284>)
 8009970:	fba2 2303 	umull	r2, r3, r2, r3
 8009974:	099b      	lsrs	r3, r3, #6
 8009976:	3301      	adds	r3, #1
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	6812      	ldr	r2, [r2, #0]
 800997c:	430b      	orrs	r3, r1
 800997e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800998a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	495c      	ldr	r1, [pc, #368]	; (8009b04 <HAL_I2C_Init+0x274>)
 8009994:	428b      	cmp	r3, r1
 8009996:	d819      	bhi.n	80099cc <HAL_I2C_Init+0x13c>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1e59      	subs	r1, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80099a6:	1c59      	adds	r1, r3, #1
 80099a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80099ac:	400b      	ands	r3, r1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <HAL_I2C_Init+0x138>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1e59      	subs	r1, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80099c0:	3301      	adds	r3, #1
 80099c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c6:	e051      	b.n	8009a6c <HAL_I2C_Init+0x1dc>
 80099c8:	2304      	movs	r3, #4
 80099ca:	e04f      	b.n	8009a6c <HAL_I2C_Init+0x1dc>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d111      	bne.n	80099f8 <HAL_I2C_Init+0x168>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	1e58      	subs	r0, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6859      	ldr	r1, [r3, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	440b      	add	r3, r1
 80099e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80099e6:	3301      	adds	r3, #1
 80099e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bf0c      	ite	eq
 80099f0:	2301      	moveq	r3, #1
 80099f2:	2300      	movne	r3, #0
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	e012      	b.n	8009a1e <HAL_I2C_Init+0x18e>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	1e58      	subs	r0, r3, #1
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6859      	ldr	r1, [r3, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	0099      	lsls	r1, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a0e:	3301      	adds	r3, #1
 8009a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bf0c      	ite	eq
 8009a18:	2301      	moveq	r3, #1
 8009a1a:	2300      	movne	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <HAL_I2C_Init+0x196>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e022      	b.n	8009a6c <HAL_I2C_Init+0x1dc>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10e      	bne.n	8009a4c <HAL_I2C_Init+0x1bc>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1e58      	subs	r0, r3, #1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6859      	ldr	r1, [r3, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	440b      	add	r3, r1
 8009a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a40:	3301      	adds	r3, #1
 8009a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4a:	e00f      	b.n	8009a6c <HAL_I2C_Init+0x1dc>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	1e58      	subs	r0, r3, #1
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6859      	ldr	r1, [r3, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	0099      	lsls	r1, r3, #2
 8009a5c:	440b      	add	r3, r1
 8009a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a62:	3301      	adds	r3, #1
 8009a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	6809      	ldr	r1, [r1, #0]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69da      	ldr	r2, [r3, #28]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6911      	ldr	r1, [r2, #16]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68d2      	ldr	r2, [r2, #12]
 8009aa6:	4311      	orrs	r1, r2
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	695a      	ldr	r2, [r3, #20]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	000186a0 	.word	0x000186a0
 8009b08:	001e847f 	.word	0x001e847f
 8009b0c:	003d08ff 	.word	0x003d08ff
 8009b10:	431bde83 	.word	0x431bde83
 8009b14:	10624dd3 	.word	0x10624dd3

08009b18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e021      	b.n	8009b6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2224      	movs	r2, #36	; 0x24
 8009b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0201 	bic.w	r2, r2, #1
 8009b40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fd fcb8 	bl	80074b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	461a      	mov	r2, r3
 8009b84:	460b      	mov	r3, r1
 8009b86:	817b      	strh	r3, [r7, #10]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b8c:	f7fe f916 	bl	8007dbc <HAL_GetTick>
 8009b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	f040 80e0 	bne.w	8009d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	2319      	movs	r3, #25
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	4970      	ldr	r1, [pc, #448]	; (8009d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 f8f6 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e0d3      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_I2C_Master_Transmit+0x50>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e0cc      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d007      	beq.n	8009bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2221      	movs	r2, #33	; 0x21
 8009c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2210      	movs	r2, #16
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	893a      	ldrh	r2, [r7, #8]
 8009c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4a50      	ldr	r2, [pc, #320]	; (8009d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8009c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c30:	8979      	ldrh	r1, [r7, #10]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6a3a      	ldr	r2, [r7, #32]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 fde2 	bl	800a800 <I2C_MasterRequestWrite>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e08d      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009c5c:	e066      	b.n	8009d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	6a39      	ldr	r1, [r7, #32]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f001 f970 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00d      	beq.n	8009c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	d107      	bne.n	8009c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e06b      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d11b      	bne.n	8009d00 <HAL_I2C_Master_Transmit+0x188>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d017      	beq.n	8009d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	6a39      	ldr	r1, [r7, #32]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f001 f960 	bl	800afca <I2C_WaitOnBTFFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00d      	beq.n	8009d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d107      	bne.n	8009d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e01a      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d194      	bne.n	8009c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e000      	b.n	8009d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	00100002 	.word	0x00100002
 8009d70:	ffff0000 	.word	0xffff0000

08009d74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08c      	sub	sp, #48	; 0x30
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	460b      	mov	r3, r1
 8009d82:	817b      	strh	r3, [r7, #10]
 8009d84:	4613      	mov	r3, r2
 8009d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d88:	f7fe f818 	bl	8007dbc <HAL_GetTick>
 8009d8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b20      	cmp	r3, #32
 8009d98:	f040 820b 	bne.w	800a1b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	2319      	movs	r3, #25
 8009da2:	2201      	movs	r2, #1
 8009da4:	497c      	ldr	r1, [pc, #496]	; (8009f98 <HAL_I2C_Master_Receive+0x224>)
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 fff8 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009db2:	2302      	movs	r3, #2
 8009db4:	e1fe      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_I2C_Master_Receive+0x50>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e1f7      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d007      	beq.n	8009dea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f042 0201 	orr.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2222      	movs	r2, #34	; 0x22
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2210      	movs	r2, #16
 8009e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	893a      	ldrh	r2, [r7, #8]
 8009e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4a5c      	ldr	r2, [pc, #368]	; (8009f9c <HAL_I2C_Master_Receive+0x228>)
 8009e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009e2c:	8979      	ldrh	r1, [r7, #10]
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fd66 	bl	800a904 <I2C_MasterRequestRead>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e1b8      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d113      	bne.n	8009e72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	623b      	str	r3, [r7, #32]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	623b      	str	r3, [r7, #32]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	623b      	str	r3, [r7, #32]
 8009e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e18c      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d11b      	bne.n	8009eb2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	61fb      	str	r3, [r7, #28]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e16c      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d11b      	bne.n	8009ef2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eda:	2300      	movs	r3, #0
 8009edc:	61bb      	str	r3, [r7, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	e14c      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009f18:	e138      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	f200 80f1 	bhi.w	800a106 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d123      	bne.n	8009f74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 f88b 	bl	800b04c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e139      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	691a      	ldr	r2, [r3, #16]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f72:	e10b      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d14e      	bne.n	800a01a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	2200      	movs	r2, #0
 8009f84:	4906      	ldr	r1, [pc, #24]	; (8009fa0 <HAL_I2C_Master_Receive+0x22c>)
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 ff08 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d008      	beq.n	8009fa4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e10e      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
 8009f96:	bf00      	nop
 8009f98:	00100002 	.word	0x00100002
 8009f9c:	ffff0000 	.word	0xffff0000
 8009fa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691a      	ldr	r2, [r3, #16]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a002:	3b01      	subs	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a00e:	b29b      	uxth	r3, r3
 800a010:	3b01      	subs	r3, #1
 800a012:	b29a      	uxth	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a018:	e0b8      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	2200      	movs	r2, #0
 800a022:	4966      	ldr	r1, [pc, #408]	; (800a1bc <HAL_I2C_Master_Receive+0x448>)
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 feb9 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e0bf      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691a      	ldr	r2, [r3, #16]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	3b01      	subs	r3, #1
 800a070:	b29a      	uxth	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	2200      	movs	r2, #0
 800a07e:	494f      	ldr	r1, [pc, #316]	; (800a1bc <HAL_I2C_Master_Receive+0x448>)
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fe8b 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e091      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	b2d2      	uxtb	r2, r2
 800a0de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a104:	e042      	b.n	800a18c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 ff9e 	bl	800b04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e04c      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	691a      	ldr	r2, [r3, #16]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	1c5a      	adds	r2, r3, #1
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a142:	b29b      	uxth	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	b29a      	uxth	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	2b04      	cmp	r3, #4
 800a158:	d118      	bne.n	800a18c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	b2d2      	uxtb	r2, r2
 800a166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a176:	3b01      	subs	r3, #1
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a190:	2b00      	cmp	r3, #0
 800a192:	f47f aec2 	bne.w	8009f1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2220      	movs	r2, #32
 800a19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e000      	b.n	800a1b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a1b2:	2302      	movs	r3, #2
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3728      	adds	r7, #40	; 0x28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	00010004 	.word	0x00010004

0800a1c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	817b      	strh	r3, [r7, #10]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	813b      	strh	r3, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1da:	f7fd fdef 	bl	8007dbc <HAL_GetTick>
 800a1de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	f040 80d9 	bne.w	800a3a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	2319      	movs	r3, #25
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	496d      	ldr	r1, [pc, #436]	; (800a3ac <HAL_I2C_Mem_Write+0x1ec>)
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fdcf 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a204:	2302      	movs	r3, #2
 800a206:	e0cc      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d101      	bne.n	800a216 <HAL_I2C_Mem_Write+0x56>
 800a212:	2302      	movs	r3, #2
 800a214:	e0c5      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d007      	beq.n	800a23c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a24a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2221      	movs	r2, #33	; 0x21
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2240      	movs	r2, #64	; 0x40
 800a258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a26c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4a4d      	ldr	r2, [pc, #308]	; (800a3b0 <HAL_I2C_Mem_Write+0x1f0>)
 800a27c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a27e:	88f8      	ldrh	r0, [r7, #6]
 800a280:	893a      	ldrh	r2, [r7, #8]
 800a282:	8979      	ldrh	r1, [r7, #10]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4603      	mov	r3, r0
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fc06 	bl	800aaa0 <I2C_RequestMemoryWrite>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d052      	beq.n	800a340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e081      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 fe50 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00d      	beq.n	800a2ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d107      	bne.n	800a2c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e06b      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b04      	cmp	r3, #4
 800a306:	d11b      	bne.n	800a340 <HAL_I2C_Mem_Write+0x180>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d017      	beq.n	800a340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	781a      	ldrb	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32a:	3b01      	subs	r3, #1
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a336:	b29b      	uxth	r3, r3
 800a338:	3b01      	subs	r3, #1
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1aa      	bne.n	800a29e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 fe3c 	bl	800afca <I2C_WaitOnBTFFlagUntilTimeout>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00d      	beq.n	800a374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d107      	bne.n	800a370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a36e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e016      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2220      	movs	r2, #32
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e000      	b.n	800a3a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3a0:	2302      	movs	r3, #2
  }
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	00100002 	.word	0x00100002
 800a3b0:	ffff0000 	.word	0xffff0000

0800a3b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08c      	sub	sp, #48	; 0x30
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	817b      	strh	r3, [r7, #10]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	813b      	strh	r3, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3ce:	f7fd fcf5 	bl	8007dbc <HAL_GetTick>
 800a3d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	f040 8208 	bne.w	800a7f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	2319      	movs	r3, #25
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	497b      	ldr	r1, [pc, #492]	; (800a5d8 <HAL_I2C_Mem_Read+0x224>)
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 fcd5 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e1fb      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_I2C_Mem_Read+0x56>
 800a406:	2302      	movs	r3, #2
 800a408:	e1f4      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d007      	beq.n	800a430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0201 	orr.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a43e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2222      	movs	r2, #34	; 0x22
 800a444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2240      	movs	r2, #64	; 0x40
 800a44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a45a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4a5b      	ldr	r2, [pc, #364]	; (800a5dc <HAL_I2C_Mem_Read+0x228>)
 800a470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a472:	88f8      	ldrh	r0, [r7, #6]
 800a474:	893a      	ldrh	r2, [r7, #8]
 800a476:	8979      	ldrh	r1, [r7, #10]
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	4603      	mov	r3, r0
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fba2 	bl	800abcc <I2C_RequestMemoryRead>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e1b0      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a496:	2b00      	cmp	r3, #0
 800a498:	d113      	bne.n	800a4c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a49a:	2300      	movs	r3, #0
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	623b      	str	r3, [r7, #32]
 800a4ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	e184      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d11b      	bne.n	800a502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61fb      	str	r3, [r7, #28]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	61fb      	str	r3, [r7, #28]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699b      	ldr	r3, [r3, #24]
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e164      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a506:	2b02      	cmp	r3, #2
 800a508:	d11b      	bne.n	800a542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a52a:	2300      	movs	r3, #0
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	e144      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a558:	e138      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a55e:	2b03      	cmp	r3, #3
 800a560:	f200 80f1 	bhi.w	800a746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d123      	bne.n	800a5b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a56e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 fd6b 	bl	800b04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e139      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691a      	ldr	r2, [r3, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5b2:	e10b      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d14e      	bne.n	800a65a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4906      	ldr	r1, [pc, #24]	; (800a5e0 <HAL_I2C_Mem_Read+0x22c>)
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fbe8 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e10e      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
 800a5d6:	bf00      	nop
 800a5d8:	00100002 	.word	0x00100002
 800a5dc:	ffff0000 	.word	0xffff0000
 800a5e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a610:	3b01      	subs	r3, #1
 800a612:	b29a      	uxth	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29a      	uxth	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	b2d2      	uxtb	r2, r2
 800a632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a642:	3b01      	subs	r3, #1
 800a644:	b29a      	uxth	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a64e:	b29b      	uxth	r3, r3
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a658:	e0b8      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	2200      	movs	r2, #0
 800a662:	4966      	ldr	r1, [pc, #408]	; (800a7fc <HAL_I2C_Mem_Read+0x448>)
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fb99 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0bf      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	b2d2      	uxtb	r2, r2
 800a690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	2200      	movs	r2, #0
 800a6be:	494f      	ldr	r1, [pc, #316]	; (800a7fc <HAL_I2C_Mem_Read+0x448>)
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 fb6b 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e091      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	691a      	ldr	r2, [r3, #16]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a72e:	3b01      	subs	r3, #1
 800a730:	b29a      	uxth	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a744:	e042      	b.n	800a7cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fc7e 	bl	800b04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e04c      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	b2d2      	uxtb	r2, r2
 800a766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a776:	3b01      	subs	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b01      	subs	r3, #1
 800a786:	b29a      	uxth	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	2b04      	cmp	r3, #4
 800a798:	d118      	bne.n	800a7cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f47f aec2 	bne.w	800a55a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e000      	b.n	800a7f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a7f2:	2302      	movs	r3, #2
  }
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3728      	adds	r7, #40	; 0x28
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	00010004 	.word	0x00010004

0800a800 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	460b      	mov	r3, r1
 800a80e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d006      	beq.n	800a82a <I2C_MasterRequestWrite+0x2a>
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d003      	beq.n	800a82a <I2C_MasterRequestWrite+0x2a>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a828:	d108      	bne.n	800a83c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	e00b      	b.n	800a854 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a840:	2b12      	cmp	r3, #18
 800a842:	d107      	bne.n	800a854 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a852:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fa9b 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87a:	d103      	bne.n	800a884 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e035      	b.n	800a8f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a890:	d108      	bne.n	800a8a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a892:	897b      	ldrh	r3, [r7, #10]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8a0:	611a      	str	r2, [r3, #16]
 800a8a2:	e01b      	b.n	800a8dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a8a4:	897b      	ldrh	r3, [r7, #10]
 800a8a6:	11db      	asrs	r3, r3, #7
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0306 	and.w	r3, r3, #6
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	f063 030f 	orn	r3, r3, #15
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	490e      	ldr	r1, [pc, #56]	; (800a8fc <I2C_MasterRequestWrite+0xfc>)
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 fac1 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e010      	b.n	800a8f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a8d2:	897b      	ldrh	r3, [r7, #10]
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4907      	ldr	r1, [pc, #28]	; (800a900 <I2C_MasterRequestWrite+0x100>)
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 fab1 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	00010008 	.word	0x00010008
 800a900:	00010002 	.word	0x00010002

0800a904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af02      	add	r7, sp, #8
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	460b      	mov	r3, r1
 800a912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d006      	beq.n	800a93e <I2C_MasterRequestRead+0x3a>
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d003      	beq.n	800a93e <I2C_MasterRequestRead+0x3a>
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a93c:	d108      	bne.n	800a950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e00b      	b.n	800a968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a954:	2b11      	cmp	r3, #17
 800a956:	d107      	bne.n	800a968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 fa11 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00d      	beq.n	800a99c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a98e:	d103      	bne.n	800a998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e079      	b.n	800aa90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9a4:	d108      	bne.n	800a9b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9a6:	897b      	ldrh	r3, [r7, #10]
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	611a      	str	r2, [r3, #16]
 800a9b6:	e05f      	b.n	800aa78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a9b8:	897b      	ldrh	r3, [r7, #10]
 800a9ba:	11db      	asrs	r3, r3, #7
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 0306 	and.w	r3, r3, #6
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f063 030f 	orn	r3, r3, #15
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	4930      	ldr	r1, [pc, #192]	; (800aa98 <I2C_MasterRequestRead+0x194>)
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 fa37 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e054      	b.n	800aa90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9e6:	897b      	ldrh	r3, [r7, #10]
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	4929      	ldr	r1, [pc, #164]	; (800aa9c <I2C_MasterRequestRead+0x198>)
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 fa27 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e044      	b.n	800aa90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa06:	2300      	movs	r3, #0
 800aa08:	613b      	str	r3, [r7, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	613b      	str	r3, [r7, #16]
 800aa1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 f9af 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00d      	beq.n	800aa60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa52:	d103      	bne.n	800aa5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e017      	b.n	800aa90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800aa60:	897b      	ldrh	r3, [r7, #10]
 800aa62:	11db      	asrs	r3, r3, #7
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0306 	and.w	r3, r3, #6
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f063 030e 	orn	r3, r3, #14
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	4907      	ldr	r1, [pc, #28]	; (800aa9c <I2C_MasterRequestRead+0x198>)
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 f9e3 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e000      	b.n	800aa90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	00010008 	.word	0x00010008
 800aa9c:	00010002 	.word	0x00010002

0800aaa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	4603      	mov	r3, r0
 800aab0:	817b      	strh	r3, [r7, #10]
 800aab2:	460b      	mov	r3, r1
 800aab4:	813b      	strh	r3, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f960 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00d      	beq.n	800aafe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf0:	d103      	bne.n	800aafa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e05f      	b.n	800abbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aafe:	897b      	ldrh	r3, [r7, #10]
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	461a      	mov	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	6a3a      	ldr	r2, [r7, #32]
 800ab12:	492d      	ldr	r1, [pc, #180]	; (800abc8 <I2C_RequestMemoryWrite+0x128>)
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f998 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e04c      	b.n	800abbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab24:	2300      	movs	r3, #0
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3c:	6a39      	ldr	r1, [r7, #32]
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fa02 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00d      	beq.n	800ab66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d107      	bne.n	800ab62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e02b      	b.n	800abbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d105      	bne.n	800ab78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab6c:	893b      	ldrh	r3, [r7, #8]
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	611a      	str	r2, [r3, #16]
 800ab76:	e021      	b.n	800abbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab78:	893b      	ldrh	r3, [r7, #8]
 800ab7a:	0a1b      	lsrs	r3, r3, #8
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab88:	6a39      	ldr	r1, [r7, #32]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f9dc 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d107      	bne.n	800abae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e005      	b.n	800abbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abb2:	893b      	ldrh	r3, [r7, #8]
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	00010002 	.word	0x00010002

0800abcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	4608      	mov	r0, r1
 800abd6:	4611      	mov	r1, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4603      	mov	r3, r0
 800abdc:	817b      	strh	r3, [r7, #10]
 800abde:	460b      	mov	r3, r1
 800abe0:	813b      	strh	r3, [r7, #8]
 800abe2:	4613      	mov	r3, r2
 800abe4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 f8c2 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00d      	beq.n	800ac3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2c:	d103      	bne.n	800ac36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e0aa      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac3a:	897b      	ldrh	r3, [r7, #10]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	6a3a      	ldr	r2, [r7, #32]
 800ac4e:	4952      	ldr	r1, [pc, #328]	; (800ad98 <I2C_RequestMemoryRead+0x1cc>)
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f8fa 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e097      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac60:	2300      	movs	r3, #0
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac78:	6a39      	ldr	r1, [r7, #32]
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 f964 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00d      	beq.n	800aca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d107      	bne.n	800ac9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e076      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aca2:	88fb      	ldrh	r3, [r7, #6]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d105      	bne.n	800acb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aca8:	893b      	ldrh	r3, [r7, #8]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	611a      	str	r2, [r3, #16]
 800acb2:	e021      	b.n	800acf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800acb4:	893b      	ldrh	r3, [r7, #8]
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	b29b      	uxth	r3, r3
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	6a39      	ldr	r1, [r7, #32]
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 f93e 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00d      	beq.n	800acee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d107      	bne.n	800acea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ace8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e050      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acee:	893b      	ldrh	r3, [r7, #8]
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfa:	6a39      	ldr	r1, [r7, #32]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f923 	bl	800af48 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00d      	beq.n	800ad24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d107      	bne.n	800ad20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e035      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 f82b 	bl	800ad9c <I2C_WaitOnFlagUntilTimeout>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00d      	beq.n	800ad68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	d103      	bne.n	800ad64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e013      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ad68:	897b      	ldrh	r3, [r7, #10]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f043 0301 	orr.w	r3, r3, #1
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	6a3a      	ldr	r2, [r7, #32]
 800ad7c:	4906      	ldr	r1, [pc, #24]	; (800ad98 <I2C_RequestMemoryRead+0x1cc>)
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 f863 	bl	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	00010002 	.word	0x00010002

0800ad9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	4613      	mov	r3, r2
 800adaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adac:	e025      	b.n	800adfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb4:	d021      	beq.n	800adfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb6:	f7fd f801 	bl	8007dbc <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d302      	bcc.n	800adcc <I2C_WaitOnFlagUntilTimeout+0x30>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d116      	bne.n	800adfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2220      	movs	r2, #32
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f043 0220 	orr.w	r2, r3, #32
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e023      	b.n	800ae42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	0c1b      	lsrs	r3, r3, #16
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d10d      	bne.n	800ae20 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	43da      	mvns	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4013      	ands	r3, r2
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bf0c      	ite	eq
 800ae16:	2301      	moveq	r3, #1
 800ae18:	2300      	movne	r3, #0
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	e00c      	b.n	800ae3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	43da      	mvns	r2, r3
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bf0c      	ite	eq
 800ae32:	2301      	moveq	r3, #1
 800ae34:	2300      	movne	r3, #0
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	461a      	mov	r2, r3
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d0b6      	beq.n	800adae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae58:	e051      	b.n	800aefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae68:	d123      	bne.n	800aeb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	f043 0204 	orr.w	r2, r3, #4
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e046      	b.n	800af40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb8:	d021      	beq.n	800aefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeba:	f7fc ff7f 	bl	8007dbc <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d302      	bcc.n	800aed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d116      	bne.n	800aefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	f043 0220 	orr.w	r2, r3, #32
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e020      	b.n	800af40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	0c1b      	lsrs	r3, r3, #16
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b01      	cmp	r3, #1
 800af06:	d10c      	bne.n	800af22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	43da      	mvns	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	4013      	ands	r3, r2
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	bf14      	ite	ne
 800af1a:	2301      	movne	r3, #1
 800af1c:	2300      	moveq	r3, #0
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	e00b      	b.n	800af3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	43da      	mvns	r2, r3
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4013      	ands	r3, r2
 800af2e:	b29b      	uxth	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d18d      	bne.n	800ae5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af54:	e02d      	b.n	800afb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f8ce 	bl	800b0f8 <I2C_IsAcknowledgeFailed>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e02d      	b.n	800afc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d021      	beq.n	800afb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af6e:	f7fc ff25 	bl	8007dbc <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d302      	bcc.n	800af84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d116      	bne.n	800afb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	f043 0220 	orr.w	r2, r3, #32
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e007      	b.n	800afc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afbc:	2b80      	cmp	r3, #128	; 0x80
 800afbe:	d1ca      	bne.n	800af56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afd6:	e02d      	b.n	800b034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 f88d 	bl	800b0f8 <I2C_IsAcknowledgeFailed>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d001      	beq.n	800afe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e02d      	b.n	800b044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d021      	beq.n	800b034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff0:	f7fc fee4 	bl	8007dbc <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d302      	bcc.n	800b006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d116      	bne.n	800b034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	f043 0220 	orr.w	r2, r3, #32
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e007      	b.n	800b044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d1ca      	bne.n	800afd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b058:	e042      	b.n	800b0e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b10      	cmp	r3, #16
 800b066:	d119      	bne.n	800b09c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f06f 0210 	mvn.w	r2, #16
 800b070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e029      	b.n	800b0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b09c:	f7fc fe8e 	bl	8007dbc <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d302      	bcc.n	800b0b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d116      	bne.n	800b0e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0cc:	f043 0220 	orr.w	r2, r3, #32
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e007      	b.n	800b0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ea:	2b40      	cmp	r3, #64	; 0x40
 800b0ec:	d1b5      	bne.n	800b05a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b10e:	d11b      	bne.n	800b148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2220      	movs	r2, #32
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b134:	f043 0204 	orr.w	r2, r3, #4
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e034      	b.n	800b1d2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b170:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f245 5255 	movw	r2, #21845	; 0x5555
 800b17a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	6852      	ldr	r2, [r2, #4]
 800b184:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	6892      	ldr	r2, [r2, #8]
 800b18e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b190:	f7fc fe14 	bl	8007dbc <HAL_GetTick>
 800b194:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b196:	e00f      	b.n	800b1b8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b198:	f7fc fe10 	bl	8007dbc <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	2b30      	cmp	r3, #48	; 0x30
 800b1a4:	d908      	bls.n	800b1b8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	f003 0303 	and.w	r3, r3, #3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e00c      	b.n	800b1d2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e8      	bne.n	800b198 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b1ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800b202:	4b06      	ldr	r3, [pc, #24]	; (800b21c <HAL_PWR_EnableBkUpAccess+0x20>)
 800b204:	2201      	movs	r2, #1
 800b206:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <HAL_PWR_EnableBkUpAccess+0x24>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800b20e:	687b      	ldr	r3, [r7, #4]
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	420e0020 	.word	0x420e0020
 800b220:	40007000 	.word	0x40007000

0800b224 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800b228:	4b06      	ldr	r3, [pc, #24]	; (800b244 <HAL_PWR_PVD_IRQHandler+0x20>)
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800b234:	f000 f808 	bl	800b248 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <HAL_PWR_PVD_IRQHandler+0x20>)
 800b23a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b23e:	615a      	str	r2, [r3, #20]
  }
}
 800b240:	bf00      	nop
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40013c00 	.word	0x40013c00

0800b248 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800b24c:	bf00      	nop
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
	...

0800b258 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800b262:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <HAL_PWREx_EnableBkUpReg+0x44>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b268:	f7fc fda8 	bl	8007dbc <HAL_GetTick>
 800b26c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800b26e:	e009      	b.n	800b284 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800b270:	f7fc fda4 	bl	8007dbc <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b27e:	d901      	bls.n	800b284 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e006      	b.n	800b292 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800b284:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <HAL_PWREx_EnableBkUpReg+0x48>)
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f003 0308 	and.w	r3, r3, #8
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d1ef      	bne.n	800b270 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	420e00a4 	.word	0x420e00a4
 800b2a0:	40007000 	.word	0x40007000

0800b2a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e264      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d075      	beq.n	800b3ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b2c2:	4ba3      	ldr	r3, [pc, #652]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 030c 	and.w	r3, r3, #12
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d00c      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b2ce:	4ba0      	ldr	r3, [pc, #640]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	d112      	bne.n	800b300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b2da:	4b9d      	ldr	r3, [pc, #628]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2e6:	d10b      	bne.n	800b300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2e8:	4b99      	ldr	r3, [pc, #612]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d05b      	beq.n	800b3ac <HAL_RCC_OscConfig+0x108>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d157      	bne.n	800b3ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e23f      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b308:	d106      	bne.n	800b318 <HAL_RCC_OscConfig+0x74>
 800b30a:	4b91      	ldr	r3, [pc, #580]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a90      	ldr	r2, [pc, #576]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	e01d      	b.n	800b354 <HAL_RCC_OscConfig+0xb0>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b320:	d10c      	bne.n	800b33c <HAL_RCC_OscConfig+0x98>
 800b322:	4b8b      	ldr	r3, [pc, #556]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a8a      	ldr	r2, [pc, #552]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b32c:	6013      	str	r3, [r2, #0]
 800b32e:	4b88      	ldr	r3, [pc, #544]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a87      	ldr	r2, [pc, #540]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	e00b      	b.n	800b354 <HAL_RCC_OscConfig+0xb0>
 800b33c:	4b84      	ldr	r3, [pc, #528]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a83      	ldr	r2, [pc, #524]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	4b81      	ldr	r3, [pc, #516]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a80      	ldr	r2, [pc, #512]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b34e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d013      	beq.n	800b384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b35c:	f7fc fd2e 	bl	8007dbc <HAL_GetTick>
 800b360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b362:	e008      	b.n	800b376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b364:	f7fc fd2a 	bl	8007dbc <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	2b64      	cmp	r3, #100	; 0x64
 800b370:	d901      	bls.n	800b376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e204      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b376:	4b76      	ldr	r3, [pc, #472]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0f0      	beq.n	800b364 <HAL_RCC_OscConfig+0xc0>
 800b382:	e014      	b.n	800b3ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b384:	f7fc fd1a 	bl	8007dbc <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b38c:	f7fc fd16 	bl	8007dbc <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b64      	cmp	r3, #100	; 0x64
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e1f0      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b39e:	4b6c      	ldr	r3, [pc, #432]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f0      	bne.n	800b38c <HAL_RCC_OscConfig+0xe8>
 800b3aa:	e000      	b.n	800b3ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d063      	beq.n	800b482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b3ba:	4b65      	ldr	r3, [pc, #404]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f003 030c 	and.w	r3, r3, #12
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3c6:	4b62      	ldr	r3, [pc, #392]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	d11c      	bne.n	800b40c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3d2:	4b5f      	ldr	r3, [pc, #380]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d116      	bne.n	800b40c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3de:	4b5c      	ldr	r3, [pc, #368]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d005      	beq.n	800b3f6 <HAL_RCC_OscConfig+0x152>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d001      	beq.n	800b3f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e1c4      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3f6:	4b56      	ldr	r3, [pc, #344]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	4952      	ldr	r1, [pc, #328]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b406:	4313      	orrs	r3, r2
 800b408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b40a:	e03a      	b.n	800b482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d020      	beq.n	800b456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b414:	4b4f      	ldr	r3, [pc, #316]	; (800b554 <HAL_RCC_OscConfig+0x2b0>)
 800b416:	2201      	movs	r2, #1
 800b418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b41a:	f7fc fccf 	bl	8007dbc <HAL_GetTick>
 800b41e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b420:	e008      	b.n	800b434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b422:	f7fc fccb 	bl	8007dbc <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d901      	bls.n	800b434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e1a5      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b434:	4b46      	ldr	r3, [pc, #280]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d0f0      	beq.n	800b422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b440:	4b43      	ldr	r3, [pc, #268]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	4940      	ldr	r1, [pc, #256]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b450:	4313      	orrs	r3, r2
 800b452:	600b      	str	r3, [r1, #0]
 800b454:	e015      	b.n	800b482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b456:	4b3f      	ldr	r3, [pc, #252]	; (800b554 <HAL_RCC_OscConfig+0x2b0>)
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b45c:	f7fc fcae 	bl	8007dbc <HAL_GetTick>
 800b460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b464:	f7fc fcaa 	bl	8007dbc <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e184      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b476:	4b36      	ldr	r3, [pc, #216]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f0      	bne.n	800b464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0308 	and.w	r3, r3, #8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d030      	beq.n	800b4f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d016      	beq.n	800b4c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b496:	4b30      	ldr	r3, [pc, #192]	; (800b558 <HAL_RCC_OscConfig+0x2b4>)
 800b498:	2201      	movs	r2, #1
 800b49a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b49c:	f7fc fc8e 	bl	8007dbc <HAL_GetTick>
 800b4a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4a2:	e008      	b.n	800b4b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b4a4:	f7fc fc8a 	bl	8007dbc <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d901      	bls.n	800b4b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e164      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4b6:	4b26      	ldr	r3, [pc, #152]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d0f0      	beq.n	800b4a4 <HAL_RCC_OscConfig+0x200>
 800b4c2:	e015      	b.n	800b4f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b4c4:	4b24      	ldr	r3, [pc, #144]	; (800b558 <HAL_RCC_OscConfig+0x2b4>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4ca:	f7fc fc77 	bl	8007dbc <HAL_GetTick>
 800b4ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4d0:	e008      	b.n	800b4e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b4d2:	f7fc fc73 	bl	8007dbc <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d901      	bls.n	800b4e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e14d      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1f0      	bne.n	800b4d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 80a0 	beq.w	800b63e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b502:	4b13      	ldr	r3, [pc, #76]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10f      	bne.n	800b52e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b50e:	2300      	movs	r3, #0
 800b510:	60bb      	str	r3, [r7, #8]
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	4a0e      	ldr	r2, [pc, #56]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b51c:	6413      	str	r3, [r2, #64]	; 0x40
 800b51e:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <HAL_RCC_OscConfig+0x2ac>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b526:	60bb      	str	r3, [r7, #8]
 800b528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b52a:	2301      	movs	r3, #1
 800b52c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <HAL_RCC_OscConfig+0x2b8>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b536:	2b00      	cmp	r3, #0
 800b538:	d121      	bne.n	800b57e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b53a:	4b08      	ldr	r3, [pc, #32]	; (800b55c <HAL_RCC_OscConfig+0x2b8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a07      	ldr	r2, [pc, #28]	; (800b55c <HAL_RCC_OscConfig+0x2b8>)
 800b540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b546:	f7fc fc39 	bl	8007dbc <HAL_GetTick>
 800b54a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b54c:	e011      	b.n	800b572 <HAL_RCC_OscConfig+0x2ce>
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800
 800b554:	42470000 	.word	0x42470000
 800b558:	42470e80 	.word	0x42470e80
 800b55c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b560:	f7fc fc2c 	bl	8007dbc <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e106      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b572:	4b85      	ldr	r3, [pc, #532]	; (800b788 <HAL_RCC_OscConfig+0x4e4>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0f0      	beq.n	800b560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d106      	bne.n	800b594 <HAL_RCC_OscConfig+0x2f0>
 800b586:	4b81      	ldr	r3, [pc, #516]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58a:	4a80      	ldr	r2, [pc, #512]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	6713      	str	r3, [r2, #112]	; 0x70
 800b592:	e01c      	b.n	800b5ce <HAL_RCC_OscConfig+0x32a>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	2b05      	cmp	r3, #5
 800b59a:	d10c      	bne.n	800b5b6 <HAL_RCC_OscConfig+0x312>
 800b59c:	4b7b      	ldr	r3, [pc, #492]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a0:	4a7a      	ldr	r2, [pc, #488]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5a2:	f043 0304 	orr.w	r3, r3, #4
 800b5a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b5a8:	4b78      	ldr	r3, [pc, #480]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ac:	4a77      	ldr	r2, [pc, #476]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5ae:	f043 0301 	orr.w	r3, r3, #1
 800b5b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b5b4:	e00b      	b.n	800b5ce <HAL_RCC_OscConfig+0x32a>
 800b5b6:	4b75      	ldr	r3, [pc, #468]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ba:	4a74      	ldr	r2, [pc, #464]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5bc:	f023 0301 	bic.w	r3, r3, #1
 800b5c0:	6713      	str	r3, [r2, #112]	; 0x70
 800b5c2:	4b72      	ldr	r3, [pc, #456]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c6:	4a71      	ldr	r2, [pc, #452]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5c8:	f023 0304 	bic.w	r3, r3, #4
 800b5cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d015      	beq.n	800b602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d6:	f7fc fbf1 	bl	8007dbc <HAL_GetTick>
 800b5da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5dc:	e00a      	b.n	800b5f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5de:	f7fc fbed 	bl	8007dbc <HAL_GetTick>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d901      	bls.n	800b5f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e0c5      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5f4:	4b65      	ldr	r3, [pc, #404]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d0ee      	beq.n	800b5de <HAL_RCC_OscConfig+0x33a>
 800b600:	e014      	b.n	800b62c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b602:	f7fc fbdb 	bl	8007dbc <HAL_GetTick>
 800b606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b608:	e00a      	b.n	800b620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b60a:	f7fc fbd7 	bl	8007dbc <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	f241 3288 	movw	r2, #5000	; 0x1388
 800b618:	4293      	cmp	r3, r2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e0af      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b620:	4b5a      	ldr	r3, [pc, #360]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1ee      	bne.n	800b60a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b62c:	7dfb      	ldrb	r3, [r7, #23]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d105      	bne.n	800b63e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b632:	4b56      	ldr	r3, [pc, #344]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	4a55      	ldr	r2, [pc, #340]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b63c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 809b 	beq.w	800b77e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b648:	4b50      	ldr	r3, [pc, #320]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 030c 	and.w	r3, r3, #12
 800b650:	2b08      	cmp	r3, #8
 800b652:	d05c      	beq.n	800b70e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d141      	bne.n	800b6e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b65c:	4b4c      	ldr	r3, [pc, #304]	; (800b790 <HAL_RCC_OscConfig+0x4ec>)
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b662:	f7fc fbab 	bl	8007dbc <HAL_GetTick>
 800b666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b668:	e008      	b.n	800b67c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b66a:	f7fc fba7 	bl	8007dbc <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	d901      	bls.n	800b67c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e081      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b67c:	4b43      	ldr	r3, [pc, #268]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1f0      	bne.n	800b66a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	69da      	ldr	r2, [r3, #28]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	431a      	orrs	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	019b      	lsls	r3, r3, #6
 800b698:	431a      	orrs	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	085b      	lsrs	r3, r3, #1
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	041b      	lsls	r3, r3, #16
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6aa:	061b      	lsls	r3, r3, #24
 800b6ac:	4937      	ldr	r1, [pc, #220]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6b2:	4b37      	ldr	r3, [pc, #220]	; (800b790 <HAL_RCC_OscConfig+0x4ec>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6b8:	f7fc fb80 	bl	8007dbc <HAL_GetTick>
 800b6bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6be:	e008      	b.n	800b6d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6c0:	f7fc fb7c 	bl	8007dbc <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e056      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6d2:	4b2e      	ldr	r3, [pc, #184]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0f0      	beq.n	800b6c0 <HAL_RCC_OscConfig+0x41c>
 800b6de:	e04e      	b.n	800b77e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6e0:	4b2b      	ldr	r3, [pc, #172]	; (800b790 <HAL_RCC_OscConfig+0x4ec>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6e6:	f7fc fb69 	bl	8007dbc <HAL_GetTick>
 800b6ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6ec:	e008      	b.n	800b700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6ee:	f7fc fb65 	bl	8007dbc <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e03f      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b700:	4b22      	ldr	r3, [pc, #136]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <HAL_RCC_OscConfig+0x44a>
 800b70c:	e037      	b.n	800b77e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e032      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b71a:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <HAL_RCC_OscConfig+0x4e8>)
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d028      	beq.n	800b77a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b732:	429a      	cmp	r2, r3
 800b734:	d121      	bne.n	800b77a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b740:	429a      	cmp	r2, r3
 800b742:	d11a      	bne.n	800b77a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b74a:	4013      	ands	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b752:	4293      	cmp	r3, r2
 800b754:	d111      	bne.n	800b77a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b760:	085b      	lsrs	r3, r3, #1
 800b762:	3b01      	subs	r3, #1
 800b764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b766:	429a      	cmp	r2, r3
 800b768:	d107      	bne.n	800b77a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b776:	429a      	cmp	r2, r3
 800b778:	d001      	beq.n	800b77e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40007000 	.word	0x40007000
 800b78c:	40023800 	.word	0x40023800
 800b790:	42470060 	.word	0x42470060

0800b794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e0cc      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b7a8:	4b68      	ldr	r3, [pc, #416]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0307 	and.w	r3, r3, #7
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d90c      	bls.n	800b7d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7b6:	4b65      	ldr	r3, [pc, #404]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7be:	4b63      	ldr	r3, [pc, #396]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d001      	beq.n	800b7d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e0b8      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d020      	beq.n	800b81e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d005      	beq.n	800b7f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7e8:	4b59      	ldr	r3, [pc, #356]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	4a58      	ldr	r2, [pc, #352]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b7ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b7f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0308 	and.w	r3, r3, #8
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b800:	4b53      	ldr	r3, [pc, #332]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	4a52      	ldr	r2, [pc, #328]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b80a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b80c:	4b50      	ldr	r3, [pc, #320]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	494d      	ldr	r1, [pc, #308]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d044      	beq.n	800b8b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d107      	bne.n	800b842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b832:	4b47      	ldr	r3, [pc, #284]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d119      	bne.n	800b872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e07f      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b02      	cmp	r3, #2
 800b848:	d003      	beq.n	800b852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d107      	bne.n	800b862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b852:	4b3f      	ldr	r3, [pc, #252]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e06f      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b862:	4b3b      	ldr	r3, [pc, #236]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e067      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b872:	4b37      	ldr	r3, [pc, #220]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f023 0203 	bic.w	r2, r3, #3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4934      	ldr	r1, [pc, #208]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b880:	4313      	orrs	r3, r2
 800b882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b884:	f7fc fa9a 	bl	8007dbc <HAL_GetTick>
 800b888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b88a:	e00a      	b.n	800b8a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b88c:	f7fc fa96 	bl	8007dbc <HAL_GetTick>
 800b890:	4602      	mov	r2, r0
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	f241 3288 	movw	r2, #5000	; 0x1388
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d901      	bls.n	800b8a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e04f      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8a2:	4b2b      	ldr	r3, [pc, #172]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f003 020c 	and.w	r2, r3, #12
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d1eb      	bne.n	800b88c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8b4:	4b25      	ldr	r3, [pc, #148]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d20c      	bcs.n	800b8dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8c2:	4b22      	ldr	r3, [pc, #136]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	b2d2      	uxtb	r2, r2
 800b8c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ca:	4b20      	ldr	r3, [pc, #128]	; (800b94c <HAL_RCC_ClockConfig+0x1b8>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d001      	beq.n	800b8dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e032      	b.n	800b942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d008      	beq.n	800b8fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b8e8:	4b19      	ldr	r3, [pc, #100]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	4916      	ldr	r1, [pc, #88]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 0308 	and.w	r3, r3, #8
 800b902:	2b00      	cmp	r3, #0
 800b904:	d009      	beq.n	800b91a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	490e      	ldr	r1, [pc, #56]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b916:	4313      	orrs	r3, r2
 800b918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b91a:	f000 f821 	bl	800b960 <HAL_RCC_GetSysClockFreq>
 800b91e:	4602      	mov	r2, r0
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <HAL_RCC_ClockConfig+0x1bc>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	091b      	lsrs	r3, r3, #4
 800b926:	f003 030f 	and.w	r3, r3, #15
 800b92a:	490a      	ldr	r1, [pc, #40]	; (800b954 <HAL_RCC_ClockConfig+0x1c0>)
 800b92c:	5ccb      	ldrb	r3, [r1, r3]
 800b92e:	fa22 f303 	lsr.w	r3, r2, r3
 800b932:	4a09      	ldr	r2, [pc, #36]	; (800b958 <HAL_RCC_ClockConfig+0x1c4>)
 800b934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b936:	4b09      	ldr	r3, [pc, #36]	; (800b95c <HAL_RCC_ClockConfig+0x1c8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fc f9fa 	bl	8007d34 <HAL_InitTick>

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	40023c00 	.word	0x40023c00
 800b950:	40023800 	.word	0x40023800
 800b954:	08015d14 	.word	0x08015d14
 800b958:	20000268 	.word	0x20000268
 800b95c:	2000026c 	.word	0x2000026c

0800b960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	607b      	str	r3, [r7, #4]
 800b96c:	2300      	movs	r3, #0
 800b96e:	60fb      	str	r3, [r7, #12]
 800b970:	2300      	movs	r3, #0
 800b972:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b978:	4b67      	ldr	r3, [pc, #412]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f003 030c 	and.w	r3, r3, #12
 800b980:	2b08      	cmp	r3, #8
 800b982:	d00d      	beq.n	800b9a0 <HAL_RCC_GetSysClockFreq+0x40>
 800b984:	2b08      	cmp	r3, #8
 800b986:	f200 80bd 	bhi.w	800bb04 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <HAL_RCC_GetSysClockFreq+0x34>
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d003      	beq.n	800b99a <HAL_RCC_GetSysClockFreq+0x3a>
 800b992:	e0b7      	b.n	800bb04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b994:	4b61      	ldr	r3, [pc, #388]	; (800bb1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b996:	60bb      	str	r3, [r7, #8]
       break;
 800b998:	e0b7      	b.n	800bb0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b99a:	4b60      	ldr	r3, [pc, #384]	; (800bb1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b99c:	60bb      	str	r3, [r7, #8]
      break;
 800b99e:	e0b4      	b.n	800bb0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b9a0:	4b5d      	ldr	r3, [pc, #372]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b9aa:	4b5b      	ldr	r3, [pc, #364]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d04d      	beq.n	800ba52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b9b6:	4b58      	ldr	r3, [pc, #352]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	099b      	lsrs	r3, r3, #6
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b9c6:	f04f 0100 	mov.w	r1, #0
 800b9ca:	ea02 0800 	and.w	r8, r2, r0
 800b9ce:	ea03 0901 	and.w	r9, r3, r1
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	f04f 0200 	mov.w	r2, #0
 800b9da:	f04f 0300 	mov.w	r3, #0
 800b9de:	014b      	lsls	r3, r1, #5
 800b9e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b9e4:	0142      	lsls	r2, r0, #5
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	ebb0 0008 	subs.w	r0, r0, r8
 800b9ee:	eb61 0109 	sbc.w	r1, r1, r9
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	018b      	lsls	r3, r1, #6
 800b9fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ba00:	0182      	lsls	r2, r0, #6
 800ba02:	1a12      	subs	r2, r2, r0
 800ba04:	eb63 0301 	sbc.w	r3, r3, r1
 800ba08:	f04f 0000 	mov.w	r0, #0
 800ba0c:	f04f 0100 	mov.w	r1, #0
 800ba10:	00d9      	lsls	r1, r3, #3
 800ba12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ba16:	00d0      	lsls	r0, r2, #3
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	eb12 0208 	adds.w	r2, r2, r8
 800ba20:	eb43 0309 	adc.w	r3, r3, r9
 800ba24:	f04f 0000 	mov.w	r0, #0
 800ba28:	f04f 0100 	mov.w	r1, #0
 800ba2c:	0299      	lsls	r1, r3, #10
 800ba2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ba32:	0290      	lsls	r0, r2, #10
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4610      	mov	r0, r2
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	f7f5 f930 	bl	8000ca8 <__aeabi_uldivmod>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	e04a      	b.n	800bae8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba52:	4b31      	ldr	r3, [pc, #196]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	099b      	lsrs	r3, r3, #6
 800ba58:	461a      	mov	r2, r3
 800ba5a:	f04f 0300 	mov.w	r3, #0
 800ba5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ba62:	f04f 0100 	mov.w	r1, #0
 800ba66:	ea02 0400 	and.w	r4, r2, r0
 800ba6a:	ea03 0501 	and.w	r5, r3, r1
 800ba6e:	4620      	mov	r0, r4
 800ba70:	4629      	mov	r1, r5
 800ba72:	f04f 0200 	mov.w	r2, #0
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	014b      	lsls	r3, r1, #5
 800ba7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ba80:	0142      	lsls	r2, r0, #5
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	1b00      	subs	r0, r0, r4
 800ba88:	eb61 0105 	sbc.w	r1, r1, r5
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	f04f 0300 	mov.w	r3, #0
 800ba94:	018b      	lsls	r3, r1, #6
 800ba96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ba9a:	0182      	lsls	r2, r0, #6
 800ba9c:	1a12      	subs	r2, r2, r0
 800ba9e:	eb63 0301 	sbc.w	r3, r3, r1
 800baa2:	f04f 0000 	mov.w	r0, #0
 800baa6:	f04f 0100 	mov.w	r1, #0
 800baaa:	00d9      	lsls	r1, r3, #3
 800baac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bab0:	00d0      	lsls	r0, r2, #3
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	1912      	adds	r2, r2, r4
 800bab8:	eb45 0303 	adc.w	r3, r5, r3
 800babc:	f04f 0000 	mov.w	r0, #0
 800bac0:	f04f 0100 	mov.w	r1, #0
 800bac4:	0299      	lsls	r1, r3, #10
 800bac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800baca:	0290      	lsls	r0, r2, #10
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4610      	mov	r0, r2
 800bad2:	4619      	mov	r1, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f04f 0300 	mov.w	r3, #0
 800badc:	f7f5 f8e4 	bl	8000ca8 <__aeabi_uldivmod>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4613      	mov	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bae8:	4b0b      	ldr	r3, [pc, #44]	; (800bb18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	3301      	adds	r3, #1
 800baf4:	005b      	lsls	r3, r3, #1
 800baf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb00:	60bb      	str	r3, [r7, #8]
      break;
 800bb02:	e002      	b.n	800bb0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb04:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bb06:	60bb      	str	r3, [r7, #8]
      break;
 800bb08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bb16:	bf00      	nop
 800bb18:	40023800 	.word	0x40023800
 800bb1c:	00f42400 	.word	0x00f42400

0800bb20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb24:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb26:	681b      	ldr	r3, [r3, #0]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20000268 	.word	0x20000268

0800bb38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bb3c:	f7ff fff0 	bl	800bb20 <HAL_RCC_GetHCLKFreq>
 800bb40:	4602      	mov	r2, r0
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	0a9b      	lsrs	r3, r3, #10
 800bb48:	f003 0307 	and.w	r3, r3, #7
 800bb4c:	4903      	ldr	r1, [pc, #12]	; (800bb5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb4e:	5ccb      	ldrb	r3, [r1, r3]
 800bb50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	40023800 	.word	0x40023800
 800bb5c:	08015d24 	.word	0x08015d24

0800bb60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bb64:	f7ff ffdc 	bl	800bb20 <HAL_RCC_GetHCLKFreq>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	0b5b      	lsrs	r3, r3, #13
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	4903      	ldr	r1, [pc, #12]	; (800bb84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb76:	5ccb      	ldrb	r3, [r1, r3]
 800bb78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	40023800 	.word	0x40023800
 800bb84:	08015d24 	.word	0x08015d24

0800bb88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d035      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bbb0:	4b62      	ldr	r3, [pc, #392]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbb6:	f7fc f901 	bl	8007dbc <HAL_GetTick>
 800bbba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbbc:	e008      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bbbe:	f7fc f8fd 	bl	8007dbc <HAL_GetTick>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d901      	bls.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e0b0      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbd0:	4b5b      	ldr	r3, [pc, #364]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1f0      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	019a      	lsls	r2, r3, #6
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	071b      	lsls	r3, r3, #28
 800bbe8:	4955      	ldr	r1, [pc, #340]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bbf0:	4b52      	ldr	r3, [pc, #328]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbf6:	f7fc f8e1 	bl	8007dbc <HAL_GetTick>
 800bbfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbfc:	e008      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bbfe:	f7fc f8dd 	bl	8007dbc <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e090      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bc10:	4b4b      	ldr	r3, [pc, #300]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0f0      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0302 	and.w	r3, r3, #2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f000 8083 	beq.w	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	4b44      	ldr	r3, [pc, #272]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc32:	4a43      	ldr	r2, [pc, #268]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc38:	6413      	str	r3, [r2, #64]	; 0x40
 800bc3a:	4b41      	ldr	r3, [pc, #260]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bc46:	4b3f      	ldr	r3, [pc, #252]	; (800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a3e      	ldr	r2, [pc, #248]	; (800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bc4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc52:	f7fc f8b3 	bl	8007dbc <HAL_GetTick>
 800bc56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc58:	e008      	b.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bc5a:	f7fc f8af 	bl	8007dbc <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d901      	bls.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e062      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bc6c:	4b35      	ldr	r3, [pc, #212]	; (800bd44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0f0      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bc78:	4b31      	ldr	r3, [pc, #196]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d02f      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d028      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc96:	4b2a      	ldr	r3, [pc, #168]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bca0:	4b29      	ldr	r3, [pc, #164]	; (800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bca2:	2201      	movs	r2, #1
 800bca4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bca6:	4b28      	ldr	r3, [pc, #160]	; (800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bcac:	4a24      	ldr	r2, [pc, #144]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bcb2:	4b23      	ldr	r3, [pc, #140]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d114      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bcbe:	f7fc f87d 	bl	8007dbc <HAL_GetTick>
 800bcc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcc4:	e00a      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcc6:	f7fc f879 	bl	8007dbc <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d901      	bls.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e02a      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcdc:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce0:	f003 0302 	and.w	r3, r3, #2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0ee      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf4:	d10d      	bne.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800bcf6:	4b12      	ldr	r3, [pc, #72]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd0a:	490d      	ldr	r1, [pc, #52]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	e005      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	4a0a      	ldr	r2, [pc, #40]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bd1c:	6093      	str	r3, [r2, #8]
 800bd1e:	4b08      	ldr	r3, [pc, #32]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd2a:	4905      	ldr	r1, [pc, #20]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	42470068 	.word	0x42470068
 800bd40:	40023800 	.word	0x40023800
 800bd44:	40007000 	.word	0x40007000
 800bd48:	42470e40 	.word	0x42470e40

0800bd4c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e01c      	b.n	800bd98 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	795b      	ldrb	r3, [r3, #5]
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d105      	bne.n	800bd74 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7fb fbdc 	bl	800752c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2202      	movs	r2, #2
 800bd78:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f042 0204 	orr.w	r2, r2, #4
 800bd88:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	791b      	ldrb	r3, [r3, #4]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d101      	bne.n	800bdba <HAL_RNG_GenerateRandomNumber+0x1a>
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e03d      	b.n	800be36 <HAL_RNG_GenerateRandomNumber+0x96>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	795b      	ldrb	r3, [r3, #5]
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d12c      	bne.n	800be24 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bdd0:	f7fb fff4 	bl	8007dbc <HAL_GetTick>
 800bdd4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bdd6:	e011      	b.n	800bdfc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bdd8:	f7fb fff0 	bl	8007dbc <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d90a      	bls.n	800bdfc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e01c      	b.n	800be36 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b01      	cmp	r3, #1
 800be08:	d1e6      	bne.n	800bdd8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68da      	ldr	r2, [r3, #12]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	715a      	strb	r2, [r3, #5]
 800be22:	e004      	b.n	800be2e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2204      	movs	r2, #4
 800be28:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	711a      	strb	r2, [r3, #4]

  return status;
 800be34:	7bfb      	ldrb	r3, [r7, #15]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	330c      	adds	r3, #12
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff ffa7 	bl	800bda0 <HAL_RNG_GenerateRandomNumber>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	e000      	b.n	800be60 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800be5e:	2300      	movs	r3, #0
  }
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	f003 0320 	and.w	r3, r3, #32
 800be7e:	2b20      	cmp	r3, #32
 800be80:	d105      	bne.n	800be8e <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2210      	movs	r2, #16
 800be86:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800be88:	2301      	movs	r3, #1
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e00b      	b.n	800bea6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b40      	cmp	r3, #64	; 0x40
 800be9a:	d104      	bne.n	800bea6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2208      	movs	r2, #8
 800bea0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800bea2:	2301      	movs	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10a      	bne.n	800bec2 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2204      	movs	r2, #4
 800beb0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f839 	bl	800bf2a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800bec0:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f003 0301 	and.w	r3, r3, #1
 800becc:	2b01      	cmp	r3, #1
 800bece:	d11d      	bne.n	800bf0c <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 0208 	bic.w	r2, r2, #8
 800bede:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	795b      	ldrb	r3, [r3, #5]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d00b      	beq.n	800bf0c <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f804 	bl	800bf14 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800bf0c:	bf00      	nop
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800bf32:	bf00      	nop
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b082      	sub	sp, #8
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e083      	b.n	800c058 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7f5b      	ldrb	r3, [r3, #29]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7fb fb0b 	bl	800757c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	22ca      	movs	r2, #202	; 0xca
 800bf72:	625a      	str	r2, [r3, #36]	; 0x24
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2253      	movs	r2, #83	; 0x53
 800bf7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 faa8 	bl	800c4d2 <RTC_EnterInitMode>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d008      	beq.n	800bf9a <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	22ff      	movs	r2, #255	; 0xff
 800bf8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2204      	movs	r2, #4
 800bf94:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e05e      	b.n	800c058 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	6899      	ldr	r1, [r3, #8]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	68d2      	ldr	r2, [r2, #12]
 800bfd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6919      	ldr	r1, [r3, #16]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	041a      	lsls	r2, r3, #16
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	430a      	orrs	r2, r1
 800bfe8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bff8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10e      	bne.n	800c026 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fa3a 	bl	800c482 <HAL_RTC_WaitForSynchro>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d008      	beq.n	800c026 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	22ff      	movs	r2, #255	; 0xff
 800c01a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2204      	movs	r2, #4
 800c020:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e018      	b.n	800c058 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c034:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	699a      	ldr	r2, [r3, #24]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	22ff      	movs	r2, #255	; 0xff
 800c04e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c056:	2300      	movs	r3, #0
  }
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	7f1b      	ldrb	r3, [r3, #28]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d101      	bne.n	800c07c <HAL_RTC_SetTime+0x1c>
 800c078:	2302      	movs	r3, #2
 800c07a:	e0aa      	b.n	800c1d2 <HAL_RTC_SetTime+0x172>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2201      	movs	r2, #1
 800c080:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2202      	movs	r2, #2
 800c086:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d126      	bne.n	800c0dc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fa3f 	bl	800c52a <RTC_ByteToBcd2>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	785b      	ldrb	r3, [r3, #1]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fa38 	bl	800c52a <RTC_ByteToBcd2>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c0be:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	789b      	ldrb	r3, [r3, #2]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fa30 	bl	800c52a <RTC_ByteToBcd2>
 800c0ca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c0cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	78db      	ldrb	r3, [r3, #3]
 800c0d4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	617b      	str	r3, [r7, #20]
 800c0da:	e018      	b.n	800c10e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0fc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c102:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	78db      	ldrb	r3, [r3, #3]
 800c108:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c10a:	4313      	orrs	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	22ca      	movs	r2, #202	; 0xca
 800c114:	625a      	str	r2, [r3, #36]	; 0x24
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2253      	movs	r2, #83	; 0x53
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 f9d7 	bl	800c4d2 <RTC_EnterInitMode>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00b      	beq.n	800c142 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	22ff      	movs	r2, #255	; 0xff
 800c130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2204      	movs	r2, #4
 800c136:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e047      	b.n	800c1d2 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c14c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c150:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c160:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6899      	ldr	r1, [r3, #8]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	431a      	orrs	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c188:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f003 0320 	and.w	r3, r3, #32
 800c194:	2b00      	cmp	r3, #0
 800c196:	d111      	bne.n	800c1bc <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f972 	bl	800c482 <HAL_RTC_WaitForSynchro>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	22ff      	movs	r2, #255	; 0xff
 800c1aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2204      	movs	r2, #4
 800c1b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e00a      	b.n	800c1d2 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	22ff      	movs	r2, #255	; 0xff
 800c1c2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
  }
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd90      	pop	{r4, r7, pc}

0800c1da <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c20c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c210:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	0c1b      	lsrs	r3, r3, #16
 800c216:	b2db      	uxtb	r3, r3
 800c218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	0a1b      	lsrs	r3, r3, #8
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	0c1b      	lsrs	r3, r3, #16
 800c244:	b2db      	uxtb	r3, r3
 800c246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d11a      	bne.n	800c28c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f983 	bl	800c566 <RTC_Bcd2ToByte>
 800c260:	4603      	mov	r3, r0
 800c262:	461a      	mov	r2, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	785b      	ldrb	r3, [r3, #1]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 f97a 	bl	800c566 <RTC_Bcd2ToByte>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	789b      	ldrb	r3, [r3, #2]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f971 	bl	800c566 <RTC_Bcd2ToByte>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c296:	b590      	push	{r4, r7, lr}
 800c298:	b087      	sub	sp, #28
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	7f1b      	ldrb	r3, [r3, #28]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d101      	bne.n	800c2b2 <HAL_RTC_SetDate+0x1c>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e094      	b.n	800c3dc <HAL_RTC_SetDate+0x146>
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10e      	bne.n	800c2e2 <HAL_RTC_SetDate+0x4c>
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	f003 0310 	and.w	r3, r3, #16
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d008      	beq.n	800c2e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	f023 0310 	bic.w	r3, r3, #16
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	330a      	adds	r3, #10
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d11c      	bne.n	800c322 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	78db      	ldrb	r3, [r3, #3]
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 f91c 	bl	800c52a <RTC_ByteToBcd2>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	785b      	ldrb	r3, [r3, #1]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f915 	bl	800c52a <RTC_ByteToBcd2>
 800c300:	4603      	mov	r3, r0
 800c302:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c304:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	789b      	ldrb	r3, [r3, #2]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 f90d 	bl	800c52a <RTC_ByteToBcd2>
 800c310:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c312:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c31c:	4313      	orrs	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	e00e      	b.n	800c340 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	78db      	ldrb	r3, [r3, #3]
 800c326:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	785b      	ldrb	r3, [r3, #1]
 800c32c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c32e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c334:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c33c:	4313      	orrs	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	22ca      	movs	r2, #202	; 0xca
 800c346:	625a      	str	r2, [r3, #36]	; 0x24
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2253      	movs	r2, #83	; 0x53
 800c34e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f000 f8be 	bl	800c4d2 <RTC_EnterInitMode>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	22ff      	movs	r2, #255	; 0xff
 800c362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2204      	movs	r2, #4
 800c368:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e033      	b.n	800c3dc <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c37e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c382:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c392:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	f003 0320 	and.w	r3, r3, #32
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d111      	bne.n	800c3c6 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f86d 	bl	800c482 <HAL_RTC_WaitForSynchro>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	22ff      	movs	r2, #255	; 0xff
 800c3b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e00a      	b.n	800c3dc <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	22ff      	movs	r2, #255	; 0xff
 800c3cc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c3da:	2300      	movs	r3, #0
  }
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	371c      	adds	r7, #28
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd90      	pop	{r4, r7, pc}

0800c3e4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c402:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	0c1b      	lsrs	r3, r3, #16
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	b2db      	uxtb	r3, r3
 800c414:	f003 031f 	and.w	r3, r3, #31
 800c418:	b2da      	uxtb	r2, r3
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c426:	b2da      	uxtb	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	0b5b      	lsrs	r3, r3, #13
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	b2da      	uxtb	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d11a      	bne.n	800c478 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	78db      	ldrb	r3, [r3, #3]
 800c446:	4618      	mov	r0, r3
 800c448:	f000 f88d 	bl	800c566 <RTC_Bcd2ToByte>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	785b      	ldrb	r3, [r3, #1]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 f884 	bl	800c566 <RTC_Bcd2ToByte>
 800c45e:	4603      	mov	r3, r0
 800c460:	461a      	mov	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	789b      	ldrb	r3, [r3, #2]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f87b 	bl	800c566 <RTC_Bcd2ToByte>
 800c470:	4603      	mov	r3, r0
 800c472:	461a      	mov	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68da      	ldr	r2, [r3, #12]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c49c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c49e:	f7fb fc8d 	bl	8007dbc <HAL_GetTick>
 800c4a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c4a4:	e009      	b.n	800c4ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c4a6:	f7fb fc89 	bl	8007dbc <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4b4:	d901      	bls.n	800c4ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e007      	b.n	800c4ca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f003 0320 	and.w	r3, r3, #32
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0ee      	beq.n	800c4a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b084      	sub	sp, #16
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d119      	bne.n	800c520 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4f6:	f7fb fc61 	bl	8007dbc <HAL_GetTick>
 800c4fa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4fc:	e009      	b.n	800c512 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c4fe:	f7fb fc5d 	bl	8007dbc <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c50c:	d901      	bls.n	800c512 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e007      	b.n	800c522 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0ee      	beq.n	800c4fe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b085      	sub	sp, #20
 800c52e:	af00      	add	r7, sp, #0
 800c530:	4603      	mov	r3, r0
 800c532:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c538:	e005      	b.n	800c546 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	3b0a      	subs	r3, #10
 800c544:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	2b09      	cmp	r3, #9
 800c54a:	d8f6      	bhi.n	800c53a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	b2da      	uxtb	r2, r3
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	4313      	orrs	r3, r2
 800c558:	b2db      	uxtb	r3, r3
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3714      	adds	r7, #20
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	4603      	mov	r3, r0
 800c56e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	091b      	lsrs	r3, r3, #4
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	f003 030f 	and.w	r3, r3, #15
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	4413      	add	r3, r2
 800c594:	b2db      	uxtb	r3, r3
}
 800c596:	4618      	mov	r0, r3
 800c598:	3714      	adds	r7, #20
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e041      	b.n	800c638 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7fa ffed 	bl	80075a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	f000 fcd9 	bl	800cf98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b01      	cmp	r3, #1
 800c652:	d001      	beq.n	800c658 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	e046      	b.n	800c6e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a23      	ldr	r2, [pc, #140]	; (800c6f4 <HAL_TIM_Base_Start+0xb4>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d022      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c672:	d01d      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1f      	ldr	r2, [pc, #124]	; (800c6f8 <HAL_TIM_Base_Start+0xb8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d018      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a1e      	ldr	r2, [pc, #120]	; (800c6fc <HAL_TIM_Base_Start+0xbc>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d013      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a1c      	ldr	r2, [pc, #112]	; (800c700 <HAL_TIM_Base_Start+0xc0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00e      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a1b      	ldr	r2, [pc, #108]	; (800c704 <HAL_TIM_Base_Start+0xc4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d009      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a19      	ldr	r2, [pc, #100]	; (800c708 <HAL_TIM_Base_Start+0xc8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d004      	beq.n	800c6b0 <HAL_TIM_Base_Start+0x70>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a18      	ldr	r2, [pc, #96]	; (800c70c <HAL_TIM_Base_Start+0xcc>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d111      	bne.n	800c6d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b06      	cmp	r3, #6
 800c6c0:	d010      	beq.n	800c6e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f042 0201 	orr.w	r2, r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d2:	e007      	b.n	800c6e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0201 	orr.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	40010000 	.word	0x40010000
 800c6f8:	40000400 	.word	0x40000400
 800c6fc:	40000800 	.word	0x40000800
 800c700:	40000c00 	.word	0x40000c00
 800c704:	40010400 	.word	0x40010400
 800c708:	40014000 	.word	0x40014000
 800c70c:	40001800 	.word	0x40001800

0800c710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b01      	cmp	r3, #1
 800c722:	d001      	beq.n	800c728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e04e      	b.n	800c7c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68da      	ldr	r2, [r3, #12]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0201 	orr.w	r2, r2, #1
 800c73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a23      	ldr	r2, [pc, #140]	; (800c7d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d022      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c752:	d01d      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1f      	ldr	r2, [pc, #124]	; (800c7d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d018      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1e      	ldr	r2, [pc, #120]	; (800c7dc <HAL_TIM_Base_Start_IT+0xcc>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d013      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a1c      	ldr	r2, [pc, #112]	; (800c7e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00e      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a1b      	ldr	r2, [pc, #108]	; (800c7e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d009      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a19      	ldr	r2, [pc, #100]	; (800c7e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d004      	beq.n	800c790 <HAL_TIM_Base_Start_IT+0x80>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a18      	ldr	r2, [pc, #96]	; (800c7ec <HAL_TIM_Base_Start_IT+0xdc>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d111      	bne.n	800c7b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	f003 0307 	and.w	r3, r3, #7
 800c79a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b06      	cmp	r3, #6
 800c7a0:	d010      	beq.n	800c7c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f042 0201 	orr.w	r2, r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b2:	e007      	b.n	800c7c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f042 0201 	orr.w	r2, r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	40010000 	.word	0x40010000
 800c7d8:	40000400 	.word	0x40000400
 800c7dc:	40000800 	.word	0x40000800
 800c7e0:	40000c00 	.word	0x40000c00
 800c7e4:	40010400 	.word	0x40010400
 800c7e8:	40014000 	.word	0x40014000
 800c7ec:	40001800 	.word	0x40001800

0800c7f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e041      	b.n	800c886 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f839 	bl	800c88e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f000 fbb2 	bl	800cf98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c88e:	b480      	push	{r7}
 800c890:	b083      	sub	sp, #12
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d109      	bne.n	800c8c8 <HAL_TIM_PWM_Start+0x24>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	bf14      	ite	ne
 800c8c0:	2301      	movne	r3, #1
 800c8c2:	2300      	moveq	r3, #0
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	e022      	b.n	800c90e <HAL_TIM_PWM_Start+0x6a>
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	d109      	bne.n	800c8e2 <HAL_TIM_PWM_Start+0x3e>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	bf14      	ite	ne
 800c8da:	2301      	movne	r3, #1
 800c8dc:	2300      	moveq	r3, #0
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	e015      	b.n	800c90e <HAL_TIM_PWM_Start+0x6a>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b08      	cmp	r3, #8
 800c8e6:	d109      	bne.n	800c8fc <HAL_TIM_PWM_Start+0x58>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	bf14      	ite	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	2300      	moveq	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	e008      	b.n	800c90e <HAL_TIM_PWM_Start+0x6a>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	bf14      	ite	ne
 800c908:	2301      	movne	r3, #1
 800c90a:	2300      	moveq	r3, #0
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e07c      	b.n	800ca10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d104      	bne.n	800c926 <HAL_TIM_PWM_Start+0x82>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c924:	e013      	b.n	800c94e <HAL_TIM_PWM_Start+0xaa>
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d104      	bne.n	800c936 <HAL_TIM_PWM_Start+0x92>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c934:	e00b      	b.n	800c94e <HAL_TIM_PWM_Start+0xaa>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d104      	bne.n	800c946 <HAL_TIM_PWM_Start+0xa2>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c944:	e003      	b.n	800c94e <HAL_TIM_PWM_Start+0xaa>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2202      	movs	r2, #2
 800c94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2201      	movs	r2, #1
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fe08 	bl	800d56c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a2d      	ldr	r2, [pc, #180]	; (800ca18 <HAL_TIM_PWM_Start+0x174>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d004      	beq.n	800c970 <HAL_TIM_PWM_Start+0xcc>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a2c      	ldr	r2, [pc, #176]	; (800ca1c <HAL_TIM_PWM_Start+0x178>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d101      	bne.n	800c974 <HAL_TIM_PWM_Start+0xd0>
 800c970:	2301      	movs	r3, #1
 800c972:	e000      	b.n	800c976 <HAL_TIM_PWM_Start+0xd2>
 800c974:	2300      	movs	r3, #0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d007      	beq.n	800c98a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c988:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a22      	ldr	r2, [pc, #136]	; (800ca18 <HAL_TIM_PWM_Start+0x174>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d022      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c99c:	d01d      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ca20 <HAL_TIM_PWM_Start+0x17c>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d018      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <HAL_TIM_PWM_Start+0x180>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d013      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	; (800ca28 <HAL_TIM_PWM_Start+0x184>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00e      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a16      	ldr	r2, [pc, #88]	; (800ca1c <HAL_TIM_PWM_Start+0x178>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d009      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a18      	ldr	r2, [pc, #96]	; (800ca2c <HAL_TIM_PWM_Start+0x188>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d004      	beq.n	800c9da <HAL_TIM_PWM_Start+0x136>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a16      	ldr	r2, [pc, #88]	; (800ca30 <HAL_TIM_PWM_Start+0x18c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d111      	bne.n	800c9fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f003 0307 	and.w	r3, r3, #7
 800c9e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b06      	cmp	r3, #6
 800c9ea:	d010      	beq.n	800ca0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f042 0201 	orr.w	r2, r2, #1
 800c9fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9fc:	e007      	b.n	800ca0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f042 0201 	orr.w	r2, r2, #1
 800ca0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	40010000 	.word	0x40010000
 800ca1c:	40010400 	.word	0x40010400
 800ca20:	40000400 	.word	0x40000400
 800ca24:	40000800 	.word	0x40000800
 800ca28:	40000c00 	.word	0x40000c00
 800ca2c:	40014000 	.word	0x40014000
 800ca30:	40001800 	.word	0x40001800

0800ca34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	f003 0302 	and.w	r3, r3, #2
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d122      	bne.n	800ca90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f003 0302 	and.w	r3, r3, #2
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d11b      	bne.n	800ca90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f06f 0202 	mvn.w	r2, #2
 800ca60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	f003 0303 	and.w	r3, r3, #3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d003      	beq.n	800ca7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fa70 	bl	800cf5c <HAL_TIM_IC_CaptureCallback>
 800ca7c:	e005      	b.n	800ca8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa62 	bl	800cf48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fa73 	bl	800cf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d122      	bne.n	800cae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d11b      	bne.n	800cae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f06f 0204 	mvn.w	r2, #4
 800cab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2202      	movs	r2, #2
 800caba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fa46 	bl	800cf5c <HAL_TIM_IC_CaptureCallback>
 800cad0:	e005      	b.n	800cade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fa38 	bl	800cf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fa49 	bl	800cf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	f003 0308 	and.w	r3, r3, #8
 800caee:	2b08      	cmp	r3, #8
 800caf0:	d122      	bne.n	800cb38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	f003 0308 	and.w	r3, r3, #8
 800cafc:	2b08      	cmp	r3, #8
 800cafe:	d11b      	bne.n	800cb38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f06f 0208 	mvn.w	r2, #8
 800cb08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	69db      	ldr	r3, [r3, #28]
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa1c 	bl	800cf5c <HAL_TIM_IC_CaptureCallback>
 800cb24:	e005      	b.n	800cb32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fa0e 	bl	800cf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fa1f 	bl	800cf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	f003 0310 	and.w	r3, r3, #16
 800cb42:	2b10      	cmp	r3, #16
 800cb44:	d122      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f003 0310 	and.w	r3, r3, #16
 800cb50:	2b10      	cmp	r3, #16
 800cb52:	d11b      	bne.n	800cb8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f06f 0210 	mvn.w	r2, #16
 800cb5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2208      	movs	r2, #8
 800cb62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f9f2 	bl	800cf5c <HAL_TIM_IC_CaptureCallback>
 800cb78:	e005      	b.n	800cb86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f9e4 	bl	800cf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f9f5 	bl	800cf70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d10e      	bne.n	800cbb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d107      	bne.n	800cbb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f06f 0201 	mvn.w	r2, #1
 800cbb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7f9 fb82 	bl	80062bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbc2:	2b80      	cmp	r3, #128	; 0x80
 800cbc4:	d10e      	bne.n	800cbe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd0:	2b80      	cmp	r3, #128	; 0x80
 800cbd2:	d107      	bne.n	800cbe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cbdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fd70 	bl	800d6c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbee:	2b40      	cmp	r3, #64	; 0x40
 800cbf0:	d10e      	bne.n	800cc10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbfc:	2b40      	cmp	r3, #64	; 0x40
 800cbfe:	d107      	bne.n	800cc10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f9ba 	bl	800cf84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	f003 0320 	and.w	r3, r3, #32
 800cc1a:	2b20      	cmp	r3, #32
 800cc1c:	d10e      	bne.n	800cc3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	f003 0320 	and.w	r3, r3, #32
 800cc28:	2b20      	cmp	r3, #32
 800cc2a:	d107      	bne.n	800cc3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f06f 0220 	mvn.w	r2, #32
 800cc34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fd3a 	bl	800d6b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d101      	bne.n	800cc5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	e0ac      	b.n	800cdb8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b0c      	cmp	r3, #12
 800cc6a:	f200 809f 	bhi.w	800cdac <HAL_TIM_PWM_ConfigChannel+0x168>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800cca9 	.word	0x0800cca9
 800cc78:	0800cdad 	.word	0x0800cdad
 800cc7c:	0800cdad 	.word	0x0800cdad
 800cc80:	0800cdad 	.word	0x0800cdad
 800cc84:	0800cce9 	.word	0x0800cce9
 800cc88:	0800cdad 	.word	0x0800cdad
 800cc8c:	0800cdad 	.word	0x0800cdad
 800cc90:	0800cdad 	.word	0x0800cdad
 800cc94:	0800cd2b 	.word	0x0800cd2b
 800cc98:	0800cdad 	.word	0x0800cdad
 800cc9c:	0800cdad 	.word	0x0800cdad
 800cca0:	0800cdad 	.word	0x0800cdad
 800cca4:	0800cd6b 	.word	0x0800cd6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fa12 	bl	800d0d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	699a      	ldr	r2, [r3, #24]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f042 0208 	orr.w	r2, r2, #8
 800ccc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	699a      	ldr	r2, [r3, #24]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f022 0204 	bic.w	r2, r2, #4
 800ccd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6999      	ldr	r1, [r3, #24]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	691a      	ldr	r2, [r3, #16]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	430a      	orrs	r2, r1
 800cce4:	619a      	str	r2, [r3, #24]
      break;
 800cce6:	e062      	b.n	800cdae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68b9      	ldr	r1, [r7, #8]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fa62 	bl	800d1b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	699a      	ldr	r2, [r3, #24]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	699a      	ldr	r2, [r3, #24]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6999      	ldr	r1, [r3, #24]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	021a      	lsls	r2, r3, #8
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	430a      	orrs	r2, r1
 800cd26:	619a      	str	r2, [r3, #24]
      break;
 800cd28:	e041      	b.n	800cdae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fab7 	bl	800d2a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69da      	ldr	r2, [r3, #28]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f042 0208 	orr.w	r2, r2, #8
 800cd44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69da      	ldr	r2, [r3, #28]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0204 	bic.w	r2, r2, #4
 800cd54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	69d9      	ldr	r1, [r3, #28]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	430a      	orrs	r2, r1
 800cd66:	61da      	str	r2, [r3, #28]
      break;
 800cd68:	e021      	b.n	800cdae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fb0b 	bl	800d38c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69da      	ldr	r2, [r3, #28]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	69da      	ldr	r2, [r3, #28]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	69d9      	ldr	r1, [r3, #28]
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	691b      	ldr	r3, [r3, #16]
 800cda0:	021a      	lsls	r2, r3, #8
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	430a      	orrs	r2, r1
 800cda8:	61da      	str	r2, [r3, #28]
      break;
 800cdaa:	e000      	b.n	800cdae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800cdac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d101      	bne.n	800cdd8 <HAL_TIM_ConfigClockSource+0x18>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	e0b3      	b.n	800cf40 <HAL_TIM_ConfigClockSource+0x180>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2202      	movs	r2, #2
 800cde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce10:	d03e      	beq.n	800ce90 <HAL_TIM_ConfigClockSource+0xd0>
 800ce12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce16:	f200 8087 	bhi.w	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce1e:	f000 8085 	beq.w	800cf2c <HAL_TIM_ConfigClockSource+0x16c>
 800ce22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce26:	d87f      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce28:	2b70      	cmp	r3, #112	; 0x70
 800ce2a:	d01a      	beq.n	800ce62 <HAL_TIM_ConfigClockSource+0xa2>
 800ce2c:	2b70      	cmp	r3, #112	; 0x70
 800ce2e:	d87b      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce30:	2b60      	cmp	r3, #96	; 0x60
 800ce32:	d050      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x116>
 800ce34:	2b60      	cmp	r3, #96	; 0x60
 800ce36:	d877      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce38:	2b50      	cmp	r3, #80	; 0x50
 800ce3a:	d03c      	beq.n	800ceb6 <HAL_TIM_ConfigClockSource+0xf6>
 800ce3c:	2b50      	cmp	r3, #80	; 0x50
 800ce3e:	d873      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce40:	2b40      	cmp	r3, #64	; 0x40
 800ce42:	d058      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x136>
 800ce44:	2b40      	cmp	r3, #64	; 0x40
 800ce46:	d86f      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce48:	2b30      	cmp	r3, #48	; 0x30
 800ce4a:	d064      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x156>
 800ce4c:	2b30      	cmp	r3, #48	; 0x30
 800ce4e:	d86b      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce50:	2b20      	cmp	r3, #32
 800ce52:	d060      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x156>
 800ce54:	2b20      	cmp	r3, #32
 800ce56:	d867      	bhi.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d05c      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x156>
 800ce5c:	2b10      	cmp	r3, #16
 800ce5e:	d05a      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ce60:	e062      	b.n	800cf28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6818      	ldr	r0, [r3, #0]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	6899      	ldr	r1, [r3, #8]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	685a      	ldr	r2, [r3, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f000 fb5b 	bl	800d52c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	609a      	str	r2, [r3, #8]
      break;
 800ce8e:	e04e      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	6899      	ldr	r1, [r3, #8]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f000 fb44 	bl	800d52c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	689a      	ldr	r2, [r3, #8]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ceb2:	609a      	str	r2, [r3, #8]
      break;
 800ceb4:	e03b      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	6859      	ldr	r1, [r3, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f000 fab8 	bl	800d438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2150      	movs	r1, #80	; 0x50
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fb11 	bl	800d4f6 <TIM_ITRx_SetConfig>
      break;
 800ced4:	e02b      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	6859      	ldr	r1, [r3, #4]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	461a      	mov	r2, r3
 800cee4:	f000 fad7 	bl	800d496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2160      	movs	r1, #96	; 0x60
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fb01 	bl	800d4f6 <TIM_ITRx_SetConfig>
      break;
 800cef4:	e01b      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6818      	ldr	r0, [r3, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	6859      	ldr	r1, [r3, #4]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f000 fa98 	bl	800d438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2140      	movs	r1, #64	; 0x40
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 faf1 	bl	800d4f6 <TIM_ITRx_SetConfig>
      break;
 800cf14:	e00b      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f000 fae8 	bl	800d4f6 <TIM_ITRx_SetConfig>
        break;
 800cf26:	e002      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cf28:	bf00      	nop
 800cf2a:	e000      	b.n	800cf2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cf2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf78:	bf00      	nop
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a40      	ldr	r2, [pc, #256]	; (800d0ac <TIM_Base_SetConfig+0x114>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d013      	beq.n	800cfd8 <TIM_Base_SetConfig+0x40>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfb6:	d00f      	beq.n	800cfd8 <TIM_Base_SetConfig+0x40>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a3d      	ldr	r2, [pc, #244]	; (800d0b0 <TIM_Base_SetConfig+0x118>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d00b      	beq.n	800cfd8 <TIM_Base_SetConfig+0x40>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a3c      	ldr	r2, [pc, #240]	; (800d0b4 <TIM_Base_SetConfig+0x11c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d007      	beq.n	800cfd8 <TIM_Base_SetConfig+0x40>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a3b      	ldr	r2, [pc, #236]	; (800d0b8 <TIM_Base_SetConfig+0x120>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d003      	beq.n	800cfd8 <TIM_Base_SetConfig+0x40>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a3a      	ldr	r2, [pc, #232]	; (800d0bc <TIM_Base_SetConfig+0x124>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d108      	bne.n	800cfea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a2f      	ldr	r2, [pc, #188]	; (800d0ac <TIM_Base_SetConfig+0x114>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d02b      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff8:	d027      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a2c      	ldr	r2, [pc, #176]	; (800d0b0 <TIM_Base_SetConfig+0x118>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d023      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a2b      	ldr	r2, [pc, #172]	; (800d0b4 <TIM_Base_SetConfig+0x11c>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d01f      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a2a      	ldr	r2, [pc, #168]	; (800d0b8 <TIM_Base_SetConfig+0x120>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d01b      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	4a29      	ldr	r2, [pc, #164]	; (800d0bc <TIM_Base_SetConfig+0x124>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d017      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a28      	ldr	r2, [pc, #160]	; (800d0c0 <TIM_Base_SetConfig+0x128>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d013      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a27      	ldr	r2, [pc, #156]	; (800d0c4 <TIM_Base_SetConfig+0x12c>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00f      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a26      	ldr	r2, [pc, #152]	; (800d0c8 <TIM_Base_SetConfig+0x130>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d00b      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a25      	ldr	r2, [pc, #148]	; (800d0cc <TIM_Base_SetConfig+0x134>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d007      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4a24      	ldr	r2, [pc, #144]	; (800d0d0 <TIM_Base_SetConfig+0x138>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d003      	beq.n	800d04a <TIM_Base_SetConfig+0xb2>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a23      	ldr	r2, [pc, #140]	; (800d0d4 <TIM_Base_SetConfig+0x13c>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d108      	bne.n	800d05c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	4313      	orrs	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a0a      	ldr	r2, [pc, #40]	; (800d0ac <TIM_Base_SetConfig+0x114>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d003      	beq.n	800d090 <TIM_Base_SetConfig+0xf8>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a0c      	ldr	r2, [pc, #48]	; (800d0bc <TIM_Base_SetConfig+0x124>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d103      	bne.n	800d098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	691a      	ldr	r2, [r3, #16]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	615a      	str	r2, [r3, #20]
}
 800d09e:	bf00      	nop
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	40010000 	.word	0x40010000
 800d0b0:	40000400 	.word	0x40000400
 800d0b4:	40000800 	.word	0x40000800
 800d0b8:	40000c00 	.word	0x40000c00
 800d0bc:	40010400 	.word	0x40010400
 800d0c0:	40014000 	.word	0x40014000
 800d0c4:	40014400 	.word	0x40014400
 800d0c8:	40014800 	.word	0x40014800
 800d0cc:	40001800 	.word	0x40001800
 800d0d0:	40001c00 	.word	0x40001c00
 800d0d4:	40002000 	.word	0x40002000

0800d0d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	f023 0201 	bic.w	r2, r3, #1
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f023 0303 	bic.w	r3, r3, #3
 800d10e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	4313      	orrs	r3, r2
 800d118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f023 0302 	bic.w	r3, r3, #2
 800d120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	4313      	orrs	r3, r2
 800d12a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4a20      	ldr	r2, [pc, #128]	; (800d1b0 <TIM_OC1_SetConfig+0xd8>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d003      	beq.n	800d13c <TIM_OC1_SetConfig+0x64>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a1f      	ldr	r2, [pc, #124]	; (800d1b4 <TIM_OC1_SetConfig+0xdc>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d10c      	bne.n	800d156 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f023 0308 	bic.w	r3, r3, #8
 800d142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f023 0304 	bic.w	r3, r3, #4
 800d154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a15      	ldr	r2, [pc, #84]	; (800d1b0 <TIM_OC1_SetConfig+0xd8>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d003      	beq.n	800d166 <TIM_OC1_SetConfig+0x8e>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a14      	ldr	r2, [pc, #80]	; (800d1b4 <TIM_OC1_SetConfig+0xdc>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d111      	bne.n	800d18a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	693a      	ldr	r2, [r7, #16]
 800d186:	4313      	orrs	r3, r2
 800d188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	621a      	str	r2, [r3, #32]
}
 800d1a4:	bf00      	nop
 800d1a6:	371c      	adds	r7, #28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	40010000 	.word	0x40010000
 800d1b4:	40010400 	.word	0x40010400

0800d1b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	f023 0210 	bic.w	r2, r3, #16
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	021b      	lsls	r3, r3, #8
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f023 0320 	bic.w	r3, r3, #32
 800d202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	011b      	lsls	r3, r3, #4
 800d20a:	697a      	ldr	r2, [r7, #20]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a22      	ldr	r2, [pc, #136]	; (800d29c <TIM_OC2_SetConfig+0xe4>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d003      	beq.n	800d220 <TIM_OC2_SetConfig+0x68>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a21      	ldr	r2, [pc, #132]	; (800d2a0 <TIM_OC2_SetConfig+0xe8>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d10d      	bne.n	800d23c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	4313      	orrs	r3, r2
 800d232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d23a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a17      	ldr	r2, [pc, #92]	; (800d29c <TIM_OC2_SetConfig+0xe4>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d003      	beq.n	800d24c <TIM_OC2_SetConfig+0x94>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a16      	ldr	r2, [pc, #88]	; (800d2a0 <TIM_OC2_SetConfig+0xe8>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d113      	bne.n	800d274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d25a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	4313      	orrs	r3, r2
 800d272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	621a      	str	r2, [r3, #32]
}
 800d28e:	bf00      	nop
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	40010000 	.word	0x40010000
 800d2a0:	40010400 	.word	0x40010400

0800d2a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f023 0303 	bic.w	r3, r3, #3
 800d2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a21      	ldr	r2, [pc, #132]	; (800d384 <TIM_OC3_SetConfig+0xe0>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d003      	beq.n	800d30a <TIM_OC3_SetConfig+0x66>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a20      	ldr	r2, [pc, #128]	; (800d388 <TIM_OC3_SetConfig+0xe4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d10d      	bne.n	800d326 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	021b      	lsls	r3, r3, #8
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a16      	ldr	r2, [pc, #88]	; (800d384 <TIM_OC3_SetConfig+0xe0>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d003      	beq.n	800d336 <TIM_OC3_SetConfig+0x92>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a15      	ldr	r2, [pc, #84]	; (800d388 <TIM_OC3_SetConfig+0xe4>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d113      	bne.n	800d35e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d33c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	011b      	lsls	r3, r3, #4
 800d34c:	693a      	ldr	r2, [r7, #16]
 800d34e:	4313      	orrs	r3, r2
 800d350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	4313      	orrs	r3, r2
 800d35c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	693a      	ldr	r2, [r7, #16]
 800d362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	621a      	str	r2, [r3, #32]
}
 800d378:	bf00      	nop
 800d37a:	371c      	adds	r7, #28
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	40010000 	.word	0x40010000
 800d388:	40010400 	.word	0x40010400

0800d38c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	021b      	lsls	r3, r3, #8
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	031b      	lsls	r3, r3, #12
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a12      	ldr	r2, [pc, #72]	; (800d430 <TIM_OC4_SetConfig+0xa4>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d003      	beq.n	800d3f4 <TIM_OC4_SetConfig+0x68>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a11      	ldr	r2, [pc, #68]	; (800d434 <TIM_OC4_SetConfig+0xa8>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d109      	bne.n	800d408 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	019b      	lsls	r3, r3, #6
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	4313      	orrs	r3, r2
 800d406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	621a      	str	r2, [r3, #32]
}
 800d422:	bf00      	nop
 800d424:	371c      	adds	r7, #28
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	40010000 	.word	0x40010000
 800d434:	40010400 	.word	0x40010400

0800d438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	f023 0201 	bic.w	r2, r3, #1
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f023 030a 	bic.w	r3, r3, #10
 800d474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	621a      	str	r2, [r3, #32]
}
 800d48a:	bf00      	nop
 800d48c:	371c      	adds	r7, #28
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d496:	b480      	push	{r7}
 800d498:	b087      	sub	sp, #28
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	60f8      	str	r0, [r7, #12]
 800d49e:	60b9      	str	r1, [r7, #8]
 800d4a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6a1b      	ldr	r3, [r3, #32]
 800d4a6:	f023 0210 	bic.w	r2, r3, #16
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d4c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	031b      	lsls	r3, r3, #12
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d4d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	621a      	str	r2, [r3, #32]
}
 800d4ea:	bf00      	nop
 800d4ec:	371c      	adds	r7, #28
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b085      	sub	sp, #20
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	4313      	orrs	r3, r2
 800d514:	f043 0307 	orr.w	r3, r3, #7
 800d518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	609a      	str	r2, [r3, #8]
}
 800d520:	bf00      	nop
 800d522:	3714      	adds	r7, #20
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	021a      	lsls	r2, r3, #8
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	431a      	orrs	r2, r3
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	4313      	orrs	r3, r2
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	609a      	str	r2, [r3, #8]
}
 800d560:	bf00      	nop
 800d562:	371c      	adds	r7, #28
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f003 031f 	and.w	r3, r3, #31
 800d57e:	2201      	movs	r2, #1
 800d580:	fa02 f303 	lsl.w	r3, r2, r3
 800d584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	43db      	mvns	r3, r3
 800d58e:	401a      	ands	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6a1a      	ldr	r2, [r3, #32]
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	f003 031f 	and.w	r3, r3, #31
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	621a      	str	r2, [r3, #32]
}
 800d5aa:	bf00      	nop
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d101      	bne.n	800d5d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	e05a      	b.n	800d686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2202      	movs	r2, #2
 800d5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a21      	ldr	r2, [pc, #132]	; (800d694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d022      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d61c:	d01d      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a1d      	ldr	r2, [pc, #116]	; (800d698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d018      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a1b      	ldr	r2, [pc, #108]	; (800d69c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d013      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a1a      	ldr	r2, [pc, #104]	; (800d6a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d00e      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a18      	ldr	r2, [pc, #96]	; (800d6a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d009      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a17      	ldr	r2, [pc, #92]	; (800d6a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d004      	beq.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a15      	ldr	r2, [pc, #84]	; (800d6ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d10c      	bne.n	800d674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	4313      	orrs	r3, r2
 800d66a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	40010000 	.word	0x40010000
 800d698:	40000400 	.word	0x40000400
 800d69c:	40000800 	.word	0x40000800
 800d6a0:	40000c00 	.word	0x40000c00
 800d6a4:	40010400 	.word	0x40010400
 800d6a8:	40014000 	.word	0x40014000
 800d6ac:	40001800 	.word	0x40001800

0800d6b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e03f      	b.n	800d76a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d106      	bne.n	800d704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7fa f824 	bl	800774c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2224      	movs	r2, #36	; 0x24
 800d708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	68da      	ldr	r2, [r3, #12]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d71a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fdcf 	bl	800e2c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	691a      	ldr	r2, [r3, #16]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	695a      	ldr	r2, [r3, #20]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2220      	movs	r2, #32
 800d75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2220      	movs	r2, #32
 800d764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b08a      	sub	sp, #40	; 0x28
 800d776:	af02      	add	r7, sp, #8
 800d778:	60f8      	str	r0, [r7, #12]
 800d77a:	60b9      	str	r1, [r7, #8]
 800d77c:	603b      	str	r3, [r7, #0]
 800d77e:	4613      	mov	r3, r2
 800d780:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b20      	cmp	r3, #32
 800d790:	d17c      	bne.n	800d88c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <HAL_UART_Transmit+0x2c>
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e075      	b.n	800d88e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_UART_Transmit+0x3e>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e06e      	b.n	800d88e <HAL_UART_Transmit+0x11c>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2221      	movs	r2, #33	; 0x21
 800d7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7c6:	f7fa faf9 	bl	8007dbc <HAL_GetTick>
 800d7ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	88fa      	ldrh	r2, [r7, #6]
 800d7d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	88fa      	ldrh	r2, [r7, #6]
 800d7d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7e0:	d108      	bne.n	800d7f4 <HAL_UART_Transmit+0x82>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d104      	bne.n	800d7f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e003      	b.n	800d7fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d804:	e02a      	b.n	800d85c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2200      	movs	r2, #0
 800d80e:	2180      	movs	r1, #128	; 0x80
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 fb51 	bl	800deb8 <UART_WaitOnFlagUntilTimeout>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	e036      	b.n	800d88e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10b      	bne.n	800d83e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	3302      	adds	r3, #2
 800d83a:	61bb      	str	r3, [r7, #24]
 800d83c:	e007      	b.n	800d84e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	781a      	ldrb	r2, [r3, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	3301      	adds	r3, #1
 800d84c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d852:	b29b      	uxth	r3, r3
 800d854:	3b01      	subs	r3, #1
 800d856:	b29a      	uxth	r2, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d860:	b29b      	uxth	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1cf      	bne.n	800d806 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2200      	movs	r2, #0
 800d86e:	2140      	movs	r1, #64	; 0x40
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f000 fb21 	bl	800deb8 <UART_WaitOnFlagUntilTimeout>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d87c:	2303      	movs	r3, #3
 800d87e:	e006      	b.n	800d88e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2220      	movs	r2, #32
 800d884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	e000      	b.n	800d88e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d88c:	2302      	movs	r3, #2
  }
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3720      	adds	r7, #32
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d11d      	bne.n	800d8ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <HAL_UART_Receive_DMA+0x26>
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e016      	b.n	800d8ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d101      	bne.n	800d8ce <HAL_UART_Receive_DMA+0x38>
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e00f      	b.n	800d8ee <HAL_UART_Receive_DMA+0x58>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f000 fb32 	bl	800df4c <UART_Start_Receive_DMA>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	e000      	b.n	800d8ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d8ec:	2302      	movs	r3, #2
  }
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d8fe:	2300      	movs	r3, #0
 800d900:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d90c:	2b80      	cmp	r3, #128	; 0x80
 800d90e:	bf0c      	ite	eq
 800d910:	2301      	moveq	r3, #1
 800d912:	2300      	movne	r3, #0
 800d914:	b2db      	uxtb	r3, r3
 800d916:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b21      	cmp	r3, #33	; 0x21
 800d922:	d116      	bne.n	800d952 <HAL_UART_DMAStop+0x5c>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d013      	beq.n	800d952 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	695a      	ldr	r2, [r3, #20]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d938:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d004      	beq.n	800d94c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d946:	4618      	mov	r0, r3
 800d948:	f7fb f9dc 	bl	8008d04 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fb61 	bl	800e014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95c:	2b40      	cmp	r3, #64	; 0x40
 800d95e:	bf0c      	ite	eq
 800d960:	2301      	moveq	r3, #1
 800d962:	2300      	movne	r3, #0
 800d964:	b2db      	uxtb	r3, r3
 800d966:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b22      	cmp	r3, #34	; 0x22
 800d972:	d116      	bne.n	800d9a2 <HAL_UART_DMAStop+0xac>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d013      	beq.n	800d9a2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	695a      	ldr	r2, [r3, #20]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d988:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d004      	beq.n	800d99c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d996:	4618      	mov	r0, r3
 800d998:	f7fb f9b4 	bl	8008d04 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fb4f 	bl	800e040 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f003 030f 	and.w	r3, r3, #15
 800d9da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10d      	bne.n	800d9fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	f003 0320 	and.w	r3, r3, #32
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d008      	beq.n	800d9fe <HAL_UART_IRQHandler+0x52>
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	f003 0320 	and.w	r3, r3, #32
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d003      	beq.n	800d9fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fbcb 	bl	800e192 <UART_Receive_IT>
      return;
 800d9fc:	e17c      	b.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 80b1 	beq.w	800db68 <HAL_UART_IRQHandler+0x1bc>
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d105      	bne.n	800da1c <HAL_UART_IRQHandler+0x70>
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 80a6 	beq.w	800db68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <HAL_UART_IRQHandler+0x90>
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d005      	beq.n	800da3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da34:	f043 0201 	orr.w	r2, r3, #1
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	f003 0304 	and.w	r3, r3, #4
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <HAL_UART_IRQHandler+0xb0>
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d005      	beq.n	800da5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da54:	f043 0202 	orr.w	r2, r3, #2
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00a      	beq.n	800da7c <HAL_UART_IRQHandler+0xd0>
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d005      	beq.n	800da7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da74:	f043 0204 	orr.w	r2, r3, #4
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	f003 0308 	and.w	r3, r3, #8
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00f      	beq.n	800daa6 <HAL_UART_IRQHandler+0xfa>
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	f003 0320 	and.w	r3, r3, #32
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d104      	bne.n	800da9a <HAL_UART_IRQHandler+0xee>
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9e:	f043 0208 	orr.w	r2, r3, #8
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f000 811f 	beq.w	800dcee <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	f003 0320 	and.w	r3, r3, #32
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d007      	beq.n	800daca <HAL_UART_IRQHandler+0x11e>
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	f003 0320 	and.w	r3, r3, #32
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fb64 	bl	800e192 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad4:	2b40      	cmp	r3, #64	; 0x40
 800dad6:	bf0c      	ite	eq
 800dad8:	2301      	moveq	r3, #1
 800dada:	2300      	movne	r3, #0
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <HAL_UART_IRQHandler+0x146>
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d031      	beq.n	800db56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 faa4 	bl	800e040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db02:	2b40      	cmp	r3, #64	; 0x40
 800db04:	d123      	bne.n	800db4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	695a      	ldr	r2, [r3, #20]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d013      	beq.n	800db46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db22:	4a77      	ldr	r2, [pc, #476]	; (800dd00 <HAL_UART_IRQHandler+0x354>)
 800db24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fb f95a 	bl	8008de4 <HAL_DMA_Abort_IT>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d016      	beq.n	800db64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db40:	4610      	mov	r0, r2
 800db42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db44:	e00e      	b.n	800db64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f8f0 	bl	800dd2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db4c:	e00a      	b.n	800db64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f8ec 	bl	800dd2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db54:	e006      	b.n	800db64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f8e8 	bl	800dd2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800db62:	e0c4      	b.n	800dcee <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db64:	bf00      	nop
    return;
 800db66:	e0c2      	b.n	800dcee <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	f040 80a2 	bne.w	800dcb6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	f003 0310 	and.w	r3, r3, #16
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 809c 	beq.w	800dcb6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	f003 0310 	and.w	r3, r3, #16
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 8096 	beq.w	800dcb6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800db8a:	2300      	movs	r3, #0
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	60fb      	str	r3, [r7, #12]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	d14f      	bne.n	800dc4e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800dbb8:	8a3b      	ldrh	r3, [r7, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 8099 	beq.w	800dcf2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dbc4:	8a3a      	ldrh	r2, [r7, #16]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	f080 8093 	bcs.w	800dcf2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	8a3a      	ldrh	r2, [r7, #16]
 800dbd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd6:	69db      	ldr	r3, [r3, #28]
 800dbd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbdc:	d02b      	beq.n	800dc36 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbec:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	695a      	ldr	r2, [r3, #20]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f022 0201 	bic.w	r2, r2, #1
 800dbfc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	695a      	ldr	r2, [r3, #20]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc0c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2220      	movs	r2, #32
 800dc12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68da      	ldr	r2, [r3, #12]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0210 	bic.w	r2, r2, #16
 800dc2a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fb f867 	bl	8008d04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f87a 	bl	800dd40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800dc4c:	e051      	b.n	800dcf2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d047      	beq.n	800dcf6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800dc66:	8a7b      	ldrh	r3, [r7, #18]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d044      	beq.n	800dcf6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68da      	ldr	r2, [r3, #12]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dc7a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	695a      	ldr	r2, [r3, #20]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2220      	movs	r2, #32
 800dc90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68da      	ldr	r2, [r3, #12]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f022 0210 	bic.w	r2, r2, #16
 800dca8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dcaa:	8a7b      	ldrh	r3, [r7, #18]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f846 	bl	800dd40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800dcb4:	e01f      	b.n	800dcf6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d008      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x326>
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f9f9 	bl	800e0c2 <UART_Transmit_IT>
    return;
 800dcd0:	e012      	b.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00d      	beq.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d008      	beq.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 fa3b 	bl	800e162 <UART_EndTransmit_IT>
    return;
 800dcec:	e004      	b.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
    return;
 800dcee:	bf00      	nop
 800dcf0:	e002      	b.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
      return;
 800dcf2:	bf00      	nop
 800dcf4:	e000      	b.n	800dcf8 <HAL_UART_IRQHandler+0x34c>
      return;
 800dcf6:	bf00      	nop
  }
}
 800dcf8:	3728      	adds	r7, #40	; 0x28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	0800e09b 	.word	0x0800e09b

0800dd04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd64:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d12a      	bne.n	800ddca <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68da      	ldr	r2, [r3, #12]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd88:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	695a      	ldr	r2, [r3, #20]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f022 0201 	bic.w	r2, r2, #1
 800dd98:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	695a      	ldr	r2, [r3, #20]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dda8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d107      	bne.n	800ddca <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68da      	ldr	r2, [r3, #12]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0210 	bic.w	r2, r2, #16
 800ddc8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d106      	bne.n	800dde0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff ffb1 	bl	800dd40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ddde:	e002      	b.n	800dde6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f7ff ff8f 	bl	800dd04 <HAL_UART_RxCpltCallback>
}
 800dde6:	bf00      	nop
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b084      	sub	sp, #16
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de00:	2b01      	cmp	r3, #1
 800de02:	d108      	bne.n	800de16 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800de08:	085b      	lsrs	r3, r3, #1
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4619      	mov	r1, r3
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff ff96 	bl	800dd40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de14:	e002      	b.n	800de1c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7ff ff7e 	bl	800dd18 <HAL_UART_RxHalfCpltCallback>
}
 800de1c:	bf00      	nop
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de40:	2b80      	cmp	r3, #128	; 0x80
 800de42:	bf0c      	ite	eq
 800de44:	2301      	moveq	r3, #1
 800de46:	2300      	movne	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b21      	cmp	r3, #33	; 0x21
 800de56:	d108      	bne.n	800de6a <UART_DMAError+0x46>
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d005      	beq.n	800de6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2200      	movs	r2, #0
 800de62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800de64:	68b8      	ldr	r0, [r7, #8]
 800de66:	f000 f8d5 	bl	800e014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de74:	2b40      	cmp	r3, #64	; 0x40
 800de76:	bf0c      	ite	eq
 800de78:	2301      	moveq	r3, #1
 800de7a:	2300      	movne	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b22      	cmp	r3, #34	; 0x22
 800de8a:	d108      	bne.n	800de9e <UART_DMAError+0x7a>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d005      	beq.n	800de9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2200      	movs	r2, #0
 800de96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f000 f8d1 	bl	800e040 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea2:	f043 0210 	orr.w	r2, r3, #16
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800deaa:	68b8      	ldr	r0, [r7, #8]
 800deac:	f7ff ff3e 	bl	800dd2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800deb0:	bf00      	nop
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	603b      	str	r3, [r7, #0]
 800dec4:	4613      	mov	r3, r2
 800dec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dec8:	e02c      	b.n	800df24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded0:	d028      	beq.n	800df24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ded8:	f7f9 ff70 	bl	8007dbc <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d21d      	bcs.n	800df24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68da      	ldr	r2, [r3, #12]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800def6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	695a      	ldr	r2, [r3, #20]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f022 0201 	bic.w	r2, r2, #1
 800df06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2220      	movs	r2, #32
 800df0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2220      	movs	r2, #32
 800df14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800df20:	2303      	movs	r3, #3
 800df22:	e00f      	b.n	800df44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	4013      	ands	r3, r2
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	429a      	cmp	r2, r3
 800df32:	bf0c      	ite	eq
 800df34:	2301      	moveq	r3, #1
 800df36:	2300      	movne	r3, #0
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	461a      	mov	r2, r3
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d0c3      	beq.n	800deca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	88fa      	ldrh	r2, [r7, #6]
 800df64:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2222      	movs	r2, #34	; 0x22
 800df70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df78:	4a23      	ldr	r2, [pc, #140]	; (800e008 <UART_Start_Receive_DMA+0xbc>)
 800df7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df80:	4a22      	ldr	r2, [pc, #136]	; (800e00c <UART_Start_Receive_DMA+0xc0>)
 800df82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	4a21      	ldr	r2, [pc, #132]	; (800e010 <UART_Start_Receive_DMA+0xc4>)
 800df8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df90:	2200      	movs	r2, #0
 800df92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800df94:	f107 0308 	add.w	r3, r7, #8
 800df98:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	88fb      	ldrh	r3, [r7, #6]
 800dfac:	f7fa fe52 	bl	8008c54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	613b      	str	r3, [r7, #16]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	613b      	str	r3, [r7, #16]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	613b      	str	r3, [r7, #16]
 800dfc4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68da      	ldr	r2, [r3, #12]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfdc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	695a      	ldr	r2, [r3, #20]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f042 0201 	orr.w	r2, r2, #1
 800dfec:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	695a      	ldr	r2, [r3, #20]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dffc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	0800dd59 	.word	0x0800dd59
 800e00c:	0800ddef 	.word	0x0800ddef
 800e010:	0800de25 	.word	0x0800de25

0800e014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e02a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2220      	movs	r2, #32
 800e030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e056:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	695a      	ldr	r2, [r3, #20]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f022 0201 	bic.w	r2, r2, #1
 800e066:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d107      	bne.n	800e080 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68da      	ldr	r2, [r3, #12]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f022 0210 	bic.w	r2, r2, #16
 800e07e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2220      	movs	r2, #32
 800e084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e08e:	bf00      	nop
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff fe39 	bl	800dd2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b085      	sub	sp, #20
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b21      	cmp	r3, #33	; 0x21
 800e0d4:	d13e      	bne.n	800e154 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0de:	d114      	bne.n	800e10a <UART_Transmit_IT+0x48>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d110      	bne.n	800e10a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	1c9a      	adds	r2, r3, #2
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	621a      	str	r2, [r3, #32]
 800e108:	e008      	b.n	800e11c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	1c59      	adds	r1, r3, #1
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	6211      	str	r1, [r2, #32]
 800e114:	781a      	ldrb	r2, [r3, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e120:	b29b      	uxth	r3, r3
 800e122:	3b01      	subs	r3, #1
 800e124:	b29b      	uxth	r3, r3
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	4619      	mov	r1, r3
 800e12a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10f      	bne.n	800e150 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e13e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e14e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e150:	2300      	movs	r3, #0
 800e152:	e000      	b.n	800e156 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e154:	2302      	movs	r3, #2
  }
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	68da      	ldr	r2, [r3, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e178:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2220      	movs	r2, #32
 800e17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f8 f8fc 	bl	8006380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e188:	2300      	movs	r3, #0
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b22      	cmp	r3, #34	; 0x22
 800e1a4:	f040 8087 	bne.w	800e2b6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1b0:	d117      	bne.n	800e1e2 <UART_Receive_IT+0x50>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d113      	bne.n	800e1e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1da:	1c9a      	adds	r2, r3, #2
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	629a      	str	r2, [r3, #40]	; 0x28
 800e1e0:	e026      	b.n	800e230 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1f4:	d007      	beq.n	800e206 <UART_Receive_IT+0x74>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10a      	bne.n	800e214 <UART_Receive_IT+0x82>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	e008      	b.n	800e226 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e220:	b2da      	uxtb	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e234:	b29b      	uxth	r3, r3
 800e236:	3b01      	subs	r3, #1
 800e238:	b29b      	uxth	r3, r3
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4619      	mov	r1, r3
 800e23e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e240:	2b00      	cmp	r3, #0
 800e242:	d136      	bne.n	800e2b2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f022 0220 	bic.w	r2, r2, #32
 800e252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68da      	ldr	r2, [r3, #12]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e262:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	695a      	ldr	r2, [r3, #20]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0201 	bic.w	r2, r2, #1
 800e272:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2220      	movs	r2, #32
 800e278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e280:	2b01      	cmp	r3, #1
 800e282:	d10e      	bne.n	800e2a2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68da      	ldr	r2, [r3, #12]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f022 0210 	bic.w	r2, r2, #16
 800e292:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fd50 	bl	800dd40 <HAL_UARTEx_RxEventCallback>
 800e2a0:	e002      	b.n	800e2a8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff fd2e 	bl	800dd04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e002      	b.n	800e2b8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e000      	b.n	800e2b8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e2b6:	2302      	movs	r3, #2
  }
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	b09f      	sub	sp, #124	; 0x7c
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2d6:	68d9      	ldr	r1, [r3, #12]
 800e2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	ea40 0301 	orr.w	r3, r0, r1
 800e2e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e4:	689a      	ldr	r2, [r3, #8]
 800e2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	431a      	orrs	r2, r3
 800e2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ee:	695b      	ldr	r3, [r3, #20]
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e304:	f021 010c 	bic.w	r1, r1, #12
 800e308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e30e:	430b      	orrs	r3, r1
 800e310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	695b      	ldr	r3, [r3, #20]
 800e318:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e31e:	6999      	ldr	r1, [r3, #24]
 800e320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	ea40 0301 	orr.w	r3, r0, r1
 800e328:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e32a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	4bc5      	ldr	r3, [pc, #788]	; (800e644 <UART_SetConfig+0x384>)
 800e330:	429a      	cmp	r2, r3
 800e332:	d004      	beq.n	800e33e <UART_SetConfig+0x7e>
 800e334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	4bc3      	ldr	r3, [pc, #780]	; (800e648 <UART_SetConfig+0x388>)
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d103      	bne.n	800e346 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e33e:	f7fd fc0f 	bl	800bb60 <HAL_RCC_GetPCLK2Freq>
 800e342:	6778      	str	r0, [r7, #116]	; 0x74
 800e344:	e002      	b.n	800e34c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e346:	f7fd fbf7 	bl	800bb38 <HAL_RCC_GetPCLK1Freq>
 800e34a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e354:	f040 80b6 	bne.w	800e4c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e35a:	461c      	mov	r4, r3
 800e35c:	f04f 0500 	mov.w	r5, #0
 800e360:	4622      	mov	r2, r4
 800e362:	462b      	mov	r3, r5
 800e364:	1891      	adds	r1, r2, r2
 800e366:	6439      	str	r1, [r7, #64]	; 0x40
 800e368:	415b      	adcs	r3, r3
 800e36a:	647b      	str	r3, [r7, #68]	; 0x44
 800e36c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e370:	1912      	adds	r2, r2, r4
 800e372:	eb45 0303 	adc.w	r3, r5, r3
 800e376:	f04f 0000 	mov.w	r0, #0
 800e37a:	f04f 0100 	mov.w	r1, #0
 800e37e:	00d9      	lsls	r1, r3, #3
 800e380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e384:	00d0      	lsls	r0, r2, #3
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	1911      	adds	r1, r2, r4
 800e38c:	6639      	str	r1, [r7, #96]	; 0x60
 800e38e:	416b      	adcs	r3, r5
 800e390:	667b      	str	r3, [r7, #100]	; 0x64
 800e392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	461a      	mov	r2, r3
 800e398:	f04f 0300 	mov.w	r3, #0
 800e39c:	1891      	adds	r1, r2, r2
 800e39e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e3a0:	415b      	adcs	r3, r3
 800e3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e3a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e3ac:	f7f2 fc7c 	bl	8000ca8 <__aeabi_uldivmod>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4ba5      	ldr	r3, [pc, #660]	; (800e64c <UART_SetConfig+0x38c>)
 800e3b6:	fba3 2302 	umull	r2, r3, r3, r2
 800e3ba:	095b      	lsrs	r3, r3, #5
 800e3bc:	011e      	lsls	r6, r3, #4
 800e3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3c0:	461c      	mov	r4, r3
 800e3c2:	f04f 0500 	mov.w	r5, #0
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	462b      	mov	r3, r5
 800e3ca:	1891      	adds	r1, r2, r2
 800e3cc:	6339      	str	r1, [r7, #48]	; 0x30
 800e3ce:	415b      	adcs	r3, r3
 800e3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e3d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e3d6:	1912      	adds	r2, r2, r4
 800e3d8:	eb45 0303 	adc.w	r3, r5, r3
 800e3dc:	f04f 0000 	mov.w	r0, #0
 800e3e0:	f04f 0100 	mov.w	r1, #0
 800e3e4:	00d9      	lsls	r1, r3, #3
 800e3e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e3ea:	00d0      	lsls	r0, r2, #3
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	1911      	adds	r1, r2, r4
 800e3f2:	65b9      	str	r1, [r7, #88]	; 0x58
 800e3f4:	416b      	adcs	r3, r5
 800e3f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	1891      	adds	r1, r2, r2
 800e404:	62b9      	str	r1, [r7, #40]	; 0x28
 800e406:	415b      	adcs	r3, r3
 800e408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e40a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e40e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e412:	f7f2 fc49 	bl	8000ca8 <__aeabi_uldivmod>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4b8c      	ldr	r3, [pc, #560]	; (800e64c <UART_SetConfig+0x38c>)
 800e41c:	fba3 1302 	umull	r1, r3, r3, r2
 800e420:	095b      	lsrs	r3, r3, #5
 800e422:	2164      	movs	r1, #100	; 0x64
 800e424:	fb01 f303 	mul.w	r3, r1, r3
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	3332      	adds	r3, #50	; 0x32
 800e42e:	4a87      	ldr	r2, [pc, #540]	; (800e64c <UART_SetConfig+0x38c>)
 800e430:	fba2 2303 	umull	r2, r3, r2, r3
 800e434:	095b      	lsrs	r3, r3, #5
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e43c:	441e      	add	r6, r3
 800e43e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e440:	4618      	mov	r0, r3
 800e442:	f04f 0100 	mov.w	r1, #0
 800e446:	4602      	mov	r2, r0
 800e448:	460b      	mov	r3, r1
 800e44a:	1894      	adds	r4, r2, r2
 800e44c:	623c      	str	r4, [r7, #32]
 800e44e:	415b      	adcs	r3, r3
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
 800e452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e456:	1812      	adds	r2, r2, r0
 800e458:	eb41 0303 	adc.w	r3, r1, r3
 800e45c:	f04f 0400 	mov.w	r4, #0
 800e460:	f04f 0500 	mov.w	r5, #0
 800e464:	00dd      	lsls	r5, r3, #3
 800e466:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e46a:	00d4      	lsls	r4, r2, #3
 800e46c:	4622      	mov	r2, r4
 800e46e:	462b      	mov	r3, r5
 800e470:	1814      	adds	r4, r2, r0
 800e472:	653c      	str	r4, [r7, #80]	; 0x50
 800e474:	414b      	adcs	r3, r1
 800e476:	657b      	str	r3, [r7, #84]	; 0x54
 800e478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	461a      	mov	r2, r3
 800e47e:	f04f 0300 	mov.w	r3, #0
 800e482:	1891      	adds	r1, r2, r2
 800e484:	61b9      	str	r1, [r7, #24]
 800e486:	415b      	adcs	r3, r3
 800e488:	61fb      	str	r3, [r7, #28]
 800e48a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e48e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e492:	f7f2 fc09 	bl	8000ca8 <__aeabi_uldivmod>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	4b6c      	ldr	r3, [pc, #432]	; (800e64c <UART_SetConfig+0x38c>)
 800e49c:	fba3 1302 	umull	r1, r3, r3, r2
 800e4a0:	095b      	lsrs	r3, r3, #5
 800e4a2:	2164      	movs	r1, #100	; 0x64
 800e4a4:	fb01 f303 	mul.w	r3, r1, r3
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	3332      	adds	r3, #50	; 0x32
 800e4ae:	4a67      	ldr	r2, [pc, #412]	; (800e64c <UART_SetConfig+0x38c>)
 800e4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b4:	095b      	lsrs	r3, r3, #5
 800e4b6:	f003 0207 	and.w	r2, r3, #7
 800e4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4432      	add	r2, r6
 800e4c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e4c2:	e0b9      	b.n	800e638 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4c6:	461c      	mov	r4, r3
 800e4c8:	f04f 0500 	mov.w	r5, #0
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	462b      	mov	r3, r5
 800e4d0:	1891      	adds	r1, r2, r2
 800e4d2:	6139      	str	r1, [r7, #16]
 800e4d4:	415b      	adcs	r3, r3
 800e4d6:	617b      	str	r3, [r7, #20]
 800e4d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e4dc:	1912      	adds	r2, r2, r4
 800e4de:	eb45 0303 	adc.w	r3, r5, r3
 800e4e2:	f04f 0000 	mov.w	r0, #0
 800e4e6:	f04f 0100 	mov.w	r1, #0
 800e4ea:	00d9      	lsls	r1, r3, #3
 800e4ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e4f0:	00d0      	lsls	r0, r2, #3
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	eb12 0804 	adds.w	r8, r2, r4
 800e4fa:	eb43 0905 	adc.w	r9, r3, r5
 800e4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	4618      	mov	r0, r3
 800e504:	f04f 0100 	mov.w	r1, #0
 800e508:	f04f 0200 	mov.w	r2, #0
 800e50c:	f04f 0300 	mov.w	r3, #0
 800e510:	008b      	lsls	r3, r1, #2
 800e512:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e516:	0082      	lsls	r2, r0, #2
 800e518:	4640      	mov	r0, r8
 800e51a:	4649      	mov	r1, r9
 800e51c:	f7f2 fbc4 	bl	8000ca8 <__aeabi_uldivmod>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4b49      	ldr	r3, [pc, #292]	; (800e64c <UART_SetConfig+0x38c>)
 800e526:	fba3 2302 	umull	r2, r3, r3, r2
 800e52a:	095b      	lsrs	r3, r3, #5
 800e52c:	011e      	lsls	r6, r3, #4
 800e52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e530:	4618      	mov	r0, r3
 800e532:	f04f 0100 	mov.w	r1, #0
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	1894      	adds	r4, r2, r2
 800e53c:	60bc      	str	r4, [r7, #8]
 800e53e:	415b      	adcs	r3, r3
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e546:	1812      	adds	r2, r2, r0
 800e548:	eb41 0303 	adc.w	r3, r1, r3
 800e54c:	f04f 0400 	mov.w	r4, #0
 800e550:	f04f 0500 	mov.w	r5, #0
 800e554:	00dd      	lsls	r5, r3, #3
 800e556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e55a:	00d4      	lsls	r4, r2, #3
 800e55c:	4622      	mov	r2, r4
 800e55e:	462b      	mov	r3, r5
 800e560:	1814      	adds	r4, r2, r0
 800e562:	64bc      	str	r4, [r7, #72]	; 0x48
 800e564:	414b      	adcs	r3, r1
 800e566:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f04f 0100 	mov.w	r1, #0
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	f04f 0300 	mov.w	r3, #0
 800e57a:	008b      	lsls	r3, r1, #2
 800e57c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e580:	0082      	lsls	r2, r0, #2
 800e582:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e586:	f7f2 fb8f 	bl	8000ca8 <__aeabi_uldivmod>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4b2f      	ldr	r3, [pc, #188]	; (800e64c <UART_SetConfig+0x38c>)
 800e590:	fba3 1302 	umull	r1, r3, r3, r2
 800e594:	095b      	lsrs	r3, r3, #5
 800e596:	2164      	movs	r1, #100	; 0x64
 800e598:	fb01 f303 	mul.w	r3, r1, r3
 800e59c:	1ad3      	subs	r3, r2, r3
 800e59e:	011b      	lsls	r3, r3, #4
 800e5a0:	3332      	adds	r3, #50	; 0x32
 800e5a2:	4a2a      	ldr	r2, [pc, #168]	; (800e64c <UART_SetConfig+0x38c>)
 800e5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a8:	095b      	lsrs	r3, r3, #5
 800e5aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5ae:	441e      	add	r6, r3
 800e5b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f04f 0100 	mov.w	r1, #0
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	1894      	adds	r4, r2, r2
 800e5be:	603c      	str	r4, [r7, #0]
 800e5c0:	415b      	adcs	r3, r3
 800e5c2:	607b      	str	r3, [r7, #4]
 800e5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5c8:	1812      	adds	r2, r2, r0
 800e5ca:	eb41 0303 	adc.w	r3, r1, r3
 800e5ce:	f04f 0400 	mov.w	r4, #0
 800e5d2:	f04f 0500 	mov.w	r5, #0
 800e5d6:	00dd      	lsls	r5, r3, #3
 800e5d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e5dc:	00d4      	lsls	r4, r2, #3
 800e5de:	4622      	mov	r2, r4
 800e5e0:	462b      	mov	r3, r5
 800e5e2:	eb12 0a00 	adds.w	sl, r2, r0
 800e5e6:	eb43 0b01 	adc.w	fp, r3, r1
 800e5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f04f 0100 	mov.w	r1, #0
 800e5f4:	f04f 0200 	mov.w	r2, #0
 800e5f8:	f04f 0300 	mov.w	r3, #0
 800e5fc:	008b      	lsls	r3, r1, #2
 800e5fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e602:	0082      	lsls	r2, r0, #2
 800e604:	4650      	mov	r0, sl
 800e606:	4659      	mov	r1, fp
 800e608:	f7f2 fb4e 	bl	8000ca8 <__aeabi_uldivmod>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	4b0e      	ldr	r3, [pc, #56]	; (800e64c <UART_SetConfig+0x38c>)
 800e612:	fba3 1302 	umull	r1, r3, r3, r2
 800e616:	095b      	lsrs	r3, r3, #5
 800e618:	2164      	movs	r1, #100	; 0x64
 800e61a:	fb01 f303 	mul.w	r3, r1, r3
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	011b      	lsls	r3, r3, #4
 800e622:	3332      	adds	r3, #50	; 0x32
 800e624:	4a09      	ldr	r2, [pc, #36]	; (800e64c <UART_SetConfig+0x38c>)
 800e626:	fba2 2303 	umull	r2, r3, r2, r3
 800e62a:	095b      	lsrs	r3, r3, #5
 800e62c:	f003 020f 	and.w	r2, r3, #15
 800e630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4432      	add	r2, r6
 800e636:	609a      	str	r2, [r3, #8]
}
 800e638:	bf00      	nop
 800e63a:	377c      	adds	r7, #124	; 0x7c
 800e63c:	46bd      	mov	sp, r7
 800e63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e642:	bf00      	nop
 800e644:	40011000 	.word	0x40011000
 800e648:	40011400 	.word	0x40011400
 800e64c:	51eb851f 	.word	0x51eb851f

0800e650 <arm_fir_init_f32>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	9c04      	ldr	r4, [sp, #16]
 800e654:	6082      	str	r2, [r0, #8]
 800e656:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800e65a:	3c01      	subs	r4, #1
 800e65c:	4605      	mov	r5, r0
 800e65e:	440c      	add	r4, r1
 800e660:	8001      	strh	r1, [r0, #0]
 800e662:	461e      	mov	r6, r3
 800e664:	00a2      	lsls	r2, r4, #2
 800e666:	4618      	mov	r0, r3
 800e668:	2100      	movs	r1, #0
 800e66a:	f000 fb87 	bl	800ed7c <memset>
 800e66e:	606e      	str	r6, [r5, #4]
 800e670:	bd70      	pop	{r4, r5, r6, pc}
 800e672:	bf00      	nop

0800e674 <arm_fir_f32>:
 800e674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	ed2d 8b10 	vpush	{d8-d15}
 800e67c:	b089      	sub	sp, #36	; 0x24
 800e67e:	4605      	mov	r5, r0
 800e680:	9003      	str	r0, [sp, #12]
 800e682:	8800      	ldrh	r0, [r0, #0]
 800e684:	9304      	str	r3, [sp, #16]
 800e686:	461e      	mov	r6, r3
 800e688:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800e68c:	9001      	str	r0, [sp, #4]
 800e68e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800e692:	3b01      	subs	r3, #1
 800e694:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800e698:	08f3      	lsrs	r3, r6, #3
 800e69a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800e69e:	9400      	str	r4, [sp, #0]
 800e6a0:	9302      	str	r3, [sp, #8]
 800e6a2:	f000 81ef 	beq.w	800ea84 <arm_fir_f32+0x410>
 800e6a6:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 800e6aa:	469e      	mov	lr, r3
 800e6ac:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800e6b0:	1f1e      	subs	r6, r3, #4
 800e6b2:	4625      	mov	r5, r4
 800e6b4:	9605      	str	r6, [sp, #20]
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	eb08 0003 	add.w	r0, r8, r3
 800e6bc:	f004 0a07 	and.w	sl, r4, #7
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	f10c 0420 	add.w	r4, ip, #32
 800e6c6:	f8cd c018 	str.w	ip, [sp, #24]
 800e6ca:	4684      	mov	ip, r0
 800e6cc:	4648      	mov	r0, r9
 800e6ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e6d2:	9107      	str	r1, [sp, #28]
 800e6d4:	f105 0720 	add.w	r7, r5, #32
 800e6d8:	f101 0620 	add.w	r6, r1, #32
 800e6dc:	f102 0520 	add.w	r5, r2, #32
 800e6e0:	4652      	mov	r2, sl
 800e6e2:	469a      	mov	sl, r3
 800e6e4:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800e6e8:	f847 3c20 	str.w	r3, [r7, #-32]
 800e6ec:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800e6f0:	f847 3c1c 	str.w	r3, [r7, #-28]
 800e6f4:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800e6f8:	f847 3c18 	str.w	r3, [r7, #-24]
 800e6fc:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800e700:	f847 3c14 	str.w	r3, [r7, #-20]
 800e704:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800e708:	f847 3c10 	str.w	r3, [r7, #-16]
 800e70c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800e710:	f847 3c0c 	str.w	r3, [r7, #-12]
 800e714:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800e718:	f847 3c08 	str.w	r3, [r7, #-8]
 800e71c:	eddf 3af1 	vldr	s7, [pc, #964]	; 800eae4 <arm_fir_f32+0x470>
 800e720:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e724:	f847 3c04 	str.w	r3, [r7, #-4]
 800e728:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 800e72c:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800e730:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800e734:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 800e738:	ed14 1a04 	vldr	s2, [r4, #-16]
 800e73c:	ed54 0a03 	vldr	s1, [r4, #-12]
 800e740:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e744:	1f21      	subs	r1, r4, #4
 800e746:	eef0 8a63 	vmov.f32	s17, s7
 800e74a:	eef0 9a63 	vmov.f32	s19, s7
 800e74e:	eef0 aa63 	vmov.f32	s21, s7
 800e752:	eef0 ba63 	vmov.f32	s23, s7
 800e756:	eeb0 ca63 	vmov.f32	s24, s7
 800e75a:	eef0 ca63 	vmov.f32	s25, s7
 800e75e:	eeb0 da63 	vmov.f32	s26, s7
 800e762:	2800      	cmp	r0, #0
 800e764:	f000 81e8 	beq.w	800eb38 <arm_fir_f32+0x4c4>
 800e768:	f108 0120 	add.w	r1, r8, #32
 800e76c:	f104 031c 	add.w	r3, r4, #28
 800e770:	4683      	mov	fp, r0
 800e772:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 800e776:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 800e77a:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 800e77e:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 800e782:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 800e786:	ed11 6a04 	vldr	s12, [r1, #-16]
 800e78a:	ed51 6a03 	vldr	s13, [r1, #-12]
 800e78e:	ed11 7a02 	vldr	s14, [r1, #-8]
 800e792:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e796:	ee24 fa03 	vmul.f32	s30, s8, s6
 800e79a:	ee64 ea22 	vmul.f32	s29, s8, s5
 800e79e:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 800e7a2:	ee24 ea02 	vmul.f32	s28, s8, s4
 800e7a6:	ee64 da21 	vmul.f32	s27, s8, s3
 800e7aa:	ee24 ba01 	vmul.f32	s22, s8, s2
 800e7ae:	ee24 aa20 	vmul.f32	s20, s8, s1
 800e7b2:	ee24 9a00 	vmul.f32	s18, s8, s0
 800e7b6:	ee24 4a08 	vmul.f32	s8, s8, s16
 800e7ba:	ee3f da0d 	vadd.f32	s26, s30, s26
 800e7be:	ee74 3a23 	vadd.f32	s7, s8, s7
 800e7c2:	ee24 faa2 	vmul.f32	s30, s9, s5
 800e7c6:	ee7e caac 	vadd.f32	s25, s29, s25
 800e7ca:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800e7ce:	ee64 ea82 	vmul.f32	s29, s9, s4
 800e7d2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e7d6:	ee7d baab 	vadd.f32	s23, s27, s23
 800e7da:	ee24 eaa1 	vmul.f32	s28, s9, s3
 800e7de:	ee64 da81 	vmul.f32	s27, s9, s2
 800e7e2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e7e6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800e7ea:	ee24 baa0 	vmul.f32	s22, s9, s1
 800e7ee:	ee24 aa80 	vmul.f32	s20, s9, s0
 800e7f2:	ee79 8a28 	vadd.f32	s17, s18, s17
 800e7f6:	ee28 9a24 	vmul.f32	s18, s16, s9
 800e7fa:	ee64 4a83 	vmul.f32	s9, s9, s6
 800e7fe:	ee25 4a02 	vmul.f32	s8, s10, s4
 800e802:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800e806:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800e80a:	ee7e caac 	vadd.f32	s25, s29, s25
 800e80e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e812:	ee65 ea21 	vmul.f32	s29, s10, s3
 800e816:	ee25 ea01 	vmul.f32	s28, s10, s2
 800e81a:	ee7d baab 	vadd.f32	s23, s27, s23
 800e81e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e822:	ee65 da20 	vmul.f32	s27, s10, s1
 800e826:	ee25 ba00 	vmul.f32	s22, s10, s0
 800e82a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800e82e:	ee79 8a28 	vadd.f32	s17, s18, s17
 800e832:	ee28 aa05 	vmul.f32	s20, s16, s10
 800e836:	ee23 9a05 	vmul.f32	s18, s6, s10
 800e83a:	ee3d da0f 	vadd.f32	s26, s26, s30
 800e83e:	ee25 5a22 	vmul.f32	s10, s10, s5
 800e842:	ee65 3aa1 	vmul.f32	s7, s11, s3
 800e846:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e84a:	ed53 1a04 	vldr	s3, [r3, #-16]
 800e84e:	ee7e caac 	vadd.f32	s25, s29, s25
 800e852:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e856:	ee65 ea81 	vmul.f32	s29, s11, s2
 800e85a:	ee25 eaa0 	vmul.f32	s28, s11, s1
 800e85e:	ee7d baab 	vadd.f32	s23, s27, s23
 800e862:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e866:	ee65 da80 	vmul.f32	s27, s11, s0
 800e86a:	ee28 ba25 	vmul.f32	s22, s16, s11
 800e86e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800e872:	ee79 8a28 	vadd.f32	s17, s18, s17
 800e876:	ee23 aa25 	vmul.f32	s20, s6, s11
 800e87a:	ee22 9aa5 	vmul.f32	s18, s5, s11
 800e87e:	ee3d da04 	vadd.f32	s26, s26, s8
 800e882:	ee65 5a82 	vmul.f32	s11, s11, s4
 800e886:	ee66 4a01 	vmul.f32	s9, s12, s2
 800e88a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800e88e:	ed13 1a03 	vldr	s2, [r3, #-12]
 800e892:	ee75 5a85 	vadd.f32	s11, s11, s10
 800e896:	ee3d da23 	vadd.f32	s26, s26, s7
 800e89a:	ee22 5a06 	vmul.f32	s10, s4, s12
 800e89e:	ee7e caac 	vadd.f32	s25, s29, s25
 800e8a2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e8a6:	ee66 ea20 	vmul.f32	s29, s12, s1
 800e8aa:	ee26 ea00 	vmul.f32	s28, s12, s0
 800e8ae:	ee7d baab 	vadd.f32	s23, s27, s23
 800e8b2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e8b6:	ee68 da06 	vmul.f32	s27, s16, s12
 800e8ba:	ee23 ba06 	vmul.f32	s22, s6, s12
 800e8be:	ee22 aa86 	vmul.f32	s20, s5, s12
 800e8c2:	ee79 8a28 	vadd.f32	s17, s18, s17
 800e8c6:	ee26 6a21 	vmul.f32	s12, s12, s3
 800e8ca:	ee26 9aa0 	vmul.f32	s18, s13, s1
 800e8ce:	ee36 6a25 	vadd.f32	s12, s12, s11
 800e8d2:	ed53 0a02 	vldr	s1, [r3, #-8]
 800e8d6:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800e8da:	ee3d da24 	vadd.f32	s26, s26, s9
 800e8de:	ee7e caac 	vadd.f32	s25, s29, s25
 800e8e2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e8e6:	ee66 ea80 	vmul.f32	s29, s13, s0
 800e8ea:	ee28 ea26 	vmul.f32	s28, s16, s13
 800e8ee:	ee7d baab 	vadd.f32	s23, s27, s23
 800e8f2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e8f6:	ee63 da26 	vmul.f32	s27, s6, s13
 800e8fa:	ee22 baa6 	vmul.f32	s22, s5, s13
 800e8fe:	ee3a aa29 	vadd.f32	s20, s20, s19
 800e902:	ee75 8a28 	vadd.f32	s17, s10, s17
 800e906:	ee62 9a26 	vmul.f32	s19, s4, s13
 800e90a:	ee66 6a81 	vmul.f32	s13, s13, s2
 800e90e:	ee27 5a00 	vmul.f32	s10, s14, s0
 800e912:	ee7b aa2a 	vadd.f32	s21, s22, s21
 800e916:	ee75 8aa8 	vadd.f32	s17, s11, s17
 800e91a:	ee7e caac 	vadd.f32	s25, s29, s25
 800e91e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e922:	ee68 ea07 	vmul.f32	s29, s16, s14
 800e926:	ee23 ea07 	vmul.f32	s28, s6, s14
 800e92a:	ee7d baab 	vadd.f32	s23, s27, s23
 800e92e:	ee22 ba07 	vmul.f32	s22, s4, s14
 800e932:	ee62 da87 	vmul.f32	s27, s5, s14
 800e936:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800e93a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e93e:	ee61 9a87 	vmul.f32	s19, s3, s14
 800e942:	ee67 3a20 	vmul.f32	s7, s14, s1
 800e946:	ed13 0a01 	vldr	s0, [r3, #-4]
 800e94a:	ee3d da09 	vadd.f32	s26, s26, s18
 800e94e:	ee21 6a07 	vmul.f32	s12, s2, s14
 800e952:	ee3d da05 	vadd.f32	s26, s26, s10
 800e956:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e95a:	ee63 5a27 	vmul.f32	s11, s6, s15
 800e95e:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800e962:	ee62 4a27 	vmul.f32	s9, s4, s15
 800e966:	ee3b ba2a 	vadd.f32	s22, s22, s21
 800e96a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800e96e:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800e972:	ee61 9a27 	vmul.f32	s19, s2, s15
 800e976:	ee36 7a28 	vadd.f32	s14, s12, s17
 800e97a:	ee7e caac 	vadd.f32	s25, s29, s25
 800e97e:	ee60 8aa7 	vmul.f32	s17, s1, s15
 800e982:	ee3e ca0c 	vadd.f32	s24, s28, s24
 800e986:	ee7d baab 	vadd.f32	s23, s27, s23
 800e98a:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800e98e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e992:	f1bb 0b01 	subs.w	fp, fp, #1
 800e996:	f101 0120 	add.w	r1, r1, #32
 800e99a:	ee38 da0d 	vadd.f32	s26, s16, s26
 800e99e:	ee75 caac 	vadd.f32	s25, s11, s25
 800e9a2:	ee35 ca0c 	vadd.f32	s24, s10, s24
 800e9a6:	ee74 baab 	vadd.f32	s23, s9, s23
 800e9aa:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800e9ae:	ee79 9a8a 	vadd.f32	s19, s19, s20
 800e9b2:	ee78 8a87 	vadd.f32	s17, s17, s14
 800e9b6:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800e9ba:	f103 0320 	add.w	r3, r3, #32
 800e9be:	f47f aed8 	bne.w	800e772 <arm_fir_f32+0xfe>
 800e9c2:	eb09 0104 	add.w	r1, r9, r4
 800e9c6:	46e3      	mov	fp, ip
 800e9c8:	b3a2      	cbz	r2, 800ea34 <arm_fir_f32+0x3c0>
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	ecbb 6a01 	vldmia	fp!, {s12}
 800e9d0:	ecf1 7a01 	vldmia	r1!, {s15}
 800e9d4:	ee26 3a03 	vmul.f32	s6, s12, s6
 800e9d8:	ee26 4a22 	vmul.f32	s8, s12, s5
 800e9dc:	ee66 4a02 	vmul.f32	s9, s12, s4
 800e9e0:	ee26 5a21 	vmul.f32	s10, s12, s3
 800e9e4:	ee66 5a01 	vmul.f32	s11, s12, s2
 800e9e8:	ee66 6a20 	vmul.f32	s13, s12, s1
 800e9ec:	ee26 7a00 	vmul.f32	s14, s12, s0
 800e9f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	ee3d da03 	vadd.f32	s26, s26, s6
 800e9fa:	ee7c ca84 	vadd.f32	s25, s25, s8
 800e9fe:	eeb0 3a62 	vmov.f32	s6, s5
 800ea02:	ee3c ca24 	vadd.f32	s24, s24, s9
 800ea06:	eef0 2a42 	vmov.f32	s5, s4
 800ea0a:	ee7b ba85 	vadd.f32	s23, s23, s10
 800ea0e:	eeb0 2a61 	vmov.f32	s4, s3
 800ea12:	ee7a aaa5 	vadd.f32	s21, s21, s11
 800ea16:	eef0 1a41 	vmov.f32	s3, s2
 800ea1a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800ea1e:	eeb0 1a60 	vmov.f32	s2, s1
 800ea22:	ee78 8a87 	vadd.f32	s17, s17, s14
 800ea26:	eef0 0a40 	vmov.f32	s1, s0
 800ea2a:	ee73 3a86 	vadd.f32	s7, s7, s12
 800ea2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ea32:	d1cb      	bne.n	800e9cc <arm_fir_f32+0x358>
 800ea34:	f1be 0e01 	subs.w	lr, lr, #1
 800ea38:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 800ea3c:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800ea40:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 800ea44:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 800ea48:	ed45 aa04 	vstr	s21, [r5, #-16]
 800ea4c:	ed45 9a03 	vstr	s19, [r5, #-12]
 800ea50:	ed45 8a02 	vstr	s17, [r5, #-8]
 800ea54:	ed45 3a01 	vstr	s7, [r5, #-4]
 800ea58:	f107 0720 	add.w	r7, r7, #32
 800ea5c:	f106 0620 	add.w	r6, r6, #32
 800ea60:	f104 0420 	add.w	r4, r4, #32
 800ea64:	f105 0520 	add.w	r5, r5, #32
 800ea68:	f47f ae3c 	bne.w	800e6e4 <arm_fir_f32+0x70>
 800ea6c:	9b02      	ldr	r3, [sp, #8]
 800ea6e:	9800      	ldr	r0, [sp, #0]
 800ea70:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ea74:	9907      	ldr	r1, [sp, #28]
 800ea76:	015b      	lsls	r3, r3, #5
 800ea78:	4652      	mov	r2, sl
 800ea7a:	4418      	add	r0, r3
 800ea7c:	9000      	str	r0, [sp, #0]
 800ea7e:	4419      	add	r1, r3
 800ea80:	449c      	add	ip, r3
 800ea82:	441a      	add	r2, r3
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	f013 0e07 	ands.w	lr, r3, #7
 800ea8a:	d01f      	beq.n	800eacc <arm_fir_f32+0x458>
 800ea8c:	9f00      	ldr	r7, [sp, #0]
 800ea8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ea92:	4676      	mov	r6, lr
 800ea94:	4665      	mov	r5, ip
 800ea96:	f851 3b04 	ldr.w	r3, [r1], #4
 800ea9a:	eddf 6a12 	vldr	s13, [pc, #72]	; 800eae4 <arm_fir_f32+0x470>
 800ea9e:	f847 3b04 	str.w	r3, [r7], #4
 800eaa2:	4644      	mov	r4, r8
 800eaa4:	464b      	mov	r3, r9
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	ecb0 7a01 	vldmia	r0!, {s14}
 800eaac:	ecf4 7a01 	vldmia	r4!, {s15}
 800eab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eab4:	3b01      	subs	r3, #1
 800eab6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800eaba:	d1f5      	bne.n	800eaa8 <arm_fir_f32+0x434>
 800eabc:	3e01      	subs	r6, #1
 800eabe:	ece2 6a01 	vstmia	r2!, {s13}
 800eac2:	f105 0504 	add.w	r5, r5, #4
 800eac6:	d1e6      	bne.n	800ea96 <arm_fir_f32+0x422>
 800eac8:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 800eacc:	9b01      	ldr	r3, [sp, #4]
 800eace:	1e59      	subs	r1, r3, #1
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	088e      	lsrs	r6, r1, #2
 800ead4:	685c      	ldr	r4, [r3, #4]
 800ead6:	d020      	beq.n	800eb1a <arm_fir_f32+0x4a6>
 800ead8:	f104 0210 	add.w	r2, r4, #16
 800eadc:	f10c 0310 	add.w	r3, ip, #16
 800eae0:	4630      	mov	r0, r6
 800eae2:	e001      	b.n	800eae8 <arm_fir_f32+0x474>
 800eae4:	00000000 	.word	0x00000000
 800eae8:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800eaec:	f842 5c10 	str.w	r5, [r2, #-16]
 800eaf0:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800eaf4:	f842 5c0c 	str.w	r5, [r2, #-12]
 800eaf8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800eafc:	f842 5c08 	str.w	r5, [r2, #-8]
 800eb00:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800eb04:	f842 5c04 	str.w	r5, [r2, #-4]
 800eb08:	3801      	subs	r0, #1
 800eb0a:	f103 0310 	add.w	r3, r3, #16
 800eb0e:	f102 0210 	add.w	r2, r2, #16
 800eb12:	d1e9      	bne.n	800eae8 <arm_fir_f32+0x474>
 800eb14:	0133      	lsls	r3, r6, #4
 800eb16:	441c      	add	r4, r3
 800eb18:	449c      	add	ip, r3
 800eb1a:	f011 0303 	ands.w	r3, r1, #3
 800eb1e:	d006      	beq.n	800eb2e <arm_fir_f32+0x4ba>
 800eb20:	4622      	mov	r2, r4
 800eb22:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb26:	f842 1b04 	str.w	r1, [r2], #4
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	d1f9      	bne.n	800eb22 <arm_fir_f32+0x4ae>
 800eb2e:	b009      	add	sp, #36	; 0x24
 800eb30:	ecbd 8b10 	vpop	{d8-d15}
 800eb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb38:	46c3      	mov	fp, r8
 800eb3a:	e745      	b.n	800e9c8 <arm_fir_f32+0x354>

0800eb3c <arm_cmplx_mag_f32>:
 800eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb40:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800eb44:	b084      	sub	sp, #16
 800eb46:	d07f      	beq.n	800ec48 <arm_cmplx_mag_f32+0x10c>
 800eb48:	2700      	movs	r7, #0
 800eb4a:	f100 0420 	add.w	r4, r0, #32
 800eb4e:	f101 0510 	add.w	r5, r1, #16
 800eb52:	4646      	mov	r6, r8
 800eb54:	e05a      	b.n	800ec0c <arm_cmplx_mag_f32+0xd0>
 800eb56:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800eb5a:	eeb4 0a40 	vcmp.f32	s0, s0
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	f040 80a4 	bne.w	800ecae <arm_cmplx_mag_f32+0x172>
 800eb66:	ed05 0a04 	vstr	s0, [r5, #-16]
 800eb6a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800eb6e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800eb72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb76:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eb7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eb7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	f2c0 808f 	blt.w	800eca8 <arm_cmplx_mag_f32+0x16c>
 800eb8a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800eb8e:	eeb4 0a40 	vcmp.f32	s0, s0
 800eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb96:	f040 80af 	bne.w	800ecf8 <arm_cmplx_mag_f32+0x1bc>
 800eb9a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800eb9e:	ed54 7a04 	vldr	s15, [r4, #-16]
 800eba2:	ed14 0a03 	vldr	s0, [r4, #-12]
 800eba6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebaa:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ebae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ebb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ebb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebba:	db72      	blt.n	800eca2 <arm_cmplx_mag_f32+0x166>
 800ebbc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ebc0:	eeb4 0a40 	vcmp.f32	s0, s0
 800ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc8:	f040 808c 	bne.w	800ece4 <arm_cmplx_mag_f32+0x1a8>
 800ebcc:	ed05 0a02 	vstr	s0, [r5, #-8]
 800ebd0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800ebd4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800ebd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebdc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ebe0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ebe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ebe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebec:	db20      	blt.n	800ec30 <arm_cmplx_mag_f32+0xf4>
 800ebee:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ebf2:	eeb4 0a40 	vcmp.f32	s0, s0
 800ebf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfa:	d169      	bne.n	800ecd0 <arm_cmplx_mag_f32+0x194>
 800ebfc:	3e01      	subs	r6, #1
 800ebfe:	ed05 0a01 	vstr	s0, [r5, #-4]
 800ec02:	f104 0420 	add.w	r4, r4, #32
 800ec06:	f105 0510 	add.w	r5, r5, #16
 800ec0a:	d019      	beq.n	800ec40 <arm_cmplx_mag_f32+0x104>
 800ec0c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800ec10:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800ec14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec18:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec1c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ec20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec28:	da95      	bge.n	800eb56 <arm_cmplx_mag_f32+0x1a>
 800ec2a:	f845 7c10 	str.w	r7, [r5, #-16]
 800ec2e:	e79c      	b.n	800eb6a <arm_cmplx_mag_f32+0x2e>
 800ec30:	3e01      	subs	r6, #1
 800ec32:	f845 7c04 	str.w	r7, [r5, #-4]
 800ec36:	f104 0420 	add.w	r4, r4, #32
 800ec3a:	f105 0510 	add.w	r5, r5, #16
 800ec3e:	d1e5      	bne.n	800ec0c <arm_cmplx_mag_f32+0xd0>
 800ec40:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800ec44:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800ec48:	f012 0503 	ands.w	r5, r2, #3
 800ec4c:	d026      	beq.n	800ec9c <arm_cmplx_mag_f32+0x160>
 800ec4e:	2600      	movs	r6, #0
 800ec50:	f100 0408 	add.w	r4, r0, #8
 800ec54:	e00c      	b.n	800ec70 <arm_cmplx_mag_f32+0x134>
 800ec56:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ec5a:	eeb4 0a40 	vcmp.f32	s0, s0
 800ec5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec62:	d12e      	bne.n	800ecc2 <arm_cmplx_mag_f32+0x186>
 800ec64:	3d01      	subs	r5, #1
 800ec66:	ed01 0a01 	vstr	s0, [r1, #-4]
 800ec6a:	f104 0408 	add.w	r4, r4, #8
 800ec6e:	d015      	beq.n	800ec9c <arm_cmplx_mag_f32+0x160>
 800ec70:	ed54 7a02 	vldr	s15, [r4, #-8]
 800ec74:	ed14 0a01 	vldr	s0, [r4, #-4]
 800ec78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec80:	3104      	adds	r1, #4
 800ec82:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ec86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8e:	dae2      	bge.n	800ec56 <arm_cmplx_mag_f32+0x11a>
 800ec90:	3d01      	subs	r5, #1
 800ec92:	f841 6c04 	str.w	r6, [r1, #-4]
 800ec96:	f104 0408 	add.w	r4, r4, #8
 800ec9a:	d1e9      	bne.n	800ec70 <arm_cmplx_mag_f32+0x134>
 800ec9c:	b004      	add	sp, #16
 800ec9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca2:	f845 7c08 	str.w	r7, [r5, #-8]
 800eca6:	e793      	b.n	800ebd0 <arm_cmplx_mag_f32+0x94>
 800eca8:	f845 7c0c 	str.w	r7, [r5, #-12]
 800ecac:	e777      	b.n	800eb9e <arm_cmplx_mag_f32+0x62>
 800ecae:	eeb0 0a67 	vmov.f32	s0, s15
 800ecb2:	9203      	str	r2, [sp, #12]
 800ecb4:	9102      	str	r1, [sp, #8]
 800ecb6:	9001      	str	r0, [sp, #4]
 800ecb8:	f005 f904 	bl	8013ec4 <sqrtf>
 800ecbc:	a801      	add	r0, sp, #4
 800ecbe:	c807      	ldmia	r0, {r0, r1, r2}
 800ecc0:	e751      	b.n	800eb66 <arm_cmplx_mag_f32+0x2a>
 800ecc2:	eeb0 0a67 	vmov.f32	s0, s15
 800ecc6:	9101      	str	r1, [sp, #4]
 800ecc8:	f005 f8fc 	bl	8013ec4 <sqrtf>
 800eccc:	9901      	ldr	r1, [sp, #4]
 800ecce:	e7c9      	b.n	800ec64 <arm_cmplx_mag_f32+0x128>
 800ecd0:	eeb0 0a67 	vmov.f32	s0, s15
 800ecd4:	9203      	str	r2, [sp, #12]
 800ecd6:	9102      	str	r1, [sp, #8]
 800ecd8:	9001      	str	r0, [sp, #4]
 800ecda:	f005 f8f3 	bl	8013ec4 <sqrtf>
 800ecde:	a801      	add	r0, sp, #4
 800ece0:	c807      	ldmia	r0, {r0, r1, r2}
 800ece2:	e78b      	b.n	800ebfc <arm_cmplx_mag_f32+0xc0>
 800ece4:	eeb0 0a67 	vmov.f32	s0, s15
 800ece8:	9203      	str	r2, [sp, #12]
 800ecea:	9102      	str	r1, [sp, #8]
 800ecec:	9001      	str	r0, [sp, #4]
 800ecee:	f005 f8e9 	bl	8013ec4 <sqrtf>
 800ecf2:	a801      	add	r0, sp, #4
 800ecf4:	c807      	ldmia	r0, {r0, r1, r2}
 800ecf6:	e769      	b.n	800ebcc <arm_cmplx_mag_f32+0x90>
 800ecf8:	eeb0 0a67 	vmov.f32	s0, s15
 800ecfc:	9203      	str	r2, [sp, #12]
 800ecfe:	9102      	str	r1, [sp, #8]
 800ed00:	9001      	str	r0, [sp, #4]
 800ed02:	f005 f8df 	bl	8013ec4 <sqrtf>
 800ed06:	a801      	add	r0, sp, #4
 800ed08:	c807      	ldmia	r0, {r0, r1, r2}
 800ed0a:	e746      	b.n	800eb9a <arm_cmplx_mag_f32+0x5e>

0800ed0c <__errno>:
 800ed0c:	4b01      	ldr	r3, [pc, #4]	; (800ed14 <__errno+0x8>)
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20000274 	.word	0x20000274

0800ed18 <__libc_init_array>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	4d0d      	ldr	r5, [pc, #52]	; (800ed50 <__libc_init_array+0x38>)
 800ed1c:	4c0d      	ldr	r4, [pc, #52]	; (800ed54 <__libc_init_array+0x3c>)
 800ed1e:	1b64      	subs	r4, r4, r5
 800ed20:	10a4      	asrs	r4, r4, #2
 800ed22:	2600      	movs	r6, #0
 800ed24:	42a6      	cmp	r6, r4
 800ed26:	d109      	bne.n	800ed3c <__libc_init_array+0x24>
 800ed28:	4d0b      	ldr	r5, [pc, #44]	; (800ed58 <__libc_init_array+0x40>)
 800ed2a:	4c0c      	ldr	r4, [pc, #48]	; (800ed5c <__libc_init_array+0x44>)
 800ed2c:	f005 fb6a 	bl	8014404 <_init>
 800ed30:	1b64      	subs	r4, r4, r5
 800ed32:	10a4      	asrs	r4, r4, #2
 800ed34:	2600      	movs	r6, #0
 800ed36:	42a6      	cmp	r6, r4
 800ed38:	d105      	bne.n	800ed46 <__libc_init_array+0x2e>
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed40:	4798      	blx	r3
 800ed42:	3601      	adds	r6, #1
 800ed44:	e7ee      	b.n	800ed24 <__libc_init_array+0xc>
 800ed46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed4a:	4798      	blx	r3
 800ed4c:	3601      	adds	r6, #1
 800ed4e:	e7f2      	b.n	800ed36 <__libc_init_array+0x1e>
 800ed50:	08016280 	.word	0x08016280
 800ed54:	08016280 	.word	0x08016280
 800ed58:	08016280 	.word	0x08016280
 800ed5c:	08016284 	.word	0x08016284

0800ed60 <memcpy>:
 800ed60:	440a      	add	r2, r1
 800ed62:	4291      	cmp	r1, r2
 800ed64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed68:	d100      	bne.n	800ed6c <memcpy+0xc>
 800ed6a:	4770      	bx	lr
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed76:	4291      	cmp	r1, r2
 800ed78:	d1f9      	bne.n	800ed6e <memcpy+0xe>
 800ed7a:	bd10      	pop	{r4, pc}

0800ed7c <memset>:
 800ed7c:	4402      	add	r2, r0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d100      	bne.n	800ed86 <memset+0xa>
 800ed84:	4770      	bx	lr
 800ed86:	f803 1b01 	strb.w	r1, [r3], #1
 800ed8a:	e7f9      	b.n	800ed80 <memset+0x4>

0800ed8c <__cvt>:
 800ed8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed90:	ec55 4b10 	vmov	r4, r5, d0
 800ed94:	2d00      	cmp	r5, #0
 800ed96:	460e      	mov	r6, r1
 800ed98:	4619      	mov	r1, r3
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	bfbb      	ittet	lt
 800ed9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eda2:	461d      	movlt	r5, r3
 800eda4:	2300      	movge	r3, #0
 800eda6:	232d      	movlt	r3, #45	; 0x2d
 800eda8:	700b      	strb	r3, [r1, #0]
 800edaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edb0:	4691      	mov	r9, r2
 800edb2:	f023 0820 	bic.w	r8, r3, #32
 800edb6:	bfbc      	itt	lt
 800edb8:	4622      	movlt	r2, r4
 800edba:	4614      	movlt	r4, r2
 800edbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edc0:	d005      	beq.n	800edce <__cvt+0x42>
 800edc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edc6:	d100      	bne.n	800edca <__cvt+0x3e>
 800edc8:	3601      	adds	r6, #1
 800edca:	2102      	movs	r1, #2
 800edcc:	e000      	b.n	800edd0 <__cvt+0x44>
 800edce:	2103      	movs	r1, #3
 800edd0:	ab03      	add	r3, sp, #12
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	ab02      	add	r3, sp, #8
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	ec45 4b10 	vmov	d0, r4, r5
 800eddc:	4653      	mov	r3, sl
 800edde:	4632      	mov	r2, r6
 800ede0:	f001 fe5a 	bl	8010a98 <_dtoa_r>
 800ede4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ede8:	4607      	mov	r7, r0
 800edea:	d102      	bne.n	800edf2 <__cvt+0x66>
 800edec:	f019 0f01 	tst.w	r9, #1
 800edf0:	d022      	beq.n	800ee38 <__cvt+0xac>
 800edf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edf6:	eb07 0906 	add.w	r9, r7, r6
 800edfa:	d110      	bne.n	800ee1e <__cvt+0x92>
 800edfc:	783b      	ldrb	r3, [r7, #0]
 800edfe:	2b30      	cmp	r3, #48	; 0x30
 800ee00:	d10a      	bne.n	800ee18 <__cvt+0x8c>
 800ee02:	2200      	movs	r2, #0
 800ee04:	2300      	movs	r3, #0
 800ee06:	4620      	mov	r0, r4
 800ee08:	4629      	mov	r1, r5
 800ee0a:	f7f1 fe6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee0e:	b918      	cbnz	r0, 800ee18 <__cvt+0x8c>
 800ee10:	f1c6 0601 	rsb	r6, r6, #1
 800ee14:	f8ca 6000 	str.w	r6, [sl]
 800ee18:	f8da 3000 	ldr.w	r3, [sl]
 800ee1c:	4499      	add	r9, r3
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2300      	movs	r3, #0
 800ee22:	4620      	mov	r0, r4
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7f1 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee2a:	b108      	cbz	r0, 800ee30 <__cvt+0xa4>
 800ee2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee30:	2230      	movs	r2, #48	; 0x30
 800ee32:	9b03      	ldr	r3, [sp, #12]
 800ee34:	454b      	cmp	r3, r9
 800ee36:	d307      	bcc.n	800ee48 <__cvt+0xbc>
 800ee38:	9b03      	ldr	r3, [sp, #12]
 800ee3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee3c:	1bdb      	subs	r3, r3, r7
 800ee3e:	4638      	mov	r0, r7
 800ee40:	6013      	str	r3, [r2, #0]
 800ee42:	b004      	add	sp, #16
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	1c59      	adds	r1, r3, #1
 800ee4a:	9103      	str	r1, [sp, #12]
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	e7f0      	b.n	800ee32 <__cvt+0xa6>

0800ee50 <__exponent>:
 800ee50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee52:	4603      	mov	r3, r0
 800ee54:	2900      	cmp	r1, #0
 800ee56:	bfb8      	it	lt
 800ee58:	4249      	neglt	r1, r1
 800ee5a:	f803 2b02 	strb.w	r2, [r3], #2
 800ee5e:	bfb4      	ite	lt
 800ee60:	222d      	movlt	r2, #45	; 0x2d
 800ee62:	222b      	movge	r2, #43	; 0x2b
 800ee64:	2909      	cmp	r1, #9
 800ee66:	7042      	strb	r2, [r0, #1]
 800ee68:	dd2a      	ble.n	800eec0 <__exponent+0x70>
 800ee6a:	f10d 0407 	add.w	r4, sp, #7
 800ee6e:	46a4      	mov	ip, r4
 800ee70:	270a      	movs	r7, #10
 800ee72:	46a6      	mov	lr, r4
 800ee74:	460a      	mov	r2, r1
 800ee76:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee7a:	fb07 1516 	mls	r5, r7, r6, r1
 800ee7e:	3530      	adds	r5, #48	; 0x30
 800ee80:	2a63      	cmp	r2, #99	; 0x63
 800ee82:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	dcf1      	bgt.n	800ee72 <__exponent+0x22>
 800ee8e:	3130      	adds	r1, #48	; 0x30
 800ee90:	f1ae 0502 	sub.w	r5, lr, #2
 800ee94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee98:	1c44      	adds	r4, r0, #1
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	4561      	cmp	r1, ip
 800ee9e:	d30a      	bcc.n	800eeb6 <__exponent+0x66>
 800eea0:	f10d 0209 	add.w	r2, sp, #9
 800eea4:	eba2 020e 	sub.w	r2, r2, lr
 800eea8:	4565      	cmp	r5, ip
 800eeaa:	bf88      	it	hi
 800eeac:	2200      	movhi	r2, #0
 800eeae:	4413      	add	r3, r2
 800eeb0:	1a18      	subs	r0, r3, r0
 800eeb2:	b003      	add	sp, #12
 800eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eebe:	e7ed      	b.n	800ee9c <__exponent+0x4c>
 800eec0:	2330      	movs	r3, #48	; 0x30
 800eec2:	3130      	adds	r1, #48	; 0x30
 800eec4:	7083      	strb	r3, [r0, #2]
 800eec6:	70c1      	strb	r1, [r0, #3]
 800eec8:	1d03      	adds	r3, r0, #4
 800eeca:	e7f1      	b.n	800eeb0 <__exponent+0x60>

0800eecc <_printf_float>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	ed2d 8b02 	vpush	{d8}
 800eed4:	b08d      	sub	sp, #52	; 0x34
 800eed6:	460c      	mov	r4, r1
 800eed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eedc:	4616      	mov	r6, r2
 800eede:	461f      	mov	r7, r3
 800eee0:	4605      	mov	r5, r0
 800eee2:	f002 ff35 	bl	8011d50 <_localeconv_r>
 800eee6:	f8d0 a000 	ldr.w	sl, [r0]
 800eeea:	4650      	mov	r0, sl
 800eeec:	f7f1 f97a 	bl	80001e4 <strlen>
 800eef0:	2300      	movs	r3, #0
 800eef2:	930a      	str	r3, [sp, #40]	; 0x28
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	9305      	str	r3, [sp, #20]
 800eef8:	f8d8 3000 	ldr.w	r3, [r8]
 800eefc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef00:	3307      	adds	r3, #7
 800ef02:	f023 0307 	bic.w	r3, r3, #7
 800ef06:	f103 0208 	add.w	r2, r3, #8
 800ef0a:	f8c8 2000 	str.w	r2, [r8]
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef1e:	9307      	str	r3, [sp, #28]
 800ef20:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef24:	ee08 0a10 	vmov	s16, r0
 800ef28:	4b9f      	ldr	r3, [pc, #636]	; (800f1a8 <_printf_float+0x2dc>)
 800ef2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef32:	f7f1 fe0b 	bl	8000b4c <__aeabi_dcmpun>
 800ef36:	bb88      	cbnz	r0, 800ef9c <_printf_float+0xd0>
 800ef38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3c:	4b9a      	ldr	r3, [pc, #616]	; (800f1a8 <_printf_float+0x2dc>)
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef42:	f7f1 fde5 	bl	8000b10 <__aeabi_dcmple>
 800ef46:	bb48      	cbnz	r0, 800ef9c <_printf_float+0xd0>
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	4649      	mov	r1, r9
 800ef50:	f7f1 fdd4 	bl	8000afc <__aeabi_dcmplt>
 800ef54:	b110      	cbz	r0, 800ef5c <_printf_float+0x90>
 800ef56:	232d      	movs	r3, #45	; 0x2d
 800ef58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef5c:	4b93      	ldr	r3, [pc, #588]	; (800f1ac <_printf_float+0x2e0>)
 800ef5e:	4894      	ldr	r0, [pc, #592]	; (800f1b0 <_printf_float+0x2e4>)
 800ef60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef64:	bf94      	ite	ls
 800ef66:	4698      	movls	r8, r3
 800ef68:	4680      	movhi	r8, r0
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	6123      	str	r3, [r4, #16]
 800ef6e:	9b05      	ldr	r3, [sp, #20]
 800ef70:	f023 0204 	bic.w	r2, r3, #4
 800ef74:	6022      	str	r2, [r4, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	9700      	str	r7, [sp, #0]
 800ef7c:	4633      	mov	r3, r6
 800ef7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef80:	4621      	mov	r1, r4
 800ef82:	4628      	mov	r0, r5
 800ef84:	f000 f9d8 	bl	800f338 <_printf_common>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f040 8090 	bne.w	800f0ae <_printf_float+0x1e2>
 800ef8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef92:	b00d      	add	sp, #52	; 0x34
 800ef94:	ecbd 8b02 	vpop	{d8}
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	4642      	mov	r2, r8
 800ef9e:	464b      	mov	r3, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fdd2 	bl	8000b4c <__aeabi_dcmpun>
 800efa8:	b140      	cbz	r0, 800efbc <_printf_float+0xf0>
 800efaa:	464b      	mov	r3, r9
 800efac:	2b00      	cmp	r3, #0
 800efae:	bfbc      	itt	lt
 800efb0:	232d      	movlt	r3, #45	; 0x2d
 800efb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efb6:	487f      	ldr	r0, [pc, #508]	; (800f1b4 <_printf_float+0x2e8>)
 800efb8:	4b7f      	ldr	r3, [pc, #508]	; (800f1b8 <_printf_float+0x2ec>)
 800efba:	e7d1      	b.n	800ef60 <_printf_float+0x94>
 800efbc:	6863      	ldr	r3, [r4, #4]
 800efbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efc2:	9206      	str	r2, [sp, #24]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	d13f      	bne.n	800f048 <_printf_float+0x17c>
 800efc8:	2306      	movs	r3, #6
 800efca:	6063      	str	r3, [r4, #4]
 800efcc:	9b05      	ldr	r3, [sp, #20]
 800efce:	6861      	ldr	r1, [r4, #4]
 800efd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efd4:	2300      	movs	r3, #0
 800efd6:	9303      	str	r3, [sp, #12]
 800efd8:	ab0a      	add	r3, sp, #40	; 0x28
 800efda:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efde:	ab09      	add	r3, sp, #36	; 0x24
 800efe0:	ec49 8b10 	vmov	d0, r8, r9
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff fecd 	bl	800ed8c <__cvt>
 800eff2:	9b06      	ldr	r3, [sp, #24]
 800eff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eff6:	2b47      	cmp	r3, #71	; 0x47
 800eff8:	4680      	mov	r8, r0
 800effa:	d108      	bne.n	800f00e <_printf_float+0x142>
 800effc:	1cc8      	adds	r0, r1, #3
 800effe:	db02      	blt.n	800f006 <_printf_float+0x13a>
 800f000:	6863      	ldr	r3, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	dd41      	ble.n	800f08a <_printf_float+0x1be>
 800f006:	f1ab 0b02 	sub.w	fp, fp, #2
 800f00a:	fa5f fb8b 	uxtb.w	fp, fp
 800f00e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f012:	d820      	bhi.n	800f056 <_printf_float+0x18a>
 800f014:	3901      	subs	r1, #1
 800f016:	465a      	mov	r2, fp
 800f018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f01c:	9109      	str	r1, [sp, #36]	; 0x24
 800f01e:	f7ff ff17 	bl	800ee50 <__exponent>
 800f022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f024:	1813      	adds	r3, r2, r0
 800f026:	2a01      	cmp	r2, #1
 800f028:	4681      	mov	r9, r0
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	dc02      	bgt.n	800f034 <_printf_float+0x168>
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	07d2      	lsls	r2, r2, #31
 800f032:	d501      	bpl.n	800f038 <_printf_float+0x16c>
 800f034:	3301      	adds	r3, #1
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d09c      	beq.n	800ef7a <_printf_float+0xae>
 800f040:	232d      	movs	r3, #45	; 0x2d
 800f042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f046:	e798      	b.n	800ef7a <_printf_float+0xae>
 800f048:	9a06      	ldr	r2, [sp, #24]
 800f04a:	2a47      	cmp	r2, #71	; 0x47
 800f04c:	d1be      	bne.n	800efcc <_printf_float+0x100>
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1bc      	bne.n	800efcc <_printf_float+0x100>
 800f052:	2301      	movs	r3, #1
 800f054:	e7b9      	b.n	800efca <_printf_float+0xfe>
 800f056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f05a:	d118      	bne.n	800f08e <_printf_float+0x1c2>
 800f05c:	2900      	cmp	r1, #0
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	dd0b      	ble.n	800f07a <_printf_float+0x1ae>
 800f062:	6121      	str	r1, [r4, #16]
 800f064:	b913      	cbnz	r3, 800f06c <_printf_float+0x1a0>
 800f066:	6822      	ldr	r2, [r4, #0]
 800f068:	07d0      	lsls	r0, r2, #31
 800f06a:	d502      	bpl.n	800f072 <_printf_float+0x1a6>
 800f06c:	3301      	adds	r3, #1
 800f06e:	440b      	add	r3, r1
 800f070:	6123      	str	r3, [r4, #16]
 800f072:	65a1      	str	r1, [r4, #88]	; 0x58
 800f074:	f04f 0900 	mov.w	r9, #0
 800f078:	e7de      	b.n	800f038 <_printf_float+0x16c>
 800f07a:	b913      	cbnz	r3, 800f082 <_printf_float+0x1b6>
 800f07c:	6822      	ldr	r2, [r4, #0]
 800f07e:	07d2      	lsls	r2, r2, #31
 800f080:	d501      	bpl.n	800f086 <_printf_float+0x1ba>
 800f082:	3302      	adds	r3, #2
 800f084:	e7f4      	b.n	800f070 <_printf_float+0x1a4>
 800f086:	2301      	movs	r3, #1
 800f088:	e7f2      	b.n	800f070 <_printf_float+0x1a4>
 800f08a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f090:	4299      	cmp	r1, r3
 800f092:	db05      	blt.n	800f0a0 <_printf_float+0x1d4>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	6121      	str	r1, [r4, #16]
 800f098:	07d8      	lsls	r0, r3, #31
 800f09a:	d5ea      	bpl.n	800f072 <_printf_float+0x1a6>
 800f09c:	1c4b      	adds	r3, r1, #1
 800f09e:	e7e7      	b.n	800f070 <_printf_float+0x1a4>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	bfd4      	ite	le
 800f0a4:	f1c1 0202 	rsble	r2, r1, #2
 800f0a8:	2201      	movgt	r2, #1
 800f0aa:	4413      	add	r3, r2
 800f0ac:	e7e0      	b.n	800f070 <_printf_float+0x1a4>
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	055a      	lsls	r2, r3, #21
 800f0b2:	d407      	bmi.n	800f0c4 <_printf_float+0x1f8>
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	47b8      	blx	r7
 800f0be:	3001      	adds	r0, #1
 800f0c0:	d12c      	bne.n	800f11c <_printf_float+0x250>
 800f0c2:	e764      	b.n	800ef8e <_printf_float+0xc2>
 800f0c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0c8:	f240 80e0 	bls.w	800f28c <_printf_float+0x3c0>
 800f0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f7f1 fd08 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d034      	beq.n	800f146 <_printf_float+0x27a>
 800f0dc:	4a37      	ldr	r2, [pc, #220]	; (800f1bc <_printf_float+0x2f0>)
 800f0de:	2301      	movs	r3, #1
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f af51 	beq.w	800ef8e <_printf_float+0xc2>
 800f0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	db02      	blt.n	800f0fa <_printf_float+0x22e>
 800f0f4:	6823      	ldr	r3, [r4, #0]
 800f0f6:	07d8      	lsls	r0, r3, #31
 800f0f8:	d510      	bpl.n	800f11c <_printf_float+0x250>
 800f0fa:	ee18 3a10 	vmov	r3, s16
 800f0fe:	4652      	mov	r2, sl
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	f43f af41 	beq.w	800ef8e <_printf_float+0xc2>
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	f104 091a 	add.w	r9, r4, #26
 800f114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f116:	3b01      	subs	r3, #1
 800f118:	4543      	cmp	r3, r8
 800f11a:	dc09      	bgt.n	800f130 <_printf_float+0x264>
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	079b      	lsls	r3, r3, #30
 800f120:	f100 8105 	bmi.w	800f32e <_printf_float+0x462>
 800f124:	68e0      	ldr	r0, [r4, #12]
 800f126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f128:	4298      	cmp	r0, r3
 800f12a:	bfb8      	it	lt
 800f12c:	4618      	movlt	r0, r3
 800f12e:	e730      	b.n	800ef92 <_printf_float+0xc6>
 800f130:	2301      	movs	r3, #1
 800f132:	464a      	mov	r2, r9
 800f134:	4631      	mov	r1, r6
 800f136:	4628      	mov	r0, r5
 800f138:	47b8      	blx	r7
 800f13a:	3001      	adds	r0, #1
 800f13c:	f43f af27 	beq.w	800ef8e <_printf_float+0xc2>
 800f140:	f108 0801 	add.w	r8, r8, #1
 800f144:	e7e6      	b.n	800f114 <_printf_float+0x248>
 800f146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	dc39      	bgt.n	800f1c0 <_printf_float+0x2f4>
 800f14c:	4a1b      	ldr	r2, [pc, #108]	; (800f1bc <_printf_float+0x2f0>)
 800f14e:	2301      	movs	r3, #1
 800f150:	4631      	mov	r1, r6
 800f152:	4628      	mov	r0, r5
 800f154:	47b8      	blx	r7
 800f156:	3001      	adds	r0, #1
 800f158:	f43f af19 	beq.w	800ef8e <_printf_float+0xc2>
 800f15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f160:	4313      	orrs	r3, r2
 800f162:	d102      	bne.n	800f16a <_printf_float+0x29e>
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	07d9      	lsls	r1, r3, #31
 800f168:	d5d8      	bpl.n	800f11c <_printf_float+0x250>
 800f16a:	ee18 3a10 	vmov	r3, s16
 800f16e:	4652      	mov	r2, sl
 800f170:	4631      	mov	r1, r6
 800f172:	4628      	mov	r0, r5
 800f174:	47b8      	blx	r7
 800f176:	3001      	adds	r0, #1
 800f178:	f43f af09 	beq.w	800ef8e <_printf_float+0xc2>
 800f17c:	f04f 0900 	mov.w	r9, #0
 800f180:	f104 0a1a 	add.w	sl, r4, #26
 800f184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f186:	425b      	negs	r3, r3
 800f188:	454b      	cmp	r3, r9
 800f18a:	dc01      	bgt.n	800f190 <_printf_float+0x2c4>
 800f18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f18e:	e792      	b.n	800f0b6 <_printf_float+0x1ea>
 800f190:	2301      	movs	r3, #1
 800f192:	4652      	mov	r2, sl
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	47b8      	blx	r7
 800f19a:	3001      	adds	r0, #1
 800f19c:	f43f aef7 	beq.w	800ef8e <_printf_float+0xc2>
 800f1a0:	f109 0901 	add.w	r9, r9, #1
 800f1a4:	e7ee      	b.n	800f184 <_printf_float+0x2b8>
 800f1a6:	bf00      	nop
 800f1a8:	7fefffff 	.word	0x7fefffff
 800f1ac:	08015e3c 	.word	0x08015e3c
 800f1b0:	08015e40 	.word	0x08015e40
 800f1b4:	08015e48 	.word	0x08015e48
 800f1b8:	08015e44 	.word	0x08015e44
 800f1bc:	08016151 	.word	0x08016151
 800f1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	bfa8      	it	ge
 800f1c8:	461a      	movge	r2, r3
 800f1ca:	2a00      	cmp	r2, #0
 800f1cc:	4691      	mov	r9, r2
 800f1ce:	dc37      	bgt.n	800f240 <_printf_float+0x374>
 800f1d0:	f04f 0b00 	mov.w	fp, #0
 800f1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1d8:	f104 021a 	add.w	r2, r4, #26
 800f1dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1de:	9305      	str	r3, [sp, #20]
 800f1e0:	eba3 0309 	sub.w	r3, r3, r9
 800f1e4:	455b      	cmp	r3, fp
 800f1e6:	dc33      	bgt.n	800f250 <_printf_float+0x384>
 800f1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	db3b      	blt.n	800f268 <_printf_float+0x39c>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	07da      	lsls	r2, r3, #31
 800f1f4:	d438      	bmi.n	800f268 <_printf_float+0x39c>
 800f1f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1f8:	9b05      	ldr	r3, [sp, #20]
 800f1fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	eba2 0901 	sub.w	r9, r2, r1
 800f202:	4599      	cmp	r9, r3
 800f204:	bfa8      	it	ge
 800f206:	4699      	movge	r9, r3
 800f208:	f1b9 0f00 	cmp.w	r9, #0
 800f20c:	dc35      	bgt.n	800f27a <_printf_float+0x3ae>
 800f20e:	f04f 0800 	mov.w	r8, #0
 800f212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f216:	f104 0a1a 	add.w	sl, r4, #26
 800f21a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f21e:	1a9b      	subs	r3, r3, r2
 800f220:	eba3 0309 	sub.w	r3, r3, r9
 800f224:	4543      	cmp	r3, r8
 800f226:	f77f af79 	ble.w	800f11c <_printf_float+0x250>
 800f22a:	2301      	movs	r3, #1
 800f22c:	4652      	mov	r2, sl
 800f22e:	4631      	mov	r1, r6
 800f230:	4628      	mov	r0, r5
 800f232:	47b8      	blx	r7
 800f234:	3001      	adds	r0, #1
 800f236:	f43f aeaa 	beq.w	800ef8e <_printf_float+0xc2>
 800f23a:	f108 0801 	add.w	r8, r8, #1
 800f23e:	e7ec      	b.n	800f21a <_printf_float+0x34e>
 800f240:	4613      	mov	r3, r2
 800f242:	4631      	mov	r1, r6
 800f244:	4642      	mov	r2, r8
 800f246:	4628      	mov	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	3001      	adds	r0, #1
 800f24c:	d1c0      	bne.n	800f1d0 <_printf_float+0x304>
 800f24e:	e69e      	b.n	800ef8e <_printf_float+0xc2>
 800f250:	2301      	movs	r3, #1
 800f252:	4631      	mov	r1, r6
 800f254:	4628      	mov	r0, r5
 800f256:	9205      	str	r2, [sp, #20]
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f ae97 	beq.w	800ef8e <_printf_float+0xc2>
 800f260:	9a05      	ldr	r2, [sp, #20]
 800f262:	f10b 0b01 	add.w	fp, fp, #1
 800f266:	e7b9      	b.n	800f1dc <_printf_float+0x310>
 800f268:	ee18 3a10 	vmov	r3, s16
 800f26c:	4652      	mov	r2, sl
 800f26e:	4631      	mov	r1, r6
 800f270:	4628      	mov	r0, r5
 800f272:	47b8      	blx	r7
 800f274:	3001      	adds	r0, #1
 800f276:	d1be      	bne.n	800f1f6 <_printf_float+0x32a>
 800f278:	e689      	b.n	800ef8e <_printf_float+0xc2>
 800f27a:	9a05      	ldr	r2, [sp, #20]
 800f27c:	464b      	mov	r3, r9
 800f27e:	4442      	add	r2, r8
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	d1c1      	bne.n	800f20e <_printf_float+0x342>
 800f28a:	e680      	b.n	800ef8e <_printf_float+0xc2>
 800f28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f28e:	2a01      	cmp	r2, #1
 800f290:	dc01      	bgt.n	800f296 <_printf_float+0x3ca>
 800f292:	07db      	lsls	r3, r3, #31
 800f294:	d538      	bpl.n	800f308 <_printf_float+0x43c>
 800f296:	2301      	movs	r3, #1
 800f298:	4642      	mov	r2, r8
 800f29a:	4631      	mov	r1, r6
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b8      	blx	r7
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	f43f ae74 	beq.w	800ef8e <_printf_float+0xc2>
 800f2a6:	ee18 3a10 	vmov	r3, s16
 800f2aa:	4652      	mov	r2, sl
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f43f ae6b 	beq.w	800ef8e <_printf_float+0xc2>
 800f2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f7f1 fc12 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2c4:	b9d8      	cbnz	r0, 800f2fe <_printf_float+0x432>
 800f2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c8:	f108 0201 	add.w	r2, r8, #1
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b8      	blx	r7
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d10e      	bne.n	800f2f6 <_printf_float+0x42a>
 800f2d8:	e659      	b.n	800ef8e <_printf_float+0xc2>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4652      	mov	r2, sl
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f ae52 	beq.w	800ef8e <_printf_float+0xc2>
 800f2ea:	f108 0801 	add.w	r8, r8, #1
 800f2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	4543      	cmp	r3, r8
 800f2f4:	dcf1      	bgt.n	800f2da <_printf_float+0x40e>
 800f2f6:	464b      	mov	r3, r9
 800f2f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2fc:	e6dc      	b.n	800f0b8 <_printf_float+0x1ec>
 800f2fe:	f04f 0800 	mov.w	r8, #0
 800f302:	f104 0a1a 	add.w	sl, r4, #26
 800f306:	e7f2      	b.n	800f2ee <_printf_float+0x422>
 800f308:	2301      	movs	r3, #1
 800f30a:	4642      	mov	r2, r8
 800f30c:	e7df      	b.n	800f2ce <_printf_float+0x402>
 800f30e:	2301      	movs	r3, #1
 800f310:	464a      	mov	r2, r9
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	f43f ae38 	beq.w	800ef8e <_printf_float+0xc2>
 800f31e:	f108 0801 	add.w	r8, r8, #1
 800f322:	68e3      	ldr	r3, [r4, #12]
 800f324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f326:	1a5b      	subs	r3, r3, r1
 800f328:	4543      	cmp	r3, r8
 800f32a:	dcf0      	bgt.n	800f30e <_printf_float+0x442>
 800f32c:	e6fa      	b.n	800f124 <_printf_float+0x258>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	f104 0919 	add.w	r9, r4, #25
 800f336:	e7f4      	b.n	800f322 <_printf_float+0x456>

0800f338 <_printf_common>:
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	4616      	mov	r6, r2
 800f33e:	4699      	mov	r9, r3
 800f340:	688a      	ldr	r2, [r1, #8]
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f348:	4293      	cmp	r3, r2
 800f34a:	bfb8      	it	lt
 800f34c:	4613      	movlt	r3, r2
 800f34e:	6033      	str	r3, [r6, #0]
 800f350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f354:	4607      	mov	r7, r0
 800f356:	460c      	mov	r4, r1
 800f358:	b10a      	cbz	r2, 800f35e <_printf_common+0x26>
 800f35a:	3301      	adds	r3, #1
 800f35c:	6033      	str	r3, [r6, #0]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	0699      	lsls	r1, r3, #26
 800f362:	bf42      	ittt	mi
 800f364:	6833      	ldrmi	r3, [r6, #0]
 800f366:	3302      	addmi	r3, #2
 800f368:	6033      	strmi	r3, [r6, #0]
 800f36a:	6825      	ldr	r5, [r4, #0]
 800f36c:	f015 0506 	ands.w	r5, r5, #6
 800f370:	d106      	bne.n	800f380 <_printf_common+0x48>
 800f372:	f104 0a19 	add.w	sl, r4, #25
 800f376:	68e3      	ldr	r3, [r4, #12]
 800f378:	6832      	ldr	r2, [r6, #0]
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	42ab      	cmp	r3, r5
 800f37e:	dc26      	bgt.n	800f3ce <_printf_common+0x96>
 800f380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f384:	1e13      	subs	r3, r2, #0
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	bf18      	it	ne
 800f38a:	2301      	movne	r3, #1
 800f38c:	0692      	lsls	r2, r2, #26
 800f38e:	d42b      	bmi.n	800f3e8 <_printf_common+0xb0>
 800f390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f394:	4649      	mov	r1, r9
 800f396:	4638      	mov	r0, r7
 800f398:	47c0      	blx	r8
 800f39a:	3001      	adds	r0, #1
 800f39c:	d01e      	beq.n	800f3dc <_printf_common+0xa4>
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	68e5      	ldr	r5, [r4, #12]
 800f3a2:	6832      	ldr	r2, [r6, #0]
 800f3a4:	f003 0306 	and.w	r3, r3, #6
 800f3a8:	2b04      	cmp	r3, #4
 800f3aa:	bf08      	it	eq
 800f3ac:	1aad      	subeq	r5, r5, r2
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	bf0c      	ite	eq
 800f3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3b8:	2500      	movne	r5, #0
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	bfc4      	itt	gt
 800f3be:	1a9b      	subgt	r3, r3, r2
 800f3c0:	18ed      	addgt	r5, r5, r3
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	341a      	adds	r4, #26
 800f3c6:	42b5      	cmp	r5, r6
 800f3c8:	d11a      	bne.n	800f400 <_printf_common+0xc8>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	e008      	b.n	800f3e0 <_printf_common+0xa8>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	47c0      	blx	r8
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d103      	bne.n	800f3e4 <_printf_common+0xac>
 800f3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e4:	3501      	adds	r5, #1
 800f3e6:	e7c6      	b.n	800f376 <_printf_common+0x3e>
 800f3e8:	18e1      	adds	r1, r4, r3
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	2030      	movs	r0, #48	; 0x30
 800f3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3f2:	4422      	add	r2, r4
 800f3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	e7c7      	b.n	800f390 <_printf_common+0x58>
 800f400:	2301      	movs	r3, #1
 800f402:	4622      	mov	r2, r4
 800f404:	4649      	mov	r1, r9
 800f406:	4638      	mov	r0, r7
 800f408:	47c0      	blx	r8
 800f40a:	3001      	adds	r0, #1
 800f40c:	d0e6      	beq.n	800f3dc <_printf_common+0xa4>
 800f40e:	3601      	adds	r6, #1
 800f410:	e7d9      	b.n	800f3c6 <_printf_common+0x8e>
	...

0800f414 <_printf_i>:
 800f414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	460c      	mov	r4, r1
 800f41a:	4691      	mov	r9, r2
 800f41c:	7e27      	ldrb	r7, [r4, #24]
 800f41e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f420:	2f78      	cmp	r7, #120	; 0x78
 800f422:	4680      	mov	r8, r0
 800f424:	469a      	mov	sl, r3
 800f426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f42a:	d807      	bhi.n	800f43c <_printf_i+0x28>
 800f42c:	2f62      	cmp	r7, #98	; 0x62
 800f42e:	d80a      	bhi.n	800f446 <_printf_i+0x32>
 800f430:	2f00      	cmp	r7, #0
 800f432:	f000 80d8 	beq.w	800f5e6 <_printf_i+0x1d2>
 800f436:	2f58      	cmp	r7, #88	; 0x58
 800f438:	f000 80a3 	beq.w	800f582 <_printf_i+0x16e>
 800f43c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f444:	e03a      	b.n	800f4bc <_printf_i+0xa8>
 800f446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f44a:	2b15      	cmp	r3, #21
 800f44c:	d8f6      	bhi.n	800f43c <_printf_i+0x28>
 800f44e:	a001      	add	r0, pc, #4	; (adr r0, 800f454 <_printf_i+0x40>)
 800f450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f454:	0800f4ad 	.word	0x0800f4ad
 800f458:	0800f4c1 	.word	0x0800f4c1
 800f45c:	0800f43d 	.word	0x0800f43d
 800f460:	0800f43d 	.word	0x0800f43d
 800f464:	0800f43d 	.word	0x0800f43d
 800f468:	0800f43d 	.word	0x0800f43d
 800f46c:	0800f4c1 	.word	0x0800f4c1
 800f470:	0800f43d 	.word	0x0800f43d
 800f474:	0800f43d 	.word	0x0800f43d
 800f478:	0800f43d 	.word	0x0800f43d
 800f47c:	0800f43d 	.word	0x0800f43d
 800f480:	0800f5cd 	.word	0x0800f5cd
 800f484:	0800f4f1 	.word	0x0800f4f1
 800f488:	0800f5af 	.word	0x0800f5af
 800f48c:	0800f43d 	.word	0x0800f43d
 800f490:	0800f43d 	.word	0x0800f43d
 800f494:	0800f5ef 	.word	0x0800f5ef
 800f498:	0800f43d 	.word	0x0800f43d
 800f49c:	0800f4f1 	.word	0x0800f4f1
 800f4a0:	0800f43d 	.word	0x0800f43d
 800f4a4:	0800f43d 	.word	0x0800f43d
 800f4a8:	0800f5b7 	.word	0x0800f5b7
 800f4ac:	680b      	ldr	r3, [r1, #0]
 800f4ae:	1d1a      	adds	r2, r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	600a      	str	r2, [r1, #0]
 800f4b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0a3      	b.n	800f608 <_printf_i+0x1f4>
 800f4c0:	6825      	ldr	r5, [r4, #0]
 800f4c2:	6808      	ldr	r0, [r1, #0]
 800f4c4:	062e      	lsls	r6, r5, #24
 800f4c6:	f100 0304 	add.w	r3, r0, #4
 800f4ca:	d50a      	bpl.n	800f4e2 <_printf_i+0xce>
 800f4cc:	6805      	ldr	r5, [r0, #0]
 800f4ce:	600b      	str	r3, [r1, #0]
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	da03      	bge.n	800f4dc <_printf_i+0xc8>
 800f4d4:	232d      	movs	r3, #45	; 0x2d
 800f4d6:	426d      	negs	r5, r5
 800f4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4dc:	485e      	ldr	r0, [pc, #376]	; (800f658 <_printf_i+0x244>)
 800f4de:	230a      	movs	r3, #10
 800f4e0:	e019      	b.n	800f516 <_printf_i+0x102>
 800f4e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f4e6:	6805      	ldr	r5, [r0, #0]
 800f4e8:	600b      	str	r3, [r1, #0]
 800f4ea:	bf18      	it	ne
 800f4ec:	b22d      	sxthne	r5, r5
 800f4ee:	e7ef      	b.n	800f4d0 <_printf_i+0xbc>
 800f4f0:	680b      	ldr	r3, [r1, #0]
 800f4f2:	6825      	ldr	r5, [r4, #0]
 800f4f4:	1d18      	adds	r0, r3, #4
 800f4f6:	6008      	str	r0, [r1, #0]
 800f4f8:	0628      	lsls	r0, r5, #24
 800f4fa:	d501      	bpl.n	800f500 <_printf_i+0xec>
 800f4fc:	681d      	ldr	r5, [r3, #0]
 800f4fe:	e002      	b.n	800f506 <_printf_i+0xf2>
 800f500:	0669      	lsls	r1, r5, #25
 800f502:	d5fb      	bpl.n	800f4fc <_printf_i+0xe8>
 800f504:	881d      	ldrh	r5, [r3, #0]
 800f506:	4854      	ldr	r0, [pc, #336]	; (800f658 <_printf_i+0x244>)
 800f508:	2f6f      	cmp	r7, #111	; 0x6f
 800f50a:	bf0c      	ite	eq
 800f50c:	2308      	moveq	r3, #8
 800f50e:	230a      	movne	r3, #10
 800f510:	2100      	movs	r1, #0
 800f512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f516:	6866      	ldr	r6, [r4, #4]
 800f518:	60a6      	str	r6, [r4, #8]
 800f51a:	2e00      	cmp	r6, #0
 800f51c:	bfa2      	ittt	ge
 800f51e:	6821      	ldrge	r1, [r4, #0]
 800f520:	f021 0104 	bicge.w	r1, r1, #4
 800f524:	6021      	strge	r1, [r4, #0]
 800f526:	b90d      	cbnz	r5, 800f52c <_printf_i+0x118>
 800f528:	2e00      	cmp	r6, #0
 800f52a:	d04d      	beq.n	800f5c8 <_printf_i+0x1b4>
 800f52c:	4616      	mov	r6, r2
 800f52e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f532:	fb03 5711 	mls	r7, r3, r1, r5
 800f536:	5dc7      	ldrb	r7, [r0, r7]
 800f538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f53c:	462f      	mov	r7, r5
 800f53e:	42bb      	cmp	r3, r7
 800f540:	460d      	mov	r5, r1
 800f542:	d9f4      	bls.n	800f52e <_printf_i+0x11a>
 800f544:	2b08      	cmp	r3, #8
 800f546:	d10b      	bne.n	800f560 <_printf_i+0x14c>
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	07df      	lsls	r7, r3, #31
 800f54c:	d508      	bpl.n	800f560 <_printf_i+0x14c>
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	6861      	ldr	r1, [r4, #4]
 800f552:	4299      	cmp	r1, r3
 800f554:	bfde      	ittt	le
 800f556:	2330      	movle	r3, #48	; 0x30
 800f558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f55c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f560:	1b92      	subs	r2, r2, r6
 800f562:	6122      	str	r2, [r4, #16]
 800f564:	f8cd a000 	str.w	sl, [sp]
 800f568:	464b      	mov	r3, r9
 800f56a:	aa03      	add	r2, sp, #12
 800f56c:	4621      	mov	r1, r4
 800f56e:	4640      	mov	r0, r8
 800f570:	f7ff fee2 	bl	800f338 <_printf_common>
 800f574:	3001      	adds	r0, #1
 800f576:	d14c      	bne.n	800f612 <_printf_i+0x1fe>
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	b004      	add	sp, #16
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	4835      	ldr	r0, [pc, #212]	; (800f658 <_printf_i+0x244>)
 800f584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f588:	6823      	ldr	r3, [r4, #0]
 800f58a:	680e      	ldr	r6, [r1, #0]
 800f58c:	061f      	lsls	r7, r3, #24
 800f58e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f592:	600e      	str	r6, [r1, #0]
 800f594:	d514      	bpl.n	800f5c0 <_printf_i+0x1ac>
 800f596:	07d9      	lsls	r1, r3, #31
 800f598:	bf44      	itt	mi
 800f59a:	f043 0320 	orrmi.w	r3, r3, #32
 800f59e:	6023      	strmi	r3, [r4, #0]
 800f5a0:	b91d      	cbnz	r5, 800f5aa <_printf_i+0x196>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	f023 0320 	bic.w	r3, r3, #32
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	2310      	movs	r3, #16
 800f5ac:	e7b0      	b.n	800f510 <_printf_i+0xfc>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f043 0320 	orr.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2378      	movs	r3, #120	; 0x78
 800f5b8:	4828      	ldr	r0, [pc, #160]	; (800f65c <_printf_i+0x248>)
 800f5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5be:	e7e3      	b.n	800f588 <_printf_i+0x174>
 800f5c0:	065e      	lsls	r6, r3, #25
 800f5c2:	bf48      	it	mi
 800f5c4:	b2ad      	uxthmi	r5, r5
 800f5c6:	e7e6      	b.n	800f596 <_printf_i+0x182>
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	e7bb      	b.n	800f544 <_printf_i+0x130>
 800f5cc:	680b      	ldr	r3, [r1, #0]
 800f5ce:	6826      	ldr	r6, [r4, #0]
 800f5d0:	6960      	ldr	r0, [r4, #20]
 800f5d2:	1d1d      	adds	r5, r3, #4
 800f5d4:	600d      	str	r5, [r1, #0]
 800f5d6:	0635      	lsls	r5, r6, #24
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0x1cc>
 800f5dc:	6018      	str	r0, [r3, #0]
 800f5de:	e002      	b.n	800f5e6 <_printf_i+0x1d2>
 800f5e0:	0671      	lsls	r1, r6, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0x1c8>
 800f5e4:	8018      	strh	r0, [r3, #0]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4616      	mov	r6, r2
 800f5ec:	e7ba      	b.n	800f564 <_printf_i+0x150>
 800f5ee:	680b      	ldr	r3, [r1, #0]
 800f5f0:	1d1a      	adds	r2, r3, #4
 800f5f2:	600a      	str	r2, [r1, #0]
 800f5f4:	681e      	ldr	r6, [r3, #0]
 800f5f6:	6862      	ldr	r2, [r4, #4]
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f7f0 fe00 	bl	8000200 <memchr>
 800f600:	b108      	cbz	r0, 800f606 <_printf_i+0x1f2>
 800f602:	1b80      	subs	r0, r0, r6
 800f604:	6060      	str	r0, [r4, #4]
 800f606:	6863      	ldr	r3, [r4, #4]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	2300      	movs	r3, #0
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	e7a8      	b.n	800f564 <_printf_i+0x150>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	4632      	mov	r2, r6
 800f616:	4649      	mov	r1, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	47d0      	blx	sl
 800f61c:	3001      	adds	r0, #1
 800f61e:	d0ab      	beq.n	800f578 <_printf_i+0x164>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	079b      	lsls	r3, r3, #30
 800f624:	d413      	bmi.n	800f64e <_printf_i+0x23a>
 800f626:	68e0      	ldr	r0, [r4, #12]
 800f628:	9b03      	ldr	r3, [sp, #12]
 800f62a:	4298      	cmp	r0, r3
 800f62c:	bfb8      	it	lt
 800f62e:	4618      	movlt	r0, r3
 800f630:	e7a4      	b.n	800f57c <_printf_i+0x168>
 800f632:	2301      	movs	r3, #1
 800f634:	4632      	mov	r2, r6
 800f636:	4649      	mov	r1, r9
 800f638:	4640      	mov	r0, r8
 800f63a:	47d0      	blx	sl
 800f63c:	3001      	adds	r0, #1
 800f63e:	d09b      	beq.n	800f578 <_printf_i+0x164>
 800f640:	3501      	adds	r5, #1
 800f642:	68e3      	ldr	r3, [r4, #12]
 800f644:	9903      	ldr	r1, [sp, #12]
 800f646:	1a5b      	subs	r3, r3, r1
 800f648:	42ab      	cmp	r3, r5
 800f64a:	dcf2      	bgt.n	800f632 <_printf_i+0x21e>
 800f64c:	e7eb      	b.n	800f626 <_printf_i+0x212>
 800f64e:	2500      	movs	r5, #0
 800f650:	f104 0619 	add.w	r6, r4, #25
 800f654:	e7f5      	b.n	800f642 <_printf_i+0x22e>
 800f656:	bf00      	nop
 800f658:	08015e4c 	.word	0x08015e4c
 800f65c:	08015e5d 	.word	0x08015e5d

0800f660 <_scanf_float>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	b087      	sub	sp, #28
 800f666:	4617      	mov	r7, r2
 800f668:	9303      	str	r3, [sp, #12]
 800f66a:	688b      	ldr	r3, [r1, #8]
 800f66c:	1e5a      	subs	r2, r3, #1
 800f66e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f672:	bf83      	ittte	hi
 800f674:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f678:	195b      	addhi	r3, r3, r5
 800f67a:	9302      	strhi	r3, [sp, #8]
 800f67c:	2300      	movls	r3, #0
 800f67e:	bf86      	itte	hi
 800f680:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f684:	608b      	strhi	r3, [r1, #8]
 800f686:	9302      	strls	r3, [sp, #8]
 800f688:	680b      	ldr	r3, [r1, #0]
 800f68a:	468b      	mov	fp, r1
 800f68c:	2500      	movs	r5, #0
 800f68e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f692:	f84b 3b1c 	str.w	r3, [fp], #28
 800f696:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f69a:	4680      	mov	r8, r0
 800f69c:	460c      	mov	r4, r1
 800f69e:	465e      	mov	r6, fp
 800f6a0:	46aa      	mov	sl, r5
 800f6a2:	46a9      	mov	r9, r5
 800f6a4:	9501      	str	r5, [sp, #4]
 800f6a6:	68a2      	ldr	r2, [r4, #8]
 800f6a8:	b152      	cbz	r2, 800f6c0 <_scanf_float+0x60>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	2b4e      	cmp	r3, #78	; 0x4e
 800f6b0:	d864      	bhi.n	800f77c <_scanf_float+0x11c>
 800f6b2:	2b40      	cmp	r3, #64	; 0x40
 800f6b4:	d83c      	bhi.n	800f730 <_scanf_float+0xd0>
 800f6b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f6ba:	b2c8      	uxtb	r0, r1
 800f6bc:	280e      	cmp	r0, #14
 800f6be:	d93a      	bls.n	800f736 <_scanf_float+0xd6>
 800f6c0:	f1b9 0f00 	cmp.w	r9, #0
 800f6c4:	d003      	beq.n	800f6ce <_scanf_float+0x6e>
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6d2:	f1ba 0f01 	cmp.w	sl, #1
 800f6d6:	f200 8113 	bhi.w	800f900 <_scanf_float+0x2a0>
 800f6da:	455e      	cmp	r6, fp
 800f6dc:	f200 8105 	bhi.w	800f8ea <_scanf_float+0x28a>
 800f6e0:	2501      	movs	r5, #1
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	b007      	add	sp, #28
 800f6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f6ee:	2a0d      	cmp	r2, #13
 800f6f0:	d8e6      	bhi.n	800f6c0 <_scanf_float+0x60>
 800f6f2:	a101      	add	r1, pc, #4	; (adr r1, 800f6f8 <_scanf_float+0x98>)
 800f6f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f6f8:	0800f837 	.word	0x0800f837
 800f6fc:	0800f6c1 	.word	0x0800f6c1
 800f700:	0800f6c1 	.word	0x0800f6c1
 800f704:	0800f6c1 	.word	0x0800f6c1
 800f708:	0800f897 	.word	0x0800f897
 800f70c:	0800f86f 	.word	0x0800f86f
 800f710:	0800f6c1 	.word	0x0800f6c1
 800f714:	0800f6c1 	.word	0x0800f6c1
 800f718:	0800f845 	.word	0x0800f845
 800f71c:	0800f6c1 	.word	0x0800f6c1
 800f720:	0800f6c1 	.word	0x0800f6c1
 800f724:	0800f6c1 	.word	0x0800f6c1
 800f728:	0800f6c1 	.word	0x0800f6c1
 800f72c:	0800f7fd 	.word	0x0800f7fd
 800f730:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f734:	e7db      	b.n	800f6ee <_scanf_float+0x8e>
 800f736:	290e      	cmp	r1, #14
 800f738:	d8c2      	bhi.n	800f6c0 <_scanf_float+0x60>
 800f73a:	a001      	add	r0, pc, #4	; (adr r0, 800f740 <_scanf_float+0xe0>)
 800f73c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f740:	0800f7ef 	.word	0x0800f7ef
 800f744:	0800f6c1 	.word	0x0800f6c1
 800f748:	0800f7ef 	.word	0x0800f7ef
 800f74c:	0800f883 	.word	0x0800f883
 800f750:	0800f6c1 	.word	0x0800f6c1
 800f754:	0800f79d 	.word	0x0800f79d
 800f758:	0800f7d9 	.word	0x0800f7d9
 800f75c:	0800f7d9 	.word	0x0800f7d9
 800f760:	0800f7d9 	.word	0x0800f7d9
 800f764:	0800f7d9 	.word	0x0800f7d9
 800f768:	0800f7d9 	.word	0x0800f7d9
 800f76c:	0800f7d9 	.word	0x0800f7d9
 800f770:	0800f7d9 	.word	0x0800f7d9
 800f774:	0800f7d9 	.word	0x0800f7d9
 800f778:	0800f7d9 	.word	0x0800f7d9
 800f77c:	2b6e      	cmp	r3, #110	; 0x6e
 800f77e:	d809      	bhi.n	800f794 <_scanf_float+0x134>
 800f780:	2b60      	cmp	r3, #96	; 0x60
 800f782:	d8b2      	bhi.n	800f6ea <_scanf_float+0x8a>
 800f784:	2b54      	cmp	r3, #84	; 0x54
 800f786:	d077      	beq.n	800f878 <_scanf_float+0x218>
 800f788:	2b59      	cmp	r3, #89	; 0x59
 800f78a:	d199      	bne.n	800f6c0 <_scanf_float+0x60>
 800f78c:	2d07      	cmp	r5, #7
 800f78e:	d197      	bne.n	800f6c0 <_scanf_float+0x60>
 800f790:	2508      	movs	r5, #8
 800f792:	e029      	b.n	800f7e8 <_scanf_float+0x188>
 800f794:	2b74      	cmp	r3, #116	; 0x74
 800f796:	d06f      	beq.n	800f878 <_scanf_float+0x218>
 800f798:	2b79      	cmp	r3, #121	; 0x79
 800f79a:	e7f6      	b.n	800f78a <_scanf_float+0x12a>
 800f79c:	6821      	ldr	r1, [r4, #0]
 800f79e:	05c8      	lsls	r0, r1, #23
 800f7a0:	d51a      	bpl.n	800f7d8 <_scanf_float+0x178>
 800f7a2:	9b02      	ldr	r3, [sp, #8]
 800f7a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f7a8:	6021      	str	r1, [r4, #0]
 800f7aa:	f109 0901 	add.w	r9, r9, #1
 800f7ae:	b11b      	cbz	r3, 800f7b8 <_scanf_float+0x158>
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	3201      	adds	r2, #1
 800f7b4:	9302      	str	r3, [sp, #8]
 800f7b6:	60a2      	str	r2, [r4, #8]
 800f7b8:	68a3      	ldr	r3, [r4, #8]
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	60a3      	str	r3, [r4, #8]
 800f7be:	6923      	ldr	r3, [r4, #16]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	6123      	str	r3, [r4, #16]
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	607b      	str	r3, [r7, #4]
 800f7cc:	f340 8084 	ble.w	800f8d8 <_scanf_float+0x278>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	603b      	str	r3, [r7, #0]
 800f7d6:	e766      	b.n	800f6a6 <_scanf_float+0x46>
 800f7d8:	eb1a 0f05 	cmn.w	sl, r5
 800f7dc:	f47f af70 	bne.w	800f6c0 <_scanf_float+0x60>
 800f7e0:	6822      	ldr	r2, [r4, #0]
 800f7e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f7e6:	6022      	str	r2, [r4, #0]
 800f7e8:	f806 3b01 	strb.w	r3, [r6], #1
 800f7ec:	e7e4      	b.n	800f7b8 <_scanf_float+0x158>
 800f7ee:	6822      	ldr	r2, [r4, #0]
 800f7f0:	0610      	lsls	r0, r2, #24
 800f7f2:	f57f af65 	bpl.w	800f6c0 <_scanf_float+0x60>
 800f7f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f7fa:	e7f4      	b.n	800f7e6 <_scanf_float+0x186>
 800f7fc:	f1ba 0f00 	cmp.w	sl, #0
 800f800:	d10e      	bne.n	800f820 <_scanf_float+0x1c0>
 800f802:	f1b9 0f00 	cmp.w	r9, #0
 800f806:	d10e      	bne.n	800f826 <_scanf_float+0x1c6>
 800f808:	6822      	ldr	r2, [r4, #0]
 800f80a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f80e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f812:	d108      	bne.n	800f826 <_scanf_float+0x1c6>
 800f814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f818:	6022      	str	r2, [r4, #0]
 800f81a:	f04f 0a01 	mov.w	sl, #1
 800f81e:	e7e3      	b.n	800f7e8 <_scanf_float+0x188>
 800f820:	f1ba 0f02 	cmp.w	sl, #2
 800f824:	d055      	beq.n	800f8d2 <_scanf_float+0x272>
 800f826:	2d01      	cmp	r5, #1
 800f828:	d002      	beq.n	800f830 <_scanf_float+0x1d0>
 800f82a:	2d04      	cmp	r5, #4
 800f82c:	f47f af48 	bne.w	800f6c0 <_scanf_float+0x60>
 800f830:	3501      	adds	r5, #1
 800f832:	b2ed      	uxtb	r5, r5
 800f834:	e7d8      	b.n	800f7e8 <_scanf_float+0x188>
 800f836:	f1ba 0f01 	cmp.w	sl, #1
 800f83a:	f47f af41 	bne.w	800f6c0 <_scanf_float+0x60>
 800f83e:	f04f 0a02 	mov.w	sl, #2
 800f842:	e7d1      	b.n	800f7e8 <_scanf_float+0x188>
 800f844:	b97d      	cbnz	r5, 800f866 <_scanf_float+0x206>
 800f846:	f1b9 0f00 	cmp.w	r9, #0
 800f84a:	f47f af3c 	bne.w	800f6c6 <_scanf_float+0x66>
 800f84e:	6822      	ldr	r2, [r4, #0]
 800f850:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f854:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f858:	f47f af39 	bne.w	800f6ce <_scanf_float+0x6e>
 800f85c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f860:	6022      	str	r2, [r4, #0]
 800f862:	2501      	movs	r5, #1
 800f864:	e7c0      	b.n	800f7e8 <_scanf_float+0x188>
 800f866:	2d03      	cmp	r5, #3
 800f868:	d0e2      	beq.n	800f830 <_scanf_float+0x1d0>
 800f86a:	2d05      	cmp	r5, #5
 800f86c:	e7de      	b.n	800f82c <_scanf_float+0x1cc>
 800f86e:	2d02      	cmp	r5, #2
 800f870:	f47f af26 	bne.w	800f6c0 <_scanf_float+0x60>
 800f874:	2503      	movs	r5, #3
 800f876:	e7b7      	b.n	800f7e8 <_scanf_float+0x188>
 800f878:	2d06      	cmp	r5, #6
 800f87a:	f47f af21 	bne.w	800f6c0 <_scanf_float+0x60>
 800f87e:	2507      	movs	r5, #7
 800f880:	e7b2      	b.n	800f7e8 <_scanf_float+0x188>
 800f882:	6822      	ldr	r2, [r4, #0]
 800f884:	0591      	lsls	r1, r2, #22
 800f886:	f57f af1b 	bpl.w	800f6c0 <_scanf_float+0x60>
 800f88a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f88e:	6022      	str	r2, [r4, #0]
 800f890:	f8cd 9004 	str.w	r9, [sp, #4]
 800f894:	e7a8      	b.n	800f7e8 <_scanf_float+0x188>
 800f896:	6822      	ldr	r2, [r4, #0]
 800f898:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f89c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f8a0:	d006      	beq.n	800f8b0 <_scanf_float+0x250>
 800f8a2:	0550      	lsls	r0, r2, #21
 800f8a4:	f57f af0c 	bpl.w	800f6c0 <_scanf_float+0x60>
 800f8a8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ac:	f43f af0f 	beq.w	800f6ce <_scanf_float+0x6e>
 800f8b0:	0591      	lsls	r1, r2, #22
 800f8b2:	bf58      	it	pl
 800f8b4:	9901      	ldrpl	r1, [sp, #4]
 800f8b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f8ba:	bf58      	it	pl
 800f8bc:	eba9 0101 	subpl.w	r1, r9, r1
 800f8c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f8c4:	bf58      	it	pl
 800f8c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f8ca:	6022      	str	r2, [r4, #0]
 800f8cc:	f04f 0900 	mov.w	r9, #0
 800f8d0:	e78a      	b.n	800f7e8 <_scanf_float+0x188>
 800f8d2:	f04f 0a03 	mov.w	sl, #3
 800f8d6:	e787      	b.n	800f7e8 <_scanf_float+0x188>
 800f8d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f8dc:	4639      	mov	r1, r7
 800f8de:	4640      	mov	r0, r8
 800f8e0:	4798      	blx	r3
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	f43f aedf 	beq.w	800f6a6 <_scanf_float+0x46>
 800f8e8:	e6ea      	b.n	800f6c0 <_scanf_float+0x60>
 800f8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8f2:	463a      	mov	r2, r7
 800f8f4:	4640      	mov	r0, r8
 800f8f6:	4798      	blx	r3
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	6123      	str	r3, [r4, #16]
 800f8fe:	e6ec      	b.n	800f6da <_scanf_float+0x7a>
 800f900:	1e6b      	subs	r3, r5, #1
 800f902:	2b06      	cmp	r3, #6
 800f904:	d825      	bhi.n	800f952 <_scanf_float+0x2f2>
 800f906:	2d02      	cmp	r5, #2
 800f908:	d836      	bhi.n	800f978 <_scanf_float+0x318>
 800f90a:	455e      	cmp	r6, fp
 800f90c:	f67f aee8 	bls.w	800f6e0 <_scanf_float+0x80>
 800f910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f914:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f918:	463a      	mov	r2, r7
 800f91a:	4640      	mov	r0, r8
 800f91c:	4798      	blx	r3
 800f91e:	6923      	ldr	r3, [r4, #16]
 800f920:	3b01      	subs	r3, #1
 800f922:	6123      	str	r3, [r4, #16]
 800f924:	e7f1      	b.n	800f90a <_scanf_float+0x2aa>
 800f926:	9802      	ldr	r0, [sp, #8]
 800f928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f92c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f930:	9002      	str	r0, [sp, #8]
 800f932:	463a      	mov	r2, r7
 800f934:	4640      	mov	r0, r8
 800f936:	4798      	blx	r3
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	3b01      	subs	r3, #1
 800f93c:	6123      	str	r3, [r4, #16]
 800f93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f942:	fa5f fa8a 	uxtb.w	sl, sl
 800f946:	f1ba 0f02 	cmp.w	sl, #2
 800f94a:	d1ec      	bne.n	800f926 <_scanf_float+0x2c6>
 800f94c:	3d03      	subs	r5, #3
 800f94e:	b2ed      	uxtb	r5, r5
 800f950:	1b76      	subs	r6, r6, r5
 800f952:	6823      	ldr	r3, [r4, #0]
 800f954:	05da      	lsls	r2, r3, #23
 800f956:	d52f      	bpl.n	800f9b8 <_scanf_float+0x358>
 800f958:	055b      	lsls	r3, r3, #21
 800f95a:	d510      	bpl.n	800f97e <_scanf_float+0x31e>
 800f95c:	455e      	cmp	r6, fp
 800f95e:	f67f aebf 	bls.w	800f6e0 <_scanf_float+0x80>
 800f962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f96a:	463a      	mov	r2, r7
 800f96c:	4640      	mov	r0, r8
 800f96e:	4798      	blx	r3
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	3b01      	subs	r3, #1
 800f974:	6123      	str	r3, [r4, #16]
 800f976:	e7f1      	b.n	800f95c <_scanf_float+0x2fc>
 800f978:	46aa      	mov	sl, r5
 800f97a:	9602      	str	r6, [sp, #8]
 800f97c:	e7df      	b.n	800f93e <_scanf_float+0x2de>
 800f97e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f982:	6923      	ldr	r3, [r4, #16]
 800f984:	2965      	cmp	r1, #101	; 0x65
 800f986:	f103 33ff 	add.w	r3, r3, #4294967295
 800f98a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f98e:	6123      	str	r3, [r4, #16]
 800f990:	d00c      	beq.n	800f9ac <_scanf_float+0x34c>
 800f992:	2945      	cmp	r1, #69	; 0x45
 800f994:	d00a      	beq.n	800f9ac <_scanf_float+0x34c>
 800f996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f99a:	463a      	mov	r2, r7
 800f99c:	4640      	mov	r0, r8
 800f99e:	4798      	blx	r3
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	1eb5      	subs	r5, r6, #2
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f9b0:	463a      	mov	r2, r7
 800f9b2:	4640      	mov	r0, r8
 800f9b4:	4798      	blx	r3
 800f9b6:	462e      	mov	r6, r5
 800f9b8:	6825      	ldr	r5, [r4, #0]
 800f9ba:	f015 0510 	ands.w	r5, r5, #16
 800f9be:	d158      	bne.n	800fa72 <_scanf_float+0x412>
 800f9c0:	7035      	strb	r5, [r6, #0]
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9cc:	d11c      	bne.n	800fa08 <_scanf_float+0x3a8>
 800f9ce:	9b01      	ldr	r3, [sp, #4]
 800f9d0:	454b      	cmp	r3, r9
 800f9d2:	eba3 0209 	sub.w	r2, r3, r9
 800f9d6:	d124      	bne.n	800fa22 <_scanf_float+0x3c2>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	4659      	mov	r1, fp
 800f9dc:	4640      	mov	r0, r8
 800f9de:	f000 ff21 	bl	8010824 <_strtod_r>
 800f9e2:	9b03      	ldr	r3, [sp, #12]
 800f9e4:	6821      	ldr	r1, [r4, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f011 0f02 	tst.w	r1, #2
 800f9ec:	ec57 6b10 	vmov	r6, r7, d0
 800f9f0:	f103 0204 	add.w	r2, r3, #4
 800f9f4:	d020      	beq.n	800fa38 <_scanf_float+0x3d8>
 800f9f6:	9903      	ldr	r1, [sp, #12]
 800f9f8:	600a      	str	r2, [r1, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	e9c3 6700 	strd	r6, r7, [r3]
 800fa00:	68e3      	ldr	r3, [r4, #12]
 800fa02:	3301      	adds	r3, #1
 800fa04:	60e3      	str	r3, [r4, #12]
 800fa06:	e66c      	b.n	800f6e2 <_scanf_float+0x82>
 800fa08:	9b04      	ldr	r3, [sp, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d0e4      	beq.n	800f9d8 <_scanf_float+0x378>
 800fa0e:	9905      	ldr	r1, [sp, #20]
 800fa10:	230a      	movs	r3, #10
 800fa12:	462a      	mov	r2, r5
 800fa14:	3101      	adds	r1, #1
 800fa16:	4640      	mov	r0, r8
 800fa18:	f000 ff8e 	bl	8010938 <_strtol_r>
 800fa1c:	9b04      	ldr	r3, [sp, #16]
 800fa1e:	9e05      	ldr	r6, [sp, #20]
 800fa20:	1ac2      	subs	r2, r0, r3
 800fa22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fa26:	429e      	cmp	r6, r3
 800fa28:	bf28      	it	cs
 800fa2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fa2e:	4912      	ldr	r1, [pc, #72]	; (800fa78 <_scanf_float+0x418>)
 800fa30:	4630      	mov	r0, r6
 800fa32:	f000 f82b 	bl	800fa8c <siprintf>
 800fa36:	e7cf      	b.n	800f9d8 <_scanf_float+0x378>
 800fa38:	f011 0f04 	tst.w	r1, #4
 800fa3c:	9903      	ldr	r1, [sp, #12]
 800fa3e:	600a      	str	r2, [r1, #0]
 800fa40:	d1db      	bne.n	800f9fa <_scanf_float+0x39a>
 800fa42:	f8d3 8000 	ldr.w	r8, [r3]
 800fa46:	ee10 2a10 	vmov	r2, s0
 800fa4a:	ee10 0a10 	vmov	r0, s0
 800fa4e:	463b      	mov	r3, r7
 800fa50:	4639      	mov	r1, r7
 800fa52:	f7f1 f87b 	bl	8000b4c <__aeabi_dcmpun>
 800fa56:	b128      	cbz	r0, 800fa64 <_scanf_float+0x404>
 800fa58:	4808      	ldr	r0, [pc, #32]	; (800fa7c <_scanf_float+0x41c>)
 800fa5a:	f000 f811 	bl	800fa80 <nanf>
 800fa5e:	ed88 0a00 	vstr	s0, [r8]
 800fa62:	e7cd      	b.n	800fa00 <_scanf_float+0x3a0>
 800fa64:	4630      	mov	r0, r6
 800fa66:	4639      	mov	r1, r7
 800fa68:	f7f1 f8ce 	bl	8000c08 <__aeabi_d2f>
 800fa6c:	f8c8 0000 	str.w	r0, [r8]
 800fa70:	e7c6      	b.n	800fa00 <_scanf_float+0x3a0>
 800fa72:	2500      	movs	r5, #0
 800fa74:	e635      	b.n	800f6e2 <_scanf_float+0x82>
 800fa76:	bf00      	nop
 800fa78:	08015e6e 	.word	0x08015e6e
 800fa7c:	080161a3 	.word	0x080161a3

0800fa80 <nanf>:
 800fa80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa88 <nanf+0x8>
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	7fc00000 	.word	0x7fc00000

0800fa8c <siprintf>:
 800fa8c:	b40e      	push	{r1, r2, r3}
 800fa8e:	b500      	push	{lr}
 800fa90:	b09c      	sub	sp, #112	; 0x70
 800fa92:	ab1d      	add	r3, sp, #116	; 0x74
 800fa94:	9002      	str	r0, [sp, #8]
 800fa96:	9006      	str	r0, [sp, #24]
 800fa98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa9c:	4809      	ldr	r0, [pc, #36]	; (800fac4 <siprintf+0x38>)
 800fa9e:	9107      	str	r1, [sp, #28]
 800faa0:	9104      	str	r1, [sp, #16]
 800faa2:	4909      	ldr	r1, [pc, #36]	; (800fac8 <siprintf+0x3c>)
 800faa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa8:	9105      	str	r1, [sp, #20]
 800faaa:	6800      	ldr	r0, [r0, #0]
 800faac:	9301      	str	r3, [sp, #4]
 800faae:	a902      	add	r1, sp, #8
 800fab0:	f002 ff4e 	bl	8012950 <_svfiprintf_r>
 800fab4:	9b02      	ldr	r3, [sp, #8]
 800fab6:	2200      	movs	r2, #0
 800fab8:	701a      	strb	r2, [r3, #0]
 800faba:	b01c      	add	sp, #112	; 0x70
 800fabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac0:	b003      	add	sp, #12
 800fac2:	4770      	bx	lr
 800fac4:	20000274 	.word	0x20000274
 800fac8:	ffff0208 	.word	0xffff0208

0800facc <siscanf>:
 800facc:	b40e      	push	{r1, r2, r3}
 800face:	b510      	push	{r4, lr}
 800fad0:	b09f      	sub	sp, #124	; 0x7c
 800fad2:	ac21      	add	r4, sp, #132	; 0x84
 800fad4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fad8:	f854 2b04 	ldr.w	r2, [r4], #4
 800fadc:	9201      	str	r2, [sp, #4]
 800fade:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fae2:	9004      	str	r0, [sp, #16]
 800fae4:	9008      	str	r0, [sp, #32]
 800fae6:	f7f0 fb7d 	bl	80001e4 <strlen>
 800faea:	4b0c      	ldr	r3, [pc, #48]	; (800fb1c <siscanf+0x50>)
 800faec:	9005      	str	r0, [sp, #20]
 800faee:	9009      	str	r0, [sp, #36]	; 0x24
 800faf0:	930d      	str	r3, [sp, #52]	; 0x34
 800faf2:	480b      	ldr	r0, [pc, #44]	; (800fb20 <siscanf+0x54>)
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	6800      	ldr	r0, [r0, #0]
 800faf8:	9403      	str	r4, [sp, #12]
 800fafa:	2300      	movs	r3, #0
 800fafc:	9311      	str	r3, [sp, #68]	; 0x44
 800fafe:	9316      	str	r3, [sp, #88]	; 0x58
 800fb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb04:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fb08:	a904      	add	r1, sp, #16
 800fb0a:	4623      	mov	r3, r4
 800fb0c:	f003 f87a 	bl	8012c04 <__ssvfiscanf_r>
 800fb10:	b01f      	add	sp, #124	; 0x7c
 800fb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb16:	b003      	add	sp, #12
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	0800fb47 	.word	0x0800fb47
 800fb20:	20000274 	.word	0x20000274

0800fb24 <__sread>:
 800fb24:	b510      	push	{r4, lr}
 800fb26:	460c      	mov	r4, r1
 800fb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb2c:	f003 fb2e 	bl	801318c <_read_r>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	bfab      	itete	ge
 800fb34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb36:	89a3      	ldrhlt	r3, [r4, #12]
 800fb38:	181b      	addge	r3, r3, r0
 800fb3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb3e:	bfac      	ite	ge
 800fb40:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb42:	81a3      	strhlt	r3, [r4, #12]
 800fb44:	bd10      	pop	{r4, pc}

0800fb46 <__seofread>:
 800fb46:	2000      	movs	r0, #0
 800fb48:	4770      	bx	lr

0800fb4a <__swrite>:
 800fb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4e:	461f      	mov	r7, r3
 800fb50:	898b      	ldrh	r3, [r1, #12]
 800fb52:	05db      	lsls	r3, r3, #23
 800fb54:	4605      	mov	r5, r0
 800fb56:	460c      	mov	r4, r1
 800fb58:	4616      	mov	r6, r2
 800fb5a:	d505      	bpl.n	800fb68 <__swrite+0x1e>
 800fb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb60:	2302      	movs	r3, #2
 800fb62:	2200      	movs	r2, #0
 800fb64:	f002 f8f8 	bl	8011d58 <_lseek_r>
 800fb68:	89a3      	ldrh	r3, [r4, #12]
 800fb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb72:	81a3      	strh	r3, [r4, #12]
 800fb74:	4632      	mov	r2, r6
 800fb76:	463b      	mov	r3, r7
 800fb78:	4628      	mov	r0, r5
 800fb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb7e:	f000 bedd 	b.w	801093c <_write_r>

0800fb82 <__sseek>:
 800fb82:	b510      	push	{r4, lr}
 800fb84:	460c      	mov	r4, r1
 800fb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb8a:	f002 f8e5 	bl	8011d58 <_lseek_r>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	bf15      	itete	ne
 800fb94:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb9e:	81a3      	strheq	r3, [r4, #12]
 800fba0:	bf18      	it	ne
 800fba2:	81a3      	strhne	r3, [r4, #12]
 800fba4:	bd10      	pop	{r4, pc}

0800fba6 <__sclose>:
 800fba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbaa:	f000 bed9 	b.w	8010960 <_close_r>

0800fbae <strncmp>:
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	b16a      	cbz	r2, 800fbce <strncmp+0x20>
 800fbb2:	3901      	subs	r1, #1
 800fbb4:	1884      	adds	r4, r0, r2
 800fbb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fbba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d103      	bne.n	800fbca <strncmp+0x1c>
 800fbc2:	42a0      	cmp	r0, r4
 800fbc4:	d001      	beq.n	800fbca <strncmp+0x1c>
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1f5      	bne.n	800fbb6 <strncmp+0x8>
 800fbca:	1a98      	subs	r0, r3, r2
 800fbcc:	bd10      	pop	{r4, pc}
 800fbce:	4610      	mov	r0, r2
 800fbd0:	e7fc      	b.n	800fbcc <strncmp+0x1e>

0800fbd2 <sulp>:
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	460d      	mov	r5, r1
 800fbd8:	ec45 4b10 	vmov	d0, r4, r5
 800fbdc:	4616      	mov	r6, r2
 800fbde:	f002 fc53 	bl	8012488 <__ulp>
 800fbe2:	ec51 0b10 	vmov	r0, r1, d0
 800fbe6:	b17e      	cbz	r6, 800fc08 <sulp+0x36>
 800fbe8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fbec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	dd09      	ble.n	800fc08 <sulp+0x36>
 800fbf4:	051b      	lsls	r3, r3, #20
 800fbf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fbfa:	2400      	movs	r4, #0
 800fbfc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fc00:	4622      	mov	r2, r4
 800fc02:	462b      	mov	r3, r5
 800fc04:	f7f0 fd08 	bl	8000618 <__aeabi_dmul>
 800fc08:	bd70      	pop	{r4, r5, r6, pc}
 800fc0a:	0000      	movs	r0, r0
 800fc0c:	0000      	movs	r0, r0
	...

0800fc10 <_strtod_l>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	b0a3      	sub	sp, #140	; 0x8c
 800fc16:	461f      	mov	r7, r3
 800fc18:	2300      	movs	r3, #0
 800fc1a:	931e      	str	r3, [sp, #120]	; 0x78
 800fc1c:	4ba4      	ldr	r3, [pc, #656]	; (800feb0 <_strtod_l+0x2a0>)
 800fc1e:	9219      	str	r2, [sp, #100]	; 0x64
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	9307      	str	r3, [sp, #28]
 800fc24:	4604      	mov	r4, r0
 800fc26:	4618      	mov	r0, r3
 800fc28:	4688      	mov	r8, r1
 800fc2a:	f7f0 fadb 	bl	80001e4 <strlen>
 800fc2e:	f04f 0a00 	mov.w	sl, #0
 800fc32:	4605      	mov	r5, r0
 800fc34:	f04f 0b00 	mov.w	fp, #0
 800fc38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fc3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	2a2b      	cmp	r2, #43	; 0x2b
 800fc42:	d04c      	beq.n	800fcde <_strtod_l+0xce>
 800fc44:	d839      	bhi.n	800fcba <_strtod_l+0xaa>
 800fc46:	2a0d      	cmp	r2, #13
 800fc48:	d832      	bhi.n	800fcb0 <_strtod_l+0xa0>
 800fc4a:	2a08      	cmp	r2, #8
 800fc4c:	d832      	bhi.n	800fcb4 <_strtod_l+0xa4>
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d03c      	beq.n	800fccc <_strtod_l+0xbc>
 800fc52:	2300      	movs	r3, #0
 800fc54:	930e      	str	r3, [sp, #56]	; 0x38
 800fc56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fc58:	7833      	ldrb	r3, [r6, #0]
 800fc5a:	2b30      	cmp	r3, #48	; 0x30
 800fc5c:	f040 80b4 	bne.w	800fdc8 <_strtod_l+0x1b8>
 800fc60:	7873      	ldrb	r3, [r6, #1]
 800fc62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc66:	2b58      	cmp	r3, #88	; 0x58
 800fc68:	d16c      	bne.n	800fd44 <_strtod_l+0x134>
 800fc6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc6c:	9301      	str	r3, [sp, #4]
 800fc6e:	ab1e      	add	r3, sp, #120	; 0x78
 800fc70:	9702      	str	r7, [sp, #8]
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	4a8f      	ldr	r2, [pc, #572]	; (800feb4 <_strtod_l+0x2a4>)
 800fc76:	ab1f      	add	r3, sp, #124	; 0x7c
 800fc78:	a91d      	add	r1, sp, #116	; 0x74
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f001 fd60 	bl	8011740 <__gethex>
 800fc80:	f010 0707 	ands.w	r7, r0, #7
 800fc84:	4605      	mov	r5, r0
 800fc86:	d005      	beq.n	800fc94 <_strtod_l+0x84>
 800fc88:	2f06      	cmp	r7, #6
 800fc8a:	d12a      	bne.n	800fce2 <_strtod_l+0xd2>
 800fc8c:	3601      	adds	r6, #1
 800fc8e:	2300      	movs	r3, #0
 800fc90:	961d      	str	r6, [sp, #116]	; 0x74
 800fc92:	930e      	str	r3, [sp, #56]	; 0x38
 800fc94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f040 8596 	bne.w	80107c8 <_strtod_l+0xbb8>
 800fc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc9e:	b1db      	cbz	r3, 800fcd8 <_strtod_l+0xc8>
 800fca0:	4652      	mov	r2, sl
 800fca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fca6:	ec43 2b10 	vmov	d0, r2, r3
 800fcaa:	b023      	add	sp, #140	; 0x8c
 800fcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb0:	2a20      	cmp	r2, #32
 800fcb2:	d1ce      	bne.n	800fc52 <_strtod_l+0x42>
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	931d      	str	r3, [sp, #116]	; 0x74
 800fcb8:	e7c0      	b.n	800fc3c <_strtod_l+0x2c>
 800fcba:	2a2d      	cmp	r2, #45	; 0x2d
 800fcbc:	d1c9      	bne.n	800fc52 <_strtod_l+0x42>
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	920e      	str	r2, [sp, #56]	; 0x38
 800fcc2:	1c5a      	adds	r2, r3, #1
 800fcc4:	921d      	str	r2, [sp, #116]	; 0x74
 800fcc6:	785b      	ldrb	r3, [r3, #1]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1c4      	bne.n	800fc56 <_strtod_l+0x46>
 800fccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f040 8576 	bne.w	80107c4 <_strtod_l+0xbb4>
 800fcd8:	4652      	mov	r2, sl
 800fcda:	465b      	mov	r3, fp
 800fcdc:	e7e3      	b.n	800fca6 <_strtod_l+0x96>
 800fcde:	2200      	movs	r2, #0
 800fce0:	e7ee      	b.n	800fcc0 <_strtod_l+0xb0>
 800fce2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fce4:	b13a      	cbz	r2, 800fcf6 <_strtod_l+0xe6>
 800fce6:	2135      	movs	r1, #53	; 0x35
 800fce8:	a820      	add	r0, sp, #128	; 0x80
 800fcea:	f002 fcd8 	bl	801269e <__copybits>
 800fcee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f002 f89d 	bl	8011e30 <_Bfree>
 800fcf6:	3f01      	subs	r7, #1
 800fcf8:	2f05      	cmp	r7, #5
 800fcfa:	d807      	bhi.n	800fd0c <_strtod_l+0xfc>
 800fcfc:	e8df f007 	tbb	[pc, r7]
 800fd00:	1d180b0e 	.word	0x1d180b0e
 800fd04:	030e      	.short	0x030e
 800fd06:	f04f 0b00 	mov.w	fp, #0
 800fd0a:	46da      	mov	sl, fp
 800fd0c:	0728      	lsls	r0, r5, #28
 800fd0e:	d5c1      	bpl.n	800fc94 <_strtod_l+0x84>
 800fd10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fd14:	e7be      	b.n	800fc94 <_strtod_l+0x84>
 800fd16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fd1a:	e7f7      	b.n	800fd0c <_strtod_l+0xfc>
 800fd1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fd20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fd22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fd26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fd2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fd2e:	e7ed      	b.n	800fd0c <_strtod_l+0xfc>
 800fd30:	f8df b184 	ldr.w	fp, [pc, #388]	; 800feb8 <_strtod_l+0x2a8>
 800fd34:	f04f 0a00 	mov.w	sl, #0
 800fd38:	e7e8      	b.n	800fd0c <_strtod_l+0xfc>
 800fd3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fd3e:	f04f 3aff 	mov.w	sl, #4294967295
 800fd42:	e7e3      	b.n	800fd0c <_strtod_l+0xfc>
 800fd44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd46:	1c5a      	adds	r2, r3, #1
 800fd48:	921d      	str	r2, [sp, #116]	; 0x74
 800fd4a:	785b      	ldrb	r3, [r3, #1]
 800fd4c:	2b30      	cmp	r3, #48	; 0x30
 800fd4e:	d0f9      	beq.n	800fd44 <_strtod_l+0x134>
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d09f      	beq.n	800fc94 <_strtod_l+0x84>
 800fd54:	2301      	movs	r3, #1
 800fd56:	f04f 0900 	mov.w	r9, #0
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd5e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fd64:	464f      	mov	r7, r9
 800fd66:	220a      	movs	r2, #10
 800fd68:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fd6a:	7806      	ldrb	r6, [r0, #0]
 800fd6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fd70:	b2d9      	uxtb	r1, r3
 800fd72:	2909      	cmp	r1, #9
 800fd74:	d92a      	bls.n	800fdcc <_strtod_l+0x1bc>
 800fd76:	9907      	ldr	r1, [sp, #28]
 800fd78:	462a      	mov	r2, r5
 800fd7a:	f7ff ff18 	bl	800fbae <strncmp>
 800fd7e:	b398      	cbz	r0, 800fde8 <_strtod_l+0x1d8>
 800fd80:	2000      	movs	r0, #0
 800fd82:	4633      	mov	r3, r6
 800fd84:	463d      	mov	r5, r7
 800fd86:	9007      	str	r0, [sp, #28]
 800fd88:	4602      	mov	r2, r0
 800fd8a:	2b65      	cmp	r3, #101	; 0x65
 800fd8c:	d001      	beq.n	800fd92 <_strtod_l+0x182>
 800fd8e:	2b45      	cmp	r3, #69	; 0x45
 800fd90:	d118      	bne.n	800fdc4 <_strtod_l+0x1b4>
 800fd92:	b91d      	cbnz	r5, 800fd9c <_strtod_l+0x18c>
 800fd94:	9b04      	ldr	r3, [sp, #16]
 800fd96:	4303      	orrs	r3, r0
 800fd98:	d098      	beq.n	800fccc <_strtod_l+0xbc>
 800fd9a:	2500      	movs	r5, #0
 800fd9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fda0:	f108 0301 	add.w	r3, r8, #1
 800fda4:	931d      	str	r3, [sp, #116]	; 0x74
 800fda6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fdaa:	2b2b      	cmp	r3, #43	; 0x2b
 800fdac:	d075      	beq.n	800fe9a <_strtod_l+0x28a>
 800fdae:	2b2d      	cmp	r3, #45	; 0x2d
 800fdb0:	d07b      	beq.n	800feaa <_strtod_l+0x29a>
 800fdb2:	f04f 0c00 	mov.w	ip, #0
 800fdb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fdba:	2909      	cmp	r1, #9
 800fdbc:	f240 8082 	bls.w	800fec4 <_strtod_l+0x2b4>
 800fdc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fdc4:	2600      	movs	r6, #0
 800fdc6:	e09d      	b.n	800ff04 <_strtod_l+0x2f4>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	e7c4      	b.n	800fd56 <_strtod_l+0x146>
 800fdcc:	2f08      	cmp	r7, #8
 800fdce:	bfd8      	it	le
 800fdd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fdd2:	f100 0001 	add.w	r0, r0, #1
 800fdd6:	bfda      	itte	le
 800fdd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800fddc:	9309      	strle	r3, [sp, #36]	; 0x24
 800fdde:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fde2:	3701      	adds	r7, #1
 800fde4:	901d      	str	r0, [sp, #116]	; 0x74
 800fde6:	e7bf      	b.n	800fd68 <_strtod_l+0x158>
 800fde8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fdea:	195a      	adds	r2, r3, r5
 800fdec:	921d      	str	r2, [sp, #116]	; 0x74
 800fdee:	5d5b      	ldrb	r3, [r3, r5]
 800fdf0:	2f00      	cmp	r7, #0
 800fdf2:	d037      	beq.n	800fe64 <_strtod_l+0x254>
 800fdf4:	9007      	str	r0, [sp, #28]
 800fdf6:	463d      	mov	r5, r7
 800fdf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fdfc:	2a09      	cmp	r2, #9
 800fdfe:	d912      	bls.n	800fe26 <_strtod_l+0x216>
 800fe00:	2201      	movs	r2, #1
 800fe02:	e7c2      	b.n	800fd8a <_strtod_l+0x17a>
 800fe04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	921d      	str	r2, [sp, #116]	; 0x74
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	2b30      	cmp	r3, #48	; 0x30
 800fe10:	d0f8      	beq.n	800fe04 <_strtod_l+0x1f4>
 800fe12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fe16:	2a08      	cmp	r2, #8
 800fe18:	f200 84db 	bhi.w	80107d2 <_strtod_l+0xbc2>
 800fe1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fe1e:	9007      	str	r0, [sp, #28]
 800fe20:	2000      	movs	r0, #0
 800fe22:	920a      	str	r2, [sp, #40]	; 0x28
 800fe24:	4605      	mov	r5, r0
 800fe26:	3b30      	subs	r3, #48	; 0x30
 800fe28:	f100 0201 	add.w	r2, r0, #1
 800fe2c:	d014      	beq.n	800fe58 <_strtod_l+0x248>
 800fe2e:	9907      	ldr	r1, [sp, #28]
 800fe30:	4411      	add	r1, r2
 800fe32:	9107      	str	r1, [sp, #28]
 800fe34:	462a      	mov	r2, r5
 800fe36:	eb00 0e05 	add.w	lr, r0, r5
 800fe3a:	210a      	movs	r1, #10
 800fe3c:	4572      	cmp	r2, lr
 800fe3e:	d113      	bne.n	800fe68 <_strtod_l+0x258>
 800fe40:	182a      	adds	r2, r5, r0
 800fe42:	2a08      	cmp	r2, #8
 800fe44:	f105 0501 	add.w	r5, r5, #1
 800fe48:	4405      	add	r5, r0
 800fe4a:	dc1c      	bgt.n	800fe86 <_strtod_l+0x276>
 800fe4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe4e:	220a      	movs	r2, #10
 800fe50:	fb02 3301 	mla	r3, r2, r1, r3
 800fe54:	9309      	str	r3, [sp, #36]	; 0x24
 800fe56:	2200      	movs	r2, #0
 800fe58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe5a:	1c59      	adds	r1, r3, #1
 800fe5c:	911d      	str	r1, [sp, #116]	; 0x74
 800fe5e:	785b      	ldrb	r3, [r3, #1]
 800fe60:	4610      	mov	r0, r2
 800fe62:	e7c9      	b.n	800fdf8 <_strtod_l+0x1e8>
 800fe64:	4638      	mov	r0, r7
 800fe66:	e7d2      	b.n	800fe0e <_strtod_l+0x1fe>
 800fe68:	2a08      	cmp	r2, #8
 800fe6a:	dc04      	bgt.n	800fe76 <_strtod_l+0x266>
 800fe6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fe6e:	434e      	muls	r6, r1
 800fe70:	9609      	str	r6, [sp, #36]	; 0x24
 800fe72:	3201      	adds	r2, #1
 800fe74:	e7e2      	b.n	800fe3c <_strtod_l+0x22c>
 800fe76:	f102 0c01 	add.w	ip, r2, #1
 800fe7a:	f1bc 0f10 	cmp.w	ip, #16
 800fe7e:	bfd8      	it	le
 800fe80:	fb01 f909 	mulle.w	r9, r1, r9
 800fe84:	e7f5      	b.n	800fe72 <_strtod_l+0x262>
 800fe86:	2d10      	cmp	r5, #16
 800fe88:	bfdc      	itt	le
 800fe8a:	220a      	movle	r2, #10
 800fe8c:	fb02 3909 	mlale	r9, r2, r9, r3
 800fe90:	e7e1      	b.n	800fe56 <_strtod_l+0x246>
 800fe92:	2300      	movs	r3, #0
 800fe94:	9307      	str	r3, [sp, #28]
 800fe96:	2201      	movs	r2, #1
 800fe98:	e77c      	b.n	800fd94 <_strtod_l+0x184>
 800fe9a:	f04f 0c00 	mov.w	ip, #0
 800fe9e:	f108 0302 	add.w	r3, r8, #2
 800fea2:	931d      	str	r3, [sp, #116]	; 0x74
 800fea4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fea8:	e785      	b.n	800fdb6 <_strtod_l+0x1a6>
 800feaa:	f04f 0c01 	mov.w	ip, #1
 800feae:	e7f6      	b.n	800fe9e <_strtod_l+0x28e>
 800feb0:	08015fc8 	.word	0x08015fc8
 800feb4:	08015e74 	.word	0x08015e74
 800feb8:	7ff00000 	.word	0x7ff00000
 800febc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800febe:	1c59      	adds	r1, r3, #1
 800fec0:	911d      	str	r1, [sp, #116]	; 0x74
 800fec2:	785b      	ldrb	r3, [r3, #1]
 800fec4:	2b30      	cmp	r3, #48	; 0x30
 800fec6:	d0f9      	beq.n	800febc <_strtod_l+0x2ac>
 800fec8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fecc:	2908      	cmp	r1, #8
 800fece:	f63f af79 	bhi.w	800fdc4 <_strtod_l+0x1b4>
 800fed2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fed6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fed8:	9308      	str	r3, [sp, #32]
 800feda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fedc:	1c59      	adds	r1, r3, #1
 800fede:	911d      	str	r1, [sp, #116]	; 0x74
 800fee0:	785b      	ldrb	r3, [r3, #1]
 800fee2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fee6:	2e09      	cmp	r6, #9
 800fee8:	d937      	bls.n	800ff5a <_strtod_l+0x34a>
 800feea:	9e08      	ldr	r6, [sp, #32]
 800feec:	1b89      	subs	r1, r1, r6
 800feee:	2908      	cmp	r1, #8
 800fef0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fef4:	dc02      	bgt.n	800fefc <_strtod_l+0x2ec>
 800fef6:	4576      	cmp	r6, lr
 800fef8:	bfa8      	it	ge
 800fefa:	4676      	movge	r6, lr
 800fefc:	f1bc 0f00 	cmp.w	ip, #0
 800ff00:	d000      	beq.n	800ff04 <_strtod_l+0x2f4>
 800ff02:	4276      	negs	r6, r6
 800ff04:	2d00      	cmp	r5, #0
 800ff06:	d14f      	bne.n	800ffa8 <_strtod_l+0x398>
 800ff08:	9904      	ldr	r1, [sp, #16]
 800ff0a:	4301      	orrs	r1, r0
 800ff0c:	f47f aec2 	bne.w	800fc94 <_strtod_l+0x84>
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	f47f aedb 	bne.w	800fccc <_strtod_l+0xbc>
 800ff16:	2b69      	cmp	r3, #105	; 0x69
 800ff18:	d027      	beq.n	800ff6a <_strtod_l+0x35a>
 800ff1a:	dc24      	bgt.n	800ff66 <_strtod_l+0x356>
 800ff1c:	2b49      	cmp	r3, #73	; 0x49
 800ff1e:	d024      	beq.n	800ff6a <_strtod_l+0x35a>
 800ff20:	2b4e      	cmp	r3, #78	; 0x4e
 800ff22:	f47f aed3 	bne.w	800fccc <_strtod_l+0xbc>
 800ff26:	499e      	ldr	r1, [pc, #632]	; (80101a0 <_strtod_l+0x590>)
 800ff28:	a81d      	add	r0, sp, #116	; 0x74
 800ff2a:	f001 fe61 	bl	8011bf0 <__match>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f43f aecc 	beq.w	800fccc <_strtod_l+0xbc>
 800ff34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2b28      	cmp	r3, #40	; 0x28
 800ff3a:	d12d      	bne.n	800ff98 <_strtod_l+0x388>
 800ff3c:	4999      	ldr	r1, [pc, #612]	; (80101a4 <_strtod_l+0x594>)
 800ff3e:	aa20      	add	r2, sp, #128	; 0x80
 800ff40:	a81d      	add	r0, sp, #116	; 0x74
 800ff42:	f001 fe69 	bl	8011c18 <__hexnan>
 800ff46:	2805      	cmp	r0, #5
 800ff48:	d126      	bne.n	800ff98 <_strtod_l+0x388>
 800ff4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ff50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ff54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ff58:	e69c      	b.n	800fc94 <_strtod_l+0x84>
 800ff5a:	210a      	movs	r1, #10
 800ff5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ff60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ff64:	e7b9      	b.n	800feda <_strtod_l+0x2ca>
 800ff66:	2b6e      	cmp	r3, #110	; 0x6e
 800ff68:	e7db      	b.n	800ff22 <_strtod_l+0x312>
 800ff6a:	498f      	ldr	r1, [pc, #572]	; (80101a8 <_strtod_l+0x598>)
 800ff6c:	a81d      	add	r0, sp, #116	; 0x74
 800ff6e:	f001 fe3f 	bl	8011bf0 <__match>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	f43f aeaa 	beq.w	800fccc <_strtod_l+0xbc>
 800ff78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff7a:	498c      	ldr	r1, [pc, #560]	; (80101ac <_strtod_l+0x59c>)
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	a81d      	add	r0, sp, #116	; 0x74
 800ff80:	931d      	str	r3, [sp, #116]	; 0x74
 800ff82:	f001 fe35 	bl	8011bf0 <__match>
 800ff86:	b910      	cbnz	r0, 800ff8e <_strtod_l+0x37e>
 800ff88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	931d      	str	r3, [sp, #116]	; 0x74
 800ff8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80101bc <_strtod_l+0x5ac>
 800ff92:	f04f 0a00 	mov.w	sl, #0
 800ff96:	e67d      	b.n	800fc94 <_strtod_l+0x84>
 800ff98:	4885      	ldr	r0, [pc, #532]	; (80101b0 <_strtod_l+0x5a0>)
 800ff9a:	f003 f909 	bl	80131b0 <nan>
 800ff9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ffa2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ffa6:	e675      	b.n	800fc94 <_strtod_l+0x84>
 800ffa8:	9b07      	ldr	r3, [sp, #28]
 800ffaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffac:	1af3      	subs	r3, r6, r3
 800ffae:	2f00      	cmp	r7, #0
 800ffb0:	bf08      	it	eq
 800ffb2:	462f      	moveq	r7, r5
 800ffb4:	2d10      	cmp	r5, #16
 800ffb6:	9308      	str	r3, [sp, #32]
 800ffb8:	46a8      	mov	r8, r5
 800ffba:	bfa8      	it	ge
 800ffbc:	f04f 0810 	movge.w	r8, #16
 800ffc0:	f7f0 fab0 	bl	8000524 <__aeabi_ui2d>
 800ffc4:	2d09      	cmp	r5, #9
 800ffc6:	4682      	mov	sl, r0
 800ffc8:	468b      	mov	fp, r1
 800ffca:	dd13      	ble.n	800fff4 <_strtod_l+0x3e4>
 800ffcc:	4b79      	ldr	r3, [pc, #484]	; (80101b4 <_strtod_l+0x5a4>)
 800ffce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ffd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ffd6:	f7f0 fb1f 	bl	8000618 <__aeabi_dmul>
 800ffda:	4682      	mov	sl, r0
 800ffdc:	4648      	mov	r0, r9
 800ffde:	468b      	mov	fp, r1
 800ffe0:	f7f0 faa0 	bl	8000524 <__aeabi_ui2d>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	4650      	mov	r0, sl
 800ffea:	4659      	mov	r1, fp
 800ffec:	f7f0 f95e 	bl	80002ac <__adddf3>
 800fff0:	4682      	mov	sl, r0
 800fff2:	468b      	mov	fp, r1
 800fff4:	2d0f      	cmp	r5, #15
 800fff6:	dc38      	bgt.n	801006a <_strtod_l+0x45a>
 800fff8:	9b08      	ldr	r3, [sp, #32]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f43f ae4a 	beq.w	800fc94 <_strtod_l+0x84>
 8010000:	dd24      	ble.n	801004c <_strtod_l+0x43c>
 8010002:	2b16      	cmp	r3, #22
 8010004:	dc0b      	bgt.n	801001e <_strtod_l+0x40e>
 8010006:	4d6b      	ldr	r5, [pc, #428]	; (80101b4 <_strtod_l+0x5a4>)
 8010008:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801000c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010010:	4652      	mov	r2, sl
 8010012:	465b      	mov	r3, fp
 8010014:	f7f0 fb00 	bl	8000618 <__aeabi_dmul>
 8010018:	4682      	mov	sl, r0
 801001a:	468b      	mov	fp, r1
 801001c:	e63a      	b.n	800fc94 <_strtod_l+0x84>
 801001e:	9a08      	ldr	r2, [sp, #32]
 8010020:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010024:	4293      	cmp	r3, r2
 8010026:	db20      	blt.n	801006a <_strtod_l+0x45a>
 8010028:	4c62      	ldr	r4, [pc, #392]	; (80101b4 <_strtod_l+0x5a4>)
 801002a:	f1c5 050f 	rsb	r5, r5, #15
 801002e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010032:	4652      	mov	r2, sl
 8010034:	465b      	mov	r3, fp
 8010036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801003a:	f7f0 faed 	bl	8000618 <__aeabi_dmul>
 801003e:	9b08      	ldr	r3, [sp, #32]
 8010040:	1b5d      	subs	r5, r3, r5
 8010042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010046:	e9d4 2300 	ldrd	r2, r3, [r4]
 801004a:	e7e3      	b.n	8010014 <_strtod_l+0x404>
 801004c:	9b08      	ldr	r3, [sp, #32]
 801004e:	3316      	adds	r3, #22
 8010050:	db0b      	blt.n	801006a <_strtod_l+0x45a>
 8010052:	9b07      	ldr	r3, [sp, #28]
 8010054:	4a57      	ldr	r2, [pc, #348]	; (80101b4 <_strtod_l+0x5a4>)
 8010056:	1b9e      	subs	r6, r3, r6
 8010058:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801005c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010060:	4650      	mov	r0, sl
 8010062:	4659      	mov	r1, fp
 8010064:	f7f0 fc02 	bl	800086c <__aeabi_ddiv>
 8010068:	e7d6      	b.n	8010018 <_strtod_l+0x408>
 801006a:	9b08      	ldr	r3, [sp, #32]
 801006c:	eba5 0808 	sub.w	r8, r5, r8
 8010070:	4498      	add	r8, r3
 8010072:	f1b8 0f00 	cmp.w	r8, #0
 8010076:	dd71      	ble.n	801015c <_strtod_l+0x54c>
 8010078:	f018 030f 	ands.w	r3, r8, #15
 801007c:	d00a      	beq.n	8010094 <_strtod_l+0x484>
 801007e:	494d      	ldr	r1, [pc, #308]	; (80101b4 <_strtod_l+0x5a4>)
 8010080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010084:	4652      	mov	r2, sl
 8010086:	465b      	mov	r3, fp
 8010088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801008c:	f7f0 fac4 	bl	8000618 <__aeabi_dmul>
 8010090:	4682      	mov	sl, r0
 8010092:	468b      	mov	fp, r1
 8010094:	f038 080f 	bics.w	r8, r8, #15
 8010098:	d04d      	beq.n	8010136 <_strtod_l+0x526>
 801009a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801009e:	dd22      	ble.n	80100e6 <_strtod_l+0x4d6>
 80100a0:	2500      	movs	r5, #0
 80100a2:	462e      	mov	r6, r5
 80100a4:	9509      	str	r5, [sp, #36]	; 0x24
 80100a6:	9507      	str	r5, [sp, #28]
 80100a8:	2322      	movs	r3, #34	; 0x22
 80100aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80101bc <_strtod_l+0x5ac>
 80100ae:	6023      	str	r3, [r4, #0]
 80100b0:	f04f 0a00 	mov.w	sl, #0
 80100b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f43f adec 	beq.w	800fc94 <_strtod_l+0x84>
 80100bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80100be:	4620      	mov	r0, r4
 80100c0:	f001 feb6 	bl	8011e30 <_Bfree>
 80100c4:	9907      	ldr	r1, [sp, #28]
 80100c6:	4620      	mov	r0, r4
 80100c8:	f001 feb2 	bl	8011e30 <_Bfree>
 80100cc:	4631      	mov	r1, r6
 80100ce:	4620      	mov	r0, r4
 80100d0:	f001 feae 	bl	8011e30 <_Bfree>
 80100d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100d6:	4620      	mov	r0, r4
 80100d8:	f001 feaa 	bl	8011e30 <_Bfree>
 80100dc:	4629      	mov	r1, r5
 80100de:	4620      	mov	r0, r4
 80100e0:	f001 fea6 	bl	8011e30 <_Bfree>
 80100e4:	e5d6      	b.n	800fc94 <_strtod_l+0x84>
 80100e6:	2300      	movs	r3, #0
 80100e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80100ec:	4650      	mov	r0, sl
 80100ee:	4659      	mov	r1, fp
 80100f0:	4699      	mov	r9, r3
 80100f2:	f1b8 0f01 	cmp.w	r8, #1
 80100f6:	dc21      	bgt.n	801013c <_strtod_l+0x52c>
 80100f8:	b10b      	cbz	r3, 80100fe <_strtod_l+0x4ee>
 80100fa:	4682      	mov	sl, r0
 80100fc:	468b      	mov	fp, r1
 80100fe:	4b2e      	ldr	r3, [pc, #184]	; (80101b8 <_strtod_l+0x5a8>)
 8010100:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010104:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010108:	4652      	mov	r2, sl
 801010a:	465b      	mov	r3, fp
 801010c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010110:	f7f0 fa82 	bl	8000618 <__aeabi_dmul>
 8010114:	4b29      	ldr	r3, [pc, #164]	; (80101bc <_strtod_l+0x5ac>)
 8010116:	460a      	mov	r2, r1
 8010118:	400b      	ands	r3, r1
 801011a:	4929      	ldr	r1, [pc, #164]	; (80101c0 <_strtod_l+0x5b0>)
 801011c:	428b      	cmp	r3, r1
 801011e:	4682      	mov	sl, r0
 8010120:	d8be      	bhi.n	80100a0 <_strtod_l+0x490>
 8010122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010126:	428b      	cmp	r3, r1
 8010128:	bf86      	itte	hi
 801012a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80101c4 <_strtod_l+0x5b4>
 801012e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010132:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010136:	2300      	movs	r3, #0
 8010138:	9304      	str	r3, [sp, #16]
 801013a:	e081      	b.n	8010240 <_strtod_l+0x630>
 801013c:	f018 0f01 	tst.w	r8, #1
 8010140:	d007      	beq.n	8010152 <_strtod_l+0x542>
 8010142:	4b1d      	ldr	r3, [pc, #116]	; (80101b8 <_strtod_l+0x5a8>)
 8010144:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014c:	f7f0 fa64 	bl	8000618 <__aeabi_dmul>
 8010150:	2301      	movs	r3, #1
 8010152:	f109 0901 	add.w	r9, r9, #1
 8010156:	ea4f 0868 	mov.w	r8, r8, asr #1
 801015a:	e7ca      	b.n	80100f2 <_strtod_l+0x4e2>
 801015c:	d0eb      	beq.n	8010136 <_strtod_l+0x526>
 801015e:	f1c8 0800 	rsb	r8, r8, #0
 8010162:	f018 020f 	ands.w	r2, r8, #15
 8010166:	d00a      	beq.n	801017e <_strtod_l+0x56e>
 8010168:	4b12      	ldr	r3, [pc, #72]	; (80101b4 <_strtod_l+0x5a4>)
 801016a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801016e:	4650      	mov	r0, sl
 8010170:	4659      	mov	r1, fp
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	f7f0 fb79 	bl	800086c <__aeabi_ddiv>
 801017a:	4682      	mov	sl, r0
 801017c:	468b      	mov	fp, r1
 801017e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010182:	d0d8      	beq.n	8010136 <_strtod_l+0x526>
 8010184:	f1b8 0f1f 	cmp.w	r8, #31
 8010188:	dd1e      	ble.n	80101c8 <_strtod_l+0x5b8>
 801018a:	2500      	movs	r5, #0
 801018c:	462e      	mov	r6, r5
 801018e:	9509      	str	r5, [sp, #36]	; 0x24
 8010190:	9507      	str	r5, [sp, #28]
 8010192:	2322      	movs	r3, #34	; 0x22
 8010194:	f04f 0a00 	mov.w	sl, #0
 8010198:	f04f 0b00 	mov.w	fp, #0
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	e789      	b.n	80100b4 <_strtod_l+0x4a4>
 80101a0:	08015e49 	.word	0x08015e49
 80101a4:	08015e88 	.word	0x08015e88
 80101a8:	08015e41 	.word	0x08015e41
 80101ac:	08015ecb 	.word	0x08015ecb
 80101b0:	080161a3 	.word	0x080161a3
 80101b4:	08016068 	.word	0x08016068
 80101b8:	08016040 	.word	0x08016040
 80101bc:	7ff00000 	.word	0x7ff00000
 80101c0:	7ca00000 	.word	0x7ca00000
 80101c4:	7fefffff 	.word	0x7fefffff
 80101c8:	f018 0310 	ands.w	r3, r8, #16
 80101cc:	bf18      	it	ne
 80101ce:	236a      	movne	r3, #106	; 0x6a
 80101d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010588 <_strtod_l+0x978>
 80101d4:	9304      	str	r3, [sp, #16]
 80101d6:	4650      	mov	r0, sl
 80101d8:	4659      	mov	r1, fp
 80101da:	2300      	movs	r3, #0
 80101dc:	f018 0f01 	tst.w	r8, #1
 80101e0:	d004      	beq.n	80101ec <_strtod_l+0x5dc>
 80101e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80101e6:	f7f0 fa17 	bl	8000618 <__aeabi_dmul>
 80101ea:	2301      	movs	r3, #1
 80101ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80101f0:	f109 0908 	add.w	r9, r9, #8
 80101f4:	d1f2      	bne.n	80101dc <_strtod_l+0x5cc>
 80101f6:	b10b      	cbz	r3, 80101fc <_strtod_l+0x5ec>
 80101f8:	4682      	mov	sl, r0
 80101fa:	468b      	mov	fp, r1
 80101fc:	9b04      	ldr	r3, [sp, #16]
 80101fe:	b1bb      	cbz	r3, 8010230 <_strtod_l+0x620>
 8010200:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010208:	2b00      	cmp	r3, #0
 801020a:	4659      	mov	r1, fp
 801020c:	dd10      	ble.n	8010230 <_strtod_l+0x620>
 801020e:	2b1f      	cmp	r3, #31
 8010210:	f340 8128 	ble.w	8010464 <_strtod_l+0x854>
 8010214:	2b34      	cmp	r3, #52	; 0x34
 8010216:	bfde      	ittt	le
 8010218:	3b20      	suble	r3, #32
 801021a:	f04f 32ff 	movle.w	r2, #4294967295
 801021e:	fa02 f303 	lslle.w	r3, r2, r3
 8010222:	f04f 0a00 	mov.w	sl, #0
 8010226:	bfcc      	ite	gt
 8010228:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801022c:	ea03 0b01 	andle.w	fp, r3, r1
 8010230:	2200      	movs	r2, #0
 8010232:	2300      	movs	r3, #0
 8010234:	4650      	mov	r0, sl
 8010236:	4659      	mov	r1, fp
 8010238:	f7f0 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 801023c:	2800      	cmp	r0, #0
 801023e:	d1a4      	bne.n	801018a <_strtod_l+0x57a>
 8010240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010246:	462b      	mov	r3, r5
 8010248:	463a      	mov	r2, r7
 801024a:	4620      	mov	r0, r4
 801024c:	f001 fe5c 	bl	8011f08 <__s2b>
 8010250:	9009      	str	r0, [sp, #36]	; 0x24
 8010252:	2800      	cmp	r0, #0
 8010254:	f43f af24 	beq.w	80100a0 <_strtod_l+0x490>
 8010258:	9b07      	ldr	r3, [sp, #28]
 801025a:	1b9e      	subs	r6, r3, r6
 801025c:	9b08      	ldr	r3, [sp, #32]
 801025e:	2b00      	cmp	r3, #0
 8010260:	bfb4      	ite	lt
 8010262:	4633      	movlt	r3, r6
 8010264:	2300      	movge	r3, #0
 8010266:	9310      	str	r3, [sp, #64]	; 0x40
 8010268:	9b08      	ldr	r3, [sp, #32]
 801026a:	2500      	movs	r5, #0
 801026c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010270:	9318      	str	r3, [sp, #96]	; 0x60
 8010272:	462e      	mov	r6, r5
 8010274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010276:	4620      	mov	r0, r4
 8010278:	6859      	ldr	r1, [r3, #4]
 801027a:	f001 fd99 	bl	8011db0 <_Balloc>
 801027e:	9007      	str	r0, [sp, #28]
 8010280:	2800      	cmp	r0, #0
 8010282:	f43f af11 	beq.w	80100a8 <_strtod_l+0x498>
 8010286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010288:	691a      	ldr	r2, [r3, #16]
 801028a:	3202      	adds	r2, #2
 801028c:	f103 010c 	add.w	r1, r3, #12
 8010290:	0092      	lsls	r2, r2, #2
 8010292:	300c      	adds	r0, #12
 8010294:	f7fe fd64 	bl	800ed60 <memcpy>
 8010298:	ec4b ab10 	vmov	d0, sl, fp
 801029c:	aa20      	add	r2, sp, #128	; 0x80
 801029e:	a91f      	add	r1, sp, #124	; 0x7c
 80102a0:	4620      	mov	r0, r4
 80102a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80102a6:	f002 f96b 	bl	8012580 <__d2b>
 80102aa:	901e      	str	r0, [sp, #120]	; 0x78
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f43f aefb 	beq.w	80100a8 <_strtod_l+0x498>
 80102b2:	2101      	movs	r1, #1
 80102b4:	4620      	mov	r0, r4
 80102b6:	f001 fec1 	bl	801203c <__i2b>
 80102ba:	4606      	mov	r6, r0
 80102bc:	2800      	cmp	r0, #0
 80102be:	f43f aef3 	beq.w	80100a8 <_strtod_l+0x498>
 80102c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80102c4:	9904      	ldr	r1, [sp, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bfab      	itete	ge
 80102ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80102cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80102ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80102d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80102d4:	bfac      	ite	ge
 80102d6:	eb03 0902 	addge.w	r9, r3, r2
 80102da:	1ad7      	sublt	r7, r2, r3
 80102dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80102de:	eba3 0801 	sub.w	r8, r3, r1
 80102e2:	4490      	add	r8, r2
 80102e4:	4ba3      	ldr	r3, [pc, #652]	; (8010574 <_strtod_l+0x964>)
 80102e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80102ea:	4598      	cmp	r8, r3
 80102ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80102f0:	f280 80cc 	bge.w	801048c <_strtod_l+0x87c>
 80102f4:	eba3 0308 	sub.w	r3, r3, r8
 80102f8:	2b1f      	cmp	r3, #31
 80102fa:	eba2 0203 	sub.w	r2, r2, r3
 80102fe:	f04f 0101 	mov.w	r1, #1
 8010302:	f300 80b6 	bgt.w	8010472 <_strtod_l+0x862>
 8010306:	fa01 f303 	lsl.w	r3, r1, r3
 801030a:	9311      	str	r3, [sp, #68]	; 0x44
 801030c:	2300      	movs	r3, #0
 801030e:	930c      	str	r3, [sp, #48]	; 0x30
 8010310:	eb09 0802 	add.w	r8, r9, r2
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	45c1      	cmp	r9, r8
 8010318:	4417      	add	r7, r2
 801031a:	441f      	add	r7, r3
 801031c:	464b      	mov	r3, r9
 801031e:	bfa8      	it	ge
 8010320:	4643      	movge	r3, r8
 8010322:	42bb      	cmp	r3, r7
 8010324:	bfa8      	it	ge
 8010326:	463b      	movge	r3, r7
 8010328:	2b00      	cmp	r3, #0
 801032a:	bfc2      	ittt	gt
 801032c:	eba8 0803 	subgt.w	r8, r8, r3
 8010330:	1aff      	subgt	r7, r7, r3
 8010332:	eba9 0903 	subgt.w	r9, r9, r3
 8010336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010338:	2b00      	cmp	r3, #0
 801033a:	dd17      	ble.n	801036c <_strtod_l+0x75c>
 801033c:	4631      	mov	r1, r6
 801033e:	461a      	mov	r2, r3
 8010340:	4620      	mov	r0, r4
 8010342:	f001 ff37 	bl	80121b4 <__pow5mult>
 8010346:	4606      	mov	r6, r0
 8010348:	2800      	cmp	r0, #0
 801034a:	f43f aead 	beq.w	80100a8 <_strtod_l+0x498>
 801034e:	4601      	mov	r1, r0
 8010350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010352:	4620      	mov	r0, r4
 8010354:	f001 fe88 	bl	8012068 <__multiply>
 8010358:	900f      	str	r0, [sp, #60]	; 0x3c
 801035a:	2800      	cmp	r0, #0
 801035c:	f43f aea4 	beq.w	80100a8 <_strtod_l+0x498>
 8010360:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010362:	4620      	mov	r0, r4
 8010364:	f001 fd64 	bl	8011e30 <_Bfree>
 8010368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801036a:	931e      	str	r3, [sp, #120]	; 0x78
 801036c:	f1b8 0f00 	cmp.w	r8, #0
 8010370:	f300 8091 	bgt.w	8010496 <_strtod_l+0x886>
 8010374:	9b08      	ldr	r3, [sp, #32]
 8010376:	2b00      	cmp	r3, #0
 8010378:	dd08      	ble.n	801038c <_strtod_l+0x77c>
 801037a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801037c:	9907      	ldr	r1, [sp, #28]
 801037e:	4620      	mov	r0, r4
 8010380:	f001 ff18 	bl	80121b4 <__pow5mult>
 8010384:	9007      	str	r0, [sp, #28]
 8010386:	2800      	cmp	r0, #0
 8010388:	f43f ae8e 	beq.w	80100a8 <_strtod_l+0x498>
 801038c:	2f00      	cmp	r7, #0
 801038e:	dd08      	ble.n	80103a2 <_strtod_l+0x792>
 8010390:	9907      	ldr	r1, [sp, #28]
 8010392:	463a      	mov	r2, r7
 8010394:	4620      	mov	r0, r4
 8010396:	f001 ff67 	bl	8012268 <__lshift>
 801039a:	9007      	str	r0, [sp, #28]
 801039c:	2800      	cmp	r0, #0
 801039e:	f43f ae83 	beq.w	80100a8 <_strtod_l+0x498>
 80103a2:	f1b9 0f00 	cmp.w	r9, #0
 80103a6:	dd08      	ble.n	80103ba <_strtod_l+0x7aa>
 80103a8:	4631      	mov	r1, r6
 80103aa:	464a      	mov	r2, r9
 80103ac:	4620      	mov	r0, r4
 80103ae:	f001 ff5b 	bl	8012268 <__lshift>
 80103b2:	4606      	mov	r6, r0
 80103b4:	2800      	cmp	r0, #0
 80103b6:	f43f ae77 	beq.w	80100a8 <_strtod_l+0x498>
 80103ba:	9a07      	ldr	r2, [sp, #28]
 80103bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103be:	4620      	mov	r0, r4
 80103c0:	f001 ffda 	bl	8012378 <__mdiff>
 80103c4:	4605      	mov	r5, r0
 80103c6:	2800      	cmp	r0, #0
 80103c8:	f43f ae6e 	beq.w	80100a8 <_strtod_l+0x498>
 80103cc:	68c3      	ldr	r3, [r0, #12]
 80103ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80103d0:	2300      	movs	r3, #0
 80103d2:	60c3      	str	r3, [r0, #12]
 80103d4:	4631      	mov	r1, r6
 80103d6:	f001 ffb3 	bl	8012340 <__mcmp>
 80103da:	2800      	cmp	r0, #0
 80103dc:	da65      	bge.n	80104aa <_strtod_l+0x89a>
 80103de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103e0:	ea53 030a 	orrs.w	r3, r3, sl
 80103e4:	f040 8087 	bne.w	80104f6 <_strtod_l+0x8e6>
 80103e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f040 8082 	bne.w	80104f6 <_strtod_l+0x8e6>
 80103f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80103f6:	0d1b      	lsrs	r3, r3, #20
 80103f8:	051b      	lsls	r3, r3, #20
 80103fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80103fe:	d97a      	bls.n	80104f6 <_strtod_l+0x8e6>
 8010400:	696b      	ldr	r3, [r5, #20]
 8010402:	b913      	cbnz	r3, 801040a <_strtod_l+0x7fa>
 8010404:	692b      	ldr	r3, [r5, #16]
 8010406:	2b01      	cmp	r3, #1
 8010408:	dd75      	ble.n	80104f6 <_strtod_l+0x8e6>
 801040a:	4629      	mov	r1, r5
 801040c:	2201      	movs	r2, #1
 801040e:	4620      	mov	r0, r4
 8010410:	f001 ff2a 	bl	8012268 <__lshift>
 8010414:	4631      	mov	r1, r6
 8010416:	4605      	mov	r5, r0
 8010418:	f001 ff92 	bl	8012340 <__mcmp>
 801041c:	2800      	cmp	r0, #0
 801041e:	dd6a      	ble.n	80104f6 <_strtod_l+0x8e6>
 8010420:	9904      	ldr	r1, [sp, #16]
 8010422:	4a55      	ldr	r2, [pc, #340]	; (8010578 <_strtod_l+0x968>)
 8010424:	465b      	mov	r3, fp
 8010426:	2900      	cmp	r1, #0
 8010428:	f000 8085 	beq.w	8010536 <_strtod_l+0x926>
 801042c:	ea02 010b 	and.w	r1, r2, fp
 8010430:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010434:	dc7f      	bgt.n	8010536 <_strtod_l+0x926>
 8010436:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801043a:	f77f aeaa 	ble.w	8010192 <_strtod_l+0x582>
 801043e:	4a4f      	ldr	r2, [pc, #316]	; (801057c <_strtod_l+0x96c>)
 8010440:	2300      	movs	r3, #0
 8010442:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010446:	4650      	mov	r0, sl
 8010448:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801044c:	4659      	mov	r1, fp
 801044e:	f7f0 f8e3 	bl	8000618 <__aeabi_dmul>
 8010452:	460b      	mov	r3, r1
 8010454:	4303      	orrs	r3, r0
 8010456:	bf08      	it	eq
 8010458:	2322      	moveq	r3, #34	; 0x22
 801045a:	4682      	mov	sl, r0
 801045c:	468b      	mov	fp, r1
 801045e:	bf08      	it	eq
 8010460:	6023      	streq	r3, [r4, #0]
 8010462:	e62b      	b.n	80100bc <_strtod_l+0x4ac>
 8010464:	f04f 32ff 	mov.w	r2, #4294967295
 8010468:	fa02 f303 	lsl.w	r3, r2, r3
 801046c:	ea03 0a0a 	and.w	sl, r3, sl
 8010470:	e6de      	b.n	8010230 <_strtod_l+0x620>
 8010472:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010476:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801047a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801047e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010482:	fa01 f308 	lsl.w	r3, r1, r8
 8010486:	930c      	str	r3, [sp, #48]	; 0x30
 8010488:	9111      	str	r1, [sp, #68]	; 0x44
 801048a:	e741      	b.n	8010310 <_strtod_l+0x700>
 801048c:	2300      	movs	r3, #0
 801048e:	930c      	str	r3, [sp, #48]	; 0x30
 8010490:	2301      	movs	r3, #1
 8010492:	9311      	str	r3, [sp, #68]	; 0x44
 8010494:	e73c      	b.n	8010310 <_strtod_l+0x700>
 8010496:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010498:	4642      	mov	r2, r8
 801049a:	4620      	mov	r0, r4
 801049c:	f001 fee4 	bl	8012268 <__lshift>
 80104a0:	901e      	str	r0, [sp, #120]	; 0x78
 80104a2:	2800      	cmp	r0, #0
 80104a4:	f47f af66 	bne.w	8010374 <_strtod_l+0x764>
 80104a8:	e5fe      	b.n	80100a8 <_strtod_l+0x498>
 80104aa:	465f      	mov	r7, fp
 80104ac:	d16e      	bne.n	801058c <_strtod_l+0x97c>
 80104ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104b4:	b342      	cbz	r2, 8010508 <_strtod_l+0x8f8>
 80104b6:	4a32      	ldr	r2, [pc, #200]	; (8010580 <_strtod_l+0x970>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d128      	bne.n	801050e <_strtod_l+0x8fe>
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	4650      	mov	r0, sl
 80104c0:	b1eb      	cbz	r3, 80104fe <_strtod_l+0x8ee>
 80104c2:	4a2d      	ldr	r2, [pc, #180]	; (8010578 <_strtod_l+0x968>)
 80104c4:	403a      	ands	r2, r7
 80104c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80104ca:	f04f 31ff 	mov.w	r1, #4294967295
 80104ce:	d819      	bhi.n	8010504 <_strtod_l+0x8f4>
 80104d0:	0d12      	lsrs	r2, r2, #20
 80104d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80104d6:	fa01 f303 	lsl.w	r3, r1, r3
 80104da:	4298      	cmp	r0, r3
 80104dc:	d117      	bne.n	801050e <_strtod_l+0x8fe>
 80104de:	4b29      	ldr	r3, [pc, #164]	; (8010584 <_strtod_l+0x974>)
 80104e0:	429f      	cmp	r7, r3
 80104e2:	d102      	bne.n	80104ea <_strtod_l+0x8da>
 80104e4:	3001      	adds	r0, #1
 80104e6:	f43f addf 	beq.w	80100a8 <_strtod_l+0x498>
 80104ea:	4b23      	ldr	r3, [pc, #140]	; (8010578 <_strtod_l+0x968>)
 80104ec:	403b      	ands	r3, r7
 80104ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80104f2:	f04f 0a00 	mov.w	sl, #0
 80104f6:	9b04      	ldr	r3, [sp, #16]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1a0      	bne.n	801043e <_strtod_l+0x82e>
 80104fc:	e5de      	b.n	80100bc <_strtod_l+0x4ac>
 80104fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010502:	e7ea      	b.n	80104da <_strtod_l+0x8ca>
 8010504:	460b      	mov	r3, r1
 8010506:	e7e8      	b.n	80104da <_strtod_l+0x8ca>
 8010508:	ea53 030a 	orrs.w	r3, r3, sl
 801050c:	d088      	beq.n	8010420 <_strtod_l+0x810>
 801050e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010510:	b1db      	cbz	r3, 801054a <_strtod_l+0x93a>
 8010512:	423b      	tst	r3, r7
 8010514:	d0ef      	beq.n	80104f6 <_strtod_l+0x8e6>
 8010516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010518:	9a04      	ldr	r2, [sp, #16]
 801051a:	4650      	mov	r0, sl
 801051c:	4659      	mov	r1, fp
 801051e:	b1c3      	cbz	r3, 8010552 <_strtod_l+0x942>
 8010520:	f7ff fb57 	bl	800fbd2 <sulp>
 8010524:	4602      	mov	r2, r0
 8010526:	460b      	mov	r3, r1
 8010528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801052c:	f7ef febe 	bl	80002ac <__adddf3>
 8010530:	4682      	mov	sl, r0
 8010532:	468b      	mov	fp, r1
 8010534:	e7df      	b.n	80104f6 <_strtod_l+0x8e6>
 8010536:	4013      	ands	r3, r2
 8010538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801053c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010540:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010544:	f04f 3aff 	mov.w	sl, #4294967295
 8010548:	e7d5      	b.n	80104f6 <_strtod_l+0x8e6>
 801054a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801054c:	ea13 0f0a 	tst.w	r3, sl
 8010550:	e7e0      	b.n	8010514 <_strtod_l+0x904>
 8010552:	f7ff fb3e 	bl	800fbd2 <sulp>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801055e:	f7ef fea3 	bl	80002a8 <__aeabi_dsub>
 8010562:	2200      	movs	r2, #0
 8010564:	2300      	movs	r3, #0
 8010566:	4682      	mov	sl, r0
 8010568:	468b      	mov	fp, r1
 801056a:	f7f0 fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 801056e:	2800      	cmp	r0, #0
 8010570:	d0c1      	beq.n	80104f6 <_strtod_l+0x8e6>
 8010572:	e60e      	b.n	8010192 <_strtod_l+0x582>
 8010574:	fffffc02 	.word	0xfffffc02
 8010578:	7ff00000 	.word	0x7ff00000
 801057c:	39500000 	.word	0x39500000
 8010580:	000fffff 	.word	0x000fffff
 8010584:	7fefffff 	.word	0x7fefffff
 8010588:	08015ea0 	.word	0x08015ea0
 801058c:	4631      	mov	r1, r6
 801058e:	4628      	mov	r0, r5
 8010590:	f002 f852 	bl	8012638 <__ratio>
 8010594:	ec59 8b10 	vmov	r8, r9, d0
 8010598:	ee10 0a10 	vmov	r0, s0
 801059c:	2200      	movs	r2, #0
 801059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105a2:	4649      	mov	r1, r9
 80105a4:	f7f0 fab4 	bl	8000b10 <__aeabi_dcmple>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d07c      	beq.n	80106a6 <_strtod_l+0xa96>
 80105ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d04c      	beq.n	801064c <_strtod_l+0xa3c>
 80105b2:	4b95      	ldr	r3, [pc, #596]	; (8010808 <_strtod_l+0xbf8>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80105ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010808 <_strtod_l+0xbf8>
 80105be:	f04f 0800 	mov.w	r8, #0
 80105c2:	4b92      	ldr	r3, [pc, #584]	; (801080c <_strtod_l+0xbfc>)
 80105c4:	403b      	ands	r3, r7
 80105c6:	9311      	str	r3, [sp, #68]	; 0x44
 80105c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80105ca:	4b91      	ldr	r3, [pc, #580]	; (8010810 <_strtod_l+0xc00>)
 80105cc:	429a      	cmp	r2, r3
 80105ce:	f040 80b2 	bne.w	8010736 <_strtod_l+0xb26>
 80105d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80105d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80105de:	ec4b ab10 	vmov	d0, sl, fp
 80105e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80105e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80105ea:	f001 ff4d 	bl	8012488 <__ulp>
 80105ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105f2:	ec53 2b10 	vmov	r2, r3, d0
 80105f6:	f7f0 f80f 	bl	8000618 <__aeabi_dmul>
 80105fa:	4652      	mov	r2, sl
 80105fc:	465b      	mov	r3, fp
 80105fe:	f7ef fe55 	bl	80002ac <__adddf3>
 8010602:	460b      	mov	r3, r1
 8010604:	4981      	ldr	r1, [pc, #516]	; (801080c <_strtod_l+0xbfc>)
 8010606:	4a83      	ldr	r2, [pc, #524]	; (8010814 <_strtod_l+0xc04>)
 8010608:	4019      	ands	r1, r3
 801060a:	4291      	cmp	r1, r2
 801060c:	4682      	mov	sl, r0
 801060e:	d95e      	bls.n	80106ce <_strtod_l+0xabe>
 8010610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010612:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010616:	4293      	cmp	r3, r2
 8010618:	d103      	bne.n	8010622 <_strtod_l+0xa12>
 801061a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801061c:	3301      	adds	r3, #1
 801061e:	f43f ad43 	beq.w	80100a8 <_strtod_l+0x498>
 8010622:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010820 <_strtod_l+0xc10>
 8010626:	f04f 3aff 	mov.w	sl, #4294967295
 801062a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801062c:	4620      	mov	r0, r4
 801062e:	f001 fbff 	bl	8011e30 <_Bfree>
 8010632:	9907      	ldr	r1, [sp, #28]
 8010634:	4620      	mov	r0, r4
 8010636:	f001 fbfb 	bl	8011e30 <_Bfree>
 801063a:	4631      	mov	r1, r6
 801063c:	4620      	mov	r0, r4
 801063e:	f001 fbf7 	bl	8011e30 <_Bfree>
 8010642:	4629      	mov	r1, r5
 8010644:	4620      	mov	r0, r4
 8010646:	f001 fbf3 	bl	8011e30 <_Bfree>
 801064a:	e613      	b.n	8010274 <_strtod_l+0x664>
 801064c:	f1ba 0f00 	cmp.w	sl, #0
 8010650:	d11b      	bne.n	801068a <_strtod_l+0xa7a>
 8010652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010656:	b9f3      	cbnz	r3, 8010696 <_strtod_l+0xa86>
 8010658:	4b6b      	ldr	r3, [pc, #428]	; (8010808 <_strtod_l+0xbf8>)
 801065a:	2200      	movs	r2, #0
 801065c:	4640      	mov	r0, r8
 801065e:	4649      	mov	r1, r9
 8010660:	f7f0 fa4c 	bl	8000afc <__aeabi_dcmplt>
 8010664:	b9d0      	cbnz	r0, 801069c <_strtod_l+0xa8c>
 8010666:	4640      	mov	r0, r8
 8010668:	4649      	mov	r1, r9
 801066a:	4b6b      	ldr	r3, [pc, #428]	; (8010818 <_strtod_l+0xc08>)
 801066c:	2200      	movs	r2, #0
 801066e:	f7ef ffd3 	bl	8000618 <__aeabi_dmul>
 8010672:	4680      	mov	r8, r0
 8010674:	4689      	mov	r9, r1
 8010676:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801067a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801067e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010680:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010684:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010688:	e79b      	b.n	80105c2 <_strtod_l+0x9b2>
 801068a:	f1ba 0f01 	cmp.w	sl, #1
 801068e:	d102      	bne.n	8010696 <_strtod_l+0xa86>
 8010690:	2f00      	cmp	r7, #0
 8010692:	f43f ad7e 	beq.w	8010192 <_strtod_l+0x582>
 8010696:	4b61      	ldr	r3, [pc, #388]	; (801081c <_strtod_l+0xc0c>)
 8010698:	2200      	movs	r2, #0
 801069a:	e78c      	b.n	80105b6 <_strtod_l+0x9a6>
 801069c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010818 <_strtod_l+0xc08>
 80106a0:	f04f 0800 	mov.w	r8, #0
 80106a4:	e7e7      	b.n	8010676 <_strtod_l+0xa66>
 80106a6:	4b5c      	ldr	r3, [pc, #368]	; (8010818 <_strtod_l+0xc08>)
 80106a8:	4640      	mov	r0, r8
 80106aa:	4649      	mov	r1, r9
 80106ac:	2200      	movs	r2, #0
 80106ae:	f7ef ffb3 	bl	8000618 <__aeabi_dmul>
 80106b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106b4:	4680      	mov	r8, r0
 80106b6:	4689      	mov	r9, r1
 80106b8:	b933      	cbnz	r3, 80106c8 <_strtod_l+0xab8>
 80106ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106be:	9012      	str	r0, [sp, #72]	; 0x48
 80106c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80106c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80106c6:	e7dd      	b.n	8010684 <_strtod_l+0xa74>
 80106c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80106cc:	e7f9      	b.n	80106c2 <_strtod_l+0xab2>
 80106ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80106d2:	9b04      	ldr	r3, [sp, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1a8      	bne.n	801062a <_strtod_l+0xa1a>
 80106d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80106dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106de:	0d1b      	lsrs	r3, r3, #20
 80106e0:	051b      	lsls	r3, r3, #20
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d1a1      	bne.n	801062a <_strtod_l+0xa1a>
 80106e6:	4640      	mov	r0, r8
 80106e8:	4649      	mov	r1, r9
 80106ea:	f7f0 faf5 	bl	8000cd8 <__aeabi_d2lz>
 80106ee:	f7ef ff65 	bl	80005bc <__aeabi_l2d>
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	4640      	mov	r0, r8
 80106f8:	4649      	mov	r1, r9
 80106fa:	f7ef fdd5 	bl	80002a8 <__aeabi_dsub>
 80106fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010704:	ea43 030a 	orr.w	r3, r3, sl
 8010708:	4313      	orrs	r3, r2
 801070a:	4680      	mov	r8, r0
 801070c:	4689      	mov	r9, r1
 801070e:	d053      	beq.n	80107b8 <_strtod_l+0xba8>
 8010710:	a335      	add	r3, pc, #212	; (adr r3, 80107e8 <_strtod_l+0xbd8>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	f7f0 f9f1 	bl	8000afc <__aeabi_dcmplt>
 801071a:	2800      	cmp	r0, #0
 801071c:	f47f acce 	bne.w	80100bc <_strtod_l+0x4ac>
 8010720:	a333      	add	r3, pc, #204	; (adr r3, 80107f0 <_strtod_l+0xbe0>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	4640      	mov	r0, r8
 8010728:	4649      	mov	r1, r9
 801072a:	f7f0 fa05 	bl	8000b38 <__aeabi_dcmpgt>
 801072e:	2800      	cmp	r0, #0
 8010730:	f43f af7b 	beq.w	801062a <_strtod_l+0xa1a>
 8010734:	e4c2      	b.n	80100bc <_strtod_l+0x4ac>
 8010736:	9b04      	ldr	r3, [sp, #16]
 8010738:	b333      	cbz	r3, 8010788 <_strtod_l+0xb78>
 801073a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801073c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010740:	d822      	bhi.n	8010788 <_strtod_l+0xb78>
 8010742:	a32d      	add	r3, pc, #180	; (adr r3, 80107f8 <_strtod_l+0xbe8>)
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	4640      	mov	r0, r8
 801074a:	4649      	mov	r1, r9
 801074c:	f7f0 f9e0 	bl	8000b10 <__aeabi_dcmple>
 8010750:	b1a0      	cbz	r0, 801077c <_strtod_l+0xb6c>
 8010752:	4649      	mov	r1, r9
 8010754:	4640      	mov	r0, r8
 8010756:	f7f0 fa37 	bl	8000bc8 <__aeabi_d2uiz>
 801075a:	2801      	cmp	r0, #1
 801075c:	bf38      	it	cc
 801075e:	2001      	movcc	r0, #1
 8010760:	f7ef fee0 	bl	8000524 <__aeabi_ui2d>
 8010764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010766:	4680      	mov	r8, r0
 8010768:	4689      	mov	r9, r1
 801076a:	bb13      	cbnz	r3, 80107b2 <_strtod_l+0xba2>
 801076c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010770:	9014      	str	r0, [sp, #80]	; 0x50
 8010772:	9315      	str	r3, [sp, #84]	; 0x54
 8010774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010778:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801077c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801077e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010780:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010784:	1a9b      	subs	r3, r3, r2
 8010786:	930d      	str	r3, [sp, #52]	; 0x34
 8010788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801078c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010794:	f001 fe78 	bl	8012488 <__ulp>
 8010798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801079c:	ec53 2b10 	vmov	r2, r3, d0
 80107a0:	f7ef ff3a 	bl	8000618 <__aeabi_dmul>
 80107a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80107a8:	f7ef fd80 	bl	80002ac <__adddf3>
 80107ac:	4682      	mov	sl, r0
 80107ae:	468b      	mov	fp, r1
 80107b0:	e78f      	b.n	80106d2 <_strtod_l+0xac2>
 80107b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80107b6:	e7dd      	b.n	8010774 <_strtod_l+0xb64>
 80107b8:	a311      	add	r3, pc, #68	; (adr r3, 8010800 <_strtod_l+0xbf0>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	f7f0 f99d 	bl	8000afc <__aeabi_dcmplt>
 80107c2:	e7b4      	b.n	801072e <_strtod_l+0xb1e>
 80107c4:	2300      	movs	r3, #0
 80107c6:	930e      	str	r3, [sp, #56]	; 0x38
 80107c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80107ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107cc:	6013      	str	r3, [r2, #0]
 80107ce:	f7ff ba65 	b.w	800fc9c <_strtod_l+0x8c>
 80107d2:	2b65      	cmp	r3, #101	; 0x65
 80107d4:	f43f ab5d 	beq.w	800fe92 <_strtod_l+0x282>
 80107d8:	2b45      	cmp	r3, #69	; 0x45
 80107da:	f43f ab5a 	beq.w	800fe92 <_strtod_l+0x282>
 80107de:	2201      	movs	r2, #1
 80107e0:	f7ff bb92 	b.w	800ff08 <_strtod_l+0x2f8>
 80107e4:	f3af 8000 	nop.w
 80107e8:	94a03595 	.word	0x94a03595
 80107ec:	3fdfffff 	.word	0x3fdfffff
 80107f0:	35afe535 	.word	0x35afe535
 80107f4:	3fe00000 	.word	0x3fe00000
 80107f8:	ffc00000 	.word	0xffc00000
 80107fc:	41dfffff 	.word	0x41dfffff
 8010800:	94a03595 	.word	0x94a03595
 8010804:	3fcfffff 	.word	0x3fcfffff
 8010808:	3ff00000 	.word	0x3ff00000
 801080c:	7ff00000 	.word	0x7ff00000
 8010810:	7fe00000 	.word	0x7fe00000
 8010814:	7c9fffff 	.word	0x7c9fffff
 8010818:	3fe00000 	.word	0x3fe00000
 801081c:	bff00000 	.word	0xbff00000
 8010820:	7fefffff 	.word	0x7fefffff

08010824 <_strtod_r>:
 8010824:	4b01      	ldr	r3, [pc, #4]	; (801082c <_strtod_r+0x8>)
 8010826:	f7ff b9f3 	b.w	800fc10 <_strtod_l>
 801082a:	bf00      	nop
 801082c:	200002dc 	.word	0x200002dc

08010830 <_strtol_l.isra.0>:
 8010830:	2b01      	cmp	r3, #1
 8010832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010836:	d001      	beq.n	801083c <_strtol_l.isra.0+0xc>
 8010838:	2b24      	cmp	r3, #36	; 0x24
 801083a:	d906      	bls.n	801084a <_strtol_l.isra.0+0x1a>
 801083c:	f7fe fa66 	bl	800ed0c <__errno>
 8010840:	2316      	movs	r3, #22
 8010842:	6003      	str	r3, [r0, #0]
 8010844:	2000      	movs	r0, #0
 8010846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801084a:	4f3a      	ldr	r7, [pc, #232]	; (8010934 <_strtol_l.isra.0+0x104>)
 801084c:	468e      	mov	lr, r1
 801084e:	4676      	mov	r6, lr
 8010850:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010854:	5de5      	ldrb	r5, [r4, r7]
 8010856:	f015 0508 	ands.w	r5, r5, #8
 801085a:	d1f8      	bne.n	801084e <_strtol_l.isra.0+0x1e>
 801085c:	2c2d      	cmp	r4, #45	; 0x2d
 801085e:	d134      	bne.n	80108ca <_strtol_l.isra.0+0x9a>
 8010860:	f89e 4000 	ldrb.w	r4, [lr]
 8010864:	f04f 0801 	mov.w	r8, #1
 8010868:	f106 0e02 	add.w	lr, r6, #2
 801086c:	2b00      	cmp	r3, #0
 801086e:	d05c      	beq.n	801092a <_strtol_l.isra.0+0xfa>
 8010870:	2b10      	cmp	r3, #16
 8010872:	d10c      	bne.n	801088e <_strtol_l.isra.0+0x5e>
 8010874:	2c30      	cmp	r4, #48	; 0x30
 8010876:	d10a      	bne.n	801088e <_strtol_l.isra.0+0x5e>
 8010878:	f89e 4000 	ldrb.w	r4, [lr]
 801087c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010880:	2c58      	cmp	r4, #88	; 0x58
 8010882:	d14d      	bne.n	8010920 <_strtol_l.isra.0+0xf0>
 8010884:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010888:	2310      	movs	r3, #16
 801088a:	f10e 0e02 	add.w	lr, lr, #2
 801088e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8010892:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010896:	2600      	movs	r6, #0
 8010898:	fbbc f9f3 	udiv	r9, ip, r3
 801089c:	4635      	mov	r5, r6
 801089e:	fb03 ca19 	mls	sl, r3, r9, ip
 80108a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80108a6:	2f09      	cmp	r7, #9
 80108a8:	d818      	bhi.n	80108dc <_strtol_l.isra.0+0xac>
 80108aa:	463c      	mov	r4, r7
 80108ac:	42a3      	cmp	r3, r4
 80108ae:	dd24      	ble.n	80108fa <_strtol_l.isra.0+0xca>
 80108b0:	2e00      	cmp	r6, #0
 80108b2:	db1f      	blt.n	80108f4 <_strtol_l.isra.0+0xc4>
 80108b4:	45a9      	cmp	r9, r5
 80108b6:	d31d      	bcc.n	80108f4 <_strtol_l.isra.0+0xc4>
 80108b8:	d101      	bne.n	80108be <_strtol_l.isra.0+0x8e>
 80108ba:	45a2      	cmp	sl, r4
 80108bc:	db1a      	blt.n	80108f4 <_strtol_l.isra.0+0xc4>
 80108be:	fb05 4503 	mla	r5, r5, r3, r4
 80108c2:	2601      	movs	r6, #1
 80108c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80108c8:	e7eb      	b.n	80108a2 <_strtol_l.isra.0+0x72>
 80108ca:	2c2b      	cmp	r4, #43	; 0x2b
 80108cc:	bf08      	it	eq
 80108ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80108d2:	46a8      	mov	r8, r5
 80108d4:	bf08      	it	eq
 80108d6:	f106 0e02 	addeq.w	lr, r6, #2
 80108da:	e7c7      	b.n	801086c <_strtol_l.isra.0+0x3c>
 80108dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80108e0:	2f19      	cmp	r7, #25
 80108e2:	d801      	bhi.n	80108e8 <_strtol_l.isra.0+0xb8>
 80108e4:	3c37      	subs	r4, #55	; 0x37
 80108e6:	e7e1      	b.n	80108ac <_strtol_l.isra.0+0x7c>
 80108e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80108ec:	2f19      	cmp	r7, #25
 80108ee:	d804      	bhi.n	80108fa <_strtol_l.isra.0+0xca>
 80108f0:	3c57      	subs	r4, #87	; 0x57
 80108f2:	e7db      	b.n	80108ac <_strtol_l.isra.0+0x7c>
 80108f4:	f04f 36ff 	mov.w	r6, #4294967295
 80108f8:	e7e4      	b.n	80108c4 <_strtol_l.isra.0+0x94>
 80108fa:	2e00      	cmp	r6, #0
 80108fc:	da05      	bge.n	801090a <_strtol_l.isra.0+0xda>
 80108fe:	2322      	movs	r3, #34	; 0x22
 8010900:	6003      	str	r3, [r0, #0]
 8010902:	4665      	mov	r5, ip
 8010904:	b942      	cbnz	r2, 8010918 <_strtol_l.isra.0+0xe8>
 8010906:	4628      	mov	r0, r5
 8010908:	e79d      	b.n	8010846 <_strtol_l.isra.0+0x16>
 801090a:	f1b8 0f00 	cmp.w	r8, #0
 801090e:	d000      	beq.n	8010912 <_strtol_l.isra.0+0xe2>
 8010910:	426d      	negs	r5, r5
 8010912:	2a00      	cmp	r2, #0
 8010914:	d0f7      	beq.n	8010906 <_strtol_l.isra.0+0xd6>
 8010916:	b10e      	cbz	r6, 801091c <_strtol_l.isra.0+0xec>
 8010918:	f10e 31ff 	add.w	r1, lr, #4294967295
 801091c:	6011      	str	r1, [r2, #0]
 801091e:	e7f2      	b.n	8010906 <_strtol_l.isra.0+0xd6>
 8010920:	2430      	movs	r4, #48	; 0x30
 8010922:	2b00      	cmp	r3, #0
 8010924:	d1b3      	bne.n	801088e <_strtol_l.isra.0+0x5e>
 8010926:	2308      	movs	r3, #8
 8010928:	e7b1      	b.n	801088e <_strtol_l.isra.0+0x5e>
 801092a:	2c30      	cmp	r4, #48	; 0x30
 801092c:	d0a4      	beq.n	8010878 <_strtol_l.isra.0+0x48>
 801092e:	230a      	movs	r3, #10
 8010930:	e7ad      	b.n	801088e <_strtol_l.isra.0+0x5e>
 8010932:	bf00      	nop
 8010934:	08015d35 	.word	0x08015d35

08010938 <_strtol_r>:
 8010938:	f7ff bf7a 	b.w	8010830 <_strtol_l.isra.0>

0801093c <_write_r>:
 801093c:	b538      	push	{r3, r4, r5, lr}
 801093e:	4d07      	ldr	r5, [pc, #28]	; (801095c <_write_r+0x20>)
 8010940:	4604      	mov	r4, r0
 8010942:	4608      	mov	r0, r1
 8010944:	4611      	mov	r1, r2
 8010946:	2200      	movs	r2, #0
 8010948:	602a      	str	r2, [r5, #0]
 801094a:	461a      	mov	r2, r3
 801094c:	f7f7 f8d9 	bl	8007b02 <_write>
 8010950:	1c43      	adds	r3, r0, #1
 8010952:	d102      	bne.n	801095a <_write_r+0x1e>
 8010954:	682b      	ldr	r3, [r5, #0]
 8010956:	b103      	cbz	r3, 801095a <_write_r+0x1e>
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	bd38      	pop	{r3, r4, r5, pc}
 801095c:	20002eb8 	.word	0x20002eb8

08010960 <_close_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4d06      	ldr	r5, [pc, #24]	; (801097c <_close_r+0x1c>)
 8010964:	2300      	movs	r3, #0
 8010966:	4604      	mov	r4, r0
 8010968:	4608      	mov	r0, r1
 801096a:	602b      	str	r3, [r5, #0]
 801096c:	f7f7 f8e5 	bl	8007b3a <_close>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_close_r+0x1a>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_close_r+0x1a>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	20002eb8 	.word	0x20002eb8

08010980 <quorem>:
 8010980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	6903      	ldr	r3, [r0, #16]
 8010986:	690c      	ldr	r4, [r1, #16]
 8010988:	42a3      	cmp	r3, r4
 801098a:	4607      	mov	r7, r0
 801098c:	f2c0 8081 	blt.w	8010a92 <quorem+0x112>
 8010990:	3c01      	subs	r4, #1
 8010992:	f101 0814 	add.w	r8, r1, #20
 8010996:	f100 0514 	add.w	r5, r0, #20
 801099a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109a8:	3301      	adds	r3, #1
 80109aa:	429a      	cmp	r2, r3
 80109ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80109b8:	d331      	bcc.n	8010a1e <quorem+0x9e>
 80109ba:	f04f 0e00 	mov.w	lr, #0
 80109be:	4640      	mov	r0, r8
 80109c0:	46ac      	mov	ip, r5
 80109c2:	46f2      	mov	sl, lr
 80109c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80109c8:	b293      	uxth	r3, r2
 80109ca:	fb06 e303 	mla	r3, r6, r3, lr
 80109ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	ebaa 0303 	sub.w	r3, sl, r3
 80109d8:	0c12      	lsrs	r2, r2, #16
 80109da:	f8dc a000 	ldr.w	sl, [ip]
 80109de:	fb06 e202 	mla	r2, r6, r2, lr
 80109e2:	fa13 f38a 	uxtah	r3, r3, sl
 80109e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109ea:	fa1f fa82 	uxth.w	sl, r2
 80109ee:	f8dc 2000 	ldr.w	r2, [ip]
 80109f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80109f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a00:	4581      	cmp	r9, r0
 8010a02:	f84c 3b04 	str.w	r3, [ip], #4
 8010a06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a0a:	d2db      	bcs.n	80109c4 <quorem+0x44>
 8010a0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a10:	b92b      	cbnz	r3, 8010a1e <quorem+0x9e>
 8010a12:	9b01      	ldr	r3, [sp, #4]
 8010a14:	3b04      	subs	r3, #4
 8010a16:	429d      	cmp	r5, r3
 8010a18:	461a      	mov	r2, r3
 8010a1a:	d32e      	bcc.n	8010a7a <quorem+0xfa>
 8010a1c:	613c      	str	r4, [r7, #16]
 8010a1e:	4638      	mov	r0, r7
 8010a20:	f001 fc8e 	bl	8012340 <__mcmp>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	db24      	blt.n	8010a72 <quorem+0xf2>
 8010a28:	3601      	adds	r6, #1
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	f04f 0c00 	mov.w	ip, #0
 8010a30:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a34:	f8d0 e000 	ldr.w	lr, [r0]
 8010a38:	b293      	uxth	r3, r2
 8010a3a:	ebac 0303 	sub.w	r3, ip, r3
 8010a3e:	0c12      	lsrs	r2, r2, #16
 8010a40:	fa13 f38e 	uxtah	r3, r3, lr
 8010a44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a52:	45c1      	cmp	r9, r8
 8010a54:	f840 3b04 	str.w	r3, [r0], #4
 8010a58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a5c:	d2e8      	bcs.n	8010a30 <quorem+0xb0>
 8010a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a66:	b922      	cbnz	r2, 8010a72 <quorem+0xf2>
 8010a68:	3b04      	subs	r3, #4
 8010a6a:	429d      	cmp	r5, r3
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	d30a      	bcc.n	8010a86 <quorem+0x106>
 8010a70:	613c      	str	r4, [r7, #16]
 8010a72:	4630      	mov	r0, r6
 8010a74:	b003      	add	sp, #12
 8010a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7a:	6812      	ldr	r2, [r2, #0]
 8010a7c:	3b04      	subs	r3, #4
 8010a7e:	2a00      	cmp	r2, #0
 8010a80:	d1cc      	bne.n	8010a1c <quorem+0x9c>
 8010a82:	3c01      	subs	r4, #1
 8010a84:	e7c7      	b.n	8010a16 <quorem+0x96>
 8010a86:	6812      	ldr	r2, [r2, #0]
 8010a88:	3b04      	subs	r3, #4
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	d1f0      	bne.n	8010a70 <quorem+0xf0>
 8010a8e:	3c01      	subs	r4, #1
 8010a90:	e7eb      	b.n	8010a6a <quorem+0xea>
 8010a92:	2000      	movs	r0, #0
 8010a94:	e7ee      	b.n	8010a74 <quorem+0xf4>
	...

08010a98 <_dtoa_r>:
 8010a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	ed2d 8b02 	vpush	{d8}
 8010aa0:	ec57 6b10 	vmov	r6, r7, d0
 8010aa4:	b095      	sub	sp, #84	; 0x54
 8010aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010aa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010aac:	9105      	str	r1, [sp, #20]
 8010aae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ab8:	b975      	cbnz	r5, 8010ad8 <_dtoa_r+0x40>
 8010aba:	2010      	movs	r0, #16
 8010abc:	f001 f95e 	bl	8011d7c <malloc>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8010ac4:	b920      	cbnz	r0, 8010ad0 <_dtoa_r+0x38>
 8010ac6:	4bb2      	ldr	r3, [pc, #712]	; (8010d90 <_dtoa_r+0x2f8>)
 8010ac8:	21ea      	movs	r1, #234	; 0xea
 8010aca:	48b2      	ldr	r0, [pc, #712]	; (8010d94 <_dtoa_r+0x2fc>)
 8010acc:	f002 fc88 	bl	80133e0 <__assert_func>
 8010ad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ad4:	6005      	str	r5, [r0, #0]
 8010ad6:	60c5      	str	r5, [r0, #12]
 8010ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ada:	6819      	ldr	r1, [r3, #0]
 8010adc:	b151      	cbz	r1, 8010af4 <_dtoa_r+0x5c>
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	604a      	str	r2, [r1, #4]
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	4093      	lsls	r3, r2
 8010ae6:	608b      	str	r3, [r1, #8]
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f001 f9a1 	bl	8011e30 <_Bfree>
 8010aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010af0:	2200      	movs	r2, #0
 8010af2:	601a      	str	r2, [r3, #0]
 8010af4:	1e3b      	subs	r3, r7, #0
 8010af6:	bfb9      	ittee	lt
 8010af8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010afc:	9303      	strlt	r3, [sp, #12]
 8010afe:	2300      	movge	r3, #0
 8010b00:	f8c8 3000 	strge.w	r3, [r8]
 8010b04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010b08:	4ba3      	ldr	r3, [pc, #652]	; (8010d98 <_dtoa_r+0x300>)
 8010b0a:	bfbc      	itt	lt
 8010b0c:	2201      	movlt	r2, #1
 8010b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8010b12:	ea33 0309 	bics.w	r3, r3, r9
 8010b16:	d11b      	bne.n	8010b50 <_dtoa_r+0xb8>
 8010b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b1e:	6013      	str	r3, [r2, #0]
 8010b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b24:	4333      	orrs	r3, r6
 8010b26:	f000 857a 	beq.w	801161e <_dtoa_r+0xb86>
 8010b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b2c:	b963      	cbnz	r3, 8010b48 <_dtoa_r+0xb0>
 8010b2e:	4b9b      	ldr	r3, [pc, #620]	; (8010d9c <_dtoa_r+0x304>)
 8010b30:	e024      	b.n	8010b7c <_dtoa_r+0xe4>
 8010b32:	4b9b      	ldr	r3, [pc, #620]	; (8010da0 <_dtoa_r+0x308>)
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	3308      	adds	r3, #8
 8010b38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	9800      	ldr	r0, [sp, #0]
 8010b3e:	b015      	add	sp, #84	; 0x54
 8010b40:	ecbd 8b02 	vpop	{d8}
 8010b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b48:	4b94      	ldr	r3, [pc, #592]	; (8010d9c <_dtoa_r+0x304>)
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	3303      	adds	r3, #3
 8010b4e:	e7f3      	b.n	8010b38 <_dtoa_r+0xa0>
 8010b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b54:	2200      	movs	r2, #0
 8010b56:	ec51 0b17 	vmov	r0, r1, d7
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010b60:	f7ef ffc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b64:	4680      	mov	r8, r0
 8010b66:	b158      	cbz	r0, 8010b80 <_dtoa_r+0xe8>
 8010b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	6013      	str	r3, [r2, #0]
 8010b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f000 8551 	beq.w	8011618 <_dtoa_r+0xb80>
 8010b76:	488b      	ldr	r0, [pc, #556]	; (8010da4 <_dtoa_r+0x30c>)
 8010b78:	6018      	str	r0, [r3, #0]
 8010b7a:	1e43      	subs	r3, r0, #1
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	e7dd      	b.n	8010b3c <_dtoa_r+0xa4>
 8010b80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010b84:	aa12      	add	r2, sp, #72	; 0x48
 8010b86:	a913      	add	r1, sp, #76	; 0x4c
 8010b88:	4620      	mov	r0, r4
 8010b8a:	f001 fcf9 	bl	8012580 <__d2b>
 8010b8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b92:	4683      	mov	fp, r0
 8010b94:	2d00      	cmp	r5, #0
 8010b96:	d07c      	beq.n	8010c92 <_dtoa_r+0x1fa>
 8010b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ba2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010ba6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010bb2:	4b7d      	ldr	r3, [pc, #500]	; (8010da8 <_dtoa_r+0x310>)
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	4639      	mov	r1, r7
 8010bba:	f7ef fb75 	bl	80002a8 <__aeabi_dsub>
 8010bbe:	a36e      	add	r3, pc, #440	; (adr r3, 8010d78 <_dtoa_r+0x2e0>)
 8010bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc4:	f7ef fd28 	bl	8000618 <__aeabi_dmul>
 8010bc8:	a36d      	add	r3, pc, #436	; (adr r3, 8010d80 <_dtoa_r+0x2e8>)
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fb6d 	bl	80002ac <__adddf3>
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	460f      	mov	r7, r1
 8010bd8:	f7ef fcb4 	bl	8000544 <__aeabi_i2d>
 8010bdc:	a36a      	add	r3, pc, #424	; (adr r3, 8010d88 <_dtoa_r+0x2f0>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	f7ef fd19 	bl	8000618 <__aeabi_dmul>
 8010be6:	4602      	mov	r2, r0
 8010be8:	460b      	mov	r3, r1
 8010bea:	4630      	mov	r0, r6
 8010bec:	4639      	mov	r1, r7
 8010bee:	f7ef fb5d 	bl	80002ac <__adddf3>
 8010bf2:	4606      	mov	r6, r0
 8010bf4:	460f      	mov	r7, r1
 8010bf6:	f7ef ffbf 	bl	8000b78 <__aeabi_d2iz>
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	4682      	mov	sl, r0
 8010bfe:	2300      	movs	r3, #0
 8010c00:	4630      	mov	r0, r6
 8010c02:	4639      	mov	r1, r7
 8010c04:	f7ef ff7a 	bl	8000afc <__aeabi_dcmplt>
 8010c08:	b148      	cbz	r0, 8010c1e <_dtoa_r+0x186>
 8010c0a:	4650      	mov	r0, sl
 8010c0c:	f7ef fc9a 	bl	8000544 <__aeabi_i2d>
 8010c10:	4632      	mov	r2, r6
 8010c12:	463b      	mov	r3, r7
 8010c14:	f7ef ff68 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c18:	b908      	cbnz	r0, 8010c1e <_dtoa_r+0x186>
 8010c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c1e:	f1ba 0f16 	cmp.w	sl, #22
 8010c22:	d854      	bhi.n	8010cce <_dtoa_r+0x236>
 8010c24:	4b61      	ldr	r3, [pc, #388]	; (8010dac <_dtoa_r+0x314>)
 8010c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c32:	f7ef ff63 	bl	8000afc <__aeabi_dcmplt>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d04b      	beq.n	8010cd2 <_dtoa_r+0x23a>
 8010c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c3e:	2300      	movs	r3, #0
 8010c40:	930e      	str	r3, [sp, #56]	; 0x38
 8010c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c44:	1b5d      	subs	r5, r3, r5
 8010c46:	1e6b      	subs	r3, r5, #1
 8010c48:	9304      	str	r3, [sp, #16]
 8010c4a:	bf43      	ittte	mi
 8010c4c:	2300      	movmi	r3, #0
 8010c4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010c52:	9304      	strmi	r3, [sp, #16]
 8010c54:	f04f 0800 	movpl.w	r8, #0
 8010c58:	f1ba 0f00 	cmp.w	sl, #0
 8010c5c:	db3b      	blt.n	8010cd6 <_dtoa_r+0x23e>
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010c64:	4453      	add	r3, sl
 8010c66:	9304      	str	r3, [sp, #16]
 8010c68:	2300      	movs	r3, #0
 8010c6a:	9306      	str	r3, [sp, #24]
 8010c6c:	9b05      	ldr	r3, [sp, #20]
 8010c6e:	2b09      	cmp	r3, #9
 8010c70:	d869      	bhi.n	8010d46 <_dtoa_r+0x2ae>
 8010c72:	2b05      	cmp	r3, #5
 8010c74:	bfc4      	itt	gt
 8010c76:	3b04      	subgt	r3, #4
 8010c78:	9305      	strgt	r3, [sp, #20]
 8010c7a:	9b05      	ldr	r3, [sp, #20]
 8010c7c:	f1a3 0302 	sub.w	r3, r3, #2
 8010c80:	bfcc      	ite	gt
 8010c82:	2500      	movgt	r5, #0
 8010c84:	2501      	movle	r5, #1
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	d869      	bhi.n	8010d5e <_dtoa_r+0x2c6>
 8010c8a:	e8df f003 	tbb	[pc, r3]
 8010c8e:	4e2c      	.short	0x4e2c
 8010c90:	5a4c      	.short	0x5a4c
 8010c92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010c96:	441d      	add	r5, r3
 8010c98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c9c:	2b20      	cmp	r3, #32
 8010c9e:	bfc1      	itttt	gt
 8010ca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ca4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010ca8:	fa09 f303 	lslgt.w	r3, r9, r3
 8010cac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010cb0:	bfda      	itte	le
 8010cb2:	f1c3 0320 	rsble	r3, r3, #32
 8010cb6:	fa06 f003 	lslle.w	r0, r6, r3
 8010cba:	4318      	orrgt	r0, r3
 8010cbc:	f7ef fc32 	bl	8000524 <__aeabi_ui2d>
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	4606      	mov	r6, r0
 8010cc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010cc8:	3d01      	subs	r5, #1
 8010cca:	9310      	str	r3, [sp, #64]	; 0x40
 8010ccc:	e771      	b.n	8010bb2 <_dtoa_r+0x11a>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e7b6      	b.n	8010c40 <_dtoa_r+0x1a8>
 8010cd2:	900e      	str	r0, [sp, #56]	; 0x38
 8010cd4:	e7b5      	b.n	8010c42 <_dtoa_r+0x1aa>
 8010cd6:	f1ca 0300 	rsb	r3, sl, #0
 8010cda:	9306      	str	r3, [sp, #24]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	eba8 080a 	sub.w	r8, r8, sl
 8010ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8010ce4:	e7c2      	b.n	8010c6c <_dtoa_r+0x1d4>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	9308      	str	r3, [sp, #32]
 8010cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	dc39      	bgt.n	8010d64 <_dtoa_r+0x2cc>
 8010cf0:	f04f 0901 	mov.w	r9, #1
 8010cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010cf8:	464b      	mov	r3, r9
 8010cfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d00:	2200      	movs	r2, #0
 8010d02:	6042      	str	r2, [r0, #4]
 8010d04:	2204      	movs	r2, #4
 8010d06:	f102 0614 	add.w	r6, r2, #20
 8010d0a:	429e      	cmp	r6, r3
 8010d0c:	6841      	ldr	r1, [r0, #4]
 8010d0e:	d92f      	bls.n	8010d70 <_dtoa_r+0x2d8>
 8010d10:	4620      	mov	r0, r4
 8010d12:	f001 f84d 	bl	8011db0 <_Balloc>
 8010d16:	9000      	str	r0, [sp, #0]
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d14b      	bne.n	8010db4 <_dtoa_r+0x31c>
 8010d1c:	4b24      	ldr	r3, [pc, #144]	; (8010db0 <_dtoa_r+0x318>)
 8010d1e:	4602      	mov	r2, r0
 8010d20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d24:	e6d1      	b.n	8010aca <_dtoa_r+0x32>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e7de      	b.n	8010ce8 <_dtoa_r+0x250>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9308      	str	r3, [sp, #32]
 8010d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d30:	eb0a 0903 	add.w	r9, sl, r3
 8010d34:	f109 0301 	add.w	r3, r9, #1
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	9301      	str	r3, [sp, #4]
 8010d3c:	bfb8      	it	lt
 8010d3e:	2301      	movlt	r3, #1
 8010d40:	e7dd      	b.n	8010cfe <_dtoa_r+0x266>
 8010d42:	2301      	movs	r3, #1
 8010d44:	e7f2      	b.n	8010d2c <_dtoa_r+0x294>
 8010d46:	2501      	movs	r5, #1
 8010d48:	2300      	movs	r3, #0
 8010d4a:	9305      	str	r3, [sp, #20]
 8010d4c:	9508      	str	r5, [sp, #32]
 8010d4e:	f04f 39ff 	mov.w	r9, #4294967295
 8010d52:	2200      	movs	r2, #0
 8010d54:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d58:	2312      	movs	r3, #18
 8010d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d5c:	e7cf      	b.n	8010cfe <_dtoa_r+0x266>
 8010d5e:	2301      	movs	r3, #1
 8010d60:	9308      	str	r3, [sp, #32]
 8010d62:	e7f4      	b.n	8010d4e <_dtoa_r+0x2b6>
 8010d64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d6c:	464b      	mov	r3, r9
 8010d6e:	e7c6      	b.n	8010cfe <_dtoa_r+0x266>
 8010d70:	3101      	adds	r1, #1
 8010d72:	6041      	str	r1, [r0, #4]
 8010d74:	0052      	lsls	r2, r2, #1
 8010d76:	e7c6      	b.n	8010d06 <_dtoa_r+0x26e>
 8010d78:	636f4361 	.word	0x636f4361
 8010d7c:	3fd287a7 	.word	0x3fd287a7
 8010d80:	8b60c8b3 	.word	0x8b60c8b3
 8010d84:	3fc68a28 	.word	0x3fc68a28
 8010d88:	509f79fb 	.word	0x509f79fb
 8010d8c:	3fd34413 	.word	0x3fd34413
 8010d90:	08015ed5 	.word	0x08015ed5
 8010d94:	08015eec 	.word	0x08015eec
 8010d98:	7ff00000 	.word	0x7ff00000
 8010d9c:	08015ed1 	.word	0x08015ed1
 8010da0:	08015ec8 	.word	0x08015ec8
 8010da4:	08016152 	.word	0x08016152
 8010da8:	3ff80000 	.word	0x3ff80000
 8010dac:	08016068 	.word	0x08016068
 8010db0:	08015f4b 	.word	0x08015f4b
 8010db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010db6:	9a00      	ldr	r2, [sp, #0]
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	9b01      	ldr	r3, [sp, #4]
 8010dbc:	2b0e      	cmp	r3, #14
 8010dbe:	f200 80ad 	bhi.w	8010f1c <_dtoa_r+0x484>
 8010dc2:	2d00      	cmp	r5, #0
 8010dc4:	f000 80aa 	beq.w	8010f1c <_dtoa_r+0x484>
 8010dc8:	f1ba 0f00 	cmp.w	sl, #0
 8010dcc:	dd36      	ble.n	8010e3c <_dtoa_r+0x3a4>
 8010dce:	4ac3      	ldr	r2, [pc, #780]	; (80110dc <_dtoa_r+0x644>)
 8010dd0:	f00a 030f 	and.w	r3, sl, #15
 8010dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010dd8:	ed93 7b00 	vldr	d7, [r3]
 8010ddc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010de0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010de4:	eeb0 8a47 	vmov.f32	s16, s14
 8010de8:	eef0 8a67 	vmov.f32	s17, s15
 8010dec:	d016      	beq.n	8010e1c <_dtoa_r+0x384>
 8010dee:	4bbc      	ldr	r3, [pc, #752]	; (80110e0 <_dtoa_r+0x648>)
 8010df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010df8:	f7ef fd38 	bl	800086c <__aeabi_ddiv>
 8010dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e00:	f007 070f 	and.w	r7, r7, #15
 8010e04:	2503      	movs	r5, #3
 8010e06:	4eb6      	ldr	r6, [pc, #728]	; (80110e0 <_dtoa_r+0x648>)
 8010e08:	b957      	cbnz	r7, 8010e20 <_dtoa_r+0x388>
 8010e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e0e:	ec53 2b18 	vmov	r2, r3, d8
 8010e12:	f7ef fd2b 	bl	800086c <__aeabi_ddiv>
 8010e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e1a:	e029      	b.n	8010e70 <_dtoa_r+0x3d8>
 8010e1c:	2502      	movs	r5, #2
 8010e1e:	e7f2      	b.n	8010e06 <_dtoa_r+0x36e>
 8010e20:	07f9      	lsls	r1, r7, #31
 8010e22:	d508      	bpl.n	8010e36 <_dtoa_r+0x39e>
 8010e24:	ec51 0b18 	vmov	r0, r1, d8
 8010e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e2c:	f7ef fbf4 	bl	8000618 <__aeabi_dmul>
 8010e30:	ec41 0b18 	vmov	d8, r0, r1
 8010e34:	3501      	adds	r5, #1
 8010e36:	107f      	asrs	r7, r7, #1
 8010e38:	3608      	adds	r6, #8
 8010e3a:	e7e5      	b.n	8010e08 <_dtoa_r+0x370>
 8010e3c:	f000 80a6 	beq.w	8010f8c <_dtoa_r+0x4f4>
 8010e40:	f1ca 0600 	rsb	r6, sl, #0
 8010e44:	4ba5      	ldr	r3, [pc, #660]	; (80110dc <_dtoa_r+0x644>)
 8010e46:	4fa6      	ldr	r7, [pc, #664]	; (80110e0 <_dtoa_r+0x648>)
 8010e48:	f006 020f 	and.w	r2, r6, #15
 8010e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e58:	f7ef fbde 	bl	8000618 <__aeabi_dmul>
 8010e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e60:	1136      	asrs	r6, r6, #4
 8010e62:	2300      	movs	r3, #0
 8010e64:	2502      	movs	r5, #2
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	f040 8085 	bne.w	8010f76 <_dtoa_r+0x4de>
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1d2      	bne.n	8010e16 <_dtoa_r+0x37e>
 8010e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 808c 	beq.w	8010f90 <_dtoa_r+0x4f8>
 8010e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e7c:	4b99      	ldr	r3, [pc, #612]	; (80110e4 <_dtoa_r+0x64c>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	4630      	mov	r0, r6
 8010e82:	4639      	mov	r1, r7
 8010e84:	f7ef fe3a 	bl	8000afc <__aeabi_dcmplt>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	f000 8081 	beq.w	8010f90 <_dtoa_r+0x4f8>
 8010e8e:	9b01      	ldr	r3, [sp, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d07d      	beq.n	8010f90 <_dtoa_r+0x4f8>
 8010e94:	f1b9 0f00 	cmp.w	r9, #0
 8010e98:	dd3c      	ble.n	8010f14 <_dtoa_r+0x47c>
 8010e9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010e9e:	9307      	str	r3, [sp, #28]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	4b91      	ldr	r3, [pc, #580]	; (80110e8 <_dtoa_r+0x650>)
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	f7ef fbb6 	bl	8000618 <__aeabi_dmul>
 8010eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eb0:	3501      	adds	r5, #1
 8010eb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010eb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7ef fb42 	bl	8000544 <__aeabi_i2d>
 8010ec0:	4632      	mov	r2, r6
 8010ec2:	463b      	mov	r3, r7
 8010ec4:	f7ef fba8 	bl	8000618 <__aeabi_dmul>
 8010ec8:	4b88      	ldr	r3, [pc, #544]	; (80110ec <_dtoa_r+0x654>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f7ef f9ee 	bl	80002ac <__adddf3>
 8010ed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ed8:	9303      	str	r3, [sp, #12]
 8010eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d15c      	bne.n	8010f9a <_dtoa_r+0x502>
 8010ee0:	4b83      	ldr	r3, [pc, #524]	; (80110f0 <_dtoa_r+0x658>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	f7ef f9de 	bl	80002a8 <__aeabi_dsub>
 8010eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	460f      	mov	r7, r1
 8010ef4:	f7ef fe20 	bl	8000b38 <__aeabi_dcmpgt>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	f040 8296 	bne.w	801142a <_dtoa_r+0x992>
 8010efe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010f02:	4630      	mov	r0, r6
 8010f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f08:	4639      	mov	r1, r7
 8010f0a:	f7ef fdf7 	bl	8000afc <__aeabi_dcmplt>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	f040 8288 	bne.w	8011424 <_dtoa_r+0x98c>
 8010f14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	f2c0 8158 	blt.w	80111d4 <_dtoa_r+0x73c>
 8010f24:	f1ba 0f0e 	cmp.w	sl, #14
 8010f28:	f300 8154 	bgt.w	80111d4 <_dtoa_r+0x73c>
 8010f2c:	4b6b      	ldr	r3, [pc, #428]	; (80110dc <_dtoa_r+0x644>)
 8010f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f280 80e3 	bge.w	8011104 <_dtoa_r+0x66c>
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f300 80df 	bgt.w	8011104 <_dtoa_r+0x66c>
 8010f46:	f040 826d 	bne.w	8011424 <_dtoa_r+0x98c>
 8010f4a:	4b69      	ldr	r3, [pc, #420]	; (80110f0 <_dtoa_r+0x658>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4649      	mov	r1, r9
 8010f52:	f7ef fb61 	bl	8000618 <__aeabi_dmul>
 8010f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f5a:	f7ef fde3 	bl	8000b24 <__aeabi_dcmpge>
 8010f5e:	9e01      	ldr	r6, [sp, #4]
 8010f60:	4637      	mov	r7, r6
 8010f62:	2800      	cmp	r0, #0
 8010f64:	f040 8243 	bne.w	80113ee <_dtoa_r+0x956>
 8010f68:	9d00      	ldr	r5, [sp, #0]
 8010f6a:	2331      	movs	r3, #49	; 0x31
 8010f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8010f70:	f10a 0a01 	add.w	sl, sl, #1
 8010f74:	e23f      	b.n	80113f6 <_dtoa_r+0x95e>
 8010f76:	07f2      	lsls	r2, r6, #31
 8010f78:	d505      	bpl.n	8010f86 <_dtoa_r+0x4ee>
 8010f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f7e:	f7ef fb4b 	bl	8000618 <__aeabi_dmul>
 8010f82:	3501      	adds	r5, #1
 8010f84:	2301      	movs	r3, #1
 8010f86:	1076      	asrs	r6, r6, #1
 8010f88:	3708      	adds	r7, #8
 8010f8a:	e76c      	b.n	8010e66 <_dtoa_r+0x3ce>
 8010f8c:	2502      	movs	r5, #2
 8010f8e:	e76f      	b.n	8010e70 <_dtoa_r+0x3d8>
 8010f90:	9b01      	ldr	r3, [sp, #4]
 8010f92:	f8cd a01c 	str.w	sl, [sp, #28]
 8010f96:	930c      	str	r3, [sp, #48]	; 0x30
 8010f98:	e78d      	b.n	8010eb6 <_dtoa_r+0x41e>
 8010f9a:	9900      	ldr	r1, [sp, #0]
 8010f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fa0:	4b4e      	ldr	r3, [pc, #312]	; (80110dc <_dtoa_r+0x644>)
 8010fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fa6:	4401      	add	r1, r0
 8010fa8:	9102      	str	r1, [sp, #8]
 8010faa:	9908      	ldr	r1, [sp, #32]
 8010fac:	eeb0 8a47 	vmov.f32	s16, s14
 8010fb0:	eef0 8a67 	vmov.f32	s17, s15
 8010fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	d045      	beq.n	801104c <_dtoa_r+0x5b4>
 8010fc0:	494c      	ldr	r1, [pc, #304]	; (80110f4 <_dtoa_r+0x65c>)
 8010fc2:	2000      	movs	r0, #0
 8010fc4:	f7ef fc52 	bl	800086c <__aeabi_ddiv>
 8010fc8:	ec53 2b18 	vmov	r2, r3, d8
 8010fcc:	f7ef f96c 	bl	80002a8 <__aeabi_dsub>
 8010fd0:	9d00      	ldr	r5, [sp, #0]
 8010fd2:	ec41 0b18 	vmov	d8, r0, r1
 8010fd6:	4639      	mov	r1, r7
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f7ef fdcd 	bl	8000b78 <__aeabi_d2iz>
 8010fde:	900c      	str	r0, [sp, #48]	; 0x30
 8010fe0:	f7ef fab0 	bl	8000544 <__aeabi_i2d>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4630      	mov	r0, r6
 8010fea:	4639      	mov	r1, r7
 8010fec:	f7ef f95c 	bl	80002a8 <__aeabi_dsub>
 8010ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ff2:	3330      	adds	r3, #48	; 0x30
 8010ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8010ff8:	ec53 2b18 	vmov	r2, r3, d8
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	460f      	mov	r7, r1
 8011000:	f7ef fd7c 	bl	8000afc <__aeabi_dcmplt>
 8011004:	2800      	cmp	r0, #0
 8011006:	d165      	bne.n	80110d4 <_dtoa_r+0x63c>
 8011008:	4632      	mov	r2, r6
 801100a:	463b      	mov	r3, r7
 801100c:	4935      	ldr	r1, [pc, #212]	; (80110e4 <_dtoa_r+0x64c>)
 801100e:	2000      	movs	r0, #0
 8011010:	f7ef f94a 	bl	80002a8 <__aeabi_dsub>
 8011014:	ec53 2b18 	vmov	r2, r3, d8
 8011018:	f7ef fd70 	bl	8000afc <__aeabi_dcmplt>
 801101c:	2800      	cmp	r0, #0
 801101e:	f040 80b9 	bne.w	8011194 <_dtoa_r+0x6fc>
 8011022:	9b02      	ldr	r3, [sp, #8]
 8011024:	429d      	cmp	r5, r3
 8011026:	f43f af75 	beq.w	8010f14 <_dtoa_r+0x47c>
 801102a:	4b2f      	ldr	r3, [pc, #188]	; (80110e8 <_dtoa_r+0x650>)
 801102c:	ec51 0b18 	vmov	r0, r1, d8
 8011030:	2200      	movs	r2, #0
 8011032:	f7ef faf1 	bl	8000618 <__aeabi_dmul>
 8011036:	4b2c      	ldr	r3, [pc, #176]	; (80110e8 <_dtoa_r+0x650>)
 8011038:	ec41 0b18 	vmov	d8, r0, r1
 801103c:	2200      	movs	r2, #0
 801103e:	4630      	mov	r0, r6
 8011040:	4639      	mov	r1, r7
 8011042:	f7ef fae9 	bl	8000618 <__aeabi_dmul>
 8011046:	4606      	mov	r6, r0
 8011048:	460f      	mov	r7, r1
 801104a:	e7c4      	b.n	8010fd6 <_dtoa_r+0x53e>
 801104c:	ec51 0b17 	vmov	r0, r1, d7
 8011050:	f7ef fae2 	bl	8000618 <__aeabi_dmul>
 8011054:	9b02      	ldr	r3, [sp, #8]
 8011056:	9d00      	ldr	r5, [sp, #0]
 8011058:	930c      	str	r3, [sp, #48]	; 0x30
 801105a:	ec41 0b18 	vmov	d8, r0, r1
 801105e:	4639      	mov	r1, r7
 8011060:	4630      	mov	r0, r6
 8011062:	f7ef fd89 	bl	8000b78 <__aeabi_d2iz>
 8011066:	9011      	str	r0, [sp, #68]	; 0x44
 8011068:	f7ef fa6c 	bl	8000544 <__aeabi_i2d>
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4630      	mov	r0, r6
 8011072:	4639      	mov	r1, r7
 8011074:	f7ef f918 	bl	80002a8 <__aeabi_dsub>
 8011078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801107a:	3330      	adds	r3, #48	; 0x30
 801107c:	f805 3b01 	strb.w	r3, [r5], #1
 8011080:	9b02      	ldr	r3, [sp, #8]
 8011082:	429d      	cmp	r5, r3
 8011084:	4606      	mov	r6, r0
 8011086:	460f      	mov	r7, r1
 8011088:	f04f 0200 	mov.w	r2, #0
 801108c:	d134      	bne.n	80110f8 <_dtoa_r+0x660>
 801108e:	4b19      	ldr	r3, [pc, #100]	; (80110f4 <_dtoa_r+0x65c>)
 8011090:	ec51 0b18 	vmov	r0, r1, d8
 8011094:	f7ef f90a 	bl	80002ac <__adddf3>
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	4630      	mov	r0, r6
 801109e:	4639      	mov	r1, r7
 80110a0:	f7ef fd4a 	bl	8000b38 <__aeabi_dcmpgt>
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d175      	bne.n	8011194 <_dtoa_r+0x6fc>
 80110a8:	ec53 2b18 	vmov	r2, r3, d8
 80110ac:	4911      	ldr	r1, [pc, #68]	; (80110f4 <_dtoa_r+0x65c>)
 80110ae:	2000      	movs	r0, #0
 80110b0:	f7ef f8fa 	bl	80002a8 <__aeabi_dsub>
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4630      	mov	r0, r6
 80110ba:	4639      	mov	r1, r7
 80110bc:	f7ef fd1e 	bl	8000afc <__aeabi_dcmplt>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	f43f af27 	beq.w	8010f14 <_dtoa_r+0x47c>
 80110c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110c8:	1e6b      	subs	r3, r5, #1
 80110ca:	930c      	str	r3, [sp, #48]	; 0x30
 80110cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80110d0:	2b30      	cmp	r3, #48	; 0x30
 80110d2:	d0f8      	beq.n	80110c6 <_dtoa_r+0x62e>
 80110d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80110d8:	e04a      	b.n	8011170 <_dtoa_r+0x6d8>
 80110da:	bf00      	nop
 80110dc:	08016068 	.word	0x08016068
 80110e0:	08016040 	.word	0x08016040
 80110e4:	3ff00000 	.word	0x3ff00000
 80110e8:	40240000 	.word	0x40240000
 80110ec:	401c0000 	.word	0x401c0000
 80110f0:	40140000 	.word	0x40140000
 80110f4:	3fe00000 	.word	0x3fe00000
 80110f8:	4baf      	ldr	r3, [pc, #700]	; (80113b8 <_dtoa_r+0x920>)
 80110fa:	f7ef fa8d 	bl	8000618 <__aeabi_dmul>
 80110fe:	4606      	mov	r6, r0
 8011100:	460f      	mov	r7, r1
 8011102:	e7ac      	b.n	801105e <_dtoa_r+0x5c6>
 8011104:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011108:	9d00      	ldr	r5, [sp, #0]
 801110a:	4642      	mov	r2, r8
 801110c:	464b      	mov	r3, r9
 801110e:	4630      	mov	r0, r6
 8011110:	4639      	mov	r1, r7
 8011112:	f7ef fbab 	bl	800086c <__aeabi_ddiv>
 8011116:	f7ef fd2f 	bl	8000b78 <__aeabi_d2iz>
 801111a:	9002      	str	r0, [sp, #8]
 801111c:	f7ef fa12 	bl	8000544 <__aeabi_i2d>
 8011120:	4642      	mov	r2, r8
 8011122:	464b      	mov	r3, r9
 8011124:	f7ef fa78 	bl	8000618 <__aeabi_dmul>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4630      	mov	r0, r6
 801112e:	4639      	mov	r1, r7
 8011130:	f7ef f8ba 	bl	80002a8 <__aeabi_dsub>
 8011134:	9e02      	ldr	r6, [sp, #8]
 8011136:	9f01      	ldr	r7, [sp, #4]
 8011138:	3630      	adds	r6, #48	; 0x30
 801113a:	f805 6b01 	strb.w	r6, [r5], #1
 801113e:	9e00      	ldr	r6, [sp, #0]
 8011140:	1bae      	subs	r6, r5, r6
 8011142:	42b7      	cmp	r7, r6
 8011144:	4602      	mov	r2, r0
 8011146:	460b      	mov	r3, r1
 8011148:	d137      	bne.n	80111ba <_dtoa_r+0x722>
 801114a:	f7ef f8af 	bl	80002ac <__adddf3>
 801114e:	4642      	mov	r2, r8
 8011150:	464b      	mov	r3, r9
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	f7ef fcef 	bl	8000b38 <__aeabi_dcmpgt>
 801115a:	b9c8      	cbnz	r0, 8011190 <_dtoa_r+0x6f8>
 801115c:	4642      	mov	r2, r8
 801115e:	464b      	mov	r3, r9
 8011160:	4630      	mov	r0, r6
 8011162:	4639      	mov	r1, r7
 8011164:	f7ef fcc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011168:	b110      	cbz	r0, 8011170 <_dtoa_r+0x6d8>
 801116a:	9b02      	ldr	r3, [sp, #8]
 801116c:	07d9      	lsls	r1, r3, #31
 801116e:	d40f      	bmi.n	8011190 <_dtoa_r+0x6f8>
 8011170:	4620      	mov	r0, r4
 8011172:	4659      	mov	r1, fp
 8011174:	f000 fe5c 	bl	8011e30 <_Bfree>
 8011178:	2300      	movs	r3, #0
 801117a:	702b      	strb	r3, [r5, #0]
 801117c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801117e:	f10a 0001 	add.w	r0, sl, #1
 8011182:	6018      	str	r0, [r3, #0]
 8011184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011186:	2b00      	cmp	r3, #0
 8011188:	f43f acd8 	beq.w	8010b3c <_dtoa_r+0xa4>
 801118c:	601d      	str	r5, [r3, #0]
 801118e:	e4d5      	b.n	8010b3c <_dtoa_r+0xa4>
 8011190:	f8cd a01c 	str.w	sl, [sp, #28]
 8011194:	462b      	mov	r3, r5
 8011196:	461d      	mov	r5, r3
 8011198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801119c:	2a39      	cmp	r2, #57	; 0x39
 801119e:	d108      	bne.n	80111b2 <_dtoa_r+0x71a>
 80111a0:	9a00      	ldr	r2, [sp, #0]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d1f7      	bne.n	8011196 <_dtoa_r+0x6fe>
 80111a6:	9a07      	ldr	r2, [sp, #28]
 80111a8:	9900      	ldr	r1, [sp, #0]
 80111aa:	3201      	adds	r2, #1
 80111ac:	9207      	str	r2, [sp, #28]
 80111ae:	2230      	movs	r2, #48	; 0x30
 80111b0:	700a      	strb	r2, [r1, #0]
 80111b2:	781a      	ldrb	r2, [r3, #0]
 80111b4:	3201      	adds	r2, #1
 80111b6:	701a      	strb	r2, [r3, #0]
 80111b8:	e78c      	b.n	80110d4 <_dtoa_r+0x63c>
 80111ba:	4b7f      	ldr	r3, [pc, #508]	; (80113b8 <_dtoa_r+0x920>)
 80111bc:	2200      	movs	r2, #0
 80111be:	f7ef fa2b 	bl	8000618 <__aeabi_dmul>
 80111c2:	2200      	movs	r2, #0
 80111c4:	2300      	movs	r3, #0
 80111c6:	4606      	mov	r6, r0
 80111c8:	460f      	mov	r7, r1
 80111ca:	f7ef fc8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d09b      	beq.n	801110a <_dtoa_r+0x672>
 80111d2:	e7cd      	b.n	8011170 <_dtoa_r+0x6d8>
 80111d4:	9a08      	ldr	r2, [sp, #32]
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	f000 80c4 	beq.w	8011364 <_dtoa_r+0x8cc>
 80111dc:	9a05      	ldr	r2, [sp, #20]
 80111de:	2a01      	cmp	r2, #1
 80111e0:	f300 80a8 	bgt.w	8011334 <_dtoa_r+0x89c>
 80111e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111e6:	2a00      	cmp	r2, #0
 80111e8:	f000 80a0 	beq.w	801132c <_dtoa_r+0x894>
 80111ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80111f0:	9e06      	ldr	r6, [sp, #24]
 80111f2:	4645      	mov	r5, r8
 80111f4:	9a04      	ldr	r2, [sp, #16]
 80111f6:	2101      	movs	r1, #1
 80111f8:	441a      	add	r2, r3
 80111fa:	4620      	mov	r0, r4
 80111fc:	4498      	add	r8, r3
 80111fe:	9204      	str	r2, [sp, #16]
 8011200:	f000 ff1c 	bl	801203c <__i2b>
 8011204:	4607      	mov	r7, r0
 8011206:	2d00      	cmp	r5, #0
 8011208:	dd0b      	ble.n	8011222 <_dtoa_r+0x78a>
 801120a:	9b04      	ldr	r3, [sp, #16]
 801120c:	2b00      	cmp	r3, #0
 801120e:	dd08      	ble.n	8011222 <_dtoa_r+0x78a>
 8011210:	42ab      	cmp	r3, r5
 8011212:	9a04      	ldr	r2, [sp, #16]
 8011214:	bfa8      	it	ge
 8011216:	462b      	movge	r3, r5
 8011218:	eba8 0803 	sub.w	r8, r8, r3
 801121c:	1aed      	subs	r5, r5, r3
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	9304      	str	r3, [sp, #16]
 8011222:	9b06      	ldr	r3, [sp, #24]
 8011224:	b1fb      	cbz	r3, 8011266 <_dtoa_r+0x7ce>
 8011226:	9b08      	ldr	r3, [sp, #32]
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 809f 	beq.w	801136c <_dtoa_r+0x8d4>
 801122e:	2e00      	cmp	r6, #0
 8011230:	dd11      	ble.n	8011256 <_dtoa_r+0x7be>
 8011232:	4639      	mov	r1, r7
 8011234:	4632      	mov	r2, r6
 8011236:	4620      	mov	r0, r4
 8011238:	f000 ffbc 	bl	80121b4 <__pow5mult>
 801123c:	465a      	mov	r2, fp
 801123e:	4601      	mov	r1, r0
 8011240:	4607      	mov	r7, r0
 8011242:	4620      	mov	r0, r4
 8011244:	f000 ff10 	bl	8012068 <__multiply>
 8011248:	4659      	mov	r1, fp
 801124a:	9007      	str	r0, [sp, #28]
 801124c:	4620      	mov	r0, r4
 801124e:	f000 fdef 	bl	8011e30 <_Bfree>
 8011252:	9b07      	ldr	r3, [sp, #28]
 8011254:	469b      	mov	fp, r3
 8011256:	9b06      	ldr	r3, [sp, #24]
 8011258:	1b9a      	subs	r2, r3, r6
 801125a:	d004      	beq.n	8011266 <_dtoa_r+0x7ce>
 801125c:	4659      	mov	r1, fp
 801125e:	4620      	mov	r0, r4
 8011260:	f000 ffa8 	bl	80121b4 <__pow5mult>
 8011264:	4683      	mov	fp, r0
 8011266:	2101      	movs	r1, #1
 8011268:	4620      	mov	r0, r4
 801126a:	f000 fee7 	bl	801203c <__i2b>
 801126e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011270:	2b00      	cmp	r3, #0
 8011272:	4606      	mov	r6, r0
 8011274:	dd7c      	ble.n	8011370 <_dtoa_r+0x8d8>
 8011276:	461a      	mov	r2, r3
 8011278:	4601      	mov	r1, r0
 801127a:	4620      	mov	r0, r4
 801127c:	f000 ff9a 	bl	80121b4 <__pow5mult>
 8011280:	9b05      	ldr	r3, [sp, #20]
 8011282:	2b01      	cmp	r3, #1
 8011284:	4606      	mov	r6, r0
 8011286:	dd76      	ble.n	8011376 <_dtoa_r+0x8de>
 8011288:	2300      	movs	r3, #0
 801128a:	9306      	str	r3, [sp, #24]
 801128c:	6933      	ldr	r3, [r6, #16]
 801128e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011292:	6918      	ldr	r0, [r3, #16]
 8011294:	f000 fe82 	bl	8011f9c <__hi0bits>
 8011298:	f1c0 0020 	rsb	r0, r0, #32
 801129c:	9b04      	ldr	r3, [sp, #16]
 801129e:	4418      	add	r0, r3
 80112a0:	f010 001f 	ands.w	r0, r0, #31
 80112a4:	f000 8086 	beq.w	80113b4 <_dtoa_r+0x91c>
 80112a8:	f1c0 0320 	rsb	r3, r0, #32
 80112ac:	2b04      	cmp	r3, #4
 80112ae:	dd7f      	ble.n	80113b0 <_dtoa_r+0x918>
 80112b0:	f1c0 001c 	rsb	r0, r0, #28
 80112b4:	9b04      	ldr	r3, [sp, #16]
 80112b6:	4403      	add	r3, r0
 80112b8:	4480      	add	r8, r0
 80112ba:	4405      	add	r5, r0
 80112bc:	9304      	str	r3, [sp, #16]
 80112be:	f1b8 0f00 	cmp.w	r8, #0
 80112c2:	dd05      	ble.n	80112d0 <_dtoa_r+0x838>
 80112c4:	4659      	mov	r1, fp
 80112c6:	4642      	mov	r2, r8
 80112c8:	4620      	mov	r0, r4
 80112ca:	f000 ffcd 	bl	8012268 <__lshift>
 80112ce:	4683      	mov	fp, r0
 80112d0:	9b04      	ldr	r3, [sp, #16]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	dd05      	ble.n	80112e2 <_dtoa_r+0x84a>
 80112d6:	4631      	mov	r1, r6
 80112d8:	461a      	mov	r2, r3
 80112da:	4620      	mov	r0, r4
 80112dc:	f000 ffc4 	bl	8012268 <__lshift>
 80112e0:	4606      	mov	r6, r0
 80112e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d069      	beq.n	80113bc <_dtoa_r+0x924>
 80112e8:	4631      	mov	r1, r6
 80112ea:	4658      	mov	r0, fp
 80112ec:	f001 f828 	bl	8012340 <__mcmp>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	da63      	bge.n	80113bc <_dtoa_r+0x924>
 80112f4:	2300      	movs	r3, #0
 80112f6:	4659      	mov	r1, fp
 80112f8:	220a      	movs	r2, #10
 80112fa:	4620      	mov	r0, r4
 80112fc:	f000 fdba 	bl	8011e74 <__multadd>
 8011300:	9b08      	ldr	r3, [sp, #32]
 8011302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011306:	4683      	mov	fp, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	f000 818f 	beq.w	801162c <_dtoa_r+0xb94>
 801130e:	4639      	mov	r1, r7
 8011310:	2300      	movs	r3, #0
 8011312:	220a      	movs	r2, #10
 8011314:	4620      	mov	r0, r4
 8011316:	f000 fdad 	bl	8011e74 <__multadd>
 801131a:	f1b9 0f00 	cmp.w	r9, #0
 801131e:	4607      	mov	r7, r0
 8011320:	f300 808e 	bgt.w	8011440 <_dtoa_r+0x9a8>
 8011324:	9b05      	ldr	r3, [sp, #20]
 8011326:	2b02      	cmp	r3, #2
 8011328:	dc50      	bgt.n	80113cc <_dtoa_r+0x934>
 801132a:	e089      	b.n	8011440 <_dtoa_r+0x9a8>
 801132c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801132e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011332:	e75d      	b.n	80111f0 <_dtoa_r+0x758>
 8011334:	9b01      	ldr	r3, [sp, #4]
 8011336:	1e5e      	subs	r6, r3, #1
 8011338:	9b06      	ldr	r3, [sp, #24]
 801133a:	42b3      	cmp	r3, r6
 801133c:	bfbf      	itttt	lt
 801133e:	9b06      	ldrlt	r3, [sp, #24]
 8011340:	9606      	strlt	r6, [sp, #24]
 8011342:	1af2      	sublt	r2, r6, r3
 8011344:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011346:	bfb6      	itet	lt
 8011348:	189b      	addlt	r3, r3, r2
 801134a:	1b9e      	subge	r6, r3, r6
 801134c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801134e:	9b01      	ldr	r3, [sp, #4]
 8011350:	bfb8      	it	lt
 8011352:	2600      	movlt	r6, #0
 8011354:	2b00      	cmp	r3, #0
 8011356:	bfb5      	itete	lt
 8011358:	eba8 0503 	sublt.w	r5, r8, r3
 801135c:	9b01      	ldrge	r3, [sp, #4]
 801135e:	2300      	movlt	r3, #0
 8011360:	4645      	movge	r5, r8
 8011362:	e747      	b.n	80111f4 <_dtoa_r+0x75c>
 8011364:	9e06      	ldr	r6, [sp, #24]
 8011366:	9f08      	ldr	r7, [sp, #32]
 8011368:	4645      	mov	r5, r8
 801136a:	e74c      	b.n	8011206 <_dtoa_r+0x76e>
 801136c:	9a06      	ldr	r2, [sp, #24]
 801136e:	e775      	b.n	801125c <_dtoa_r+0x7c4>
 8011370:	9b05      	ldr	r3, [sp, #20]
 8011372:	2b01      	cmp	r3, #1
 8011374:	dc18      	bgt.n	80113a8 <_dtoa_r+0x910>
 8011376:	9b02      	ldr	r3, [sp, #8]
 8011378:	b9b3      	cbnz	r3, 80113a8 <_dtoa_r+0x910>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011380:	b9a3      	cbnz	r3, 80113ac <_dtoa_r+0x914>
 8011382:	9b03      	ldr	r3, [sp, #12]
 8011384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011388:	0d1b      	lsrs	r3, r3, #20
 801138a:	051b      	lsls	r3, r3, #20
 801138c:	b12b      	cbz	r3, 801139a <_dtoa_r+0x902>
 801138e:	9b04      	ldr	r3, [sp, #16]
 8011390:	3301      	adds	r3, #1
 8011392:	9304      	str	r3, [sp, #16]
 8011394:	f108 0801 	add.w	r8, r8, #1
 8011398:	2301      	movs	r3, #1
 801139a:	9306      	str	r3, [sp, #24]
 801139c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f47f af74 	bne.w	801128c <_dtoa_r+0x7f4>
 80113a4:	2001      	movs	r0, #1
 80113a6:	e779      	b.n	801129c <_dtoa_r+0x804>
 80113a8:	2300      	movs	r3, #0
 80113aa:	e7f6      	b.n	801139a <_dtoa_r+0x902>
 80113ac:	9b02      	ldr	r3, [sp, #8]
 80113ae:	e7f4      	b.n	801139a <_dtoa_r+0x902>
 80113b0:	d085      	beq.n	80112be <_dtoa_r+0x826>
 80113b2:	4618      	mov	r0, r3
 80113b4:	301c      	adds	r0, #28
 80113b6:	e77d      	b.n	80112b4 <_dtoa_r+0x81c>
 80113b8:	40240000 	.word	0x40240000
 80113bc:	9b01      	ldr	r3, [sp, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dc38      	bgt.n	8011434 <_dtoa_r+0x99c>
 80113c2:	9b05      	ldr	r3, [sp, #20]
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	dd35      	ble.n	8011434 <_dtoa_r+0x99c>
 80113c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80113cc:	f1b9 0f00 	cmp.w	r9, #0
 80113d0:	d10d      	bne.n	80113ee <_dtoa_r+0x956>
 80113d2:	4631      	mov	r1, r6
 80113d4:	464b      	mov	r3, r9
 80113d6:	2205      	movs	r2, #5
 80113d8:	4620      	mov	r0, r4
 80113da:	f000 fd4b 	bl	8011e74 <__multadd>
 80113de:	4601      	mov	r1, r0
 80113e0:	4606      	mov	r6, r0
 80113e2:	4658      	mov	r0, fp
 80113e4:	f000 ffac 	bl	8012340 <__mcmp>
 80113e8:	2800      	cmp	r0, #0
 80113ea:	f73f adbd 	bgt.w	8010f68 <_dtoa_r+0x4d0>
 80113ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113f0:	9d00      	ldr	r5, [sp, #0]
 80113f2:	ea6f 0a03 	mvn.w	sl, r3
 80113f6:	f04f 0800 	mov.w	r8, #0
 80113fa:	4631      	mov	r1, r6
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 fd17 	bl	8011e30 <_Bfree>
 8011402:	2f00      	cmp	r7, #0
 8011404:	f43f aeb4 	beq.w	8011170 <_dtoa_r+0x6d8>
 8011408:	f1b8 0f00 	cmp.w	r8, #0
 801140c:	d005      	beq.n	801141a <_dtoa_r+0x982>
 801140e:	45b8      	cmp	r8, r7
 8011410:	d003      	beq.n	801141a <_dtoa_r+0x982>
 8011412:	4641      	mov	r1, r8
 8011414:	4620      	mov	r0, r4
 8011416:	f000 fd0b 	bl	8011e30 <_Bfree>
 801141a:	4639      	mov	r1, r7
 801141c:	4620      	mov	r0, r4
 801141e:	f000 fd07 	bl	8011e30 <_Bfree>
 8011422:	e6a5      	b.n	8011170 <_dtoa_r+0x6d8>
 8011424:	2600      	movs	r6, #0
 8011426:	4637      	mov	r7, r6
 8011428:	e7e1      	b.n	80113ee <_dtoa_r+0x956>
 801142a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801142c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011430:	4637      	mov	r7, r6
 8011432:	e599      	b.n	8010f68 <_dtoa_r+0x4d0>
 8011434:	9b08      	ldr	r3, [sp, #32]
 8011436:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 80fd 	beq.w	801163a <_dtoa_r+0xba2>
 8011440:	2d00      	cmp	r5, #0
 8011442:	dd05      	ble.n	8011450 <_dtoa_r+0x9b8>
 8011444:	4639      	mov	r1, r7
 8011446:	462a      	mov	r2, r5
 8011448:	4620      	mov	r0, r4
 801144a:	f000 ff0d 	bl	8012268 <__lshift>
 801144e:	4607      	mov	r7, r0
 8011450:	9b06      	ldr	r3, [sp, #24]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d05c      	beq.n	8011510 <_dtoa_r+0xa78>
 8011456:	6879      	ldr	r1, [r7, #4]
 8011458:	4620      	mov	r0, r4
 801145a:	f000 fca9 	bl	8011db0 <_Balloc>
 801145e:	4605      	mov	r5, r0
 8011460:	b928      	cbnz	r0, 801146e <_dtoa_r+0x9d6>
 8011462:	4b80      	ldr	r3, [pc, #512]	; (8011664 <_dtoa_r+0xbcc>)
 8011464:	4602      	mov	r2, r0
 8011466:	f240 21ea 	movw	r1, #746	; 0x2ea
 801146a:	f7ff bb2e 	b.w	8010aca <_dtoa_r+0x32>
 801146e:	693a      	ldr	r2, [r7, #16]
 8011470:	3202      	adds	r2, #2
 8011472:	0092      	lsls	r2, r2, #2
 8011474:	f107 010c 	add.w	r1, r7, #12
 8011478:	300c      	adds	r0, #12
 801147a:	f7fd fc71 	bl	800ed60 <memcpy>
 801147e:	2201      	movs	r2, #1
 8011480:	4629      	mov	r1, r5
 8011482:	4620      	mov	r0, r4
 8011484:	f000 fef0 	bl	8012268 <__lshift>
 8011488:	9b00      	ldr	r3, [sp, #0]
 801148a:	3301      	adds	r3, #1
 801148c:	9301      	str	r3, [sp, #4]
 801148e:	9b00      	ldr	r3, [sp, #0]
 8011490:	444b      	add	r3, r9
 8011492:	9307      	str	r3, [sp, #28]
 8011494:	9b02      	ldr	r3, [sp, #8]
 8011496:	f003 0301 	and.w	r3, r3, #1
 801149a:	46b8      	mov	r8, r7
 801149c:	9306      	str	r3, [sp, #24]
 801149e:	4607      	mov	r7, r0
 80114a0:	9b01      	ldr	r3, [sp, #4]
 80114a2:	4631      	mov	r1, r6
 80114a4:	3b01      	subs	r3, #1
 80114a6:	4658      	mov	r0, fp
 80114a8:	9302      	str	r3, [sp, #8]
 80114aa:	f7ff fa69 	bl	8010980 <quorem>
 80114ae:	4603      	mov	r3, r0
 80114b0:	3330      	adds	r3, #48	; 0x30
 80114b2:	9004      	str	r0, [sp, #16]
 80114b4:	4641      	mov	r1, r8
 80114b6:	4658      	mov	r0, fp
 80114b8:	9308      	str	r3, [sp, #32]
 80114ba:	f000 ff41 	bl	8012340 <__mcmp>
 80114be:	463a      	mov	r2, r7
 80114c0:	4681      	mov	r9, r0
 80114c2:	4631      	mov	r1, r6
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 ff57 	bl	8012378 <__mdiff>
 80114ca:	68c2      	ldr	r2, [r0, #12]
 80114cc:	9b08      	ldr	r3, [sp, #32]
 80114ce:	4605      	mov	r5, r0
 80114d0:	bb02      	cbnz	r2, 8011514 <_dtoa_r+0xa7c>
 80114d2:	4601      	mov	r1, r0
 80114d4:	4658      	mov	r0, fp
 80114d6:	f000 ff33 	bl	8012340 <__mcmp>
 80114da:	9b08      	ldr	r3, [sp, #32]
 80114dc:	4602      	mov	r2, r0
 80114de:	4629      	mov	r1, r5
 80114e0:	4620      	mov	r0, r4
 80114e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80114e6:	f000 fca3 	bl	8011e30 <_Bfree>
 80114ea:	9b05      	ldr	r3, [sp, #20]
 80114ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114ee:	9d01      	ldr	r5, [sp, #4]
 80114f0:	ea43 0102 	orr.w	r1, r3, r2
 80114f4:	9b06      	ldr	r3, [sp, #24]
 80114f6:	430b      	orrs	r3, r1
 80114f8:	9b08      	ldr	r3, [sp, #32]
 80114fa:	d10d      	bne.n	8011518 <_dtoa_r+0xa80>
 80114fc:	2b39      	cmp	r3, #57	; 0x39
 80114fe:	d029      	beq.n	8011554 <_dtoa_r+0xabc>
 8011500:	f1b9 0f00 	cmp.w	r9, #0
 8011504:	dd01      	ble.n	801150a <_dtoa_r+0xa72>
 8011506:	9b04      	ldr	r3, [sp, #16]
 8011508:	3331      	adds	r3, #49	; 0x31
 801150a:	9a02      	ldr	r2, [sp, #8]
 801150c:	7013      	strb	r3, [r2, #0]
 801150e:	e774      	b.n	80113fa <_dtoa_r+0x962>
 8011510:	4638      	mov	r0, r7
 8011512:	e7b9      	b.n	8011488 <_dtoa_r+0x9f0>
 8011514:	2201      	movs	r2, #1
 8011516:	e7e2      	b.n	80114de <_dtoa_r+0xa46>
 8011518:	f1b9 0f00 	cmp.w	r9, #0
 801151c:	db06      	blt.n	801152c <_dtoa_r+0xa94>
 801151e:	9905      	ldr	r1, [sp, #20]
 8011520:	ea41 0909 	orr.w	r9, r1, r9
 8011524:	9906      	ldr	r1, [sp, #24]
 8011526:	ea59 0101 	orrs.w	r1, r9, r1
 801152a:	d120      	bne.n	801156e <_dtoa_r+0xad6>
 801152c:	2a00      	cmp	r2, #0
 801152e:	ddec      	ble.n	801150a <_dtoa_r+0xa72>
 8011530:	4659      	mov	r1, fp
 8011532:	2201      	movs	r2, #1
 8011534:	4620      	mov	r0, r4
 8011536:	9301      	str	r3, [sp, #4]
 8011538:	f000 fe96 	bl	8012268 <__lshift>
 801153c:	4631      	mov	r1, r6
 801153e:	4683      	mov	fp, r0
 8011540:	f000 fefe 	bl	8012340 <__mcmp>
 8011544:	2800      	cmp	r0, #0
 8011546:	9b01      	ldr	r3, [sp, #4]
 8011548:	dc02      	bgt.n	8011550 <_dtoa_r+0xab8>
 801154a:	d1de      	bne.n	801150a <_dtoa_r+0xa72>
 801154c:	07da      	lsls	r2, r3, #31
 801154e:	d5dc      	bpl.n	801150a <_dtoa_r+0xa72>
 8011550:	2b39      	cmp	r3, #57	; 0x39
 8011552:	d1d8      	bne.n	8011506 <_dtoa_r+0xa6e>
 8011554:	9a02      	ldr	r2, [sp, #8]
 8011556:	2339      	movs	r3, #57	; 0x39
 8011558:	7013      	strb	r3, [r2, #0]
 801155a:	462b      	mov	r3, r5
 801155c:	461d      	mov	r5, r3
 801155e:	3b01      	subs	r3, #1
 8011560:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011564:	2a39      	cmp	r2, #57	; 0x39
 8011566:	d050      	beq.n	801160a <_dtoa_r+0xb72>
 8011568:	3201      	adds	r2, #1
 801156a:	701a      	strb	r2, [r3, #0]
 801156c:	e745      	b.n	80113fa <_dtoa_r+0x962>
 801156e:	2a00      	cmp	r2, #0
 8011570:	dd03      	ble.n	801157a <_dtoa_r+0xae2>
 8011572:	2b39      	cmp	r3, #57	; 0x39
 8011574:	d0ee      	beq.n	8011554 <_dtoa_r+0xabc>
 8011576:	3301      	adds	r3, #1
 8011578:	e7c7      	b.n	801150a <_dtoa_r+0xa72>
 801157a:	9a01      	ldr	r2, [sp, #4]
 801157c:	9907      	ldr	r1, [sp, #28]
 801157e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011582:	428a      	cmp	r2, r1
 8011584:	d02a      	beq.n	80115dc <_dtoa_r+0xb44>
 8011586:	4659      	mov	r1, fp
 8011588:	2300      	movs	r3, #0
 801158a:	220a      	movs	r2, #10
 801158c:	4620      	mov	r0, r4
 801158e:	f000 fc71 	bl	8011e74 <__multadd>
 8011592:	45b8      	cmp	r8, r7
 8011594:	4683      	mov	fp, r0
 8011596:	f04f 0300 	mov.w	r3, #0
 801159a:	f04f 020a 	mov.w	r2, #10
 801159e:	4641      	mov	r1, r8
 80115a0:	4620      	mov	r0, r4
 80115a2:	d107      	bne.n	80115b4 <_dtoa_r+0xb1c>
 80115a4:	f000 fc66 	bl	8011e74 <__multadd>
 80115a8:	4680      	mov	r8, r0
 80115aa:	4607      	mov	r7, r0
 80115ac:	9b01      	ldr	r3, [sp, #4]
 80115ae:	3301      	adds	r3, #1
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	e775      	b.n	80114a0 <_dtoa_r+0xa08>
 80115b4:	f000 fc5e 	bl	8011e74 <__multadd>
 80115b8:	4639      	mov	r1, r7
 80115ba:	4680      	mov	r8, r0
 80115bc:	2300      	movs	r3, #0
 80115be:	220a      	movs	r2, #10
 80115c0:	4620      	mov	r0, r4
 80115c2:	f000 fc57 	bl	8011e74 <__multadd>
 80115c6:	4607      	mov	r7, r0
 80115c8:	e7f0      	b.n	80115ac <_dtoa_r+0xb14>
 80115ca:	f1b9 0f00 	cmp.w	r9, #0
 80115ce:	9a00      	ldr	r2, [sp, #0]
 80115d0:	bfcc      	ite	gt
 80115d2:	464d      	movgt	r5, r9
 80115d4:	2501      	movle	r5, #1
 80115d6:	4415      	add	r5, r2
 80115d8:	f04f 0800 	mov.w	r8, #0
 80115dc:	4659      	mov	r1, fp
 80115de:	2201      	movs	r2, #1
 80115e0:	4620      	mov	r0, r4
 80115e2:	9301      	str	r3, [sp, #4]
 80115e4:	f000 fe40 	bl	8012268 <__lshift>
 80115e8:	4631      	mov	r1, r6
 80115ea:	4683      	mov	fp, r0
 80115ec:	f000 fea8 	bl	8012340 <__mcmp>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	dcb2      	bgt.n	801155a <_dtoa_r+0xac2>
 80115f4:	d102      	bne.n	80115fc <_dtoa_r+0xb64>
 80115f6:	9b01      	ldr	r3, [sp, #4]
 80115f8:	07db      	lsls	r3, r3, #31
 80115fa:	d4ae      	bmi.n	801155a <_dtoa_r+0xac2>
 80115fc:	462b      	mov	r3, r5
 80115fe:	461d      	mov	r5, r3
 8011600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011604:	2a30      	cmp	r2, #48	; 0x30
 8011606:	d0fa      	beq.n	80115fe <_dtoa_r+0xb66>
 8011608:	e6f7      	b.n	80113fa <_dtoa_r+0x962>
 801160a:	9a00      	ldr	r2, [sp, #0]
 801160c:	429a      	cmp	r2, r3
 801160e:	d1a5      	bne.n	801155c <_dtoa_r+0xac4>
 8011610:	f10a 0a01 	add.w	sl, sl, #1
 8011614:	2331      	movs	r3, #49	; 0x31
 8011616:	e779      	b.n	801150c <_dtoa_r+0xa74>
 8011618:	4b13      	ldr	r3, [pc, #76]	; (8011668 <_dtoa_r+0xbd0>)
 801161a:	f7ff baaf 	b.w	8010b7c <_dtoa_r+0xe4>
 801161e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011620:	2b00      	cmp	r3, #0
 8011622:	f47f aa86 	bne.w	8010b32 <_dtoa_r+0x9a>
 8011626:	4b11      	ldr	r3, [pc, #68]	; (801166c <_dtoa_r+0xbd4>)
 8011628:	f7ff baa8 	b.w	8010b7c <_dtoa_r+0xe4>
 801162c:	f1b9 0f00 	cmp.w	r9, #0
 8011630:	dc03      	bgt.n	801163a <_dtoa_r+0xba2>
 8011632:	9b05      	ldr	r3, [sp, #20]
 8011634:	2b02      	cmp	r3, #2
 8011636:	f73f aec9 	bgt.w	80113cc <_dtoa_r+0x934>
 801163a:	9d00      	ldr	r5, [sp, #0]
 801163c:	4631      	mov	r1, r6
 801163e:	4658      	mov	r0, fp
 8011640:	f7ff f99e 	bl	8010980 <quorem>
 8011644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011648:	f805 3b01 	strb.w	r3, [r5], #1
 801164c:	9a00      	ldr	r2, [sp, #0]
 801164e:	1aaa      	subs	r2, r5, r2
 8011650:	4591      	cmp	r9, r2
 8011652:	ddba      	ble.n	80115ca <_dtoa_r+0xb32>
 8011654:	4659      	mov	r1, fp
 8011656:	2300      	movs	r3, #0
 8011658:	220a      	movs	r2, #10
 801165a:	4620      	mov	r0, r4
 801165c:	f000 fc0a 	bl	8011e74 <__multadd>
 8011660:	4683      	mov	fp, r0
 8011662:	e7eb      	b.n	801163c <_dtoa_r+0xba4>
 8011664:	08015f4b 	.word	0x08015f4b
 8011668:	08016151 	.word	0x08016151
 801166c:	08015ec8 	.word	0x08015ec8

08011670 <rshift>:
 8011670:	6903      	ldr	r3, [r0, #16]
 8011672:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801167a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801167e:	f100 0414 	add.w	r4, r0, #20
 8011682:	dd45      	ble.n	8011710 <rshift+0xa0>
 8011684:	f011 011f 	ands.w	r1, r1, #31
 8011688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801168c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011690:	d10c      	bne.n	80116ac <rshift+0x3c>
 8011692:	f100 0710 	add.w	r7, r0, #16
 8011696:	4629      	mov	r1, r5
 8011698:	42b1      	cmp	r1, r6
 801169a:	d334      	bcc.n	8011706 <rshift+0x96>
 801169c:	1a9b      	subs	r3, r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	1eea      	subs	r2, r5, #3
 80116a2:	4296      	cmp	r6, r2
 80116a4:	bf38      	it	cc
 80116a6:	2300      	movcc	r3, #0
 80116a8:	4423      	add	r3, r4
 80116aa:	e015      	b.n	80116d8 <rshift+0x68>
 80116ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80116b0:	f1c1 0820 	rsb	r8, r1, #32
 80116b4:	40cf      	lsrs	r7, r1
 80116b6:	f105 0e04 	add.w	lr, r5, #4
 80116ba:	46a1      	mov	r9, r4
 80116bc:	4576      	cmp	r6, lr
 80116be:	46f4      	mov	ip, lr
 80116c0:	d815      	bhi.n	80116ee <rshift+0x7e>
 80116c2:	1a9b      	subs	r3, r3, r2
 80116c4:	009a      	lsls	r2, r3, #2
 80116c6:	3a04      	subs	r2, #4
 80116c8:	3501      	adds	r5, #1
 80116ca:	42ae      	cmp	r6, r5
 80116cc:	bf38      	it	cc
 80116ce:	2200      	movcc	r2, #0
 80116d0:	18a3      	adds	r3, r4, r2
 80116d2:	50a7      	str	r7, [r4, r2]
 80116d4:	b107      	cbz	r7, 80116d8 <rshift+0x68>
 80116d6:	3304      	adds	r3, #4
 80116d8:	1b1a      	subs	r2, r3, r4
 80116da:	42a3      	cmp	r3, r4
 80116dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80116e0:	bf08      	it	eq
 80116e2:	2300      	moveq	r3, #0
 80116e4:	6102      	str	r2, [r0, #16]
 80116e6:	bf08      	it	eq
 80116e8:	6143      	streq	r3, [r0, #20]
 80116ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116ee:	f8dc c000 	ldr.w	ip, [ip]
 80116f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80116f6:	ea4c 0707 	orr.w	r7, ip, r7
 80116fa:	f849 7b04 	str.w	r7, [r9], #4
 80116fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011702:	40cf      	lsrs	r7, r1
 8011704:	e7da      	b.n	80116bc <rshift+0x4c>
 8011706:	f851 cb04 	ldr.w	ip, [r1], #4
 801170a:	f847 cf04 	str.w	ip, [r7, #4]!
 801170e:	e7c3      	b.n	8011698 <rshift+0x28>
 8011710:	4623      	mov	r3, r4
 8011712:	e7e1      	b.n	80116d8 <rshift+0x68>

08011714 <__hexdig_fun>:
 8011714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011718:	2b09      	cmp	r3, #9
 801171a:	d802      	bhi.n	8011722 <__hexdig_fun+0xe>
 801171c:	3820      	subs	r0, #32
 801171e:	b2c0      	uxtb	r0, r0
 8011720:	4770      	bx	lr
 8011722:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011726:	2b05      	cmp	r3, #5
 8011728:	d801      	bhi.n	801172e <__hexdig_fun+0x1a>
 801172a:	3847      	subs	r0, #71	; 0x47
 801172c:	e7f7      	b.n	801171e <__hexdig_fun+0xa>
 801172e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011732:	2b05      	cmp	r3, #5
 8011734:	d801      	bhi.n	801173a <__hexdig_fun+0x26>
 8011736:	3827      	subs	r0, #39	; 0x27
 8011738:	e7f1      	b.n	801171e <__hexdig_fun+0xa>
 801173a:	2000      	movs	r0, #0
 801173c:	4770      	bx	lr
	...

08011740 <__gethex>:
 8011740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	ed2d 8b02 	vpush	{d8}
 8011748:	b089      	sub	sp, #36	; 0x24
 801174a:	ee08 0a10 	vmov	s16, r0
 801174e:	9304      	str	r3, [sp, #16]
 8011750:	4bbc      	ldr	r3, [pc, #752]	; (8011a44 <__gethex+0x304>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	9301      	str	r3, [sp, #4]
 8011756:	4618      	mov	r0, r3
 8011758:	468b      	mov	fp, r1
 801175a:	4690      	mov	r8, r2
 801175c:	f7ee fd42 	bl	80001e4 <strlen>
 8011760:	9b01      	ldr	r3, [sp, #4]
 8011762:	f8db 2000 	ldr.w	r2, [fp]
 8011766:	4403      	add	r3, r0
 8011768:	4682      	mov	sl, r0
 801176a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	1c93      	adds	r3, r2, #2
 8011772:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011776:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801177a:	32fe      	adds	r2, #254	; 0xfe
 801177c:	18d1      	adds	r1, r2, r3
 801177e:	461f      	mov	r7, r3
 8011780:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011784:	9100      	str	r1, [sp, #0]
 8011786:	2830      	cmp	r0, #48	; 0x30
 8011788:	d0f8      	beq.n	801177c <__gethex+0x3c>
 801178a:	f7ff ffc3 	bl	8011714 <__hexdig_fun>
 801178e:	4604      	mov	r4, r0
 8011790:	2800      	cmp	r0, #0
 8011792:	d13a      	bne.n	801180a <__gethex+0xca>
 8011794:	9901      	ldr	r1, [sp, #4]
 8011796:	4652      	mov	r2, sl
 8011798:	4638      	mov	r0, r7
 801179a:	f7fe fa08 	bl	800fbae <strncmp>
 801179e:	4605      	mov	r5, r0
 80117a0:	2800      	cmp	r0, #0
 80117a2:	d168      	bne.n	8011876 <__gethex+0x136>
 80117a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80117a8:	eb07 060a 	add.w	r6, r7, sl
 80117ac:	f7ff ffb2 	bl	8011714 <__hexdig_fun>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d062      	beq.n	801187a <__gethex+0x13a>
 80117b4:	4633      	mov	r3, r6
 80117b6:	7818      	ldrb	r0, [r3, #0]
 80117b8:	2830      	cmp	r0, #48	; 0x30
 80117ba:	461f      	mov	r7, r3
 80117bc:	f103 0301 	add.w	r3, r3, #1
 80117c0:	d0f9      	beq.n	80117b6 <__gethex+0x76>
 80117c2:	f7ff ffa7 	bl	8011714 <__hexdig_fun>
 80117c6:	2301      	movs	r3, #1
 80117c8:	fab0 f480 	clz	r4, r0
 80117cc:	0964      	lsrs	r4, r4, #5
 80117ce:	4635      	mov	r5, r6
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	463a      	mov	r2, r7
 80117d4:	4616      	mov	r6, r2
 80117d6:	3201      	adds	r2, #1
 80117d8:	7830      	ldrb	r0, [r6, #0]
 80117da:	f7ff ff9b 	bl	8011714 <__hexdig_fun>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d1f8      	bne.n	80117d4 <__gethex+0x94>
 80117e2:	9901      	ldr	r1, [sp, #4]
 80117e4:	4652      	mov	r2, sl
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7fe f9e1 	bl	800fbae <strncmp>
 80117ec:	b980      	cbnz	r0, 8011810 <__gethex+0xd0>
 80117ee:	b94d      	cbnz	r5, 8011804 <__gethex+0xc4>
 80117f0:	eb06 050a 	add.w	r5, r6, sl
 80117f4:	462a      	mov	r2, r5
 80117f6:	4616      	mov	r6, r2
 80117f8:	3201      	adds	r2, #1
 80117fa:	7830      	ldrb	r0, [r6, #0]
 80117fc:	f7ff ff8a 	bl	8011714 <__hexdig_fun>
 8011800:	2800      	cmp	r0, #0
 8011802:	d1f8      	bne.n	80117f6 <__gethex+0xb6>
 8011804:	1bad      	subs	r5, r5, r6
 8011806:	00ad      	lsls	r5, r5, #2
 8011808:	e004      	b.n	8011814 <__gethex+0xd4>
 801180a:	2400      	movs	r4, #0
 801180c:	4625      	mov	r5, r4
 801180e:	e7e0      	b.n	80117d2 <__gethex+0x92>
 8011810:	2d00      	cmp	r5, #0
 8011812:	d1f7      	bne.n	8011804 <__gethex+0xc4>
 8011814:	7833      	ldrb	r3, [r6, #0]
 8011816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801181a:	2b50      	cmp	r3, #80	; 0x50
 801181c:	d13b      	bne.n	8011896 <__gethex+0x156>
 801181e:	7873      	ldrb	r3, [r6, #1]
 8011820:	2b2b      	cmp	r3, #43	; 0x2b
 8011822:	d02c      	beq.n	801187e <__gethex+0x13e>
 8011824:	2b2d      	cmp	r3, #45	; 0x2d
 8011826:	d02e      	beq.n	8011886 <__gethex+0x146>
 8011828:	1c71      	adds	r1, r6, #1
 801182a:	f04f 0900 	mov.w	r9, #0
 801182e:	7808      	ldrb	r0, [r1, #0]
 8011830:	f7ff ff70 	bl	8011714 <__hexdig_fun>
 8011834:	1e43      	subs	r3, r0, #1
 8011836:	b2db      	uxtb	r3, r3
 8011838:	2b18      	cmp	r3, #24
 801183a:	d82c      	bhi.n	8011896 <__gethex+0x156>
 801183c:	f1a0 0210 	sub.w	r2, r0, #16
 8011840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011844:	f7ff ff66 	bl	8011714 <__hexdig_fun>
 8011848:	1e43      	subs	r3, r0, #1
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b18      	cmp	r3, #24
 801184e:	d91d      	bls.n	801188c <__gethex+0x14c>
 8011850:	f1b9 0f00 	cmp.w	r9, #0
 8011854:	d000      	beq.n	8011858 <__gethex+0x118>
 8011856:	4252      	negs	r2, r2
 8011858:	4415      	add	r5, r2
 801185a:	f8cb 1000 	str.w	r1, [fp]
 801185e:	b1e4      	cbz	r4, 801189a <__gethex+0x15a>
 8011860:	9b00      	ldr	r3, [sp, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	bf14      	ite	ne
 8011866:	2700      	movne	r7, #0
 8011868:	2706      	moveq	r7, #6
 801186a:	4638      	mov	r0, r7
 801186c:	b009      	add	sp, #36	; 0x24
 801186e:	ecbd 8b02 	vpop	{d8}
 8011872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011876:	463e      	mov	r6, r7
 8011878:	4625      	mov	r5, r4
 801187a:	2401      	movs	r4, #1
 801187c:	e7ca      	b.n	8011814 <__gethex+0xd4>
 801187e:	f04f 0900 	mov.w	r9, #0
 8011882:	1cb1      	adds	r1, r6, #2
 8011884:	e7d3      	b.n	801182e <__gethex+0xee>
 8011886:	f04f 0901 	mov.w	r9, #1
 801188a:	e7fa      	b.n	8011882 <__gethex+0x142>
 801188c:	230a      	movs	r3, #10
 801188e:	fb03 0202 	mla	r2, r3, r2, r0
 8011892:	3a10      	subs	r2, #16
 8011894:	e7d4      	b.n	8011840 <__gethex+0x100>
 8011896:	4631      	mov	r1, r6
 8011898:	e7df      	b.n	801185a <__gethex+0x11a>
 801189a:	1bf3      	subs	r3, r6, r7
 801189c:	3b01      	subs	r3, #1
 801189e:	4621      	mov	r1, r4
 80118a0:	2b07      	cmp	r3, #7
 80118a2:	dc0b      	bgt.n	80118bc <__gethex+0x17c>
 80118a4:	ee18 0a10 	vmov	r0, s16
 80118a8:	f000 fa82 	bl	8011db0 <_Balloc>
 80118ac:	4604      	mov	r4, r0
 80118ae:	b940      	cbnz	r0, 80118c2 <__gethex+0x182>
 80118b0:	4b65      	ldr	r3, [pc, #404]	; (8011a48 <__gethex+0x308>)
 80118b2:	4602      	mov	r2, r0
 80118b4:	21de      	movs	r1, #222	; 0xde
 80118b6:	4865      	ldr	r0, [pc, #404]	; (8011a4c <__gethex+0x30c>)
 80118b8:	f001 fd92 	bl	80133e0 <__assert_func>
 80118bc:	3101      	adds	r1, #1
 80118be:	105b      	asrs	r3, r3, #1
 80118c0:	e7ee      	b.n	80118a0 <__gethex+0x160>
 80118c2:	f100 0914 	add.w	r9, r0, #20
 80118c6:	f04f 0b00 	mov.w	fp, #0
 80118ca:	f1ca 0301 	rsb	r3, sl, #1
 80118ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80118d2:	f8cd b000 	str.w	fp, [sp]
 80118d6:	9306      	str	r3, [sp, #24]
 80118d8:	42b7      	cmp	r7, r6
 80118da:	d340      	bcc.n	801195e <__gethex+0x21e>
 80118dc:	9802      	ldr	r0, [sp, #8]
 80118de:	9b00      	ldr	r3, [sp, #0]
 80118e0:	f840 3b04 	str.w	r3, [r0], #4
 80118e4:	eba0 0009 	sub.w	r0, r0, r9
 80118e8:	1080      	asrs	r0, r0, #2
 80118ea:	0146      	lsls	r6, r0, #5
 80118ec:	6120      	str	r0, [r4, #16]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 fb54 	bl	8011f9c <__hi0bits>
 80118f4:	1a30      	subs	r0, r6, r0
 80118f6:	f8d8 6000 	ldr.w	r6, [r8]
 80118fa:	42b0      	cmp	r0, r6
 80118fc:	dd63      	ble.n	80119c6 <__gethex+0x286>
 80118fe:	1b87      	subs	r7, r0, r6
 8011900:	4639      	mov	r1, r7
 8011902:	4620      	mov	r0, r4
 8011904:	f000 feee 	bl	80126e4 <__any_on>
 8011908:	4682      	mov	sl, r0
 801190a:	b1a8      	cbz	r0, 8011938 <__gethex+0x1f8>
 801190c:	1e7b      	subs	r3, r7, #1
 801190e:	1159      	asrs	r1, r3, #5
 8011910:	f003 021f 	and.w	r2, r3, #31
 8011914:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011918:	f04f 0a01 	mov.w	sl, #1
 801191c:	fa0a f202 	lsl.w	r2, sl, r2
 8011920:	420a      	tst	r2, r1
 8011922:	d009      	beq.n	8011938 <__gethex+0x1f8>
 8011924:	4553      	cmp	r3, sl
 8011926:	dd05      	ble.n	8011934 <__gethex+0x1f4>
 8011928:	1eb9      	subs	r1, r7, #2
 801192a:	4620      	mov	r0, r4
 801192c:	f000 feda 	bl	80126e4 <__any_on>
 8011930:	2800      	cmp	r0, #0
 8011932:	d145      	bne.n	80119c0 <__gethex+0x280>
 8011934:	f04f 0a02 	mov.w	sl, #2
 8011938:	4639      	mov	r1, r7
 801193a:	4620      	mov	r0, r4
 801193c:	f7ff fe98 	bl	8011670 <rshift>
 8011940:	443d      	add	r5, r7
 8011942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011946:	42ab      	cmp	r3, r5
 8011948:	da4c      	bge.n	80119e4 <__gethex+0x2a4>
 801194a:	ee18 0a10 	vmov	r0, s16
 801194e:	4621      	mov	r1, r4
 8011950:	f000 fa6e 	bl	8011e30 <_Bfree>
 8011954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011956:	2300      	movs	r3, #0
 8011958:	6013      	str	r3, [r2, #0]
 801195a:	27a3      	movs	r7, #163	; 0xa3
 801195c:	e785      	b.n	801186a <__gethex+0x12a>
 801195e:	1e73      	subs	r3, r6, #1
 8011960:	9a05      	ldr	r2, [sp, #20]
 8011962:	9303      	str	r3, [sp, #12]
 8011964:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011968:	4293      	cmp	r3, r2
 801196a:	d019      	beq.n	80119a0 <__gethex+0x260>
 801196c:	f1bb 0f20 	cmp.w	fp, #32
 8011970:	d107      	bne.n	8011982 <__gethex+0x242>
 8011972:	9b02      	ldr	r3, [sp, #8]
 8011974:	9a00      	ldr	r2, [sp, #0]
 8011976:	f843 2b04 	str.w	r2, [r3], #4
 801197a:	9302      	str	r3, [sp, #8]
 801197c:	2300      	movs	r3, #0
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	469b      	mov	fp, r3
 8011982:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011986:	f7ff fec5 	bl	8011714 <__hexdig_fun>
 801198a:	9b00      	ldr	r3, [sp, #0]
 801198c:	f000 000f 	and.w	r0, r0, #15
 8011990:	fa00 f00b 	lsl.w	r0, r0, fp
 8011994:	4303      	orrs	r3, r0
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	f10b 0b04 	add.w	fp, fp, #4
 801199c:	9b03      	ldr	r3, [sp, #12]
 801199e:	e00d      	b.n	80119bc <__gethex+0x27c>
 80119a0:	9b03      	ldr	r3, [sp, #12]
 80119a2:	9a06      	ldr	r2, [sp, #24]
 80119a4:	4413      	add	r3, r2
 80119a6:	42bb      	cmp	r3, r7
 80119a8:	d3e0      	bcc.n	801196c <__gethex+0x22c>
 80119aa:	4618      	mov	r0, r3
 80119ac:	9901      	ldr	r1, [sp, #4]
 80119ae:	9307      	str	r3, [sp, #28]
 80119b0:	4652      	mov	r2, sl
 80119b2:	f7fe f8fc 	bl	800fbae <strncmp>
 80119b6:	9b07      	ldr	r3, [sp, #28]
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d1d7      	bne.n	801196c <__gethex+0x22c>
 80119bc:	461e      	mov	r6, r3
 80119be:	e78b      	b.n	80118d8 <__gethex+0x198>
 80119c0:	f04f 0a03 	mov.w	sl, #3
 80119c4:	e7b8      	b.n	8011938 <__gethex+0x1f8>
 80119c6:	da0a      	bge.n	80119de <__gethex+0x29e>
 80119c8:	1a37      	subs	r7, r6, r0
 80119ca:	4621      	mov	r1, r4
 80119cc:	ee18 0a10 	vmov	r0, s16
 80119d0:	463a      	mov	r2, r7
 80119d2:	f000 fc49 	bl	8012268 <__lshift>
 80119d6:	1bed      	subs	r5, r5, r7
 80119d8:	4604      	mov	r4, r0
 80119da:	f100 0914 	add.w	r9, r0, #20
 80119de:	f04f 0a00 	mov.w	sl, #0
 80119e2:	e7ae      	b.n	8011942 <__gethex+0x202>
 80119e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80119e8:	42a8      	cmp	r0, r5
 80119ea:	dd72      	ble.n	8011ad2 <__gethex+0x392>
 80119ec:	1b45      	subs	r5, r0, r5
 80119ee:	42ae      	cmp	r6, r5
 80119f0:	dc36      	bgt.n	8011a60 <__gethex+0x320>
 80119f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	d02a      	beq.n	8011a50 <__gethex+0x310>
 80119fa:	2b03      	cmp	r3, #3
 80119fc:	d02c      	beq.n	8011a58 <__gethex+0x318>
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d115      	bne.n	8011a2e <__gethex+0x2ee>
 8011a02:	42ae      	cmp	r6, r5
 8011a04:	d113      	bne.n	8011a2e <__gethex+0x2ee>
 8011a06:	2e01      	cmp	r6, #1
 8011a08:	d10b      	bne.n	8011a22 <__gethex+0x2e2>
 8011a0a:	9a04      	ldr	r2, [sp, #16]
 8011a0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a10:	6013      	str	r3, [r2, #0]
 8011a12:	2301      	movs	r3, #1
 8011a14:	6123      	str	r3, [r4, #16]
 8011a16:	f8c9 3000 	str.w	r3, [r9]
 8011a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a1c:	2762      	movs	r7, #98	; 0x62
 8011a1e:	601c      	str	r4, [r3, #0]
 8011a20:	e723      	b.n	801186a <__gethex+0x12a>
 8011a22:	1e71      	subs	r1, r6, #1
 8011a24:	4620      	mov	r0, r4
 8011a26:	f000 fe5d 	bl	80126e4 <__any_on>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d1ed      	bne.n	8011a0a <__gethex+0x2ca>
 8011a2e:	ee18 0a10 	vmov	r0, s16
 8011a32:	4621      	mov	r1, r4
 8011a34:	f000 f9fc 	bl	8011e30 <_Bfree>
 8011a38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	6013      	str	r3, [r2, #0]
 8011a3e:	2750      	movs	r7, #80	; 0x50
 8011a40:	e713      	b.n	801186a <__gethex+0x12a>
 8011a42:	bf00      	nop
 8011a44:	08015fc8 	.word	0x08015fc8
 8011a48:	08015f4b 	.word	0x08015f4b
 8011a4c:	08015f5c 	.word	0x08015f5c
 8011a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1eb      	bne.n	8011a2e <__gethex+0x2ee>
 8011a56:	e7d8      	b.n	8011a0a <__gethex+0x2ca>
 8011a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1d5      	bne.n	8011a0a <__gethex+0x2ca>
 8011a5e:	e7e6      	b.n	8011a2e <__gethex+0x2ee>
 8011a60:	1e6f      	subs	r7, r5, #1
 8011a62:	f1ba 0f00 	cmp.w	sl, #0
 8011a66:	d131      	bne.n	8011acc <__gethex+0x38c>
 8011a68:	b127      	cbz	r7, 8011a74 <__gethex+0x334>
 8011a6a:	4639      	mov	r1, r7
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f000 fe39 	bl	80126e4 <__any_on>
 8011a72:	4682      	mov	sl, r0
 8011a74:	117b      	asrs	r3, r7, #5
 8011a76:	2101      	movs	r1, #1
 8011a78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011a7c:	f007 071f 	and.w	r7, r7, #31
 8011a80:	fa01 f707 	lsl.w	r7, r1, r7
 8011a84:	421f      	tst	r7, r3
 8011a86:	4629      	mov	r1, r5
 8011a88:	4620      	mov	r0, r4
 8011a8a:	bf18      	it	ne
 8011a8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011a90:	1b76      	subs	r6, r6, r5
 8011a92:	f7ff fded 	bl	8011670 <rshift>
 8011a96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011a9a:	2702      	movs	r7, #2
 8011a9c:	f1ba 0f00 	cmp.w	sl, #0
 8011aa0:	d048      	beq.n	8011b34 <__gethex+0x3f4>
 8011aa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	d015      	beq.n	8011ad6 <__gethex+0x396>
 8011aaa:	2b03      	cmp	r3, #3
 8011aac:	d017      	beq.n	8011ade <__gethex+0x39e>
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d109      	bne.n	8011ac6 <__gethex+0x386>
 8011ab2:	f01a 0f02 	tst.w	sl, #2
 8011ab6:	d006      	beq.n	8011ac6 <__gethex+0x386>
 8011ab8:	f8d9 0000 	ldr.w	r0, [r9]
 8011abc:	ea4a 0a00 	orr.w	sl, sl, r0
 8011ac0:	f01a 0f01 	tst.w	sl, #1
 8011ac4:	d10e      	bne.n	8011ae4 <__gethex+0x3a4>
 8011ac6:	f047 0710 	orr.w	r7, r7, #16
 8011aca:	e033      	b.n	8011b34 <__gethex+0x3f4>
 8011acc:	f04f 0a01 	mov.w	sl, #1
 8011ad0:	e7d0      	b.n	8011a74 <__gethex+0x334>
 8011ad2:	2701      	movs	r7, #1
 8011ad4:	e7e2      	b.n	8011a9c <__gethex+0x35c>
 8011ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ad8:	f1c3 0301 	rsb	r3, r3, #1
 8011adc:	9315      	str	r3, [sp, #84]	; 0x54
 8011ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d0f0      	beq.n	8011ac6 <__gethex+0x386>
 8011ae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ae8:	f104 0314 	add.w	r3, r4, #20
 8011aec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011af0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011af4:	f04f 0c00 	mov.w	ip, #0
 8011af8:	4618      	mov	r0, r3
 8011afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8011afe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011b02:	d01c      	beq.n	8011b3e <__gethex+0x3fe>
 8011b04:	3201      	adds	r2, #1
 8011b06:	6002      	str	r2, [r0, #0]
 8011b08:	2f02      	cmp	r7, #2
 8011b0a:	f104 0314 	add.w	r3, r4, #20
 8011b0e:	d13f      	bne.n	8011b90 <__gethex+0x450>
 8011b10:	f8d8 2000 	ldr.w	r2, [r8]
 8011b14:	3a01      	subs	r2, #1
 8011b16:	42b2      	cmp	r2, r6
 8011b18:	d10a      	bne.n	8011b30 <__gethex+0x3f0>
 8011b1a:	1171      	asrs	r1, r6, #5
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b22:	f006 061f 	and.w	r6, r6, #31
 8011b26:	fa02 f606 	lsl.w	r6, r2, r6
 8011b2a:	421e      	tst	r6, r3
 8011b2c:	bf18      	it	ne
 8011b2e:	4617      	movne	r7, r2
 8011b30:	f047 0720 	orr.w	r7, r7, #32
 8011b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b36:	601c      	str	r4, [r3, #0]
 8011b38:	9b04      	ldr	r3, [sp, #16]
 8011b3a:	601d      	str	r5, [r3, #0]
 8011b3c:	e695      	b.n	801186a <__gethex+0x12a>
 8011b3e:	4299      	cmp	r1, r3
 8011b40:	f843 cc04 	str.w	ip, [r3, #-4]
 8011b44:	d8d8      	bhi.n	8011af8 <__gethex+0x3b8>
 8011b46:	68a3      	ldr	r3, [r4, #8]
 8011b48:	459b      	cmp	fp, r3
 8011b4a:	db19      	blt.n	8011b80 <__gethex+0x440>
 8011b4c:	6861      	ldr	r1, [r4, #4]
 8011b4e:	ee18 0a10 	vmov	r0, s16
 8011b52:	3101      	adds	r1, #1
 8011b54:	f000 f92c 	bl	8011db0 <_Balloc>
 8011b58:	4681      	mov	r9, r0
 8011b5a:	b918      	cbnz	r0, 8011b64 <__gethex+0x424>
 8011b5c:	4b1a      	ldr	r3, [pc, #104]	; (8011bc8 <__gethex+0x488>)
 8011b5e:	4602      	mov	r2, r0
 8011b60:	2184      	movs	r1, #132	; 0x84
 8011b62:	e6a8      	b.n	80118b6 <__gethex+0x176>
 8011b64:	6922      	ldr	r2, [r4, #16]
 8011b66:	3202      	adds	r2, #2
 8011b68:	f104 010c 	add.w	r1, r4, #12
 8011b6c:	0092      	lsls	r2, r2, #2
 8011b6e:	300c      	adds	r0, #12
 8011b70:	f7fd f8f6 	bl	800ed60 <memcpy>
 8011b74:	4621      	mov	r1, r4
 8011b76:	ee18 0a10 	vmov	r0, s16
 8011b7a:	f000 f959 	bl	8011e30 <_Bfree>
 8011b7e:	464c      	mov	r4, r9
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	1c5a      	adds	r2, r3, #1
 8011b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b88:	6122      	str	r2, [r4, #16]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	615a      	str	r2, [r3, #20]
 8011b8e:	e7bb      	b.n	8011b08 <__gethex+0x3c8>
 8011b90:	6922      	ldr	r2, [r4, #16]
 8011b92:	455a      	cmp	r2, fp
 8011b94:	dd0b      	ble.n	8011bae <__gethex+0x46e>
 8011b96:	2101      	movs	r1, #1
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f7ff fd69 	bl	8011670 <rshift>
 8011b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ba2:	3501      	adds	r5, #1
 8011ba4:	42ab      	cmp	r3, r5
 8011ba6:	f6ff aed0 	blt.w	801194a <__gethex+0x20a>
 8011baa:	2701      	movs	r7, #1
 8011bac:	e7c0      	b.n	8011b30 <__gethex+0x3f0>
 8011bae:	f016 061f 	ands.w	r6, r6, #31
 8011bb2:	d0fa      	beq.n	8011baa <__gethex+0x46a>
 8011bb4:	449a      	add	sl, r3
 8011bb6:	f1c6 0620 	rsb	r6, r6, #32
 8011bba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011bbe:	f000 f9ed 	bl	8011f9c <__hi0bits>
 8011bc2:	42b0      	cmp	r0, r6
 8011bc4:	dbe7      	blt.n	8011b96 <__gethex+0x456>
 8011bc6:	e7f0      	b.n	8011baa <__gethex+0x46a>
 8011bc8:	08015f4b 	.word	0x08015f4b

08011bcc <L_shift>:
 8011bcc:	f1c2 0208 	rsb	r2, r2, #8
 8011bd0:	0092      	lsls	r2, r2, #2
 8011bd2:	b570      	push	{r4, r5, r6, lr}
 8011bd4:	f1c2 0620 	rsb	r6, r2, #32
 8011bd8:	6843      	ldr	r3, [r0, #4]
 8011bda:	6804      	ldr	r4, [r0, #0]
 8011bdc:	fa03 f506 	lsl.w	r5, r3, r6
 8011be0:	432c      	orrs	r4, r5
 8011be2:	40d3      	lsrs	r3, r2
 8011be4:	6004      	str	r4, [r0, #0]
 8011be6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011bea:	4288      	cmp	r0, r1
 8011bec:	d3f4      	bcc.n	8011bd8 <L_shift+0xc>
 8011bee:	bd70      	pop	{r4, r5, r6, pc}

08011bf0 <__match>:
 8011bf0:	b530      	push	{r4, r5, lr}
 8011bf2:	6803      	ldr	r3, [r0, #0]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bfa:	b914      	cbnz	r4, 8011c02 <__match+0x12>
 8011bfc:	6003      	str	r3, [r0, #0]
 8011bfe:	2001      	movs	r0, #1
 8011c00:	bd30      	pop	{r4, r5, pc}
 8011c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011c0a:	2d19      	cmp	r5, #25
 8011c0c:	bf98      	it	ls
 8011c0e:	3220      	addls	r2, #32
 8011c10:	42a2      	cmp	r2, r4
 8011c12:	d0f0      	beq.n	8011bf6 <__match+0x6>
 8011c14:	2000      	movs	r0, #0
 8011c16:	e7f3      	b.n	8011c00 <__match+0x10>

08011c18 <__hexnan>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	680b      	ldr	r3, [r1, #0]
 8011c1e:	6801      	ldr	r1, [r0, #0]
 8011c20:	115e      	asrs	r6, r3, #5
 8011c22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011c26:	f013 031f 	ands.w	r3, r3, #31
 8011c2a:	b087      	sub	sp, #28
 8011c2c:	bf18      	it	ne
 8011c2e:	3604      	addne	r6, #4
 8011c30:	2500      	movs	r5, #0
 8011c32:	1f37      	subs	r7, r6, #4
 8011c34:	4682      	mov	sl, r0
 8011c36:	4690      	mov	r8, r2
 8011c38:	9301      	str	r3, [sp, #4]
 8011c3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011c3e:	46b9      	mov	r9, r7
 8011c40:	463c      	mov	r4, r7
 8011c42:	9502      	str	r5, [sp, #8]
 8011c44:	46ab      	mov	fp, r5
 8011c46:	784a      	ldrb	r2, [r1, #1]
 8011c48:	1c4b      	adds	r3, r1, #1
 8011c4a:	9303      	str	r3, [sp, #12]
 8011c4c:	b342      	cbz	r2, 8011ca0 <__hexnan+0x88>
 8011c4e:	4610      	mov	r0, r2
 8011c50:	9105      	str	r1, [sp, #20]
 8011c52:	9204      	str	r2, [sp, #16]
 8011c54:	f7ff fd5e 	bl	8011714 <__hexdig_fun>
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	d14f      	bne.n	8011cfc <__hexnan+0xe4>
 8011c5c:	9a04      	ldr	r2, [sp, #16]
 8011c5e:	9905      	ldr	r1, [sp, #20]
 8011c60:	2a20      	cmp	r2, #32
 8011c62:	d818      	bhi.n	8011c96 <__hexnan+0x7e>
 8011c64:	9b02      	ldr	r3, [sp, #8]
 8011c66:	459b      	cmp	fp, r3
 8011c68:	dd13      	ble.n	8011c92 <__hexnan+0x7a>
 8011c6a:	454c      	cmp	r4, r9
 8011c6c:	d206      	bcs.n	8011c7c <__hexnan+0x64>
 8011c6e:	2d07      	cmp	r5, #7
 8011c70:	dc04      	bgt.n	8011c7c <__hexnan+0x64>
 8011c72:	462a      	mov	r2, r5
 8011c74:	4649      	mov	r1, r9
 8011c76:	4620      	mov	r0, r4
 8011c78:	f7ff ffa8 	bl	8011bcc <L_shift>
 8011c7c:	4544      	cmp	r4, r8
 8011c7e:	d950      	bls.n	8011d22 <__hexnan+0x10a>
 8011c80:	2300      	movs	r3, #0
 8011c82:	f1a4 0904 	sub.w	r9, r4, #4
 8011c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c8a:	f8cd b008 	str.w	fp, [sp, #8]
 8011c8e:	464c      	mov	r4, r9
 8011c90:	461d      	mov	r5, r3
 8011c92:	9903      	ldr	r1, [sp, #12]
 8011c94:	e7d7      	b.n	8011c46 <__hexnan+0x2e>
 8011c96:	2a29      	cmp	r2, #41	; 0x29
 8011c98:	d156      	bne.n	8011d48 <__hexnan+0x130>
 8011c9a:	3102      	adds	r1, #2
 8011c9c:	f8ca 1000 	str.w	r1, [sl]
 8011ca0:	f1bb 0f00 	cmp.w	fp, #0
 8011ca4:	d050      	beq.n	8011d48 <__hexnan+0x130>
 8011ca6:	454c      	cmp	r4, r9
 8011ca8:	d206      	bcs.n	8011cb8 <__hexnan+0xa0>
 8011caa:	2d07      	cmp	r5, #7
 8011cac:	dc04      	bgt.n	8011cb8 <__hexnan+0xa0>
 8011cae:	462a      	mov	r2, r5
 8011cb0:	4649      	mov	r1, r9
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7ff ff8a 	bl	8011bcc <L_shift>
 8011cb8:	4544      	cmp	r4, r8
 8011cba:	d934      	bls.n	8011d26 <__hexnan+0x10e>
 8011cbc:	f1a8 0204 	sub.w	r2, r8, #4
 8011cc0:	4623      	mov	r3, r4
 8011cc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011cc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011cca:	429f      	cmp	r7, r3
 8011ccc:	d2f9      	bcs.n	8011cc2 <__hexnan+0xaa>
 8011cce:	1b3b      	subs	r3, r7, r4
 8011cd0:	f023 0303 	bic.w	r3, r3, #3
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	3401      	adds	r4, #1
 8011cd8:	3e03      	subs	r6, #3
 8011cda:	42b4      	cmp	r4, r6
 8011cdc:	bf88      	it	hi
 8011cde:	2304      	movhi	r3, #4
 8011ce0:	4443      	add	r3, r8
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f843 2b04 	str.w	r2, [r3], #4
 8011ce8:	429f      	cmp	r7, r3
 8011cea:	d2fb      	bcs.n	8011ce4 <__hexnan+0xcc>
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	b91b      	cbnz	r3, 8011cf8 <__hexnan+0xe0>
 8011cf0:	4547      	cmp	r7, r8
 8011cf2:	d127      	bne.n	8011d44 <__hexnan+0x12c>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	603b      	str	r3, [r7, #0]
 8011cf8:	2005      	movs	r0, #5
 8011cfa:	e026      	b.n	8011d4a <__hexnan+0x132>
 8011cfc:	3501      	adds	r5, #1
 8011cfe:	2d08      	cmp	r5, #8
 8011d00:	f10b 0b01 	add.w	fp, fp, #1
 8011d04:	dd06      	ble.n	8011d14 <__hexnan+0xfc>
 8011d06:	4544      	cmp	r4, r8
 8011d08:	d9c3      	bls.n	8011c92 <__hexnan+0x7a>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d10:	2501      	movs	r5, #1
 8011d12:	3c04      	subs	r4, #4
 8011d14:	6822      	ldr	r2, [r4, #0]
 8011d16:	f000 000f 	and.w	r0, r0, #15
 8011d1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011d1e:	6022      	str	r2, [r4, #0]
 8011d20:	e7b7      	b.n	8011c92 <__hexnan+0x7a>
 8011d22:	2508      	movs	r5, #8
 8011d24:	e7b5      	b.n	8011c92 <__hexnan+0x7a>
 8011d26:	9b01      	ldr	r3, [sp, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d0df      	beq.n	8011cec <__hexnan+0xd4>
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d30:	f1c3 0320 	rsb	r3, r3, #32
 8011d34:	fa22 f303 	lsr.w	r3, r2, r3
 8011d38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d3c:	401a      	ands	r2, r3
 8011d3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011d42:	e7d3      	b.n	8011cec <__hexnan+0xd4>
 8011d44:	3f04      	subs	r7, #4
 8011d46:	e7d1      	b.n	8011cec <__hexnan+0xd4>
 8011d48:	2004      	movs	r0, #4
 8011d4a:	b007      	add	sp, #28
 8011d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d50 <_localeconv_r>:
 8011d50:	4800      	ldr	r0, [pc, #0]	; (8011d54 <_localeconv_r+0x4>)
 8011d52:	4770      	bx	lr
 8011d54:	200003cc 	.word	0x200003cc

08011d58 <_lseek_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d07      	ldr	r5, [pc, #28]	; (8011d78 <_lseek_r+0x20>)
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	4611      	mov	r1, r2
 8011d62:	2200      	movs	r2, #0
 8011d64:	602a      	str	r2, [r5, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	f7f5 ff0e 	bl	8007b88 <_lseek>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d102      	bne.n	8011d76 <_lseek_r+0x1e>
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	b103      	cbz	r3, 8011d76 <_lseek_r+0x1e>
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	20002eb8 	.word	0x20002eb8

08011d7c <malloc>:
 8011d7c:	4b02      	ldr	r3, [pc, #8]	; (8011d88 <malloc+0xc>)
 8011d7e:	4601      	mov	r1, r0
 8011d80:	6818      	ldr	r0, [r3, #0]
 8011d82:	f000 bd2f 	b.w	80127e4 <_malloc_r>
 8011d86:	bf00      	nop
 8011d88:	20000274 	.word	0x20000274

08011d8c <__ascii_mbtowc>:
 8011d8c:	b082      	sub	sp, #8
 8011d8e:	b901      	cbnz	r1, 8011d92 <__ascii_mbtowc+0x6>
 8011d90:	a901      	add	r1, sp, #4
 8011d92:	b142      	cbz	r2, 8011da6 <__ascii_mbtowc+0x1a>
 8011d94:	b14b      	cbz	r3, 8011daa <__ascii_mbtowc+0x1e>
 8011d96:	7813      	ldrb	r3, [r2, #0]
 8011d98:	600b      	str	r3, [r1, #0]
 8011d9a:	7812      	ldrb	r2, [r2, #0]
 8011d9c:	1e10      	subs	r0, r2, #0
 8011d9e:	bf18      	it	ne
 8011da0:	2001      	movne	r0, #1
 8011da2:	b002      	add	sp, #8
 8011da4:	4770      	bx	lr
 8011da6:	4610      	mov	r0, r2
 8011da8:	e7fb      	b.n	8011da2 <__ascii_mbtowc+0x16>
 8011daa:	f06f 0001 	mvn.w	r0, #1
 8011dae:	e7f8      	b.n	8011da2 <__ascii_mbtowc+0x16>

08011db0 <_Balloc>:
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011db4:	4604      	mov	r4, r0
 8011db6:	460d      	mov	r5, r1
 8011db8:	b976      	cbnz	r6, 8011dd8 <_Balloc+0x28>
 8011dba:	2010      	movs	r0, #16
 8011dbc:	f7ff ffde 	bl	8011d7c <malloc>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8011dc4:	b920      	cbnz	r0, 8011dd0 <_Balloc+0x20>
 8011dc6:	4b18      	ldr	r3, [pc, #96]	; (8011e28 <_Balloc+0x78>)
 8011dc8:	4818      	ldr	r0, [pc, #96]	; (8011e2c <_Balloc+0x7c>)
 8011dca:	2166      	movs	r1, #102	; 0x66
 8011dcc:	f001 fb08 	bl	80133e0 <__assert_func>
 8011dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011dd4:	6006      	str	r6, [r0, #0]
 8011dd6:	60c6      	str	r6, [r0, #12]
 8011dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011dda:	68f3      	ldr	r3, [r6, #12]
 8011ddc:	b183      	cbz	r3, 8011e00 <_Balloc+0x50>
 8011dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011de6:	b9b8      	cbnz	r0, 8011e18 <_Balloc+0x68>
 8011de8:	2101      	movs	r1, #1
 8011dea:	fa01 f605 	lsl.w	r6, r1, r5
 8011dee:	1d72      	adds	r2, r6, #5
 8011df0:	0092      	lsls	r2, r2, #2
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 fc97 	bl	8012726 <_calloc_r>
 8011df8:	b160      	cbz	r0, 8011e14 <_Balloc+0x64>
 8011dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011dfe:	e00e      	b.n	8011e1e <_Balloc+0x6e>
 8011e00:	2221      	movs	r2, #33	; 0x21
 8011e02:	2104      	movs	r1, #4
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 fc8e 	bl	8012726 <_calloc_r>
 8011e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e0c:	60f0      	str	r0, [r6, #12]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e4      	bne.n	8011dde <_Balloc+0x2e>
 8011e14:	2000      	movs	r0, #0
 8011e16:	bd70      	pop	{r4, r5, r6, pc}
 8011e18:	6802      	ldr	r2, [r0, #0]
 8011e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e24:	e7f7      	b.n	8011e16 <_Balloc+0x66>
 8011e26:	bf00      	nop
 8011e28:	08015ed5 	.word	0x08015ed5
 8011e2c:	08015fdc 	.word	0x08015fdc

08011e30 <_Bfree>:
 8011e30:	b570      	push	{r4, r5, r6, lr}
 8011e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011e34:	4605      	mov	r5, r0
 8011e36:	460c      	mov	r4, r1
 8011e38:	b976      	cbnz	r6, 8011e58 <_Bfree+0x28>
 8011e3a:	2010      	movs	r0, #16
 8011e3c:	f7ff ff9e 	bl	8011d7c <malloc>
 8011e40:	4602      	mov	r2, r0
 8011e42:	6268      	str	r0, [r5, #36]	; 0x24
 8011e44:	b920      	cbnz	r0, 8011e50 <_Bfree+0x20>
 8011e46:	4b09      	ldr	r3, [pc, #36]	; (8011e6c <_Bfree+0x3c>)
 8011e48:	4809      	ldr	r0, [pc, #36]	; (8011e70 <_Bfree+0x40>)
 8011e4a:	218a      	movs	r1, #138	; 0x8a
 8011e4c:	f001 fac8 	bl	80133e0 <__assert_func>
 8011e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e54:	6006      	str	r6, [r0, #0]
 8011e56:	60c6      	str	r6, [r0, #12]
 8011e58:	b13c      	cbz	r4, 8011e6a <_Bfree+0x3a>
 8011e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e5c:	6862      	ldr	r2, [r4, #4]
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e64:	6021      	str	r1, [r4, #0]
 8011e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e6a:	bd70      	pop	{r4, r5, r6, pc}
 8011e6c:	08015ed5 	.word	0x08015ed5
 8011e70:	08015fdc 	.word	0x08015fdc

08011e74 <__multadd>:
 8011e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e78:	690e      	ldr	r6, [r1, #16]
 8011e7a:	4607      	mov	r7, r0
 8011e7c:	4698      	mov	r8, r3
 8011e7e:	460c      	mov	r4, r1
 8011e80:	f101 0014 	add.w	r0, r1, #20
 8011e84:	2300      	movs	r3, #0
 8011e86:	6805      	ldr	r5, [r0, #0]
 8011e88:	b2a9      	uxth	r1, r5
 8011e8a:	fb02 8101 	mla	r1, r2, r1, r8
 8011e8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011e92:	0c2d      	lsrs	r5, r5, #16
 8011e94:	fb02 c505 	mla	r5, r2, r5, ip
 8011e98:	b289      	uxth	r1, r1
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011ea0:	429e      	cmp	r6, r3
 8011ea2:	f840 1b04 	str.w	r1, [r0], #4
 8011ea6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011eaa:	dcec      	bgt.n	8011e86 <__multadd+0x12>
 8011eac:	f1b8 0f00 	cmp.w	r8, #0
 8011eb0:	d022      	beq.n	8011ef8 <__multadd+0x84>
 8011eb2:	68a3      	ldr	r3, [r4, #8]
 8011eb4:	42b3      	cmp	r3, r6
 8011eb6:	dc19      	bgt.n	8011eec <__multadd+0x78>
 8011eb8:	6861      	ldr	r1, [r4, #4]
 8011eba:	4638      	mov	r0, r7
 8011ebc:	3101      	adds	r1, #1
 8011ebe:	f7ff ff77 	bl	8011db0 <_Balloc>
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	b928      	cbnz	r0, 8011ed2 <__multadd+0x5e>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	4b0d      	ldr	r3, [pc, #52]	; (8011f00 <__multadd+0x8c>)
 8011eca:	480e      	ldr	r0, [pc, #56]	; (8011f04 <__multadd+0x90>)
 8011ecc:	21b5      	movs	r1, #181	; 0xb5
 8011ece:	f001 fa87 	bl	80133e0 <__assert_func>
 8011ed2:	6922      	ldr	r2, [r4, #16]
 8011ed4:	3202      	adds	r2, #2
 8011ed6:	f104 010c 	add.w	r1, r4, #12
 8011eda:	0092      	lsls	r2, r2, #2
 8011edc:	300c      	adds	r0, #12
 8011ede:	f7fc ff3f 	bl	800ed60 <memcpy>
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	f7ff ffa3 	bl	8011e30 <_Bfree>
 8011eea:	462c      	mov	r4, r5
 8011eec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011ef0:	3601      	adds	r6, #1
 8011ef2:	f8c3 8014 	str.w	r8, [r3, #20]
 8011ef6:	6126      	str	r6, [r4, #16]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011efe:	bf00      	nop
 8011f00:	08015f4b 	.word	0x08015f4b
 8011f04:	08015fdc 	.word	0x08015fdc

08011f08 <__s2b>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	4615      	mov	r5, r2
 8011f10:	461f      	mov	r7, r3
 8011f12:	2209      	movs	r2, #9
 8011f14:	3308      	adds	r3, #8
 8011f16:	4606      	mov	r6, r0
 8011f18:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	2201      	movs	r2, #1
 8011f20:	429a      	cmp	r2, r3
 8011f22:	db09      	blt.n	8011f38 <__s2b+0x30>
 8011f24:	4630      	mov	r0, r6
 8011f26:	f7ff ff43 	bl	8011db0 <_Balloc>
 8011f2a:	b940      	cbnz	r0, 8011f3e <__s2b+0x36>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	4b19      	ldr	r3, [pc, #100]	; (8011f94 <__s2b+0x8c>)
 8011f30:	4819      	ldr	r0, [pc, #100]	; (8011f98 <__s2b+0x90>)
 8011f32:	21ce      	movs	r1, #206	; 0xce
 8011f34:	f001 fa54 	bl	80133e0 <__assert_func>
 8011f38:	0052      	lsls	r2, r2, #1
 8011f3a:	3101      	adds	r1, #1
 8011f3c:	e7f0      	b.n	8011f20 <__s2b+0x18>
 8011f3e:	9b08      	ldr	r3, [sp, #32]
 8011f40:	6143      	str	r3, [r0, #20]
 8011f42:	2d09      	cmp	r5, #9
 8011f44:	f04f 0301 	mov.w	r3, #1
 8011f48:	6103      	str	r3, [r0, #16]
 8011f4a:	dd16      	ble.n	8011f7a <__s2b+0x72>
 8011f4c:	f104 0909 	add.w	r9, r4, #9
 8011f50:	46c8      	mov	r8, r9
 8011f52:	442c      	add	r4, r5
 8011f54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f58:	4601      	mov	r1, r0
 8011f5a:	3b30      	subs	r3, #48	; 0x30
 8011f5c:	220a      	movs	r2, #10
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f7ff ff88 	bl	8011e74 <__multadd>
 8011f64:	45a0      	cmp	r8, r4
 8011f66:	d1f5      	bne.n	8011f54 <__s2b+0x4c>
 8011f68:	f1a5 0408 	sub.w	r4, r5, #8
 8011f6c:	444c      	add	r4, r9
 8011f6e:	1b2d      	subs	r5, r5, r4
 8011f70:	1963      	adds	r3, r4, r5
 8011f72:	42bb      	cmp	r3, r7
 8011f74:	db04      	blt.n	8011f80 <__s2b+0x78>
 8011f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f7a:	340a      	adds	r4, #10
 8011f7c:	2509      	movs	r5, #9
 8011f7e:	e7f6      	b.n	8011f6e <__s2b+0x66>
 8011f80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f84:	4601      	mov	r1, r0
 8011f86:	3b30      	subs	r3, #48	; 0x30
 8011f88:	220a      	movs	r2, #10
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f7ff ff72 	bl	8011e74 <__multadd>
 8011f90:	e7ee      	b.n	8011f70 <__s2b+0x68>
 8011f92:	bf00      	nop
 8011f94:	08015f4b 	.word	0x08015f4b
 8011f98:	08015fdc 	.word	0x08015fdc

08011f9c <__hi0bits>:
 8011f9c:	0c03      	lsrs	r3, r0, #16
 8011f9e:	041b      	lsls	r3, r3, #16
 8011fa0:	b9d3      	cbnz	r3, 8011fd8 <__hi0bits+0x3c>
 8011fa2:	0400      	lsls	r0, r0, #16
 8011fa4:	2310      	movs	r3, #16
 8011fa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011faa:	bf04      	itt	eq
 8011fac:	0200      	lsleq	r0, r0, #8
 8011fae:	3308      	addeq	r3, #8
 8011fb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011fb4:	bf04      	itt	eq
 8011fb6:	0100      	lsleq	r0, r0, #4
 8011fb8:	3304      	addeq	r3, #4
 8011fba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011fbe:	bf04      	itt	eq
 8011fc0:	0080      	lsleq	r0, r0, #2
 8011fc2:	3302      	addeq	r3, #2
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	db05      	blt.n	8011fd4 <__hi0bits+0x38>
 8011fc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011fcc:	f103 0301 	add.w	r3, r3, #1
 8011fd0:	bf08      	it	eq
 8011fd2:	2320      	moveq	r3, #32
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	4770      	bx	lr
 8011fd8:	2300      	movs	r3, #0
 8011fda:	e7e4      	b.n	8011fa6 <__hi0bits+0xa>

08011fdc <__lo0bits>:
 8011fdc:	6803      	ldr	r3, [r0, #0]
 8011fde:	f013 0207 	ands.w	r2, r3, #7
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	d00b      	beq.n	8011ffe <__lo0bits+0x22>
 8011fe6:	07da      	lsls	r2, r3, #31
 8011fe8:	d424      	bmi.n	8012034 <__lo0bits+0x58>
 8011fea:	0798      	lsls	r0, r3, #30
 8011fec:	bf49      	itett	mi
 8011fee:	085b      	lsrmi	r3, r3, #1
 8011ff0:	089b      	lsrpl	r3, r3, #2
 8011ff2:	2001      	movmi	r0, #1
 8011ff4:	600b      	strmi	r3, [r1, #0]
 8011ff6:	bf5c      	itt	pl
 8011ff8:	600b      	strpl	r3, [r1, #0]
 8011ffa:	2002      	movpl	r0, #2
 8011ffc:	4770      	bx	lr
 8011ffe:	b298      	uxth	r0, r3
 8012000:	b9b0      	cbnz	r0, 8012030 <__lo0bits+0x54>
 8012002:	0c1b      	lsrs	r3, r3, #16
 8012004:	2010      	movs	r0, #16
 8012006:	f013 0fff 	tst.w	r3, #255	; 0xff
 801200a:	bf04      	itt	eq
 801200c:	0a1b      	lsreq	r3, r3, #8
 801200e:	3008      	addeq	r0, #8
 8012010:	071a      	lsls	r2, r3, #28
 8012012:	bf04      	itt	eq
 8012014:	091b      	lsreq	r3, r3, #4
 8012016:	3004      	addeq	r0, #4
 8012018:	079a      	lsls	r2, r3, #30
 801201a:	bf04      	itt	eq
 801201c:	089b      	lsreq	r3, r3, #2
 801201e:	3002      	addeq	r0, #2
 8012020:	07da      	lsls	r2, r3, #31
 8012022:	d403      	bmi.n	801202c <__lo0bits+0x50>
 8012024:	085b      	lsrs	r3, r3, #1
 8012026:	f100 0001 	add.w	r0, r0, #1
 801202a:	d005      	beq.n	8012038 <__lo0bits+0x5c>
 801202c:	600b      	str	r3, [r1, #0]
 801202e:	4770      	bx	lr
 8012030:	4610      	mov	r0, r2
 8012032:	e7e8      	b.n	8012006 <__lo0bits+0x2a>
 8012034:	2000      	movs	r0, #0
 8012036:	4770      	bx	lr
 8012038:	2020      	movs	r0, #32
 801203a:	4770      	bx	lr

0801203c <__i2b>:
 801203c:	b510      	push	{r4, lr}
 801203e:	460c      	mov	r4, r1
 8012040:	2101      	movs	r1, #1
 8012042:	f7ff feb5 	bl	8011db0 <_Balloc>
 8012046:	4602      	mov	r2, r0
 8012048:	b928      	cbnz	r0, 8012056 <__i2b+0x1a>
 801204a:	4b05      	ldr	r3, [pc, #20]	; (8012060 <__i2b+0x24>)
 801204c:	4805      	ldr	r0, [pc, #20]	; (8012064 <__i2b+0x28>)
 801204e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012052:	f001 f9c5 	bl	80133e0 <__assert_func>
 8012056:	2301      	movs	r3, #1
 8012058:	6144      	str	r4, [r0, #20]
 801205a:	6103      	str	r3, [r0, #16]
 801205c:	bd10      	pop	{r4, pc}
 801205e:	bf00      	nop
 8012060:	08015f4b 	.word	0x08015f4b
 8012064:	08015fdc 	.word	0x08015fdc

08012068 <__multiply>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	4614      	mov	r4, r2
 801206e:	690a      	ldr	r2, [r1, #16]
 8012070:	6923      	ldr	r3, [r4, #16]
 8012072:	429a      	cmp	r2, r3
 8012074:	bfb8      	it	lt
 8012076:	460b      	movlt	r3, r1
 8012078:	460d      	mov	r5, r1
 801207a:	bfbc      	itt	lt
 801207c:	4625      	movlt	r5, r4
 801207e:	461c      	movlt	r4, r3
 8012080:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012084:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012088:	68ab      	ldr	r3, [r5, #8]
 801208a:	6869      	ldr	r1, [r5, #4]
 801208c:	eb0a 0709 	add.w	r7, sl, r9
 8012090:	42bb      	cmp	r3, r7
 8012092:	b085      	sub	sp, #20
 8012094:	bfb8      	it	lt
 8012096:	3101      	addlt	r1, #1
 8012098:	f7ff fe8a 	bl	8011db0 <_Balloc>
 801209c:	b930      	cbnz	r0, 80120ac <__multiply+0x44>
 801209e:	4602      	mov	r2, r0
 80120a0:	4b42      	ldr	r3, [pc, #264]	; (80121ac <__multiply+0x144>)
 80120a2:	4843      	ldr	r0, [pc, #268]	; (80121b0 <__multiply+0x148>)
 80120a4:	f240 115d 	movw	r1, #349	; 0x15d
 80120a8:	f001 f99a 	bl	80133e0 <__assert_func>
 80120ac:	f100 0614 	add.w	r6, r0, #20
 80120b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80120b4:	4633      	mov	r3, r6
 80120b6:	2200      	movs	r2, #0
 80120b8:	4543      	cmp	r3, r8
 80120ba:	d31e      	bcc.n	80120fa <__multiply+0x92>
 80120bc:	f105 0c14 	add.w	ip, r5, #20
 80120c0:	f104 0314 	add.w	r3, r4, #20
 80120c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80120c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80120cc:	9202      	str	r2, [sp, #8]
 80120ce:	ebac 0205 	sub.w	r2, ip, r5
 80120d2:	3a15      	subs	r2, #21
 80120d4:	f022 0203 	bic.w	r2, r2, #3
 80120d8:	3204      	adds	r2, #4
 80120da:	f105 0115 	add.w	r1, r5, #21
 80120de:	458c      	cmp	ip, r1
 80120e0:	bf38      	it	cc
 80120e2:	2204      	movcc	r2, #4
 80120e4:	9201      	str	r2, [sp, #4]
 80120e6:	9a02      	ldr	r2, [sp, #8]
 80120e8:	9303      	str	r3, [sp, #12]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d808      	bhi.n	8012100 <__multiply+0x98>
 80120ee:	2f00      	cmp	r7, #0
 80120f0:	dc55      	bgt.n	801219e <__multiply+0x136>
 80120f2:	6107      	str	r7, [r0, #16]
 80120f4:	b005      	add	sp, #20
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	f843 2b04 	str.w	r2, [r3], #4
 80120fe:	e7db      	b.n	80120b8 <__multiply+0x50>
 8012100:	f8b3 a000 	ldrh.w	sl, [r3]
 8012104:	f1ba 0f00 	cmp.w	sl, #0
 8012108:	d020      	beq.n	801214c <__multiply+0xe4>
 801210a:	f105 0e14 	add.w	lr, r5, #20
 801210e:	46b1      	mov	r9, r6
 8012110:	2200      	movs	r2, #0
 8012112:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012116:	f8d9 b000 	ldr.w	fp, [r9]
 801211a:	b2a1      	uxth	r1, r4
 801211c:	fa1f fb8b 	uxth.w	fp, fp
 8012120:	fb0a b101 	mla	r1, sl, r1, fp
 8012124:	4411      	add	r1, r2
 8012126:	f8d9 2000 	ldr.w	r2, [r9]
 801212a:	0c24      	lsrs	r4, r4, #16
 801212c:	0c12      	lsrs	r2, r2, #16
 801212e:	fb0a 2404 	mla	r4, sl, r4, r2
 8012132:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012136:	b289      	uxth	r1, r1
 8012138:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801213c:	45f4      	cmp	ip, lr
 801213e:	f849 1b04 	str.w	r1, [r9], #4
 8012142:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012146:	d8e4      	bhi.n	8012112 <__multiply+0xaa>
 8012148:	9901      	ldr	r1, [sp, #4]
 801214a:	5072      	str	r2, [r6, r1]
 801214c:	9a03      	ldr	r2, [sp, #12]
 801214e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012152:	3304      	adds	r3, #4
 8012154:	f1b9 0f00 	cmp.w	r9, #0
 8012158:	d01f      	beq.n	801219a <__multiply+0x132>
 801215a:	6834      	ldr	r4, [r6, #0]
 801215c:	f105 0114 	add.w	r1, r5, #20
 8012160:	46b6      	mov	lr, r6
 8012162:	f04f 0a00 	mov.w	sl, #0
 8012166:	880a      	ldrh	r2, [r1, #0]
 8012168:	f8be b002 	ldrh.w	fp, [lr, #2]
 801216c:	fb09 b202 	mla	r2, r9, r2, fp
 8012170:	4492      	add	sl, r2
 8012172:	b2a4      	uxth	r4, r4
 8012174:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012178:	f84e 4b04 	str.w	r4, [lr], #4
 801217c:	f851 4b04 	ldr.w	r4, [r1], #4
 8012180:	f8be 2000 	ldrh.w	r2, [lr]
 8012184:	0c24      	lsrs	r4, r4, #16
 8012186:	fb09 2404 	mla	r4, r9, r4, r2
 801218a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801218e:	458c      	cmp	ip, r1
 8012190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012194:	d8e7      	bhi.n	8012166 <__multiply+0xfe>
 8012196:	9a01      	ldr	r2, [sp, #4]
 8012198:	50b4      	str	r4, [r6, r2]
 801219a:	3604      	adds	r6, #4
 801219c:	e7a3      	b.n	80120e6 <__multiply+0x7e>
 801219e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d1a5      	bne.n	80120f2 <__multiply+0x8a>
 80121a6:	3f01      	subs	r7, #1
 80121a8:	e7a1      	b.n	80120ee <__multiply+0x86>
 80121aa:	bf00      	nop
 80121ac:	08015f4b 	.word	0x08015f4b
 80121b0:	08015fdc 	.word	0x08015fdc

080121b4 <__pow5mult>:
 80121b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b8:	4615      	mov	r5, r2
 80121ba:	f012 0203 	ands.w	r2, r2, #3
 80121be:	4606      	mov	r6, r0
 80121c0:	460f      	mov	r7, r1
 80121c2:	d007      	beq.n	80121d4 <__pow5mult+0x20>
 80121c4:	4c25      	ldr	r4, [pc, #148]	; (801225c <__pow5mult+0xa8>)
 80121c6:	3a01      	subs	r2, #1
 80121c8:	2300      	movs	r3, #0
 80121ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80121ce:	f7ff fe51 	bl	8011e74 <__multadd>
 80121d2:	4607      	mov	r7, r0
 80121d4:	10ad      	asrs	r5, r5, #2
 80121d6:	d03d      	beq.n	8012254 <__pow5mult+0xa0>
 80121d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80121da:	b97c      	cbnz	r4, 80121fc <__pow5mult+0x48>
 80121dc:	2010      	movs	r0, #16
 80121de:	f7ff fdcd 	bl	8011d7c <malloc>
 80121e2:	4602      	mov	r2, r0
 80121e4:	6270      	str	r0, [r6, #36]	; 0x24
 80121e6:	b928      	cbnz	r0, 80121f4 <__pow5mult+0x40>
 80121e8:	4b1d      	ldr	r3, [pc, #116]	; (8012260 <__pow5mult+0xac>)
 80121ea:	481e      	ldr	r0, [pc, #120]	; (8012264 <__pow5mult+0xb0>)
 80121ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80121f0:	f001 f8f6 	bl	80133e0 <__assert_func>
 80121f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121f8:	6004      	str	r4, [r0, #0]
 80121fa:	60c4      	str	r4, [r0, #12]
 80121fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012204:	b94c      	cbnz	r4, 801221a <__pow5mult+0x66>
 8012206:	f240 2171 	movw	r1, #625	; 0x271
 801220a:	4630      	mov	r0, r6
 801220c:	f7ff ff16 	bl	801203c <__i2b>
 8012210:	2300      	movs	r3, #0
 8012212:	f8c8 0008 	str.w	r0, [r8, #8]
 8012216:	4604      	mov	r4, r0
 8012218:	6003      	str	r3, [r0, #0]
 801221a:	f04f 0900 	mov.w	r9, #0
 801221e:	07eb      	lsls	r3, r5, #31
 8012220:	d50a      	bpl.n	8012238 <__pow5mult+0x84>
 8012222:	4639      	mov	r1, r7
 8012224:	4622      	mov	r2, r4
 8012226:	4630      	mov	r0, r6
 8012228:	f7ff ff1e 	bl	8012068 <__multiply>
 801222c:	4639      	mov	r1, r7
 801222e:	4680      	mov	r8, r0
 8012230:	4630      	mov	r0, r6
 8012232:	f7ff fdfd 	bl	8011e30 <_Bfree>
 8012236:	4647      	mov	r7, r8
 8012238:	106d      	asrs	r5, r5, #1
 801223a:	d00b      	beq.n	8012254 <__pow5mult+0xa0>
 801223c:	6820      	ldr	r0, [r4, #0]
 801223e:	b938      	cbnz	r0, 8012250 <__pow5mult+0x9c>
 8012240:	4622      	mov	r2, r4
 8012242:	4621      	mov	r1, r4
 8012244:	4630      	mov	r0, r6
 8012246:	f7ff ff0f 	bl	8012068 <__multiply>
 801224a:	6020      	str	r0, [r4, #0]
 801224c:	f8c0 9000 	str.w	r9, [r0]
 8012250:	4604      	mov	r4, r0
 8012252:	e7e4      	b.n	801221e <__pow5mult+0x6a>
 8012254:	4638      	mov	r0, r7
 8012256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225a:	bf00      	nop
 801225c:	08016130 	.word	0x08016130
 8012260:	08015ed5 	.word	0x08015ed5
 8012264:	08015fdc 	.word	0x08015fdc

08012268 <__lshift>:
 8012268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801226c:	460c      	mov	r4, r1
 801226e:	6849      	ldr	r1, [r1, #4]
 8012270:	6923      	ldr	r3, [r4, #16]
 8012272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012276:	68a3      	ldr	r3, [r4, #8]
 8012278:	4607      	mov	r7, r0
 801227a:	4691      	mov	r9, r2
 801227c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012280:	f108 0601 	add.w	r6, r8, #1
 8012284:	42b3      	cmp	r3, r6
 8012286:	db0b      	blt.n	80122a0 <__lshift+0x38>
 8012288:	4638      	mov	r0, r7
 801228a:	f7ff fd91 	bl	8011db0 <_Balloc>
 801228e:	4605      	mov	r5, r0
 8012290:	b948      	cbnz	r0, 80122a6 <__lshift+0x3e>
 8012292:	4602      	mov	r2, r0
 8012294:	4b28      	ldr	r3, [pc, #160]	; (8012338 <__lshift+0xd0>)
 8012296:	4829      	ldr	r0, [pc, #164]	; (801233c <__lshift+0xd4>)
 8012298:	f240 11d9 	movw	r1, #473	; 0x1d9
 801229c:	f001 f8a0 	bl	80133e0 <__assert_func>
 80122a0:	3101      	adds	r1, #1
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	e7ee      	b.n	8012284 <__lshift+0x1c>
 80122a6:	2300      	movs	r3, #0
 80122a8:	f100 0114 	add.w	r1, r0, #20
 80122ac:	f100 0210 	add.w	r2, r0, #16
 80122b0:	4618      	mov	r0, r3
 80122b2:	4553      	cmp	r3, sl
 80122b4:	db33      	blt.n	801231e <__lshift+0xb6>
 80122b6:	6920      	ldr	r0, [r4, #16]
 80122b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80122bc:	f104 0314 	add.w	r3, r4, #20
 80122c0:	f019 091f 	ands.w	r9, r9, #31
 80122c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80122c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80122cc:	d02b      	beq.n	8012326 <__lshift+0xbe>
 80122ce:	f1c9 0e20 	rsb	lr, r9, #32
 80122d2:	468a      	mov	sl, r1
 80122d4:	2200      	movs	r2, #0
 80122d6:	6818      	ldr	r0, [r3, #0]
 80122d8:	fa00 f009 	lsl.w	r0, r0, r9
 80122dc:	4302      	orrs	r2, r0
 80122de:	f84a 2b04 	str.w	r2, [sl], #4
 80122e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80122e6:	459c      	cmp	ip, r3
 80122e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80122ec:	d8f3      	bhi.n	80122d6 <__lshift+0x6e>
 80122ee:	ebac 0304 	sub.w	r3, ip, r4
 80122f2:	3b15      	subs	r3, #21
 80122f4:	f023 0303 	bic.w	r3, r3, #3
 80122f8:	3304      	adds	r3, #4
 80122fa:	f104 0015 	add.w	r0, r4, #21
 80122fe:	4584      	cmp	ip, r0
 8012300:	bf38      	it	cc
 8012302:	2304      	movcc	r3, #4
 8012304:	50ca      	str	r2, [r1, r3]
 8012306:	b10a      	cbz	r2, 801230c <__lshift+0xa4>
 8012308:	f108 0602 	add.w	r6, r8, #2
 801230c:	3e01      	subs	r6, #1
 801230e:	4638      	mov	r0, r7
 8012310:	612e      	str	r6, [r5, #16]
 8012312:	4621      	mov	r1, r4
 8012314:	f7ff fd8c 	bl	8011e30 <_Bfree>
 8012318:	4628      	mov	r0, r5
 801231a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012322:	3301      	adds	r3, #1
 8012324:	e7c5      	b.n	80122b2 <__lshift+0x4a>
 8012326:	3904      	subs	r1, #4
 8012328:	f853 2b04 	ldr.w	r2, [r3], #4
 801232c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012330:	459c      	cmp	ip, r3
 8012332:	d8f9      	bhi.n	8012328 <__lshift+0xc0>
 8012334:	e7ea      	b.n	801230c <__lshift+0xa4>
 8012336:	bf00      	nop
 8012338:	08015f4b 	.word	0x08015f4b
 801233c:	08015fdc 	.word	0x08015fdc

08012340 <__mcmp>:
 8012340:	b530      	push	{r4, r5, lr}
 8012342:	6902      	ldr	r2, [r0, #16]
 8012344:	690c      	ldr	r4, [r1, #16]
 8012346:	1b12      	subs	r2, r2, r4
 8012348:	d10e      	bne.n	8012368 <__mcmp+0x28>
 801234a:	f100 0314 	add.w	r3, r0, #20
 801234e:	3114      	adds	r1, #20
 8012350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801235c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012360:	42a5      	cmp	r5, r4
 8012362:	d003      	beq.n	801236c <__mcmp+0x2c>
 8012364:	d305      	bcc.n	8012372 <__mcmp+0x32>
 8012366:	2201      	movs	r2, #1
 8012368:	4610      	mov	r0, r2
 801236a:	bd30      	pop	{r4, r5, pc}
 801236c:	4283      	cmp	r3, r0
 801236e:	d3f3      	bcc.n	8012358 <__mcmp+0x18>
 8012370:	e7fa      	b.n	8012368 <__mcmp+0x28>
 8012372:	f04f 32ff 	mov.w	r2, #4294967295
 8012376:	e7f7      	b.n	8012368 <__mcmp+0x28>

08012378 <__mdiff>:
 8012378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237c:	460c      	mov	r4, r1
 801237e:	4606      	mov	r6, r0
 8012380:	4611      	mov	r1, r2
 8012382:	4620      	mov	r0, r4
 8012384:	4617      	mov	r7, r2
 8012386:	f7ff ffdb 	bl	8012340 <__mcmp>
 801238a:	1e05      	subs	r5, r0, #0
 801238c:	d110      	bne.n	80123b0 <__mdiff+0x38>
 801238e:	4629      	mov	r1, r5
 8012390:	4630      	mov	r0, r6
 8012392:	f7ff fd0d 	bl	8011db0 <_Balloc>
 8012396:	b930      	cbnz	r0, 80123a6 <__mdiff+0x2e>
 8012398:	4b39      	ldr	r3, [pc, #228]	; (8012480 <__mdiff+0x108>)
 801239a:	4602      	mov	r2, r0
 801239c:	f240 2132 	movw	r1, #562	; 0x232
 80123a0:	4838      	ldr	r0, [pc, #224]	; (8012484 <__mdiff+0x10c>)
 80123a2:	f001 f81d 	bl	80133e0 <__assert_func>
 80123a6:	2301      	movs	r3, #1
 80123a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80123ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b0:	bfa4      	itt	ge
 80123b2:	463b      	movge	r3, r7
 80123b4:	4627      	movge	r7, r4
 80123b6:	4630      	mov	r0, r6
 80123b8:	6879      	ldr	r1, [r7, #4]
 80123ba:	bfa6      	itte	ge
 80123bc:	461c      	movge	r4, r3
 80123be:	2500      	movge	r5, #0
 80123c0:	2501      	movlt	r5, #1
 80123c2:	f7ff fcf5 	bl	8011db0 <_Balloc>
 80123c6:	b920      	cbnz	r0, 80123d2 <__mdiff+0x5a>
 80123c8:	4b2d      	ldr	r3, [pc, #180]	; (8012480 <__mdiff+0x108>)
 80123ca:	4602      	mov	r2, r0
 80123cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80123d0:	e7e6      	b.n	80123a0 <__mdiff+0x28>
 80123d2:	693e      	ldr	r6, [r7, #16]
 80123d4:	60c5      	str	r5, [r0, #12]
 80123d6:	6925      	ldr	r5, [r4, #16]
 80123d8:	f107 0114 	add.w	r1, r7, #20
 80123dc:	f104 0914 	add.w	r9, r4, #20
 80123e0:	f100 0e14 	add.w	lr, r0, #20
 80123e4:	f107 0210 	add.w	r2, r7, #16
 80123e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80123ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80123f0:	46f2      	mov	sl, lr
 80123f2:	2700      	movs	r7, #0
 80123f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80123f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80123fc:	fa1f f883 	uxth.w	r8, r3
 8012400:	fa17 f78b 	uxtah	r7, r7, fp
 8012404:	0c1b      	lsrs	r3, r3, #16
 8012406:	eba7 0808 	sub.w	r8, r7, r8
 801240a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801240e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012412:	fa1f f888 	uxth.w	r8, r8
 8012416:	141f      	asrs	r7, r3, #16
 8012418:	454d      	cmp	r5, r9
 801241a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801241e:	f84a 3b04 	str.w	r3, [sl], #4
 8012422:	d8e7      	bhi.n	80123f4 <__mdiff+0x7c>
 8012424:	1b2b      	subs	r3, r5, r4
 8012426:	3b15      	subs	r3, #21
 8012428:	f023 0303 	bic.w	r3, r3, #3
 801242c:	3304      	adds	r3, #4
 801242e:	3415      	adds	r4, #21
 8012430:	42a5      	cmp	r5, r4
 8012432:	bf38      	it	cc
 8012434:	2304      	movcc	r3, #4
 8012436:	4419      	add	r1, r3
 8012438:	4473      	add	r3, lr
 801243a:	469e      	mov	lr, r3
 801243c:	460d      	mov	r5, r1
 801243e:	4565      	cmp	r5, ip
 8012440:	d30e      	bcc.n	8012460 <__mdiff+0xe8>
 8012442:	f10c 0203 	add.w	r2, ip, #3
 8012446:	1a52      	subs	r2, r2, r1
 8012448:	f022 0203 	bic.w	r2, r2, #3
 801244c:	3903      	subs	r1, #3
 801244e:	458c      	cmp	ip, r1
 8012450:	bf38      	it	cc
 8012452:	2200      	movcc	r2, #0
 8012454:	441a      	add	r2, r3
 8012456:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801245a:	b17b      	cbz	r3, 801247c <__mdiff+0x104>
 801245c:	6106      	str	r6, [r0, #16]
 801245e:	e7a5      	b.n	80123ac <__mdiff+0x34>
 8012460:	f855 8b04 	ldr.w	r8, [r5], #4
 8012464:	fa17 f488 	uxtah	r4, r7, r8
 8012468:	1422      	asrs	r2, r4, #16
 801246a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801246e:	b2a4      	uxth	r4, r4
 8012470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012474:	f84e 4b04 	str.w	r4, [lr], #4
 8012478:	1417      	asrs	r7, r2, #16
 801247a:	e7e0      	b.n	801243e <__mdiff+0xc6>
 801247c:	3e01      	subs	r6, #1
 801247e:	e7ea      	b.n	8012456 <__mdiff+0xde>
 8012480:	08015f4b 	.word	0x08015f4b
 8012484:	08015fdc 	.word	0x08015fdc

08012488 <__ulp>:
 8012488:	b082      	sub	sp, #8
 801248a:	ed8d 0b00 	vstr	d0, [sp]
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	4912      	ldr	r1, [pc, #72]	; (80124dc <__ulp+0x54>)
 8012492:	4019      	ands	r1, r3
 8012494:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012498:	2900      	cmp	r1, #0
 801249a:	dd05      	ble.n	80124a8 <__ulp+0x20>
 801249c:	2200      	movs	r2, #0
 801249e:	460b      	mov	r3, r1
 80124a0:	ec43 2b10 	vmov	d0, r2, r3
 80124a4:	b002      	add	sp, #8
 80124a6:	4770      	bx	lr
 80124a8:	4249      	negs	r1, r1
 80124aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80124ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80124b2:	f04f 0200 	mov.w	r2, #0
 80124b6:	f04f 0300 	mov.w	r3, #0
 80124ba:	da04      	bge.n	80124c6 <__ulp+0x3e>
 80124bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80124c0:	fa41 f300 	asr.w	r3, r1, r0
 80124c4:	e7ec      	b.n	80124a0 <__ulp+0x18>
 80124c6:	f1a0 0114 	sub.w	r1, r0, #20
 80124ca:	291e      	cmp	r1, #30
 80124cc:	bfda      	itte	le
 80124ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80124d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80124d6:	2101      	movgt	r1, #1
 80124d8:	460a      	mov	r2, r1
 80124da:	e7e1      	b.n	80124a0 <__ulp+0x18>
 80124dc:	7ff00000 	.word	0x7ff00000

080124e0 <__b2d>:
 80124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e2:	6905      	ldr	r5, [r0, #16]
 80124e4:	f100 0714 	add.w	r7, r0, #20
 80124e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80124ec:	1f2e      	subs	r6, r5, #4
 80124ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80124f2:	4620      	mov	r0, r4
 80124f4:	f7ff fd52 	bl	8011f9c <__hi0bits>
 80124f8:	f1c0 0320 	rsb	r3, r0, #32
 80124fc:	280a      	cmp	r0, #10
 80124fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801257c <__b2d+0x9c>
 8012502:	600b      	str	r3, [r1, #0]
 8012504:	dc14      	bgt.n	8012530 <__b2d+0x50>
 8012506:	f1c0 0e0b 	rsb	lr, r0, #11
 801250a:	fa24 f10e 	lsr.w	r1, r4, lr
 801250e:	42b7      	cmp	r7, r6
 8012510:	ea41 030c 	orr.w	r3, r1, ip
 8012514:	bf34      	ite	cc
 8012516:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801251a:	2100      	movcs	r1, #0
 801251c:	3015      	adds	r0, #21
 801251e:	fa04 f000 	lsl.w	r0, r4, r0
 8012522:	fa21 f10e 	lsr.w	r1, r1, lr
 8012526:	ea40 0201 	orr.w	r2, r0, r1
 801252a:	ec43 2b10 	vmov	d0, r2, r3
 801252e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012530:	42b7      	cmp	r7, r6
 8012532:	bf3a      	itte	cc
 8012534:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012538:	f1a5 0608 	subcc.w	r6, r5, #8
 801253c:	2100      	movcs	r1, #0
 801253e:	380b      	subs	r0, #11
 8012540:	d017      	beq.n	8012572 <__b2d+0x92>
 8012542:	f1c0 0c20 	rsb	ip, r0, #32
 8012546:	fa04 f500 	lsl.w	r5, r4, r0
 801254a:	42be      	cmp	r6, r7
 801254c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012550:	ea45 0504 	orr.w	r5, r5, r4
 8012554:	bf8c      	ite	hi
 8012556:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801255a:	2400      	movls	r4, #0
 801255c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012560:	fa01 f000 	lsl.w	r0, r1, r0
 8012564:	fa24 f40c 	lsr.w	r4, r4, ip
 8012568:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801256c:	ea40 0204 	orr.w	r2, r0, r4
 8012570:	e7db      	b.n	801252a <__b2d+0x4a>
 8012572:	ea44 030c 	orr.w	r3, r4, ip
 8012576:	460a      	mov	r2, r1
 8012578:	e7d7      	b.n	801252a <__b2d+0x4a>
 801257a:	bf00      	nop
 801257c:	3ff00000 	.word	0x3ff00000

08012580 <__d2b>:
 8012580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012584:	4689      	mov	r9, r1
 8012586:	2101      	movs	r1, #1
 8012588:	ec57 6b10 	vmov	r6, r7, d0
 801258c:	4690      	mov	r8, r2
 801258e:	f7ff fc0f 	bl	8011db0 <_Balloc>
 8012592:	4604      	mov	r4, r0
 8012594:	b930      	cbnz	r0, 80125a4 <__d2b+0x24>
 8012596:	4602      	mov	r2, r0
 8012598:	4b25      	ldr	r3, [pc, #148]	; (8012630 <__d2b+0xb0>)
 801259a:	4826      	ldr	r0, [pc, #152]	; (8012634 <__d2b+0xb4>)
 801259c:	f240 310a 	movw	r1, #778	; 0x30a
 80125a0:	f000 ff1e 	bl	80133e0 <__assert_func>
 80125a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80125a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80125ac:	bb35      	cbnz	r5, 80125fc <__d2b+0x7c>
 80125ae:	2e00      	cmp	r6, #0
 80125b0:	9301      	str	r3, [sp, #4]
 80125b2:	d028      	beq.n	8012606 <__d2b+0x86>
 80125b4:	4668      	mov	r0, sp
 80125b6:	9600      	str	r6, [sp, #0]
 80125b8:	f7ff fd10 	bl	8011fdc <__lo0bits>
 80125bc:	9900      	ldr	r1, [sp, #0]
 80125be:	b300      	cbz	r0, 8012602 <__d2b+0x82>
 80125c0:	9a01      	ldr	r2, [sp, #4]
 80125c2:	f1c0 0320 	rsb	r3, r0, #32
 80125c6:	fa02 f303 	lsl.w	r3, r2, r3
 80125ca:	430b      	orrs	r3, r1
 80125cc:	40c2      	lsrs	r2, r0
 80125ce:	6163      	str	r3, [r4, #20]
 80125d0:	9201      	str	r2, [sp, #4]
 80125d2:	9b01      	ldr	r3, [sp, #4]
 80125d4:	61a3      	str	r3, [r4, #24]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	bf14      	ite	ne
 80125da:	2202      	movne	r2, #2
 80125dc:	2201      	moveq	r2, #1
 80125de:	6122      	str	r2, [r4, #16]
 80125e0:	b1d5      	cbz	r5, 8012618 <__d2b+0x98>
 80125e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80125e6:	4405      	add	r5, r0
 80125e8:	f8c9 5000 	str.w	r5, [r9]
 80125ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80125f0:	f8c8 0000 	str.w	r0, [r8]
 80125f4:	4620      	mov	r0, r4
 80125f6:	b003      	add	sp, #12
 80125f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012600:	e7d5      	b.n	80125ae <__d2b+0x2e>
 8012602:	6161      	str	r1, [r4, #20]
 8012604:	e7e5      	b.n	80125d2 <__d2b+0x52>
 8012606:	a801      	add	r0, sp, #4
 8012608:	f7ff fce8 	bl	8011fdc <__lo0bits>
 801260c:	9b01      	ldr	r3, [sp, #4]
 801260e:	6163      	str	r3, [r4, #20]
 8012610:	2201      	movs	r2, #1
 8012612:	6122      	str	r2, [r4, #16]
 8012614:	3020      	adds	r0, #32
 8012616:	e7e3      	b.n	80125e0 <__d2b+0x60>
 8012618:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801261c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012620:	f8c9 0000 	str.w	r0, [r9]
 8012624:	6918      	ldr	r0, [r3, #16]
 8012626:	f7ff fcb9 	bl	8011f9c <__hi0bits>
 801262a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801262e:	e7df      	b.n	80125f0 <__d2b+0x70>
 8012630:	08015f4b 	.word	0x08015f4b
 8012634:	08015fdc 	.word	0x08015fdc

08012638 <__ratio>:
 8012638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263c:	4688      	mov	r8, r1
 801263e:	4669      	mov	r1, sp
 8012640:	4681      	mov	r9, r0
 8012642:	f7ff ff4d 	bl	80124e0 <__b2d>
 8012646:	a901      	add	r1, sp, #4
 8012648:	4640      	mov	r0, r8
 801264a:	ec55 4b10 	vmov	r4, r5, d0
 801264e:	f7ff ff47 	bl	80124e0 <__b2d>
 8012652:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012656:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801265a:	eba3 0c02 	sub.w	ip, r3, r2
 801265e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012662:	1a9b      	subs	r3, r3, r2
 8012664:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012668:	ec51 0b10 	vmov	r0, r1, d0
 801266c:	2b00      	cmp	r3, #0
 801266e:	bfd6      	itet	le
 8012670:	460a      	movle	r2, r1
 8012672:	462a      	movgt	r2, r5
 8012674:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012678:	468b      	mov	fp, r1
 801267a:	462f      	mov	r7, r5
 801267c:	bfd4      	ite	le
 801267e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012682:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012686:	4620      	mov	r0, r4
 8012688:	ee10 2a10 	vmov	r2, s0
 801268c:	465b      	mov	r3, fp
 801268e:	4639      	mov	r1, r7
 8012690:	f7ee f8ec 	bl	800086c <__aeabi_ddiv>
 8012694:	ec41 0b10 	vmov	d0, r0, r1
 8012698:	b003      	add	sp, #12
 801269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801269e <__copybits>:
 801269e:	3901      	subs	r1, #1
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	1149      	asrs	r1, r1, #5
 80126a4:	6914      	ldr	r4, [r2, #16]
 80126a6:	3101      	adds	r1, #1
 80126a8:	f102 0314 	add.w	r3, r2, #20
 80126ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80126b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80126b4:	1f05      	subs	r5, r0, #4
 80126b6:	42a3      	cmp	r3, r4
 80126b8:	d30c      	bcc.n	80126d4 <__copybits+0x36>
 80126ba:	1aa3      	subs	r3, r4, r2
 80126bc:	3b11      	subs	r3, #17
 80126be:	f023 0303 	bic.w	r3, r3, #3
 80126c2:	3211      	adds	r2, #17
 80126c4:	42a2      	cmp	r2, r4
 80126c6:	bf88      	it	hi
 80126c8:	2300      	movhi	r3, #0
 80126ca:	4418      	add	r0, r3
 80126cc:	2300      	movs	r3, #0
 80126ce:	4288      	cmp	r0, r1
 80126d0:	d305      	bcc.n	80126de <__copybits+0x40>
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80126d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80126dc:	e7eb      	b.n	80126b6 <__copybits+0x18>
 80126de:	f840 3b04 	str.w	r3, [r0], #4
 80126e2:	e7f4      	b.n	80126ce <__copybits+0x30>

080126e4 <__any_on>:
 80126e4:	f100 0214 	add.w	r2, r0, #20
 80126e8:	6900      	ldr	r0, [r0, #16]
 80126ea:	114b      	asrs	r3, r1, #5
 80126ec:	4298      	cmp	r0, r3
 80126ee:	b510      	push	{r4, lr}
 80126f0:	db11      	blt.n	8012716 <__any_on+0x32>
 80126f2:	dd0a      	ble.n	801270a <__any_on+0x26>
 80126f4:	f011 011f 	ands.w	r1, r1, #31
 80126f8:	d007      	beq.n	801270a <__any_on+0x26>
 80126fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80126fe:	fa24 f001 	lsr.w	r0, r4, r1
 8012702:	fa00 f101 	lsl.w	r1, r0, r1
 8012706:	428c      	cmp	r4, r1
 8012708:	d10b      	bne.n	8012722 <__any_on+0x3e>
 801270a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801270e:	4293      	cmp	r3, r2
 8012710:	d803      	bhi.n	801271a <__any_on+0x36>
 8012712:	2000      	movs	r0, #0
 8012714:	bd10      	pop	{r4, pc}
 8012716:	4603      	mov	r3, r0
 8012718:	e7f7      	b.n	801270a <__any_on+0x26>
 801271a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801271e:	2900      	cmp	r1, #0
 8012720:	d0f5      	beq.n	801270e <__any_on+0x2a>
 8012722:	2001      	movs	r0, #1
 8012724:	e7f6      	b.n	8012714 <__any_on+0x30>

08012726 <_calloc_r>:
 8012726:	b513      	push	{r0, r1, r4, lr}
 8012728:	434a      	muls	r2, r1
 801272a:	4611      	mov	r1, r2
 801272c:	9201      	str	r2, [sp, #4]
 801272e:	f000 f859 	bl	80127e4 <_malloc_r>
 8012732:	4604      	mov	r4, r0
 8012734:	b118      	cbz	r0, 801273e <_calloc_r+0x18>
 8012736:	9a01      	ldr	r2, [sp, #4]
 8012738:	2100      	movs	r1, #0
 801273a:	f7fc fb1f 	bl	800ed7c <memset>
 801273e:	4620      	mov	r0, r4
 8012740:	b002      	add	sp, #8
 8012742:	bd10      	pop	{r4, pc}

08012744 <_free_r>:
 8012744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012746:	2900      	cmp	r1, #0
 8012748:	d048      	beq.n	80127dc <_free_r+0x98>
 801274a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801274e:	9001      	str	r0, [sp, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	f1a1 0404 	sub.w	r4, r1, #4
 8012756:	bfb8      	it	lt
 8012758:	18e4      	addlt	r4, r4, r3
 801275a:	f001 f845 	bl	80137e8 <__malloc_lock>
 801275e:	4a20      	ldr	r2, [pc, #128]	; (80127e0 <_free_r+0x9c>)
 8012760:	9801      	ldr	r0, [sp, #4]
 8012762:	6813      	ldr	r3, [r2, #0]
 8012764:	4615      	mov	r5, r2
 8012766:	b933      	cbnz	r3, 8012776 <_free_r+0x32>
 8012768:	6063      	str	r3, [r4, #4]
 801276a:	6014      	str	r4, [r2, #0]
 801276c:	b003      	add	sp, #12
 801276e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012772:	f001 b83f 	b.w	80137f4 <__malloc_unlock>
 8012776:	42a3      	cmp	r3, r4
 8012778:	d90b      	bls.n	8012792 <_free_r+0x4e>
 801277a:	6821      	ldr	r1, [r4, #0]
 801277c:	1862      	adds	r2, r4, r1
 801277e:	4293      	cmp	r3, r2
 8012780:	bf04      	itt	eq
 8012782:	681a      	ldreq	r2, [r3, #0]
 8012784:	685b      	ldreq	r3, [r3, #4]
 8012786:	6063      	str	r3, [r4, #4]
 8012788:	bf04      	itt	eq
 801278a:	1852      	addeq	r2, r2, r1
 801278c:	6022      	streq	r2, [r4, #0]
 801278e:	602c      	str	r4, [r5, #0]
 8012790:	e7ec      	b.n	801276c <_free_r+0x28>
 8012792:	461a      	mov	r2, r3
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	b10b      	cbz	r3, 801279c <_free_r+0x58>
 8012798:	42a3      	cmp	r3, r4
 801279a:	d9fa      	bls.n	8012792 <_free_r+0x4e>
 801279c:	6811      	ldr	r1, [r2, #0]
 801279e:	1855      	adds	r5, r2, r1
 80127a0:	42a5      	cmp	r5, r4
 80127a2:	d10b      	bne.n	80127bc <_free_r+0x78>
 80127a4:	6824      	ldr	r4, [r4, #0]
 80127a6:	4421      	add	r1, r4
 80127a8:	1854      	adds	r4, r2, r1
 80127aa:	42a3      	cmp	r3, r4
 80127ac:	6011      	str	r1, [r2, #0]
 80127ae:	d1dd      	bne.n	801276c <_free_r+0x28>
 80127b0:	681c      	ldr	r4, [r3, #0]
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	6053      	str	r3, [r2, #4]
 80127b6:	4421      	add	r1, r4
 80127b8:	6011      	str	r1, [r2, #0]
 80127ba:	e7d7      	b.n	801276c <_free_r+0x28>
 80127bc:	d902      	bls.n	80127c4 <_free_r+0x80>
 80127be:	230c      	movs	r3, #12
 80127c0:	6003      	str	r3, [r0, #0]
 80127c2:	e7d3      	b.n	801276c <_free_r+0x28>
 80127c4:	6825      	ldr	r5, [r4, #0]
 80127c6:	1961      	adds	r1, r4, r5
 80127c8:	428b      	cmp	r3, r1
 80127ca:	bf04      	itt	eq
 80127cc:	6819      	ldreq	r1, [r3, #0]
 80127ce:	685b      	ldreq	r3, [r3, #4]
 80127d0:	6063      	str	r3, [r4, #4]
 80127d2:	bf04      	itt	eq
 80127d4:	1949      	addeq	r1, r1, r5
 80127d6:	6021      	streq	r1, [r4, #0]
 80127d8:	6054      	str	r4, [r2, #4]
 80127da:	e7c7      	b.n	801276c <_free_r+0x28>
 80127dc:	b003      	add	sp, #12
 80127de:	bd30      	pop	{r4, r5, pc}
 80127e0:	20000a78 	.word	0x20000a78

080127e4 <_malloc_r>:
 80127e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e6:	1ccd      	adds	r5, r1, #3
 80127e8:	f025 0503 	bic.w	r5, r5, #3
 80127ec:	3508      	adds	r5, #8
 80127ee:	2d0c      	cmp	r5, #12
 80127f0:	bf38      	it	cc
 80127f2:	250c      	movcc	r5, #12
 80127f4:	2d00      	cmp	r5, #0
 80127f6:	4606      	mov	r6, r0
 80127f8:	db01      	blt.n	80127fe <_malloc_r+0x1a>
 80127fa:	42a9      	cmp	r1, r5
 80127fc:	d903      	bls.n	8012806 <_malloc_r+0x22>
 80127fe:	230c      	movs	r3, #12
 8012800:	6033      	str	r3, [r6, #0]
 8012802:	2000      	movs	r0, #0
 8012804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012806:	f000 ffef 	bl	80137e8 <__malloc_lock>
 801280a:	4921      	ldr	r1, [pc, #132]	; (8012890 <_malloc_r+0xac>)
 801280c:	680a      	ldr	r2, [r1, #0]
 801280e:	4614      	mov	r4, r2
 8012810:	b99c      	cbnz	r4, 801283a <_malloc_r+0x56>
 8012812:	4f20      	ldr	r7, [pc, #128]	; (8012894 <_malloc_r+0xb0>)
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	b923      	cbnz	r3, 8012822 <_malloc_r+0x3e>
 8012818:	4621      	mov	r1, r4
 801281a:	4630      	mov	r0, r6
 801281c:	f000 fcd0 	bl	80131c0 <_sbrk_r>
 8012820:	6038      	str	r0, [r7, #0]
 8012822:	4629      	mov	r1, r5
 8012824:	4630      	mov	r0, r6
 8012826:	f000 fccb 	bl	80131c0 <_sbrk_r>
 801282a:	1c43      	adds	r3, r0, #1
 801282c:	d123      	bne.n	8012876 <_malloc_r+0x92>
 801282e:	230c      	movs	r3, #12
 8012830:	6033      	str	r3, [r6, #0]
 8012832:	4630      	mov	r0, r6
 8012834:	f000 ffde 	bl	80137f4 <__malloc_unlock>
 8012838:	e7e3      	b.n	8012802 <_malloc_r+0x1e>
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	1b5b      	subs	r3, r3, r5
 801283e:	d417      	bmi.n	8012870 <_malloc_r+0x8c>
 8012840:	2b0b      	cmp	r3, #11
 8012842:	d903      	bls.n	801284c <_malloc_r+0x68>
 8012844:	6023      	str	r3, [r4, #0]
 8012846:	441c      	add	r4, r3
 8012848:	6025      	str	r5, [r4, #0]
 801284a:	e004      	b.n	8012856 <_malloc_r+0x72>
 801284c:	6863      	ldr	r3, [r4, #4]
 801284e:	42a2      	cmp	r2, r4
 8012850:	bf0c      	ite	eq
 8012852:	600b      	streq	r3, [r1, #0]
 8012854:	6053      	strne	r3, [r2, #4]
 8012856:	4630      	mov	r0, r6
 8012858:	f000 ffcc 	bl	80137f4 <__malloc_unlock>
 801285c:	f104 000b 	add.w	r0, r4, #11
 8012860:	1d23      	adds	r3, r4, #4
 8012862:	f020 0007 	bic.w	r0, r0, #7
 8012866:	1ac2      	subs	r2, r0, r3
 8012868:	d0cc      	beq.n	8012804 <_malloc_r+0x20>
 801286a:	1a1b      	subs	r3, r3, r0
 801286c:	50a3      	str	r3, [r4, r2]
 801286e:	e7c9      	b.n	8012804 <_malloc_r+0x20>
 8012870:	4622      	mov	r2, r4
 8012872:	6864      	ldr	r4, [r4, #4]
 8012874:	e7cc      	b.n	8012810 <_malloc_r+0x2c>
 8012876:	1cc4      	adds	r4, r0, #3
 8012878:	f024 0403 	bic.w	r4, r4, #3
 801287c:	42a0      	cmp	r0, r4
 801287e:	d0e3      	beq.n	8012848 <_malloc_r+0x64>
 8012880:	1a21      	subs	r1, r4, r0
 8012882:	4630      	mov	r0, r6
 8012884:	f000 fc9c 	bl	80131c0 <_sbrk_r>
 8012888:	3001      	adds	r0, #1
 801288a:	d1dd      	bne.n	8012848 <_malloc_r+0x64>
 801288c:	e7cf      	b.n	801282e <_malloc_r+0x4a>
 801288e:	bf00      	nop
 8012890:	20000a78 	.word	0x20000a78
 8012894:	20000a7c 	.word	0x20000a7c

08012898 <__ssputs_r>:
 8012898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801289c:	688e      	ldr	r6, [r1, #8]
 801289e:	429e      	cmp	r6, r3
 80128a0:	4682      	mov	sl, r0
 80128a2:	460c      	mov	r4, r1
 80128a4:	4690      	mov	r8, r2
 80128a6:	461f      	mov	r7, r3
 80128a8:	d838      	bhi.n	801291c <__ssputs_r+0x84>
 80128aa:	898a      	ldrh	r2, [r1, #12]
 80128ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128b0:	d032      	beq.n	8012918 <__ssputs_r+0x80>
 80128b2:	6825      	ldr	r5, [r4, #0]
 80128b4:	6909      	ldr	r1, [r1, #16]
 80128b6:	eba5 0901 	sub.w	r9, r5, r1
 80128ba:	6965      	ldr	r5, [r4, #20]
 80128bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128c4:	3301      	adds	r3, #1
 80128c6:	444b      	add	r3, r9
 80128c8:	106d      	asrs	r5, r5, #1
 80128ca:	429d      	cmp	r5, r3
 80128cc:	bf38      	it	cc
 80128ce:	461d      	movcc	r5, r3
 80128d0:	0553      	lsls	r3, r2, #21
 80128d2:	d531      	bpl.n	8012938 <__ssputs_r+0xa0>
 80128d4:	4629      	mov	r1, r5
 80128d6:	f7ff ff85 	bl	80127e4 <_malloc_r>
 80128da:	4606      	mov	r6, r0
 80128dc:	b950      	cbnz	r0, 80128f4 <__ssputs_r+0x5c>
 80128de:	230c      	movs	r3, #12
 80128e0:	f8ca 3000 	str.w	r3, [sl]
 80128e4:	89a3      	ldrh	r3, [r4, #12]
 80128e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128ea:	81a3      	strh	r3, [r4, #12]
 80128ec:	f04f 30ff 	mov.w	r0, #4294967295
 80128f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128f4:	6921      	ldr	r1, [r4, #16]
 80128f6:	464a      	mov	r2, r9
 80128f8:	f7fc fa32 	bl	800ed60 <memcpy>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	6126      	str	r6, [r4, #16]
 801290a:	6165      	str	r5, [r4, #20]
 801290c:	444e      	add	r6, r9
 801290e:	eba5 0509 	sub.w	r5, r5, r9
 8012912:	6026      	str	r6, [r4, #0]
 8012914:	60a5      	str	r5, [r4, #8]
 8012916:	463e      	mov	r6, r7
 8012918:	42be      	cmp	r6, r7
 801291a:	d900      	bls.n	801291e <__ssputs_r+0x86>
 801291c:	463e      	mov	r6, r7
 801291e:	4632      	mov	r2, r6
 8012920:	6820      	ldr	r0, [r4, #0]
 8012922:	4641      	mov	r1, r8
 8012924:	f000 ff46 	bl	80137b4 <memmove>
 8012928:	68a3      	ldr	r3, [r4, #8]
 801292a:	6822      	ldr	r2, [r4, #0]
 801292c:	1b9b      	subs	r3, r3, r6
 801292e:	4432      	add	r2, r6
 8012930:	60a3      	str	r3, [r4, #8]
 8012932:	6022      	str	r2, [r4, #0]
 8012934:	2000      	movs	r0, #0
 8012936:	e7db      	b.n	80128f0 <__ssputs_r+0x58>
 8012938:	462a      	mov	r2, r5
 801293a:	f000 ff61 	bl	8013800 <_realloc_r>
 801293e:	4606      	mov	r6, r0
 8012940:	2800      	cmp	r0, #0
 8012942:	d1e1      	bne.n	8012908 <__ssputs_r+0x70>
 8012944:	6921      	ldr	r1, [r4, #16]
 8012946:	4650      	mov	r0, sl
 8012948:	f7ff fefc 	bl	8012744 <_free_r>
 801294c:	e7c7      	b.n	80128de <__ssputs_r+0x46>
	...

08012950 <_svfiprintf_r>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	4698      	mov	r8, r3
 8012956:	898b      	ldrh	r3, [r1, #12]
 8012958:	061b      	lsls	r3, r3, #24
 801295a:	b09d      	sub	sp, #116	; 0x74
 801295c:	4607      	mov	r7, r0
 801295e:	460d      	mov	r5, r1
 8012960:	4614      	mov	r4, r2
 8012962:	d50e      	bpl.n	8012982 <_svfiprintf_r+0x32>
 8012964:	690b      	ldr	r3, [r1, #16]
 8012966:	b963      	cbnz	r3, 8012982 <_svfiprintf_r+0x32>
 8012968:	2140      	movs	r1, #64	; 0x40
 801296a:	f7ff ff3b 	bl	80127e4 <_malloc_r>
 801296e:	6028      	str	r0, [r5, #0]
 8012970:	6128      	str	r0, [r5, #16]
 8012972:	b920      	cbnz	r0, 801297e <_svfiprintf_r+0x2e>
 8012974:	230c      	movs	r3, #12
 8012976:	603b      	str	r3, [r7, #0]
 8012978:	f04f 30ff 	mov.w	r0, #4294967295
 801297c:	e0d1      	b.n	8012b22 <_svfiprintf_r+0x1d2>
 801297e:	2340      	movs	r3, #64	; 0x40
 8012980:	616b      	str	r3, [r5, #20]
 8012982:	2300      	movs	r3, #0
 8012984:	9309      	str	r3, [sp, #36]	; 0x24
 8012986:	2320      	movs	r3, #32
 8012988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801298c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012990:	2330      	movs	r3, #48	; 0x30
 8012992:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012b3c <_svfiprintf_r+0x1ec>
 8012996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801299a:	f04f 0901 	mov.w	r9, #1
 801299e:	4623      	mov	r3, r4
 80129a0:	469a      	mov	sl, r3
 80129a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129a6:	b10a      	cbz	r2, 80129ac <_svfiprintf_r+0x5c>
 80129a8:	2a25      	cmp	r2, #37	; 0x25
 80129aa:	d1f9      	bne.n	80129a0 <_svfiprintf_r+0x50>
 80129ac:	ebba 0b04 	subs.w	fp, sl, r4
 80129b0:	d00b      	beq.n	80129ca <_svfiprintf_r+0x7a>
 80129b2:	465b      	mov	r3, fp
 80129b4:	4622      	mov	r2, r4
 80129b6:	4629      	mov	r1, r5
 80129b8:	4638      	mov	r0, r7
 80129ba:	f7ff ff6d 	bl	8012898 <__ssputs_r>
 80129be:	3001      	adds	r0, #1
 80129c0:	f000 80aa 	beq.w	8012b18 <_svfiprintf_r+0x1c8>
 80129c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129c6:	445a      	add	r2, fp
 80129c8:	9209      	str	r2, [sp, #36]	; 0x24
 80129ca:	f89a 3000 	ldrb.w	r3, [sl]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f000 80a2 	beq.w	8012b18 <_svfiprintf_r+0x1c8>
 80129d4:	2300      	movs	r3, #0
 80129d6:	f04f 32ff 	mov.w	r2, #4294967295
 80129da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129de:	f10a 0a01 	add.w	sl, sl, #1
 80129e2:	9304      	str	r3, [sp, #16]
 80129e4:	9307      	str	r3, [sp, #28]
 80129e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129ea:	931a      	str	r3, [sp, #104]	; 0x68
 80129ec:	4654      	mov	r4, sl
 80129ee:	2205      	movs	r2, #5
 80129f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f4:	4851      	ldr	r0, [pc, #324]	; (8012b3c <_svfiprintf_r+0x1ec>)
 80129f6:	f7ed fc03 	bl	8000200 <memchr>
 80129fa:	9a04      	ldr	r2, [sp, #16]
 80129fc:	b9d8      	cbnz	r0, 8012a36 <_svfiprintf_r+0xe6>
 80129fe:	06d0      	lsls	r0, r2, #27
 8012a00:	bf44      	itt	mi
 8012a02:	2320      	movmi	r3, #32
 8012a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a08:	0711      	lsls	r1, r2, #28
 8012a0a:	bf44      	itt	mi
 8012a0c:	232b      	movmi	r3, #43	; 0x2b
 8012a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a12:	f89a 3000 	ldrb.w	r3, [sl]
 8012a16:	2b2a      	cmp	r3, #42	; 0x2a
 8012a18:	d015      	beq.n	8012a46 <_svfiprintf_r+0xf6>
 8012a1a:	9a07      	ldr	r2, [sp, #28]
 8012a1c:	4654      	mov	r4, sl
 8012a1e:	2000      	movs	r0, #0
 8012a20:	f04f 0c0a 	mov.w	ip, #10
 8012a24:	4621      	mov	r1, r4
 8012a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a2a:	3b30      	subs	r3, #48	; 0x30
 8012a2c:	2b09      	cmp	r3, #9
 8012a2e:	d94e      	bls.n	8012ace <_svfiprintf_r+0x17e>
 8012a30:	b1b0      	cbz	r0, 8012a60 <_svfiprintf_r+0x110>
 8012a32:	9207      	str	r2, [sp, #28]
 8012a34:	e014      	b.n	8012a60 <_svfiprintf_r+0x110>
 8012a36:	eba0 0308 	sub.w	r3, r0, r8
 8012a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	9304      	str	r3, [sp, #16]
 8012a42:	46a2      	mov	sl, r4
 8012a44:	e7d2      	b.n	80129ec <_svfiprintf_r+0x9c>
 8012a46:	9b03      	ldr	r3, [sp, #12]
 8012a48:	1d19      	adds	r1, r3, #4
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	9103      	str	r1, [sp, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	bfbb      	ittet	lt
 8012a52:	425b      	neglt	r3, r3
 8012a54:	f042 0202 	orrlt.w	r2, r2, #2
 8012a58:	9307      	strge	r3, [sp, #28]
 8012a5a:	9307      	strlt	r3, [sp, #28]
 8012a5c:	bfb8      	it	lt
 8012a5e:	9204      	strlt	r2, [sp, #16]
 8012a60:	7823      	ldrb	r3, [r4, #0]
 8012a62:	2b2e      	cmp	r3, #46	; 0x2e
 8012a64:	d10c      	bne.n	8012a80 <_svfiprintf_r+0x130>
 8012a66:	7863      	ldrb	r3, [r4, #1]
 8012a68:	2b2a      	cmp	r3, #42	; 0x2a
 8012a6a:	d135      	bne.n	8012ad8 <_svfiprintf_r+0x188>
 8012a6c:	9b03      	ldr	r3, [sp, #12]
 8012a6e:	1d1a      	adds	r2, r3, #4
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	9203      	str	r2, [sp, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	bfb8      	it	lt
 8012a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a7c:	3402      	adds	r4, #2
 8012a7e:	9305      	str	r3, [sp, #20]
 8012a80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012b4c <_svfiprintf_r+0x1fc>
 8012a84:	7821      	ldrb	r1, [r4, #0]
 8012a86:	2203      	movs	r2, #3
 8012a88:	4650      	mov	r0, sl
 8012a8a:	f7ed fbb9 	bl	8000200 <memchr>
 8012a8e:	b140      	cbz	r0, 8012aa2 <_svfiprintf_r+0x152>
 8012a90:	2340      	movs	r3, #64	; 0x40
 8012a92:	eba0 000a 	sub.w	r0, r0, sl
 8012a96:	fa03 f000 	lsl.w	r0, r3, r0
 8012a9a:	9b04      	ldr	r3, [sp, #16]
 8012a9c:	4303      	orrs	r3, r0
 8012a9e:	3401      	adds	r4, #1
 8012aa0:	9304      	str	r3, [sp, #16]
 8012aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa6:	4826      	ldr	r0, [pc, #152]	; (8012b40 <_svfiprintf_r+0x1f0>)
 8012aa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012aac:	2206      	movs	r2, #6
 8012aae:	f7ed fba7 	bl	8000200 <memchr>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	d038      	beq.n	8012b28 <_svfiprintf_r+0x1d8>
 8012ab6:	4b23      	ldr	r3, [pc, #140]	; (8012b44 <_svfiprintf_r+0x1f4>)
 8012ab8:	bb1b      	cbnz	r3, 8012b02 <_svfiprintf_r+0x1b2>
 8012aba:	9b03      	ldr	r3, [sp, #12]
 8012abc:	3307      	adds	r3, #7
 8012abe:	f023 0307 	bic.w	r3, r3, #7
 8012ac2:	3308      	adds	r3, #8
 8012ac4:	9303      	str	r3, [sp, #12]
 8012ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac8:	4433      	add	r3, r6
 8012aca:	9309      	str	r3, [sp, #36]	; 0x24
 8012acc:	e767      	b.n	801299e <_svfiprintf_r+0x4e>
 8012ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	2001      	movs	r0, #1
 8012ad6:	e7a5      	b.n	8012a24 <_svfiprintf_r+0xd4>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	3401      	adds	r4, #1
 8012adc:	9305      	str	r3, [sp, #20]
 8012ade:	4619      	mov	r1, r3
 8012ae0:	f04f 0c0a 	mov.w	ip, #10
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012aea:	3a30      	subs	r2, #48	; 0x30
 8012aec:	2a09      	cmp	r2, #9
 8012aee:	d903      	bls.n	8012af8 <_svfiprintf_r+0x1a8>
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d0c5      	beq.n	8012a80 <_svfiprintf_r+0x130>
 8012af4:	9105      	str	r1, [sp, #20]
 8012af6:	e7c3      	b.n	8012a80 <_svfiprintf_r+0x130>
 8012af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012afc:	4604      	mov	r4, r0
 8012afe:	2301      	movs	r3, #1
 8012b00:	e7f0      	b.n	8012ae4 <_svfiprintf_r+0x194>
 8012b02:	ab03      	add	r3, sp, #12
 8012b04:	9300      	str	r3, [sp, #0]
 8012b06:	462a      	mov	r2, r5
 8012b08:	4b0f      	ldr	r3, [pc, #60]	; (8012b48 <_svfiprintf_r+0x1f8>)
 8012b0a:	a904      	add	r1, sp, #16
 8012b0c:	4638      	mov	r0, r7
 8012b0e:	f7fc f9dd 	bl	800eecc <_printf_float>
 8012b12:	1c42      	adds	r2, r0, #1
 8012b14:	4606      	mov	r6, r0
 8012b16:	d1d6      	bne.n	8012ac6 <_svfiprintf_r+0x176>
 8012b18:	89ab      	ldrh	r3, [r5, #12]
 8012b1a:	065b      	lsls	r3, r3, #25
 8012b1c:	f53f af2c 	bmi.w	8012978 <_svfiprintf_r+0x28>
 8012b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b22:	b01d      	add	sp, #116	; 0x74
 8012b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b28:	ab03      	add	r3, sp, #12
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	462a      	mov	r2, r5
 8012b2e:	4b06      	ldr	r3, [pc, #24]	; (8012b48 <_svfiprintf_r+0x1f8>)
 8012b30:	a904      	add	r1, sp, #16
 8012b32:	4638      	mov	r0, r7
 8012b34:	f7fc fc6e 	bl	800f414 <_printf_i>
 8012b38:	e7eb      	b.n	8012b12 <_svfiprintf_r+0x1c2>
 8012b3a:	bf00      	nop
 8012b3c:	0801613c 	.word	0x0801613c
 8012b40:	08016146 	.word	0x08016146
 8012b44:	0800eecd 	.word	0x0800eecd
 8012b48:	08012899 	.word	0x08012899
 8012b4c:	08016142 	.word	0x08016142

08012b50 <_sungetc_r>:
 8012b50:	b538      	push	{r3, r4, r5, lr}
 8012b52:	1c4b      	adds	r3, r1, #1
 8012b54:	4614      	mov	r4, r2
 8012b56:	d103      	bne.n	8012b60 <_sungetc_r+0x10>
 8012b58:	f04f 35ff 	mov.w	r5, #4294967295
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	bd38      	pop	{r3, r4, r5, pc}
 8012b60:	8993      	ldrh	r3, [r2, #12]
 8012b62:	f023 0320 	bic.w	r3, r3, #32
 8012b66:	8193      	strh	r3, [r2, #12]
 8012b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b6a:	6852      	ldr	r2, [r2, #4]
 8012b6c:	b2cd      	uxtb	r5, r1
 8012b6e:	b18b      	cbz	r3, 8012b94 <_sungetc_r+0x44>
 8012b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b72:	4293      	cmp	r3, r2
 8012b74:	dd08      	ble.n	8012b88 <_sungetc_r+0x38>
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	1e5a      	subs	r2, r3, #1
 8012b7a:	6022      	str	r2, [r4, #0]
 8012b7c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012b80:	6863      	ldr	r3, [r4, #4]
 8012b82:	3301      	adds	r3, #1
 8012b84:	6063      	str	r3, [r4, #4]
 8012b86:	e7e9      	b.n	8012b5c <_sungetc_r+0xc>
 8012b88:	4621      	mov	r1, r4
 8012b8a:	f000 fbe1 	bl	8013350 <__submore>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d0f1      	beq.n	8012b76 <_sungetc_r+0x26>
 8012b92:	e7e1      	b.n	8012b58 <_sungetc_r+0x8>
 8012b94:	6921      	ldr	r1, [r4, #16]
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	b151      	cbz	r1, 8012bb0 <_sungetc_r+0x60>
 8012b9a:	4299      	cmp	r1, r3
 8012b9c:	d208      	bcs.n	8012bb0 <_sungetc_r+0x60>
 8012b9e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012ba2:	42a9      	cmp	r1, r5
 8012ba4:	d104      	bne.n	8012bb0 <_sungetc_r+0x60>
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	3201      	adds	r2, #1
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	6062      	str	r2, [r4, #4]
 8012bae:	e7d5      	b.n	8012b5c <_sungetc_r+0xc>
 8012bb0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8012bba:	2303      	movs	r3, #3
 8012bbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8012bbe:	4623      	mov	r3, r4
 8012bc0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012bc4:	6023      	str	r3, [r4, #0]
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e7dc      	b.n	8012b84 <_sungetc_r+0x34>

08012bca <__ssrefill_r>:
 8012bca:	b510      	push	{r4, lr}
 8012bcc:	460c      	mov	r4, r1
 8012bce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012bd0:	b169      	cbz	r1, 8012bee <__ssrefill_r+0x24>
 8012bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bd6:	4299      	cmp	r1, r3
 8012bd8:	d001      	beq.n	8012bde <__ssrefill_r+0x14>
 8012bda:	f7ff fdb3 	bl	8012744 <_free_r>
 8012bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012be0:	6063      	str	r3, [r4, #4]
 8012be2:	2000      	movs	r0, #0
 8012be4:	6360      	str	r0, [r4, #52]	; 0x34
 8012be6:	b113      	cbz	r3, 8012bee <__ssrefill_r+0x24>
 8012be8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012bea:	6023      	str	r3, [r4, #0]
 8012bec:	bd10      	pop	{r4, pc}
 8012bee:	6923      	ldr	r3, [r4, #16]
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	6063      	str	r3, [r4, #4]
 8012bf6:	89a3      	ldrh	r3, [r4, #12]
 8012bf8:	f043 0320 	orr.w	r3, r3, #32
 8012bfc:	81a3      	strh	r3, [r4, #12]
 8012bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8012c02:	e7f3      	b.n	8012bec <__ssrefill_r+0x22>

08012c04 <__ssvfiscanf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	460c      	mov	r4, r1
 8012c0a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012c0e:	2100      	movs	r1, #0
 8012c10:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012c14:	49b2      	ldr	r1, [pc, #712]	; (8012ee0 <__ssvfiscanf_r+0x2dc>)
 8012c16:	91a0      	str	r1, [sp, #640]	; 0x280
 8012c18:	f10d 0804 	add.w	r8, sp, #4
 8012c1c:	49b1      	ldr	r1, [pc, #708]	; (8012ee4 <__ssvfiscanf_r+0x2e0>)
 8012c1e:	4fb2      	ldr	r7, [pc, #712]	; (8012ee8 <__ssvfiscanf_r+0x2e4>)
 8012c20:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012eec <__ssvfiscanf_r+0x2e8>
 8012c24:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012c28:	4606      	mov	r6, r0
 8012c2a:	91a1      	str	r1, [sp, #644]	; 0x284
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	f892 a000 	ldrb.w	sl, [r2]
 8012c32:	f1ba 0f00 	cmp.w	sl, #0
 8012c36:	f000 8151 	beq.w	8012edc <__ssvfiscanf_r+0x2d8>
 8012c3a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8012c3e:	f013 0308 	ands.w	r3, r3, #8
 8012c42:	f102 0501 	add.w	r5, r2, #1
 8012c46:	d019      	beq.n	8012c7c <__ssvfiscanf_r+0x78>
 8012c48:	6863      	ldr	r3, [r4, #4]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	dd0f      	ble.n	8012c6e <__ssvfiscanf_r+0x6a>
 8012c4e:	6823      	ldr	r3, [r4, #0]
 8012c50:	781a      	ldrb	r2, [r3, #0]
 8012c52:	5cba      	ldrb	r2, [r7, r2]
 8012c54:	0712      	lsls	r2, r2, #28
 8012c56:	d401      	bmi.n	8012c5c <__ssvfiscanf_r+0x58>
 8012c58:	462a      	mov	r2, r5
 8012c5a:	e7e8      	b.n	8012c2e <__ssvfiscanf_r+0x2a>
 8012c5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012c5e:	3201      	adds	r2, #1
 8012c60:	9245      	str	r2, [sp, #276]	; 0x114
 8012c62:	6862      	ldr	r2, [r4, #4]
 8012c64:	3301      	adds	r3, #1
 8012c66:	3a01      	subs	r2, #1
 8012c68:	6062      	str	r2, [r4, #4]
 8012c6a:	6023      	str	r3, [r4, #0]
 8012c6c:	e7ec      	b.n	8012c48 <__ssvfiscanf_r+0x44>
 8012c6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012c70:	4621      	mov	r1, r4
 8012c72:	4630      	mov	r0, r6
 8012c74:	4798      	blx	r3
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d0e9      	beq.n	8012c4e <__ssvfiscanf_r+0x4a>
 8012c7a:	e7ed      	b.n	8012c58 <__ssvfiscanf_r+0x54>
 8012c7c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012c80:	f040 8083 	bne.w	8012d8a <__ssvfiscanf_r+0x186>
 8012c84:	9341      	str	r3, [sp, #260]	; 0x104
 8012c86:	9343      	str	r3, [sp, #268]	; 0x10c
 8012c88:	7853      	ldrb	r3, [r2, #1]
 8012c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8012c8c:	bf02      	ittt	eq
 8012c8e:	2310      	moveq	r3, #16
 8012c90:	1c95      	addeq	r5, r2, #2
 8012c92:	9341      	streq	r3, [sp, #260]	; 0x104
 8012c94:	220a      	movs	r2, #10
 8012c96:	46ab      	mov	fp, r5
 8012c98:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012c9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012ca0:	2b09      	cmp	r3, #9
 8012ca2:	d91d      	bls.n	8012ce0 <__ssvfiscanf_r+0xdc>
 8012ca4:	4891      	ldr	r0, [pc, #580]	; (8012eec <__ssvfiscanf_r+0x2e8>)
 8012ca6:	2203      	movs	r2, #3
 8012ca8:	f7ed faaa 	bl	8000200 <memchr>
 8012cac:	b140      	cbz	r0, 8012cc0 <__ssvfiscanf_r+0xbc>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	eba0 0009 	sub.w	r0, r0, r9
 8012cb4:	fa03 f000 	lsl.w	r0, r3, r0
 8012cb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012cba:	4318      	orrs	r0, r3
 8012cbc:	9041      	str	r0, [sp, #260]	; 0x104
 8012cbe:	465d      	mov	r5, fp
 8012cc0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012cc4:	2b78      	cmp	r3, #120	; 0x78
 8012cc6:	d806      	bhi.n	8012cd6 <__ssvfiscanf_r+0xd2>
 8012cc8:	2b57      	cmp	r3, #87	; 0x57
 8012cca:	d810      	bhi.n	8012cee <__ssvfiscanf_r+0xea>
 8012ccc:	2b25      	cmp	r3, #37	; 0x25
 8012cce:	d05c      	beq.n	8012d8a <__ssvfiscanf_r+0x186>
 8012cd0:	d856      	bhi.n	8012d80 <__ssvfiscanf_r+0x17c>
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d074      	beq.n	8012dc0 <__ssvfiscanf_r+0x1bc>
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	9347      	str	r3, [sp, #284]	; 0x11c
 8012cda:	230a      	movs	r3, #10
 8012cdc:	9342      	str	r3, [sp, #264]	; 0x108
 8012cde:	e081      	b.n	8012de4 <__ssvfiscanf_r+0x1e0>
 8012ce0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012ce2:	fb02 1303 	mla	r3, r2, r3, r1
 8012ce6:	3b30      	subs	r3, #48	; 0x30
 8012ce8:	9343      	str	r3, [sp, #268]	; 0x10c
 8012cea:	465d      	mov	r5, fp
 8012cec:	e7d3      	b.n	8012c96 <__ssvfiscanf_r+0x92>
 8012cee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012cf2:	2a20      	cmp	r2, #32
 8012cf4:	d8ef      	bhi.n	8012cd6 <__ssvfiscanf_r+0xd2>
 8012cf6:	a101      	add	r1, pc, #4	; (adr r1, 8012cfc <__ssvfiscanf_r+0xf8>)
 8012cf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012cfc:	08012dcf 	.word	0x08012dcf
 8012d00:	08012cd7 	.word	0x08012cd7
 8012d04:	08012cd7 	.word	0x08012cd7
 8012d08:	08012e2d 	.word	0x08012e2d
 8012d0c:	08012cd7 	.word	0x08012cd7
 8012d10:	08012cd7 	.word	0x08012cd7
 8012d14:	08012cd7 	.word	0x08012cd7
 8012d18:	08012cd7 	.word	0x08012cd7
 8012d1c:	08012cd7 	.word	0x08012cd7
 8012d20:	08012cd7 	.word	0x08012cd7
 8012d24:	08012cd7 	.word	0x08012cd7
 8012d28:	08012e43 	.word	0x08012e43
 8012d2c:	08012e19 	.word	0x08012e19
 8012d30:	08012d87 	.word	0x08012d87
 8012d34:	08012d87 	.word	0x08012d87
 8012d38:	08012d87 	.word	0x08012d87
 8012d3c:	08012cd7 	.word	0x08012cd7
 8012d40:	08012e1d 	.word	0x08012e1d
 8012d44:	08012cd7 	.word	0x08012cd7
 8012d48:	08012cd7 	.word	0x08012cd7
 8012d4c:	08012cd7 	.word	0x08012cd7
 8012d50:	08012cd7 	.word	0x08012cd7
 8012d54:	08012e53 	.word	0x08012e53
 8012d58:	08012e25 	.word	0x08012e25
 8012d5c:	08012dc7 	.word	0x08012dc7
 8012d60:	08012cd7 	.word	0x08012cd7
 8012d64:	08012cd7 	.word	0x08012cd7
 8012d68:	08012e4f 	.word	0x08012e4f
 8012d6c:	08012cd7 	.word	0x08012cd7
 8012d70:	08012e19 	.word	0x08012e19
 8012d74:	08012cd7 	.word	0x08012cd7
 8012d78:	08012cd7 	.word	0x08012cd7
 8012d7c:	08012dcf 	.word	0x08012dcf
 8012d80:	3b45      	subs	r3, #69	; 0x45
 8012d82:	2b02      	cmp	r3, #2
 8012d84:	d8a7      	bhi.n	8012cd6 <__ssvfiscanf_r+0xd2>
 8012d86:	2305      	movs	r3, #5
 8012d88:	e02b      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012d8a:	6863      	ldr	r3, [r4, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dd0d      	ble.n	8012dac <__ssvfiscanf_r+0x1a8>
 8012d90:	6823      	ldr	r3, [r4, #0]
 8012d92:	781a      	ldrb	r2, [r3, #0]
 8012d94:	4552      	cmp	r2, sl
 8012d96:	f040 80a1 	bne.w	8012edc <__ssvfiscanf_r+0x2d8>
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	6862      	ldr	r2, [r4, #4]
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012da2:	3a01      	subs	r2, #1
 8012da4:	3301      	adds	r3, #1
 8012da6:	6062      	str	r2, [r4, #4]
 8012da8:	9345      	str	r3, [sp, #276]	; 0x114
 8012daa:	e755      	b.n	8012c58 <__ssvfiscanf_r+0x54>
 8012dac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012dae:	4621      	mov	r1, r4
 8012db0:	4630      	mov	r0, r6
 8012db2:	4798      	blx	r3
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d0eb      	beq.n	8012d90 <__ssvfiscanf_r+0x18c>
 8012db8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	f040 8084 	bne.w	8012ec8 <__ssvfiscanf_r+0x2c4>
 8012dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc4:	e086      	b.n	8012ed4 <__ssvfiscanf_r+0x2d0>
 8012dc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012dc8:	f042 0220 	orr.w	r2, r2, #32
 8012dcc:	9241      	str	r2, [sp, #260]	; 0x104
 8012dce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012dd4:	9241      	str	r2, [sp, #260]	; 0x104
 8012dd6:	2210      	movs	r2, #16
 8012dd8:	2b6f      	cmp	r3, #111	; 0x6f
 8012dda:	9242      	str	r2, [sp, #264]	; 0x108
 8012ddc:	bf34      	ite	cc
 8012dde:	2303      	movcc	r3, #3
 8012de0:	2304      	movcs	r3, #4
 8012de2:	9347      	str	r3, [sp, #284]	; 0x11c
 8012de4:	6863      	ldr	r3, [r4, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	dd41      	ble.n	8012e6e <__ssvfiscanf_r+0x26a>
 8012dea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012dec:	0659      	lsls	r1, r3, #25
 8012dee:	d404      	bmi.n	8012dfa <__ssvfiscanf_r+0x1f6>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	781a      	ldrb	r2, [r3, #0]
 8012df4:	5cba      	ldrb	r2, [r7, r2]
 8012df6:	0712      	lsls	r2, r2, #28
 8012df8:	d440      	bmi.n	8012e7c <__ssvfiscanf_r+0x278>
 8012dfa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	dc4f      	bgt.n	8012ea0 <__ssvfiscanf_r+0x29c>
 8012e00:	466b      	mov	r3, sp
 8012e02:	4622      	mov	r2, r4
 8012e04:	a941      	add	r1, sp, #260	; 0x104
 8012e06:	4630      	mov	r0, r6
 8012e08:	f000 f874 	bl	8012ef4 <_scanf_chars>
 8012e0c:	2801      	cmp	r0, #1
 8012e0e:	d065      	beq.n	8012edc <__ssvfiscanf_r+0x2d8>
 8012e10:	2802      	cmp	r0, #2
 8012e12:	f47f af21 	bne.w	8012c58 <__ssvfiscanf_r+0x54>
 8012e16:	e7cf      	b.n	8012db8 <__ssvfiscanf_r+0x1b4>
 8012e18:	220a      	movs	r2, #10
 8012e1a:	e7dd      	b.n	8012dd8 <__ssvfiscanf_r+0x1d4>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	9342      	str	r3, [sp, #264]	; 0x108
 8012e20:	2303      	movs	r3, #3
 8012e22:	e7de      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012e24:	2308      	movs	r3, #8
 8012e26:	9342      	str	r3, [sp, #264]	; 0x108
 8012e28:	2304      	movs	r3, #4
 8012e2a:	e7da      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	4640      	mov	r0, r8
 8012e30:	f000 f9d6 	bl	80131e0 <__sccl>
 8012e34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e3a:	9341      	str	r3, [sp, #260]	; 0x104
 8012e3c:	4605      	mov	r5, r0
 8012e3e:	2301      	movs	r3, #1
 8012e40:	e7cf      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012e42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e48:	9341      	str	r3, [sp, #260]	; 0x104
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e7c9      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012e4e:	2302      	movs	r3, #2
 8012e50:	e7c7      	b.n	8012de2 <__ssvfiscanf_r+0x1de>
 8012e52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012e54:	06c3      	lsls	r3, r0, #27
 8012e56:	f53f aeff 	bmi.w	8012c58 <__ssvfiscanf_r+0x54>
 8012e5a:	9b00      	ldr	r3, [sp, #0]
 8012e5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012e5e:	1d19      	adds	r1, r3, #4
 8012e60:	9100      	str	r1, [sp, #0]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	07c0      	lsls	r0, r0, #31
 8012e66:	bf4c      	ite	mi
 8012e68:	801a      	strhmi	r2, [r3, #0]
 8012e6a:	601a      	strpl	r2, [r3, #0]
 8012e6c:	e6f4      	b.n	8012c58 <__ssvfiscanf_r+0x54>
 8012e6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012e70:	4621      	mov	r1, r4
 8012e72:	4630      	mov	r0, r6
 8012e74:	4798      	blx	r3
 8012e76:	2800      	cmp	r0, #0
 8012e78:	d0b7      	beq.n	8012dea <__ssvfiscanf_r+0x1e6>
 8012e7a:	e79d      	b.n	8012db8 <__ssvfiscanf_r+0x1b4>
 8012e7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012e7e:	3201      	adds	r2, #1
 8012e80:	9245      	str	r2, [sp, #276]	; 0x114
 8012e82:	6862      	ldr	r2, [r4, #4]
 8012e84:	3a01      	subs	r2, #1
 8012e86:	2a00      	cmp	r2, #0
 8012e88:	6062      	str	r2, [r4, #4]
 8012e8a:	dd02      	ble.n	8012e92 <__ssvfiscanf_r+0x28e>
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	6023      	str	r3, [r4, #0]
 8012e90:	e7ae      	b.n	8012df0 <__ssvfiscanf_r+0x1ec>
 8012e92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012e94:	4621      	mov	r1, r4
 8012e96:	4630      	mov	r0, r6
 8012e98:	4798      	blx	r3
 8012e9a:	2800      	cmp	r0, #0
 8012e9c:	d0a8      	beq.n	8012df0 <__ssvfiscanf_r+0x1ec>
 8012e9e:	e78b      	b.n	8012db8 <__ssvfiscanf_r+0x1b4>
 8012ea0:	2b04      	cmp	r3, #4
 8012ea2:	dc06      	bgt.n	8012eb2 <__ssvfiscanf_r+0x2ae>
 8012ea4:	466b      	mov	r3, sp
 8012ea6:	4622      	mov	r2, r4
 8012ea8:	a941      	add	r1, sp, #260	; 0x104
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f000 f87a 	bl	8012fa4 <_scanf_i>
 8012eb0:	e7ac      	b.n	8012e0c <__ssvfiscanf_r+0x208>
 8012eb2:	4b0f      	ldr	r3, [pc, #60]	; (8012ef0 <__ssvfiscanf_r+0x2ec>)
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	f43f aecf 	beq.w	8012c58 <__ssvfiscanf_r+0x54>
 8012eba:	466b      	mov	r3, sp
 8012ebc:	4622      	mov	r2, r4
 8012ebe:	a941      	add	r1, sp, #260	; 0x104
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f7fc fbcd 	bl	800f660 <_scanf_float>
 8012ec6:	e7a1      	b.n	8012e0c <__ssvfiscanf_r+0x208>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012ece:	bf18      	it	ne
 8012ed0:	f04f 30ff 	movne.w	r0, #4294967295
 8012ed4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012edc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012ede:	e7f9      	b.n	8012ed4 <__ssvfiscanf_r+0x2d0>
 8012ee0:	08012b51 	.word	0x08012b51
 8012ee4:	08012bcb 	.word	0x08012bcb
 8012ee8:	08015d35 	.word	0x08015d35
 8012eec:	08016142 	.word	0x08016142
 8012ef0:	0800f661 	.word	0x0800f661

08012ef4 <_scanf_chars>:
 8012ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ef8:	4615      	mov	r5, r2
 8012efa:	688a      	ldr	r2, [r1, #8]
 8012efc:	4680      	mov	r8, r0
 8012efe:	460c      	mov	r4, r1
 8012f00:	b932      	cbnz	r2, 8012f10 <_scanf_chars+0x1c>
 8012f02:	698a      	ldr	r2, [r1, #24]
 8012f04:	2a00      	cmp	r2, #0
 8012f06:	bf0c      	ite	eq
 8012f08:	2201      	moveq	r2, #1
 8012f0a:	f04f 32ff 	movne.w	r2, #4294967295
 8012f0e:	608a      	str	r2, [r1, #8]
 8012f10:	6822      	ldr	r2, [r4, #0]
 8012f12:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8012fa0 <_scanf_chars+0xac>
 8012f16:	06d1      	lsls	r1, r2, #27
 8012f18:	bf5f      	itttt	pl
 8012f1a:	681a      	ldrpl	r2, [r3, #0]
 8012f1c:	1d11      	addpl	r1, r2, #4
 8012f1e:	6019      	strpl	r1, [r3, #0]
 8012f20:	6816      	ldrpl	r6, [r2, #0]
 8012f22:	2700      	movs	r7, #0
 8012f24:	69a0      	ldr	r0, [r4, #24]
 8012f26:	b188      	cbz	r0, 8012f4c <_scanf_chars+0x58>
 8012f28:	2801      	cmp	r0, #1
 8012f2a:	d107      	bne.n	8012f3c <_scanf_chars+0x48>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	781a      	ldrb	r2, [r3, #0]
 8012f30:	6963      	ldr	r3, [r4, #20]
 8012f32:	5c9b      	ldrb	r3, [r3, r2]
 8012f34:	b953      	cbnz	r3, 8012f4c <_scanf_chars+0x58>
 8012f36:	bb27      	cbnz	r7, 8012f82 <_scanf_chars+0x8e>
 8012f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f3c:	2802      	cmp	r0, #2
 8012f3e:	d120      	bne.n	8012f82 <_scanf_chars+0x8e>
 8012f40:	682b      	ldr	r3, [r5, #0]
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012f48:	071b      	lsls	r3, r3, #28
 8012f4a:	d41a      	bmi.n	8012f82 <_scanf_chars+0x8e>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	06da      	lsls	r2, r3, #27
 8012f50:	bf5e      	ittt	pl
 8012f52:	682b      	ldrpl	r3, [r5, #0]
 8012f54:	781b      	ldrbpl	r3, [r3, #0]
 8012f56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012f5a:	682a      	ldr	r2, [r5, #0]
 8012f5c:	686b      	ldr	r3, [r5, #4]
 8012f5e:	3201      	adds	r2, #1
 8012f60:	602a      	str	r2, [r5, #0]
 8012f62:	68a2      	ldr	r2, [r4, #8]
 8012f64:	3b01      	subs	r3, #1
 8012f66:	3a01      	subs	r2, #1
 8012f68:	606b      	str	r3, [r5, #4]
 8012f6a:	3701      	adds	r7, #1
 8012f6c:	60a2      	str	r2, [r4, #8]
 8012f6e:	b142      	cbz	r2, 8012f82 <_scanf_chars+0x8e>
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	dcd7      	bgt.n	8012f24 <_scanf_chars+0x30>
 8012f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f78:	4629      	mov	r1, r5
 8012f7a:	4640      	mov	r0, r8
 8012f7c:	4798      	blx	r3
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d0d0      	beq.n	8012f24 <_scanf_chars+0x30>
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	f013 0310 	ands.w	r3, r3, #16
 8012f88:	d105      	bne.n	8012f96 <_scanf_chars+0xa2>
 8012f8a:	68e2      	ldr	r2, [r4, #12]
 8012f8c:	3201      	adds	r2, #1
 8012f8e:	60e2      	str	r2, [r4, #12]
 8012f90:	69a2      	ldr	r2, [r4, #24]
 8012f92:	b102      	cbz	r2, 8012f96 <_scanf_chars+0xa2>
 8012f94:	7033      	strb	r3, [r6, #0]
 8012f96:	6923      	ldr	r3, [r4, #16]
 8012f98:	441f      	add	r7, r3
 8012f9a:	6127      	str	r7, [r4, #16]
 8012f9c:	2000      	movs	r0, #0
 8012f9e:	e7cb      	b.n	8012f38 <_scanf_chars+0x44>
 8012fa0:	08015d35 	.word	0x08015d35

08012fa4 <_scanf_i>:
 8012fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa8:	4698      	mov	r8, r3
 8012faa:	4b74      	ldr	r3, [pc, #464]	; (801317c <_scanf_i+0x1d8>)
 8012fac:	460c      	mov	r4, r1
 8012fae:	4682      	mov	sl, r0
 8012fb0:	4616      	mov	r6, r2
 8012fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012fb6:	b087      	sub	sp, #28
 8012fb8:	ab03      	add	r3, sp, #12
 8012fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012fbe:	4b70      	ldr	r3, [pc, #448]	; (8013180 <_scanf_i+0x1dc>)
 8012fc0:	69a1      	ldr	r1, [r4, #24]
 8012fc2:	4a70      	ldr	r2, [pc, #448]	; (8013184 <_scanf_i+0x1e0>)
 8012fc4:	2903      	cmp	r1, #3
 8012fc6:	bf18      	it	ne
 8012fc8:	461a      	movne	r2, r3
 8012fca:	68a3      	ldr	r3, [r4, #8]
 8012fcc:	9201      	str	r2, [sp, #4]
 8012fce:	1e5a      	subs	r2, r3, #1
 8012fd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012fd4:	bf88      	it	hi
 8012fd6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012fda:	4627      	mov	r7, r4
 8012fdc:	bf82      	ittt	hi
 8012fde:	eb03 0905 	addhi.w	r9, r3, r5
 8012fe2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012fe6:	60a3      	strhi	r3, [r4, #8]
 8012fe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012fec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012ff0:	bf98      	it	ls
 8012ff2:	f04f 0900 	movls.w	r9, #0
 8012ff6:	6023      	str	r3, [r4, #0]
 8012ff8:	463d      	mov	r5, r7
 8012ffa:	f04f 0b00 	mov.w	fp, #0
 8012ffe:	6831      	ldr	r1, [r6, #0]
 8013000:	ab03      	add	r3, sp, #12
 8013002:	7809      	ldrb	r1, [r1, #0]
 8013004:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013008:	2202      	movs	r2, #2
 801300a:	f7ed f8f9 	bl	8000200 <memchr>
 801300e:	b328      	cbz	r0, 801305c <_scanf_i+0xb8>
 8013010:	f1bb 0f01 	cmp.w	fp, #1
 8013014:	d159      	bne.n	80130ca <_scanf_i+0x126>
 8013016:	6862      	ldr	r2, [r4, #4]
 8013018:	b92a      	cbnz	r2, 8013026 <_scanf_i+0x82>
 801301a:	6822      	ldr	r2, [r4, #0]
 801301c:	2308      	movs	r3, #8
 801301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013022:	6063      	str	r3, [r4, #4]
 8013024:	6022      	str	r2, [r4, #0]
 8013026:	6822      	ldr	r2, [r4, #0]
 8013028:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801302c:	6022      	str	r2, [r4, #0]
 801302e:	68a2      	ldr	r2, [r4, #8]
 8013030:	1e51      	subs	r1, r2, #1
 8013032:	60a1      	str	r1, [r4, #8]
 8013034:	b192      	cbz	r2, 801305c <_scanf_i+0xb8>
 8013036:	6832      	ldr	r2, [r6, #0]
 8013038:	1c51      	adds	r1, r2, #1
 801303a:	6031      	str	r1, [r6, #0]
 801303c:	7812      	ldrb	r2, [r2, #0]
 801303e:	f805 2b01 	strb.w	r2, [r5], #1
 8013042:	6872      	ldr	r2, [r6, #4]
 8013044:	3a01      	subs	r2, #1
 8013046:	2a00      	cmp	r2, #0
 8013048:	6072      	str	r2, [r6, #4]
 801304a:	dc07      	bgt.n	801305c <_scanf_i+0xb8>
 801304c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013050:	4631      	mov	r1, r6
 8013052:	4650      	mov	r0, sl
 8013054:	4790      	blx	r2
 8013056:	2800      	cmp	r0, #0
 8013058:	f040 8085 	bne.w	8013166 <_scanf_i+0x1c2>
 801305c:	f10b 0b01 	add.w	fp, fp, #1
 8013060:	f1bb 0f03 	cmp.w	fp, #3
 8013064:	d1cb      	bne.n	8012ffe <_scanf_i+0x5a>
 8013066:	6863      	ldr	r3, [r4, #4]
 8013068:	b90b      	cbnz	r3, 801306e <_scanf_i+0xca>
 801306a:	230a      	movs	r3, #10
 801306c:	6063      	str	r3, [r4, #4]
 801306e:	6863      	ldr	r3, [r4, #4]
 8013070:	4945      	ldr	r1, [pc, #276]	; (8013188 <_scanf_i+0x1e4>)
 8013072:	6960      	ldr	r0, [r4, #20]
 8013074:	1ac9      	subs	r1, r1, r3
 8013076:	f000 f8b3 	bl	80131e0 <__sccl>
 801307a:	f04f 0b00 	mov.w	fp, #0
 801307e:	68a3      	ldr	r3, [r4, #8]
 8013080:	6822      	ldr	r2, [r4, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d03d      	beq.n	8013102 <_scanf_i+0x15e>
 8013086:	6831      	ldr	r1, [r6, #0]
 8013088:	6960      	ldr	r0, [r4, #20]
 801308a:	f891 c000 	ldrb.w	ip, [r1]
 801308e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013092:	2800      	cmp	r0, #0
 8013094:	d035      	beq.n	8013102 <_scanf_i+0x15e>
 8013096:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801309a:	d124      	bne.n	80130e6 <_scanf_i+0x142>
 801309c:	0510      	lsls	r0, r2, #20
 801309e:	d522      	bpl.n	80130e6 <_scanf_i+0x142>
 80130a0:	f10b 0b01 	add.w	fp, fp, #1
 80130a4:	f1b9 0f00 	cmp.w	r9, #0
 80130a8:	d003      	beq.n	80130b2 <_scanf_i+0x10e>
 80130aa:	3301      	adds	r3, #1
 80130ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80130b0:	60a3      	str	r3, [r4, #8]
 80130b2:	6873      	ldr	r3, [r6, #4]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	6073      	str	r3, [r6, #4]
 80130ba:	dd1b      	ble.n	80130f4 <_scanf_i+0x150>
 80130bc:	6833      	ldr	r3, [r6, #0]
 80130be:	3301      	adds	r3, #1
 80130c0:	6033      	str	r3, [r6, #0]
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	60a3      	str	r3, [r4, #8]
 80130c8:	e7d9      	b.n	801307e <_scanf_i+0xda>
 80130ca:	f1bb 0f02 	cmp.w	fp, #2
 80130ce:	d1ae      	bne.n	801302e <_scanf_i+0x8a>
 80130d0:	6822      	ldr	r2, [r4, #0]
 80130d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80130d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80130da:	d1bf      	bne.n	801305c <_scanf_i+0xb8>
 80130dc:	2310      	movs	r3, #16
 80130de:	6063      	str	r3, [r4, #4]
 80130e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80130e4:	e7a2      	b.n	801302c <_scanf_i+0x88>
 80130e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80130ea:	6022      	str	r2, [r4, #0]
 80130ec:	780b      	ldrb	r3, [r1, #0]
 80130ee:	f805 3b01 	strb.w	r3, [r5], #1
 80130f2:	e7de      	b.n	80130b2 <_scanf_i+0x10e>
 80130f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80130f8:	4631      	mov	r1, r6
 80130fa:	4650      	mov	r0, sl
 80130fc:	4798      	blx	r3
 80130fe:	2800      	cmp	r0, #0
 8013100:	d0df      	beq.n	80130c2 <_scanf_i+0x11e>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	05d9      	lsls	r1, r3, #23
 8013106:	d50d      	bpl.n	8013124 <_scanf_i+0x180>
 8013108:	42bd      	cmp	r5, r7
 801310a:	d909      	bls.n	8013120 <_scanf_i+0x17c>
 801310c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013114:	4632      	mov	r2, r6
 8013116:	4650      	mov	r0, sl
 8013118:	4798      	blx	r3
 801311a:	f105 39ff 	add.w	r9, r5, #4294967295
 801311e:	464d      	mov	r5, r9
 8013120:	42bd      	cmp	r5, r7
 8013122:	d028      	beq.n	8013176 <_scanf_i+0x1d2>
 8013124:	6822      	ldr	r2, [r4, #0]
 8013126:	f012 0210 	ands.w	r2, r2, #16
 801312a:	d113      	bne.n	8013154 <_scanf_i+0x1b0>
 801312c:	702a      	strb	r2, [r5, #0]
 801312e:	6863      	ldr	r3, [r4, #4]
 8013130:	9e01      	ldr	r6, [sp, #4]
 8013132:	4639      	mov	r1, r7
 8013134:	4650      	mov	r0, sl
 8013136:	47b0      	blx	r6
 8013138:	f8d8 3000 	ldr.w	r3, [r8]
 801313c:	6821      	ldr	r1, [r4, #0]
 801313e:	1d1a      	adds	r2, r3, #4
 8013140:	f8c8 2000 	str.w	r2, [r8]
 8013144:	f011 0f20 	tst.w	r1, #32
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	d00f      	beq.n	801316c <_scanf_i+0x1c8>
 801314c:	6018      	str	r0, [r3, #0]
 801314e:	68e3      	ldr	r3, [r4, #12]
 8013150:	3301      	adds	r3, #1
 8013152:	60e3      	str	r3, [r4, #12]
 8013154:	1bed      	subs	r5, r5, r7
 8013156:	44ab      	add	fp, r5
 8013158:	6925      	ldr	r5, [r4, #16]
 801315a:	445d      	add	r5, fp
 801315c:	6125      	str	r5, [r4, #16]
 801315e:	2000      	movs	r0, #0
 8013160:	b007      	add	sp, #28
 8013162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013166:	f04f 0b00 	mov.w	fp, #0
 801316a:	e7ca      	b.n	8013102 <_scanf_i+0x15e>
 801316c:	07ca      	lsls	r2, r1, #31
 801316e:	bf4c      	ite	mi
 8013170:	8018      	strhmi	r0, [r3, #0]
 8013172:	6018      	strpl	r0, [r3, #0]
 8013174:	e7eb      	b.n	801314e <_scanf_i+0x1aa>
 8013176:	2001      	movs	r0, #1
 8013178:	e7f2      	b.n	8013160 <_scanf_i+0x1bc>
 801317a:	bf00      	nop
 801317c:	08015cf8 	.word	0x08015cf8
 8013180:	0801334d 	.word	0x0801334d
 8013184:	08010939 	.word	0x08010939
 8013188:	08016166 	.word	0x08016166

0801318c <_read_r>:
 801318c:	b538      	push	{r3, r4, r5, lr}
 801318e:	4d07      	ldr	r5, [pc, #28]	; (80131ac <_read_r+0x20>)
 8013190:	4604      	mov	r4, r0
 8013192:	4608      	mov	r0, r1
 8013194:	4611      	mov	r1, r2
 8013196:	2200      	movs	r2, #0
 8013198:	602a      	str	r2, [r5, #0]
 801319a:	461a      	mov	r2, r3
 801319c:	f7f4 fc94 	bl	8007ac8 <_read>
 80131a0:	1c43      	adds	r3, r0, #1
 80131a2:	d102      	bne.n	80131aa <_read_r+0x1e>
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	b103      	cbz	r3, 80131aa <_read_r+0x1e>
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	bd38      	pop	{r3, r4, r5, pc}
 80131ac:	20002eb8 	.word	0x20002eb8

080131b0 <nan>:
 80131b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80131b8 <nan+0x8>
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop
 80131b8:	00000000 	.word	0x00000000
 80131bc:	7ff80000 	.word	0x7ff80000

080131c0 <_sbrk_r>:
 80131c0:	b538      	push	{r3, r4, r5, lr}
 80131c2:	4d06      	ldr	r5, [pc, #24]	; (80131dc <_sbrk_r+0x1c>)
 80131c4:	2300      	movs	r3, #0
 80131c6:	4604      	mov	r4, r0
 80131c8:	4608      	mov	r0, r1
 80131ca:	602b      	str	r3, [r5, #0]
 80131cc:	f7f4 fcea 	bl	8007ba4 <_sbrk>
 80131d0:	1c43      	adds	r3, r0, #1
 80131d2:	d102      	bne.n	80131da <_sbrk_r+0x1a>
 80131d4:	682b      	ldr	r3, [r5, #0]
 80131d6:	b103      	cbz	r3, 80131da <_sbrk_r+0x1a>
 80131d8:	6023      	str	r3, [r4, #0]
 80131da:	bd38      	pop	{r3, r4, r5, pc}
 80131dc:	20002eb8 	.word	0x20002eb8

080131e0 <__sccl>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	780b      	ldrb	r3, [r1, #0]
 80131e4:	4604      	mov	r4, r0
 80131e6:	2b5e      	cmp	r3, #94	; 0x5e
 80131e8:	bf0b      	itete	eq
 80131ea:	784b      	ldrbeq	r3, [r1, #1]
 80131ec:	1c48      	addne	r0, r1, #1
 80131ee:	1c88      	addeq	r0, r1, #2
 80131f0:	2200      	movne	r2, #0
 80131f2:	bf08      	it	eq
 80131f4:	2201      	moveq	r2, #1
 80131f6:	1e61      	subs	r1, r4, #1
 80131f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80131fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013200:	42a9      	cmp	r1, r5
 8013202:	d1fb      	bne.n	80131fc <__sccl+0x1c>
 8013204:	b90b      	cbnz	r3, 801320a <__sccl+0x2a>
 8013206:	3801      	subs	r0, #1
 8013208:	bd70      	pop	{r4, r5, r6, pc}
 801320a:	f082 0101 	eor.w	r1, r2, #1
 801320e:	54e1      	strb	r1, [r4, r3]
 8013210:	1c42      	adds	r2, r0, #1
 8013212:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8013216:	2d2d      	cmp	r5, #45	; 0x2d
 8013218:	f102 36ff 	add.w	r6, r2, #4294967295
 801321c:	4610      	mov	r0, r2
 801321e:	d006      	beq.n	801322e <__sccl+0x4e>
 8013220:	2d5d      	cmp	r5, #93	; 0x5d
 8013222:	d0f1      	beq.n	8013208 <__sccl+0x28>
 8013224:	b90d      	cbnz	r5, 801322a <__sccl+0x4a>
 8013226:	4630      	mov	r0, r6
 8013228:	e7ee      	b.n	8013208 <__sccl+0x28>
 801322a:	462b      	mov	r3, r5
 801322c:	e7ef      	b.n	801320e <__sccl+0x2e>
 801322e:	7816      	ldrb	r6, [r2, #0]
 8013230:	2e5d      	cmp	r6, #93	; 0x5d
 8013232:	d0fa      	beq.n	801322a <__sccl+0x4a>
 8013234:	42b3      	cmp	r3, r6
 8013236:	dcf8      	bgt.n	801322a <__sccl+0x4a>
 8013238:	4618      	mov	r0, r3
 801323a:	3001      	adds	r0, #1
 801323c:	4286      	cmp	r6, r0
 801323e:	5421      	strb	r1, [r4, r0]
 8013240:	dcfb      	bgt.n	801323a <__sccl+0x5a>
 8013242:	43d8      	mvns	r0, r3
 8013244:	4430      	add	r0, r6
 8013246:	1c5d      	adds	r5, r3, #1
 8013248:	42b3      	cmp	r3, r6
 801324a:	bfa8      	it	ge
 801324c:	2000      	movge	r0, #0
 801324e:	182b      	adds	r3, r5, r0
 8013250:	3202      	adds	r2, #2
 8013252:	e7de      	b.n	8013212 <__sccl+0x32>

08013254 <_strtoul_l.isra.0>:
 8013254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013258:	4e3b      	ldr	r6, [pc, #236]	; (8013348 <_strtoul_l.isra.0+0xf4>)
 801325a:	4686      	mov	lr, r0
 801325c:	468c      	mov	ip, r1
 801325e:	4660      	mov	r0, ip
 8013260:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013264:	5da5      	ldrb	r5, [r4, r6]
 8013266:	f015 0508 	ands.w	r5, r5, #8
 801326a:	d1f8      	bne.n	801325e <_strtoul_l.isra.0+0xa>
 801326c:	2c2d      	cmp	r4, #45	; 0x2d
 801326e:	d134      	bne.n	80132da <_strtoul_l.isra.0+0x86>
 8013270:	f89c 4000 	ldrb.w	r4, [ip]
 8013274:	f04f 0801 	mov.w	r8, #1
 8013278:	f100 0c02 	add.w	ip, r0, #2
 801327c:	2b00      	cmp	r3, #0
 801327e:	d05e      	beq.n	801333e <_strtoul_l.isra.0+0xea>
 8013280:	2b10      	cmp	r3, #16
 8013282:	d10c      	bne.n	801329e <_strtoul_l.isra.0+0x4a>
 8013284:	2c30      	cmp	r4, #48	; 0x30
 8013286:	d10a      	bne.n	801329e <_strtoul_l.isra.0+0x4a>
 8013288:	f89c 0000 	ldrb.w	r0, [ip]
 801328c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013290:	2858      	cmp	r0, #88	; 0x58
 8013292:	d14f      	bne.n	8013334 <_strtoul_l.isra.0+0xe0>
 8013294:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013298:	2310      	movs	r3, #16
 801329a:	f10c 0c02 	add.w	ip, ip, #2
 801329e:	f04f 37ff 	mov.w	r7, #4294967295
 80132a2:	2500      	movs	r5, #0
 80132a4:	fbb7 f7f3 	udiv	r7, r7, r3
 80132a8:	fb03 f907 	mul.w	r9, r3, r7
 80132ac:	ea6f 0909 	mvn.w	r9, r9
 80132b0:	4628      	mov	r0, r5
 80132b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80132b6:	2e09      	cmp	r6, #9
 80132b8:	d818      	bhi.n	80132ec <_strtoul_l.isra.0+0x98>
 80132ba:	4634      	mov	r4, r6
 80132bc:	42a3      	cmp	r3, r4
 80132be:	dd24      	ble.n	801330a <_strtoul_l.isra.0+0xb6>
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	db1f      	blt.n	8013304 <_strtoul_l.isra.0+0xb0>
 80132c4:	4287      	cmp	r7, r0
 80132c6:	d31d      	bcc.n	8013304 <_strtoul_l.isra.0+0xb0>
 80132c8:	d101      	bne.n	80132ce <_strtoul_l.isra.0+0x7a>
 80132ca:	45a1      	cmp	r9, r4
 80132cc:	db1a      	blt.n	8013304 <_strtoul_l.isra.0+0xb0>
 80132ce:	fb00 4003 	mla	r0, r0, r3, r4
 80132d2:	2501      	movs	r5, #1
 80132d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80132d8:	e7eb      	b.n	80132b2 <_strtoul_l.isra.0+0x5e>
 80132da:	2c2b      	cmp	r4, #43	; 0x2b
 80132dc:	bf08      	it	eq
 80132de:	f89c 4000 	ldrbeq.w	r4, [ip]
 80132e2:	46a8      	mov	r8, r5
 80132e4:	bf08      	it	eq
 80132e6:	f100 0c02 	addeq.w	ip, r0, #2
 80132ea:	e7c7      	b.n	801327c <_strtoul_l.isra.0+0x28>
 80132ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80132f0:	2e19      	cmp	r6, #25
 80132f2:	d801      	bhi.n	80132f8 <_strtoul_l.isra.0+0xa4>
 80132f4:	3c37      	subs	r4, #55	; 0x37
 80132f6:	e7e1      	b.n	80132bc <_strtoul_l.isra.0+0x68>
 80132f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80132fc:	2e19      	cmp	r6, #25
 80132fe:	d804      	bhi.n	801330a <_strtoul_l.isra.0+0xb6>
 8013300:	3c57      	subs	r4, #87	; 0x57
 8013302:	e7db      	b.n	80132bc <_strtoul_l.isra.0+0x68>
 8013304:	f04f 35ff 	mov.w	r5, #4294967295
 8013308:	e7e4      	b.n	80132d4 <_strtoul_l.isra.0+0x80>
 801330a:	2d00      	cmp	r5, #0
 801330c:	da07      	bge.n	801331e <_strtoul_l.isra.0+0xca>
 801330e:	2322      	movs	r3, #34	; 0x22
 8013310:	f8ce 3000 	str.w	r3, [lr]
 8013314:	f04f 30ff 	mov.w	r0, #4294967295
 8013318:	b942      	cbnz	r2, 801332c <_strtoul_l.isra.0+0xd8>
 801331a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801331e:	f1b8 0f00 	cmp.w	r8, #0
 8013322:	d000      	beq.n	8013326 <_strtoul_l.isra.0+0xd2>
 8013324:	4240      	negs	r0, r0
 8013326:	2a00      	cmp	r2, #0
 8013328:	d0f7      	beq.n	801331a <_strtoul_l.isra.0+0xc6>
 801332a:	b10d      	cbz	r5, 8013330 <_strtoul_l.isra.0+0xdc>
 801332c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013330:	6011      	str	r1, [r2, #0]
 8013332:	e7f2      	b.n	801331a <_strtoul_l.isra.0+0xc6>
 8013334:	2430      	movs	r4, #48	; 0x30
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1b1      	bne.n	801329e <_strtoul_l.isra.0+0x4a>
 801333a:	2308      	movs	r3, #8
 801333c:	e7af      	b.n	801329e <_strtoul_l.isra.0+0x4a>
 801333e:	2c30      	cmp	r4, #48	; 0x30
 8013340:	d0a2      	beq.n	8013288 <_strtoul_l.isra.0+0x34>
 8013342:	230a      	movs	r3, #10
 8013344:	e7ab      	b.n	801329e <_strtoul_l.isra.0+0x4a>
 8013346:	bf00      	nop
 8013348:	08015d35 	.word	0x08015d35

0801334c <_strtoul_r>:
 801334c:	f7ff bf82 	b.w	8013254 <_strtoul_l.isra.0>

08013350 <__submore>:
 8013350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013354:	460c      	mov	r4, r1
 8013356:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801335c:	4299      	cmp	r1, r3
 801335e:	d11d      	bne.n	801339c <__submore+0x4c>
 8013360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013364:	f7ff fa3e 	bl	80127e4 <_malloc_r>
 8013368:	b918      	cbnz	r0, 8013372 <__submore+0x22>
 801336a:	f04f 30ff 	mov.w	r0, #4294967295
 801336e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013376:	63a3      	str	r3, [r4, #56]	; 0x38
 8013378:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801337c:	6360      	str	r0, [r4, #52]	; 0x34
 801337e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013382:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013386:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801338a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801338e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013392:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013396:	6020      	str	r0, [r4, #0]
 8013398:	2000      	movs	r0, #0
 801339a:	e7e8      	b.n	801336e <__submore+0x1e>
 801339c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801339e:	0077      	lsls	r7, r6, #1
 80133a0:	463a      	mov	r2, r7
 80133a2:	f000 fa2d 	bl	8013800 <_realloc_r>
 80133a6:	4605      	mov	r5, r0
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d0de      	beq.n	801336a <__submore+0x1a>
 80133ac:	eb00 0806 	add.w	r8, r0, r6
 80133b0:	4601      	mov	r1, r0
 80133b2:	4632      	mov	r2, r6
 80133b4:	4640      	mov	r0, r8
 80133b6:	f7fb fcd3 	bl	800ed60 <memcpy>
 80133ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80133be:	f8c4 8000 	str.w	r8, [r4]
 80133c2:	e7e9      	b.n	8013398 <__submore+0x48>

080133c4 <__ascii_wctomb>:
 80133c4:	b149      	cbz	r1, 80133da <__ascii_wctomb+0x16>
 80133c6:	2aff      	cmp	r2, #255	; 0xff
 80133c8:	bf85      	ittet	hi
 80133ca:	238a      	movhi	r3, #138	; 0x8a
 80133cc:	6003      	strhi	r3, [r0, #0]
 80133ce:	700a      	strbls	r2, [r1, #0]
 80133d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80133d4:	bf98      	it	ls
 80133d6:	2001      	movls	r0, #1
 80133d8:	4770      	bx	lr
 80133da:	4608      	mov	r0, r1
 80133dc:	4770      	bx	lr
	...

080133e0 <__assert_func>:
 80133e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80133e2:	4614      	mov	r4, r2
 80133e4:	461a      	mov	r2, r3
 80133e6:	4b09      	ldr	r3, [pc, #36]	; (801340c <__assert_func+0x2c>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4605      	mov	r5, r0
 80133ec:	68d8      	ldr	r0, [r3, #12]
 80133ee:	b14c      	cbz	r4, 8013404 <__assert_func+0x24>
 80133f0:	4b07      	ldr	r3, [pc, #28]	; (8013410 <__assert_func+0x30>)
 80133f2:	9100      	str	r1, [sp, #0]
 80133f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133f8:	4906      	ldr	r1, [pc, #24]	; (8013414 <__assert_func+0x34>)
 80133fa:	462b      	mov	r3, r5
 80133fc:	f000 f9a6 	bl	801374c <fiprintf>
 8013400:	f000 fc3e 	bl	8013c80 <abort>
 8013404:	4b04      	ldr	r3, [pc, #16]	; (8013418 <__assert_func+0x38>)
 8013406:	461c      	mov	r4, r3
 8013408:	e7f3      	b.n	80133f2 <__assert_func+0x12>
 801340a:	bf00      	nop
 801340c:	20000274 	.word	0x20000274
 8013410:	08016168 	.word	0x08016168
 8013414:	08016175 	.word	0x08016175
 8013418:	080161a3 	.word	0x080161a3

0801341c <__sflush_r>:
 801341c:	898a      	ldrh	r2, [r1, #12]
 801341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	0710      	lsls	r0, r2, #28
 8013426:	460c      	mov	r4, r1
 8013428:	d458      	bmi.n	80134dc <__sflush_r+0xc0>
 801342a:	684b      	ldr	r3, [r1, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	dc05      	bgt.n	801343c <__sflush_r+0x20>
 8013430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013432:	2b00      	cmp	r3, #0
 8013434:	dc02      	bgt.n	801343c <__sflush_r+0x20>
 8013436:	2000      	movs	r0, #0
 8013438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801343e:	2e00      	cmp	r6, #0
 8013440:	d0f9      	beq.n	8013436 <__sflush_r+0x1a>
 8013442:	2300      	movs	r3, #0
 8013444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013448:	682f      	ldr	r7, [r5, #0]
 801344a:	602b      	str	r3, [r5, #0]
 801344c:	d032      	beq.n	80134b4 <__sflush_r+0x98>
 801344e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013450:	89a3      	ldrh	r3, [r4, #12]
 8013452:	075a      	lsls	r2, r3, #29
 8013454:	d505      	bpl.n	8013462 <__sflush_r+0x46>
 8013456:	6863      	ldr	r3, [r4, #4]
 8013458:	1ac0      	subs	r0, r0, r3
 801345a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801345c:	b10b      	cbz	r3, 8013462 <__sflush_r+0x46>
 801345e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013460:	1ac0      	subs	r0, r0, r3
 8013462:	2300      	movs	r3, #0
 8013464:	4602      	mov	r2, r0
 8013466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013468:	6a21      	ldr	r1, [r4, #32]
 801346a:	4628      	mov	r0, r5
 801346c:	47b0      	blx	r6
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	89a3      	ldrh	r3, [r4, #12]
 8013472:	d106      	bne.n	8013482 <__sflush_r+0x66>
 8013474:	6829      	ldr	r1, [r5, #0]
 8013476:	291d      	cmp	r1, #29
 8013478:	d82c      	bhi.n	80134d4 <__sflush_r+0xb8>
 801347a:	4a2a      	ldr	r2, [pc, #168]	; (8013524 <__sflush_r+0x108>)
 801347c:	40ca      	lsrs	r2, r1
 801347e:	07d6      	lsls	r6, r2, #31
 8013480:	d528      	bpl.n	80134d4 <__sflush_r+0xb8>
 8013482:	2200      	movs	r2, #0
 8013484:	6062      	str	r2, [r4, #4]
 8013486:	04d9      	lsls	r1, r3, #19
 8013488:	6922      	ldr	r2, [r4, #16]
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	d504      	bpl.n	8013498 <__sflush_r+0x7c>
 801348e:	1c42      	adds	r2, r0, #1
 8013490:	d101      	bne.n	8013496 <__sflush_r+0x7a>
 8013492:	682b      	ldr	r3, [r5, #0]
 8013494:	b903      	cbnz	r3, 8013498 <__sflush_r+0x7c>
 8013496:	6560      	str	r0, [r4, #84]	; 0x54
 8013498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801349a:	602f      	str	r7, [r5, #0]
 801349c:	2900      	cmp	r1, #0
 801349e:	d0ca      	beq.n	8013436 <__sflush_r+0x1a>
 80134a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134a4:	4299      	cmp	r1, r3
 80134a6:	d002      	beq.n	80134ae <__sflush_r+0x92>
 80134a8:	4628      	mov	r0, r5
 80134aa:	f7ff f94b 	bl	8012744 <_free_r>
 80134ae:	2000      	movs	r0, #0
 80134b0:	6360      	str	r0, [r4, #52]	; 0x34
 80134b2:	e7c1      	b.n	8013438 <__sflush_r+0x1c>
 80134b4:	6a21      	ldr	r1, [r4, #32]
 80134b6:	2301      	movs	r3, #1
 80134b8:	4628      	mov	r0, r5
 80134ba:	47b0      	blx	r6
 80134bc:	1c41      	adds	r1, r0, #1
 80134be:	d1c7      	bne.n	8013450 <__sflush_r+0x34>
 80134c0:	682b      	ldr	r3, [r5, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d0c4      	beq.n	8013450 <__sflush_r+0x34>
 80134c6:	2b1d      	cmp	r3, #29
 80134c8:	d001      	beq.n	80134ce <__sflush_r+0xb2>
 80134ca:	2b16      	cmp	r3, #22
 80134cc:	d101      	bne.n	80134d2 <__sflush_r+0xb6>
 80134ce:	602f      	str	r7, [r5, #0]
 80134d0:	e7b1      	b.n	8013436 <__sflush_r+0x1a>
 80134d2:	89a3      	ldrh	r3, [r4, #12]
 80134d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	e7ad      	b.n	8013438 <__sflush_r+0x1c>
 80134dc:	690f      	ldr	r7, [r1, #16]
 80134de:	2f00      	cmp	r7, #0
 80134e0:	d0a9      	beq.n	8013436 <__sflush_r+0x1a>
 80134e2:	0793      	lsls	r3, r2, #30
 80134e4:	680e      	ldr	r6, [r1, #0]
 80134e6:	bf08      	it	eq
 80134e8:	694b      	ldreq	r3, [r1, #20]
 80134ea:	600f      	str	r7, [r1, #0]
 80134ec:	bf18      	it	ne
 80134ee:	2300      	movne	r3, #0
 80134f0:	eba6 0807 	sub.w	r8, r6, r7
 80134f4:	608b      	str	r3, [r1, #8]
 80134f6:	f1b8 0f00 	cmp.w	r8, #0
 80134fa:	dd9c      	ble.n	8013436 <__sflush_r+0x1a>
 80134fc:	6a21      	ldr	r1, [r4, #32]
 80134fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013500:	4643      	mov	r3, r8
 8013502:	463a      	mov	r2, r7
 8013504:	4628      	mov	r0, r5
 8013506:	47b0      	blx	r6
 8013508:	2800      	cmp	r0, #0
 801350a:	dc06      	bgt.n	801351a <__sflush_r+0xfe>
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013512:	81a3      	strh	r3, [r4, #12]
 8013514:	f04f 30ff 	mov.w	r0, #4294967295
 8013518:	e78e      	b.n	8013438 <__sflush_r+0x1c>
 801351a:	4407      	add	r7, r0
 801351c:	eba8 0800 	sub.w	r8, r8, r0
 8013520:	e7e9      	b.n	80134f6 <__sflush_r+0xda>
 8013522:	bf00      	nop
 8013524:	20400001 	.word	0x20400001

08013528 <_fflush_r>:
 8013528:	b538      	push	{r3, r4, r5, lr}
 801352a:	690b      	ldr	r3, [r1, #16]
 801352c:	4605      	mov	r5, r0
 801352e:	460c      	mov	r4, r1
 8013530:	b913      	cbnz	r3, 8013538 <_fflush_r+0x10>
 8013532:	2500      	movs	r5, #0
 8013534:	4628      	mov	r0, r5
 8013536:	bd38      	pop	{r3, r4, r5, pc}
 8013538:	b118      	cbz	r0, 8013542 <_fflush_r+0x1a>
 801353a:	6983      	ldr	r3, [r0, #24]
 801353c:	b90b      	cbnz	r3, 8013542 <_fflush_r+0x1a>
 801353e:	f000 f887 	bl	8013650 <__sinit>
 8013542:	4b14      	ldr	r3, [pc, #80]	; (8013594 <_fflush_r+0x6c>)
 8013544:	429c      	cmp	r4, r3
 8013546:	d11b      	bne.n	8013580 <_fflush_r+0x58>
 8013548:	686c      	ldr	r4, [r5, #4]
 801354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d0ef      	beq.n	8013532 <_fflush_r+0xa>
 8013552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013554:	07d0      	lsls	r0, r2, #31
 8013556:	d404      	bmi.n	8013562 <_fflush_r+0x3a>
 8013558:	0599      	lsls	r1, r3, #22
 801355a:	d402      	bmi.n	8013562 <_fflush_r+0x3a>
 801355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801355e:	f000 f927 	bl	80137b0 <__retarget_lock_acquire_recursive>
 8013562:	4628      	mov	r0, r5
 8013564:	4621      	mov	r1, r4
 8013566:	f7ff ff59 	bl	801341c <__sflush_r>
 801356a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801356c:	07da      	lsls	r2, r3, #31
 801356e:	4605      	mov	r5, r0
 8013570:	d4e0      	bmi.n	8013534 <_fflush_r+0xc>
 8013572:	89a3      	ldrh	r3, [r4, #12]
 8013574:	059b      	lsls	r3, r3, #22
 8013576:	d4dd      	bmi.n	8013534 <_fflush_r+0xc>
 8013578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801357a:	f000 f91a 	bl	80137b2 <__retarget_lock_release_recursive>
 801357e:	e7d9      	b.n	8013534 <_fflush_r+0xc>
 8013580:	4b05      	ldr	r3, [pc, #20]	; (8013598 <_fflush_r+0x70>)
 8013582:	429c      	cmp	r4, r3
 8013584:	d101      	bne.n	801358a <_fflush_r+0x62>
 8013586:	68ac      	ldr	r4, [r5, #8]
 8013588:	e7df      	b.n	801354a <_fflush_r+0x22>
 801358a:	4b04      	ldr	r3, [pc, #16]	; (801359c <_fflush_r+0x74>)
 801358c:	429c      	cmp	r4, r3
 801358e:	bf08      	it	eq
 8013590:	68ec      	ldreq	r4, [r5, #12]
 8013592:	e7da      	b.n	801354a <_fflush_r+0x22>
 8013594:	080161c4 	.word	0x080161c4
 8013598:	080161e4 	.word	0x080161e4
 801359c:	080161a4 	.word	0x080161a4

080135a0 <std>:
 80135a0:	2300      	movs	r3, #0
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	e9c0 3300 	strd	r3, r3, [r0]
 80135aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ae:	6083      	str	r3, [r0, #8]
 80135b0:	8181      	strh	r1, [r0, #12]
 80135b2:	6643      	str	r3, [r0, #100]	; 0x64
 80135b4:	81c2      	strh	r2, [r0, #14]
 80135b6:	6183      	str	r3, [r0, #24]
 80135b8:	4619      	mov	r1, r3
 80135ba:	2208      	movs	r2, #8
 80135bc:	305c      	adds	r0, #92	; 0x5c
 80135be:	f7fb fbdd 	bl	800ed7c <memset>
 80135c2:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <std+0x38>)
 80135c4:	6263      	str	r3, [r4, #36]	; 0x24
 80135c6:	4b05      	ldr	r3, [pc, #20]	; (80135dc <std+0x3c>)
 80135c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80135ca:	4b05      	ldr	r3, [pc, #20]	; (80135e0 <std+0x40>)
 80135cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135ce:	4b05      	ldr	r3, [pc, #20]	; (80135e4 <std+0x44>)
 80135d0:	6224      	str	r4, [r4, #32]
 80135d2:	6323      	str	r3, [r4, #48]	; 0x30
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	bf00      	nop
 80135d8:	0800fb25 	.word	0x0800fb25
 80135dc:	0800fb4b 	.word	0x0800fb4b
 80135e0:	0800fb83 	.word	0x0800fb83
 80135e4:	0800fba7 	.word	0x0800fba7

080135e8 <_cleanup_r>:
 80135e8:	4901      	ldr	r1, [pc, #4]	; (80135f0 <_cleanup_r+0x8>)
 80135ea:	f000 b8c1 	b.w	8013770 <_fwalk_reent>
 80135ee:	bf00      	nop
 80135f0:	08013529 	.word	0x08013529

080135f4 <__sfmoreglue>:
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	1e4a      	subs	r2, r1, #1
 80135f8:	2568      	movs	r5, #104	; 0x68
 80135fa:	4355      	muls	r5, r2
 80135fc:	460e      	mov	r6, r1
 80135fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013602:	f7ff f8ef 	bl	80127e4 <_malloc_r>
 8013606:	4604      	mov	r4, r0
 8013608:	b140      	cbz	r0, 801361c <__sfmoreglue+0x28>
 801360a:	2100      	movs	r1, #0
 801360c:	e9c0 1600 	strd	r1, r6, [r0]
 8013610:	300c      	adds	r0, #12
 8013612:	60a0      	str	r0, [r4, #8]
 8013614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013618:	f7fb fbb0 	bl	800ed7c <memset>
 801361c:	4620      	mov	r0, r4
 801361e:	bd70      	pop	{r4, r5, r6, pc}

08013620 <__sfp_lock_acquire>:
 8013620:	4801      	ldr	r0, [pc, #4]	; (8013628 <__sfp_lock_acquire+0x8>)
 8013622:	f000 b8c5 	b.w	80137b0 <__retarget_lock_acquire_recursive>
 8013626:	bf00      	nop
 8013628:	20002ec4 	.word	0x20002ec4

0801362c <__sfp_lock_release>:
 801362c:	4801      	ldr	r0, [pc, #4]	; (8013634 <__sfp_lock_release+0x8>)
 801362e:	f000 b8c0 	b.w	80137b2 <__retarget_lock_release_recursive>
 8013632:	bf00      	nop
 8013634:	20002ec4 	.word	0x20002ec4

08013638 <__sinit_lock_acquire>:
 8013638:	4801      	ldr	r0, [pc, #4]	; (8013640 <__sinit_lock_acquire+0x8>)
 801363a:	f000 b8b9 	b.w	80137b0 <__retarget_lock_acquire_recursive>
 801363e:	bf00      	nop
 8013640:	20002ebf 	.word	0x20002ebf

08013644 <__sinit_lock_release>:
 8013644:	4801      	ldr	r0, [pc, #4]	; (801364c <__sinit_lock_release+0x8>)
 8013646:	f000 b8b4 	b.w	80137b2 <__retarget_lock_release_recursive>
 801364a:	bf00      	nop
 801364c:	20002ebf 	.word	0x20002ebf

08013650 <__sinit>:
 8013650:	b510      	push	{r4, lr}
 8013652:	4604      	mov	r4, r0
 8013654:	f7ff fff0 	bl	8013638 <__sinit_lock_acquire>
 8013658:	69a3      	ldr	r3, [r4, #24]
 801365a:	b11b      	cbz	r3, 8013664 <__sinit+0x14>
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f7ff bff0 	b.w	8013644 <__sinit_lock_release>
 8013664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013668:	6523      	str	r3, [r4, #80]	; 0x50
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <__sinit+0x68>)
 801366c:	4a13      	ldr	r2, [pc, #76]	; (80136bc <__sinit+0x6c>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	62a2      	str	r2, [r4, #40]	; 0x28
 8013672:	42a3      	cmp	r3, r4
 8013674:	bf04      	itt	eq
 8013676:	2301      	moveq	r3, #1
 8013678:	61a3      	streq	r3, [r4, #24]
 801367a:	4620      	mov	r0, r4
 801367c:	f000 f820 	bl	80136c0 <__sfp>
 8013680:	6060      	str	r0, [r4, #4]
 8013682:	4620      	mov	r0, r4
 8013684:	f000 f81c 	bl	80136c0 <__sfp>
 8013688:	60a0      	str	r0, [r4, #8]
 801368a:	4620      	mov	r0, r4
 801368c:	f000 f818 	bl	80136c0 <__sfp>
 8013690:	2200      	movs	r2, #0
 8013692:	60e0      	str	r0, [r4, #12]
 8013694:	2104      	movs	r1, #4
 8013696:	6860      	ldr	r0, [r4, #4]
 8013698:	f7ff ff82 	bl	80135a0 <std>
 801369c:	68a0      	ldr	r0, [r4, #8]
 801369e:	2201      	movs	r2, #1
 80136a0:	2109      	movs	r1, #9
 80136a2:	f7ff ff7d 	bl	80135a0 <std>
 80136a6:	68e0      	ldr	r0, [r4, #12]
 80136a8:	2202      	movs	r2, #2
 80136aa:	2112      	movs	r1, #18
 80136ac:	f7ff ff78 	bl	80135a0 <std>
 80136b0:	2301      	movs	r3, #1
 80136b2:	61a3      	str	r3, [r4, #24]
 80136b4:	e7d2      	b.n	801365c <__sinit+0xc>
 80136b6:	bf00      	nop
 80136b8:	08015e38 	.word	0x08015e38
 80136bc:	080135e9 	.word	0x080135e9

080136c0 <__sfp>:
 80136c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c2:	4607      	mov	r7, r0
 80136c4:	f7ff ffac 	bl	8013620 <__sfp_lock_acquire>
 80136c8:	4b1e      	ldr	r3, [pc, #120]	; (8013744 <__sfp+0x84>)
 80136ca:	681e      	ldr	r6, [r3, #0]
 80136cc:	69b3      	ldr	r3, [r6, #24]
 80136ce:	b913      	cbnz	r3, 80136d6 <__sfp+0x16>
 80136d0:	4630      	mov	r0, r6
 80136d2:	f7ff ffbd 	bl	8013650 <__sinit>
 80136d6:	3648      	adds	r6, #72	; 0x48
 80136d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136dc:	3b01      	subs	r3, #1
 80136de:	d503      	bpl.n	80136e8 <__sfp+0x28>
 80136e0:	6833      	ldr	r3, [r6, #0]
 80136e2:	b30b      	cbz	r3, 8013728 <__sfp+0x68>
 80136e4:	6836      	ldr	r6, [r6, #0]
 80136e6:	e7f7      	b.n	80136d8 <__sfp+0x18>
 80136e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136ec:	b9d5      	cbnz	r5, 8013724 <__sfp+0x64>
 80136ee:	4b16      	ldr	r3, [pc, #88]	; (8013748 <__sfp+0x88>)
 80136f0:	60e3      	str	r3, [r4, #12]
 80136f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80136f6:	6665      	str	r5, [r4, #100]	; 0x64
 80136f8:	f000 f859 	bl	80137ae <__retarget_lock_init_recursive>
 80136fc:	f7ff ff96 	bl	801362c <__sfp_lock_release>
 8013700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013708:	6025      	str	r5, [r4, #0]
 801370a:	61a5      	str	r5, [r4, #24]
 801370c:	2208      	movs	r2, #8
 801370e:	4629      	mov	r1, r5
 8013710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013714:	f7fb fb32 	bl	800ed7c <memset>
 8013718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801371c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013720:	4620      	mov	r0, r4
 8013722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013724:	3468      	adds	r4, #104	; 0x68
 8013726:	e7d9      	b.n	80136dc <__sfp+0x1c>
 8013728:	2104      	movs	r1, #4
 801372a:	4638      	mov	r0, r7
 801372c:	f7ff ff62 	bl	80135f4 <__sfmoreglue>
 8013730:	4604      	mov	r4, r0
 8013732:	6030      	str	r0, [r6, #0]
 8013734:	2800      	cmp	r0, #0
 8013736:	d1d5      	bne.n	80136e4 <__sfp+0x24>
 8013738:	f7ff ff78 	bl	801362c <__sfp_lock_release>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	e7ee      	b.n	8013720 <__sfp+0x60>
 8013742:	bf00      	nop
 8013744:	08015e38 	.word	0x08015e38
 8013748:	ffff0001 	.word	0xffff0001

0801374c <fiprintf>:
 801374c:	b40e      	push	{r1, r2, r3}
 801374e:	b503      	push	{r0, r1, lr}
 8013750:	4601      	mov	r1, r0
 8013752:	ab03      	add	r3, sp, #12
 8013754:	4805      	ldr	r0, [pc, #20]	; (801376c <fiprintf+0x20>)
 8013756:	f853 2b04 	ldr.w	r2, [r3], #4
 801375a:	6800      	ldr	r0, [r0, #0]
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	f000 f89f 	bl	80138a0 <_vfiprintf_r>
 8013762:	b002      	add	sp, #8
 8013764:	f85d eb04 	ldr.w	lr, [sp], #4
 8013768:	b003      	add	sp, #12
 801376a:	4770      	bx	lr
 801376c:	20000274 	.word	0x20000274

08013770 <_fwalk_reent>:
 8013770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013774:	4606      	mov	r6, r0
 8013776:	4688      	mov	r8, r1
 8013778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801377c:	2700      	movs	r7, #0
 801377e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013782:	f1b9 0901 	subs.w	r9, r9, #1
 8013786:	d505      	bpl.n	8013794 <_fwalk_reent+0x24>
 8013788:	6824      	ldr	r4, [r4, #0]
 801378a:	2c00      	cmp	r4, #0
 801378c:	d1f7      	bne.n	801377e <_fwalk_reent+0xe>
 801378e:	4638      	mov	r0, r7
 8013790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013794:	89ab      	ldrh	r3, [r5, #12]
 8013796:	2b01      	cmp	r3, #1
 8013798:	d907      	bls.n	80137aa <_fwalk_reent+0x3a>
 801379a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801379e:	3301      	adds	r3, #1
 80137a0:	d003      	beq.n	80137aa <_fwalk_reent+0x3a>
 80137a2:	4629      	mov	r1, r5
 80137a4:	4630      	mov	r0, r6
 80137a6:	47c0      	blx	r8
 80137a8:	4307      	orrs	r7, r0
 80137aa:	3568      	adds	r5, #104	; 0x68
 80137ac:	e7e9      	b.n	8013782 <_fwalk_reent+0x12>

080137ae <__retarget_lock_init_recursive>:
 80137ae:	4770      	bx	lr

080137b0 <__retarget_lock_acquire_recursive>:
 80137b0:	4770      	bx	lr

080137b2 <__retarget_lock_release_recursive>:
 80137b2:	4770      	bx	lr

080137b4 <memmove>:
 80137b4:	4288      	cmp	r0, r1
 80137b6:	b510      	push	{r4, lr}
 80137b8:	eb01 0402 	add.w	r4, r1, r2
 80137bc:	d902      	bls.n	80137c4 <memmove+0x10>
 80137be:	4284      	cmp	r4, r0
 80137c0:	4623      	mov	r3, r4
 80137c2:	d807      	bhi.n	80137d4 <memmove+0x20>
 80137c4:	1e43      	subs	r3, r0, #1
 80137c6:	42a1      	cmp	r1, r4
 80137c8:	d008      	beq.n	80137dc <memmove+0x28>
 80137ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137d2:	e7f8      	b.n	80137c6 <memmove+0x12>
 80137d4:	4402      	add	r2, r0
 80137d6:	4601      	mov	r1, r0
 80137d8:	428a      	cmp	r2, r1
 80137da:	d100      	bne.n	80137de <memmove+0x2a>
 80137dc:	bd10      	pop	{r4, pc}
 80137de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137e6:	e7f7      	b.n	80137d8 <memmove+0x24>

080137e8 <__malloc_lock>:
 80137e8:	4801      	ldr	r0, [pc, #4]	; (80137f0 <__malloc_lock+0x8>)
 80137ea:	f7ff bfe1 	b.w	80137b0 <__retarget_lock_acquire_recursive>
 80137ee:	bf00      	nop
 80137f0:	20002ec0 	.word	0x20002ec0

080137f4 <__malloc_unlock>:
 80137f4:	4801      	ldr	r0, [pc, #4]	; (80137fc <__malloc_unlock+0x8>)
 80137f6:	f7ff bfdc 	b.w	80137b2 <__retarget_lock_release_recursive>
 80137fa:	bf00      	nop
 80137fc:	20002ec0 	.word	0x20002ec0

08013800 <_realloc_r>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	4607      	mov	r7, r0
 8013804:	4614      	mov	r4, r2
 8013806:	460e      	mov	r6, r1
 8013808:	b921      	cbnz	r1, 8013814 <_realloc_r+0x14>
 801380a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801380e:	4611      	mov	r1, r2
 8013810:	f7fe bfe8 	b.w	80127e4 <_malloc_r>
 8013814:	b922      	cbnz	r2, 8013820 <_realloc_r+0x20>
 8013816:	f7fe ff95 	bl	8012744 <_free_r>
 801381a:	4625      	mov	r5, r4
 801381c:	4628      	mov	r0, r5
 801381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013820:	f000 fa9a 	bl	8013d58 <_malloc_usable_size_r>
 8013824:	42a0      	cmp	r0, r4
 8013826:	d20f      	bcs.n	8013848 <_realloc_r+0x48>
 8013828:	4621      	mov	r1, r4
 801382a:	4638      	mov	r0, r7
 801382c:	f7fe ffda 	bl	80127e4 <_malloc_r>
 8013830:	4605      	mov	r5, r0
 8013832:	2800      	cmp	r0, #0
 8013834:	d0f2      	beq.n	801381c <_realloc_r+0x1c>
 8013836:	4631      	mov	r1, r6
 8013838:	4622      	mov	r2, r4
 801383a:	f7fb fa91 	bl	800ed60 <memcpy>
 801383e:	4631      	mov	r1, r6
 8013840:	4638      	mov	r0, r7
 8013842:	f7fe ff7f 	bl	8012744 <_free_r>
 8013846:	e7e9      	b.n	801381c <_realloc_r+0x1c>
 8013848:	4635      	mov	r5, r6
 801384a:	e7e7      	b.n	801381c <_realloc_r+0x1c>

0801384c <__sfputc_r>:
 801384c:	6893      	ldr	r3, [r2, #8]
 801384e:	3b01      	subs	r3, #1
 8013850:	2b00      	cmp	r3, #0
 8013852:	b410      	push	{r4}
 8013854:	6093      	str	r3, [r2, #8]
 8013856:	da08      	bge.n	801386a <__sfputc_r+0x1e>
 8013858:	6994      	ldr	r4, [r2, #24]
 801385a:	42a3      	cmp	r3, r4
 801385c:	db01      	blt.n	8013862 <__sfputc_r+0x16>
 801385e:	290a      	cmp	r1, #10
 8013860:	d103      	bne.n	801386a <__sfputc_r+0x1e>
 8013862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013866:	f000 b94b 	b.w	8013b00 <__swbuf_r>
 801386a:	6813      	ldr	r3, [r2, #0]
 801386c:	1c58      	adds	r0, r3, #1
 801386e:	6010      	str	r0, [r2, #0]
 8013870:	7019      	strb	r1, [r3, #0]
 8013872:	4608      	mov	r0, r1
 8013874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013878:	4770      	bx	lr

0801387a <__sfputs_r>:
 801387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387c:	4606      	mov	r6, r0
 801387e:	460f      	mov	r7, r1
 8013880:	4614      	mov	r4, r2
 8013882:	18d5      	adds	r5, r2, r3
 8013884:	42ac      	cmp	r4, r5
 8013886:	d101      	bne.n	801388c <__sfputs_r+0x12>
 8013888:	2000      	movs	r0, #0
 801388a:	e007      	b.n	801389c <__sfputs_r+0x22>
 801388c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013890:	463a      	mov	r2, r7
 8013892:	4630      	mov	r0, r6
 8013894:	f7ff ffda 	bl	801384c <__sfputc_r>
 8013898:	1c43      	adds	r3, r0, #1
 801389a:	d1f3      	bne.n	8013884 <__sfputs_r+0xa>
 801389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138a0 <_vfiprintf_r>:
 80138a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a4:	460d      	mov	r5, r1
 80138a6:	b09d      	sub	sp, #116	; 0x74
 80138a8:	4614      	mov	r4, r2
 80138aa:	4698      	mov	r8, r3
 80138ac:	4606      	mov	r6, r0
 80138ae:	b118      	cbz	r0, 80138b8 <_vfiprintf_r+0x18>
 80138b0:	6983      	ldr	r3, [r0, #24]
 80138b2:	b90b      	cbnz	r3, 80138b8 <_vfiprintf_r+0x18>
 80138b4:	f7ff fecc 	bl	8013650 <__sinit>
 80138b8:	4b89      	ldr	r3, [pc, #548]	; (8013ae0 <_vfiprintf_r+0x240>)
 80138ba:	429d      	cmp	r5, r3
 80138bc:	d11b      	bne.n	80138f6 <_vfiprintf_r+0x56>
 80138be:	6875      	ldr	r5, [r6, #4]
 80138c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138c2:	07d9      	lsls	r1, r3, #31
 80138c4:	d405      	bmi.n	80138d2 <_vfiprintf_r+0x32>
 80138c6:	89ab      	ldrh	r3, [r5, #12]
 80138c8:	059a      	lsls	r2, r3, #22
 80138ca:	d402      	bmi.n	80138d2 <_vfiprintf_r+0x32>
 80138cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ce:	f7ff ff6f 	bl	80137b0 <__retarget_lock_acquire_recursive>
 80138d2:	89ab      	ldrh	r3, [r5, #12]
 80138d4:	071b      	lsls	r3, r3, #28
 80138d6:	d501      	bpl.n	80138dc <_vfiprintf_r+0x3c>
 80138d8:	692b      	ldr	r3, [r5, #16]
 80138da:	b9eb      	cbnz	r3, 8013918 <_vfiprintf_r+0x78>
 80138dc:	4629      	mov	r1, r5
 80138de:	4630      	mov	r0, r6
 80138e0:	f000 f960 	bl	8013ba4 <__swsetup_r>
 80138e4:	b1c0      	cbz	r0, 8013918 <_vfiprintf_r+0x78>
 80138e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138e8:	07dc      	lsls	r4, r3, #31
 80138ea:	d50e      	bpl.n	801390a <_vfiprintf_r+0x6a>
 80138ec:	f04f 30ff 	mov.w	r0, #4294967295
 80138f0:	b01d      	add	sp, #116	; 0x74
 80138f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f6:	4b7b      	ldr	r3, [pc, #492]	; (8013ae4 <_vfiprintf_r+0x244>)
 80138f8:	429d      	cmp	r5, r3
 80138fa:	d101      	bne.n	8013900 <_vfiprintf_r+0x60>
 80138fc:	68b5      	ldr	r5, [r6, #8]
 80138fe:	e7df      	b.n	80138c0 <_vfiprintf_r+0x20>
 8013900:	4b79      	ldr	r3, [pc, #484]	; (8013ae8 <_vfiprintf_r+0x248>)
 8013902:	429d      	cmp	r5, r3
 8013904:	bf08      	it	eq
 8013906:	68f5      	ldreq	r5, [r6, #12]
 8013908:	e7da      	b.n	80138c0 <_vfiprintf_r+0x20>
 801390a:	89ab      	ldrh	r3, [r5, #12]
 801390c:	0598      	lsls	r0, r3, #22
 801390e:	d4ed      	bmi.n	80138ec <_vfiprintf_r+0x4c>
 8013910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013912:	f7ff ff4e 	bl	80137b2 <__retarget_lock_release_recursive>
 8013916:	e7e9      	b.n	80138ec <_vfiprintf_r+0x4c>
 8013918:	2300      	movs	r3, #0
 801391a:	9309      	str	r3, [sp, #36]	; 0x24
 801391c:	2320      	movs	r3, #32
 801391e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013922:	f8cd 800c 	str.w	r8, [sp, #12]
 8013926:	2330      	movs	r3, #48	; 0x30
 8013928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013aec <_vfiprintf_r+0x24c>
 801392c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013930:	f04f 0901 	mov.w	r9, #1
 8013934:	4623      	mov	r3, r4
 8013936:	469a      	mov	sl, r3
 8013938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801393c:	b10a      	cbz	r2, 8013942 <_vfiprintf_r+0xa2>
 801393e:	2a25      	cmp	r2, #37	; 0x25
 8013940:	d1f9      	bne.n	8013936 <_vfiprintf_r+0x96>
 8013942:	ebba 0b04 	subs.w	fp, sl, r4
 8013946:	d00b      	beq.n	8013960 <_vfiprintf_r+0xc0>
 8013948:	465b      	mov	r3, fp
 801394a:	4622      	mov	r2, r4
 801394c:	4629      	mov	r1, r5
 801394e:	4630      	mov	r0, r6
 8013950:	f7ff ff93 	bl	801387a <__sfputs_r>
 8013954:	3001      	adds	r0, #1
 8013956:	f000 80aa 	beq.w	8013aae <_vfiprintf_r+0x20e>
 801395a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801395c:	445a      	add	r2, fp
 801395e:	9209      	str	r2, [sp, #36]	; 0x24
 8013960:	f89a 3000 	ldrb.w	r3, [sl]
 8013964:	2b00      	cmp	r3, #0
 8013966:	f000 80a2 	beq.w	8013aae <_vfiprintf_r+0x20e>
 801396a:	2300      	movs	r3, #0
 801396c:	f04f 32ff 	mov.w	r2, #4294967295
 8013970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013974:	f10a 0a01 	add.w	sl, sl, #1
 8013978:	9304      	str	r3, [sp, #16]
 801397a:	9307      	str	r3, [sp, #28]
 801397c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013980:	931a      	str	r3, [sp, #104]	; 0x68
 8013982:	4654      	mov	r4, sl
 8013984:	2205      	movs	r2, #5
 8013986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801398a:	4858      	ldr	r0, [pc, #352]	; (8013aec <_vfiprintf_r+0x24c>)
 801398c:	f7ec fc38 	bl	8000200 <memchr>
 8013990:	9a04      	ldr	r2, [sp, #16]
 8013992:	b9d8      	cbnz	r0, 80139cc <_vfiprintf_r+0x12c>
 8013994:	06d1      	lsls	r1, r2, #27
 8013996:	bf44      	itt	mi
 8013998:	2320      	movmi	r3, #32
 801399a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801399e:	0713      	lsls	r3, r2, #28
 80139a0:	bf44      	itt	mi
 80139a2:	232b      	movmi	r3, #43	; 0x2b
 80139a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80139a8:	f89a 3000 	ldrb.w	r3, [sl]
 80139ac:	2b2a      	cmp	r3, #42	; 0x2a
 80139ae:	d015      	beq.n	80139dc <_vfiprintf_r+0x13c>
 80139b0:	9a07      	ldr	r2, [sp, #28]
 80139b2:	4654      	mov	r4, sl
 80139b4:	2000      	movs	r0, #0
 80139b6:	f04f 0c0a 	mov.w	ip, #10
 80139ba:	4621      	mov	r1, r4
 80139bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139c0:	3b30      	subs	r3, #48	; 0x30
 80139c2:	2b09      	cmp	r3, #9
 80139c4:	d94e      	bls.n	8013a64 <_vfiprintf_r+0x1c4>
 80139c6:	b1b0      	cbz	r0, 80139f6 <_vfiprintf_r+0x156>
 80139c8:	9207      	str	r2, [sp, #28]
 80139ca:	e014      	b.n	80139f6 <_vfiprintf_r+0x156>
 80139cc:	eba0 0308 	sub.w	r3, r0, r8
 80139d0:	fa09 f303 	lsl.w	r3, r9, r3
 80139d4:	4313      	orrs	r3, r2
 80139d6:	9304      	str	r3, [sp, #16]
 80139d8:	46a2      	mov	sl, r4
 80139da:	e7d2      	b.n	8013982 <_vfiprintf_r+0xe2>
 80139dc:	9b03      	ldr	r3, [sp, #12]
 80139de:	1d19      	adds	r1, r3, #4
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	9103      	str	r1, [sp, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	bfbb      	ittet	lt
 80139e8:	425b      	neglt	r3, r3
 80139ea:	f042 0202 	orrlt.w	r2, r2, #2
 80139ee:	9307      	strge	r3, [sp, #28]
 80139f0:	9307      	strlt	r3, [sp, #28]
 80139f2:	bfb8      	it	lt
 80139f4:	9204      	strlt	r2, [sp, #16]
 80139f6:	7823      	ldrb	r3, [r4, #0]
 80139f8:	2b2e      	cmp	r3, #46	; 0x2e
 80139fa:	d10c      	bne.n	8013a16 <_vfiprintf_r+0x176>
 80139fc:	7863      	ldrb	r3, [r4, #1]
 80139fe:	2b2a      	cmp	r3, #42	; 0x2a
 8013a00:	d135      	bne.n	8013a6e <_vfiprintf_r+0x1ce>
 8013a02:	9b03      	ldr	r3, [sp, #12]
 8013a04:	1d1a      	adds	r2, r3, #4
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	9203      	str	r2, [sp, #12]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	bfb8      	it	lt
 8013a0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a12:	3402      	adds	r4, #2
 8013a14:	9305      	str	r3, [sp, #20]
 8013a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013afc <_vfiprintf_r+0x25c>
 8013a1a:	7821      	ldrb	r1, [r4, #0]
 8013a1c:	2203      	movs	r2, #3
 8013a1e:	4650      	mov	r0, sl
 8013a20:	f7ec fbee 	bl	8000200 <memchr>
 8013a24:	b140      	cbz	r0, 8013a38 <_vfiprintf_r+0x198>
 8013a26:	2340      	movs	r3, #64	; 0x40
 8013a28:	eba0 000a 	sub.w	r0, r0, sl
 8013a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8013a30:	9b04      	ldr	r3, [sp, #16]
 8013a32:	4303      	orrs	r3, r0
 8013a34:	3401      	adds	r4, #1
 8013a36:	9304      	str	r3, [sp, #16]
 8013a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a3c:	482c      	ldr	r0, [pc, #176]	; (8013af0 <_vfiprintf_r+0x250>)
 8013a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a42:	2206      	movs	r2, #6
 8013a44:	f7ec fbdc 	bl	8000200 <memchr>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d03f      	beq.n	8013acc <_vfiprintf_r+0x22c>
 8013a4c:	4b29      	ldr	r3, [pc, #164]	; (8013af4 <_vfiprintf_r+0x254>)
 8013a4e:	bb1b      	cbnz	r3, 8013a98 <_vfiprintf_r+0x1f8>
 8013a50:	9b03      	ldr	r3, [sp, #12]
 8013a52:	3307      	adds	r3, #7
 8013a54:	f023 0307 	bic.w	r3, r3, #7
 8013a58:	3308      	adds	r3, #8
 8013a5a:	9303      	str	r3, [sp, #12]
 8013a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a5e:	443b      	add	r3, r7
 8013a60:	9309      	str	r3, [sp, #36]	; 0x24
 8013a62:	e767      	b.n	8013934 <_vfiprintf_r+0x94>
 8013a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a68:	460c      	mov	r4, r1
 8013a6a:	2001      	movs	r0, #1
 8013a6c:	e7a5      	b.n	80139ba <_vfiprintf_r+0x11a>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	3401      	adds	r4, #1
 8013a72:	9305      	str	r3, [sp, #20]
 8013a74:	4619      	mov	r1, r3
 8013a76:	f04f 0c0a 	mov.w	ip, #10
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a80:	3a30      	subs	r2, #48	; 0x30
 8013a82:	2a09      	cmp	r2, #9
 8013a84:	d903      	bls.n	8013a8e <_vfiprintf_r+0x1ee>
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d0c5      	beq.n	8013a16 <_vfiprintf_r+0x176>
 8013a8a:	9105      	str	r1, [sp, #20]
 8013a8c:	e7c3      	b.n	8013a16 <_vfiprintf_r+0x176>
 8013a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a92:	4604      	mov	r4, r0
 8013a94:	2301      	movs	r3, #1
 8013a96:	e7f0      	b.n	8013a7a <_vfiprintf_r+0x1da>
 8013a98:	ab03      	add	r3, sp, #12
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	462a      	mov	r2, r5
 8013a9e:	4b16      	ldr	r3, [pc, #88]	; (8013af8 <_vfiprintf_r+0x258>)
 8013aa0:	a904      	add	r1, sp, #16
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	f7fb fa12 	bl	800eecc <_printf_float>
 8013aa8:	4607      	mov	r7, r0
 8013aaa:	1c78      	adds	r0, r7, #1
 8013aac:	d1d6      	bne.n	8013a5c <_vfiprintf_r+0x1bc>
 8013aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ab0:	07d9      	lsls	r1, r3, #31
 8013ab2:	d405      	bmi.n	8013ac0 <_vfiprintf_r+0x220>
 8013ab4:	89ab      	ldrh	r3, [r5, #12]
 8013ab6:	059a      	lsls	r2, r3, #22
 8013ab8:	d402      	bmi.n	8013ac0 <_vfiprintf_r+0x220>
 8013aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013abc:	f7ff fe79 	bl	80137b2 <__retarget_lock_release_recursive>
 8013ac0:	89ab      	ldrh	r3, [r5, #12]
 8013ac2:	065b      	lsls	r3, r3, #25
 8013ac4:	f53f af12 	bmi.w	80138ec <_vfiprintf_r+0x4c>
 8013ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013aca:	e711      	b.n	80138f0 <_vfiprintf_r+0x50>
 8013acc:	ab03      	add	r3, sp, #12
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	462a      	mov	r2, r5
 8013ad2:	4b09      	ldr	r3, [pc, #36]	; (8013af8 <_vfiprintf_r+0x258>)
 8013ad4:	a904      	add	r1, sp, #16
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f7fb fc9c 	bl	800f414 <_printf_i>
 8013adc:	e7e4      	b.n	8013aa8 <_vfiprintf_r+0x208>
 8013ade:	bf00      	nop
 8013ae0:	080161c4 	.word	0x080161c4
 8013ae4:	080161e4 	.word	0x080161e4
 8013ae8:	080161a4 	.word	0x080161a4
 8013aec:	0801613c 	.word	0x0801613c
 8013af0:	08016146 	.word	0x08016146
 8013af4:	0800eecd 	.word	0x0800eecd
 8013af8:	0801387b 	.word	0x0801387b
 8013afc:	08016142 	.word	0x08016142

08013b00 <__swbuf_r>:
 8013b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b02:	460e      	mov	r6, r1
 8013b04:	4614      	mov	r4, r2
 8013b06:	4605      	mov	r5, r0
 8013b08:	b118      	cbz	r0, 8013b12 <__swbuf_r+0x12>
 8013b0a:	6983      	ldr	r3, [r0, #24]
 8013b0c:	b90b      	cbnz	r3, 8013b12 <__swbuf_r+0x12>
 8013b0e:	f7ff fd9f 	bl	8013650 <__sinit>
 8013b12:	4b21      	ldr	r3, [pc, #132]	; (8013b98 <__swbuf_r+0x98>)
 8013b14:	429c      	cmp	r4, r3
 8013b16:	d12b      	bne.n	8013b70 <__swbuf_r+0x70>
 8013b18:	686c      	ldr	r4, [r5, #4]
 8013b1a:	69a3      	ldr	r3, [r4, #24]
 8013b1c:	60a3      	str	r3, [r4, #8]
 8013b1e:	89a3      	ldrh	r3, [r4, #12]
 8013b20:	071a      	lsls	r2, r3, #28
 8013b22:	d52f      	bpl.n	8013b84 <__swbuf_r+0x84>
 8013b24:	6923      	ldr	r3, [r4, #16]
 8013b26:	b36b      	cbz	r3, 8013b84 <__swbuf_r+0x84>
 8013b28:	6923      	ldr	r3, [r4, #16]
 8013b2a:	6820      	ldr	r0, [r4, #0]
 8013b2c:	1ac0      	subs	r0, r0, r3
 8013b2e:	6963      	ldr	r3, [r4, #20]
 8013b30:	b2f6      	uxtb	r6, r6
 8013b32:	4283      	cmp	r3, r0
 8013b34:	4637      	mov	r7, r6
 8013b36:	dc04      	bgt.n	8013b42 <__swbuf_r+0x42>
 8013b38:	4621      	mov	r1, r4
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f7ff fcf4 	bl	8013528 <_fflush_r>
 8013b40:	bb30      	cbnz	r0, 8013b90 <__swbuf_r+0x90>
 8013b42:	68a3      	ldr	r3, [r4, #8]
 8013b44:	3b01      	subs	r3, #1
 8013b46:	60a3      	str	r3, [r4, #8]
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	1c5a      	adds	r2, r3, #1
 8013b4c:	6022      	str	r2, [r4, #0]
 8013b4e:	701e      	strb	r6, [r3, #0]
 8013b50:	6963      	ldr	r3, [r4, #20]
 8013b52:	3001      	adds	r0, #1
 8013b54:	4283      	cmp	r3, r0
 8013b56:	d004      	beq.n	8013b62 <__swbuf_r+0x62>
 8013b58:	89a3      	ldrh	r3, [r4, #12]
 8013b5a:	07db      	lsls	r3, r3, #31
 8013b5c:	d506      	bpl.n	8013b6c <__swbuf_r+0x6c>
 8013b5e:	2e0a      	cmp	r6, #10
 8013b60:	d104      	bne.n	8013b6c <__swbuf_r+0x6c>
 8013b62:	4621      	mov	r1, r4
 8013b64:	4628      	mov	r0, r5
 8013b66:	f7ff fcdf 	bl	8013528 <_fflush_r>
 8013b6a:	b988      	cbnz	r0, 8013b90 <__swbuf_r+0x90>
 8013b6c:	4638      	mov	r0, r7
 8013b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b70:	4b0a      	ldr	r3, [pc, #40]	; (8013b9c <__swbuf_r+0x9c>)
 8013b72:	429c      	cmp	r4, r3
 8013b74:	d101      	bne.n	8013b7a <__swbuf_r+0x7a>
 8013b76:	68ac      	ldr	r4, [r5, #8]
 8013b78:	e7cf      	b.n	8013b1a <__swbuf_r+0x1a>
 8013b7a:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <__swbuf_r+0xa0>)
 8013b7c:	429c      	cmp	r4, r3
 8013b7e:	bf08      	it	eq
 8013b80:	68ec      	ldreq	r4, [r5, #12]
 8013b82:	e7ca      	b.n	8013b1a <__swbuf_r+0x1a>
 8013b84:	4621      	mov	r1, r4
 8013b86:	4628      	mov	r0, r5
 8013b88:	f000 f80c 	bl	8013ba4 <__swsetup_r>
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	d0cb      	beq.n	8013b28 <__swbuf_r+0x28>
 8013b90:	f04f 37ff 	mov.w	r7, #4294967295
 8013b94:	e7ea      	b.n	8013b6c <__swbuf_r+0x6c>
 8013b96:	bf00      	nop
 8013b98:	080161c4 	.word	0x080161c4
 8013b9c:	080161e4 	.word	0x080161e4
 8013ba0:	080161a4 	.word	0x080161a4

08013ba4 <__swsetup_r>:
 8013ba4:	4b32      	ldr	r3, [pc, #200]	; (8013c70 <__swsetup_r+0xcc>)
 8013ba6:	b570      	push	{r4, r5, r6, lr}
 8013ba8:	681d      	ldr	r5, [r3, #0]
 8013baa:	4606      	mov	r6, r0
 8013bac:	460c      	mov	r4, r1
 8013bae:	b125      	cbz	r5, 8013bba <__swsetup_r+0x16>
 8013bb0:	69ab      	ldr	r3, [r5, #24]
 8013bb2:	b913      	cbnz	r3, 8013bba <__swsetup_r+0x16>
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f7ff fd4b 	bl	8013650 <__sinit>
 8013bba:	4b2e      	ldr	r3, [pc, #184]	; (8013c74 <__swsetup_r+0xd0>)
 8013bbc:	429c      	cmp	r4, r3
 8013bbe:	d10f      	bne.n	8013be0 <__swsetup_r+0x3c>
 8013bc0:	686c      	ldr	r4, [r5, #4]
 8013bc2:	89a3      	ldrh	r3, [r4, #12]
 8013bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bc8:	0719      	lsls	r1, r3, #28
 8013bca:	d42c      	bmi.n	8013c26 <__swsetup_r+0x82>
 8013bcc:	06dd      	lsls	r5, r3, #27
 8013bce:	d411      	bmi.n	8013bf4 <__swsetup_r+0x50>
 8013bd0:	2309      	movs	r3, #9
 8013bd2:	6033      	str	r3, [r6, #0]
 8013bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bd8:	81a3      	strh	r3, [r4, #12]
 8013bda:	f04f 30ff 	mov.w	r0, #4294967295
 8013bde:	e03e      	b.n	8013c5e <__swsetup_r+0xba>
 8013be0:	4b25      	ldr	r3, [pc, #148]	; (8013c78 <__swsetup_r+0xd4>)
 8013be2:	429c      	cmp	r4, r3
 8013be4:	d101      	bne.n	8013bea <__swsetup_r+0x46>
 8013be6:	68ac      	ldr	r4, [r5, #8]
 8013be8:	e7eb      	b.n	8013bc2 <__swsetup_r+0x1e>
 8013bea:	4b24      	ldr	r3, [pc, #144]	; (8013c7c <__swsetup_r+0xd8>)
 8013bec:	429c      	cmp	r4, r3
 8013bee:	bf08      	it	eq
 8013bf0:	68ec      	ldreq	r4, [r5, #12]
 8013bf2:	e7e6      	b.n	8013bc2 <__swsetup_r+0x1e>
 8013bf4:	0758      	lsls	r0, r3, #29
 8013bf6:	d512      	bpl.n	8013c1e <__swsetup_r+0x7a>
 8013bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bfa:	b141      	cbz	r1, 8013c0e <__swsetup_r+0x6a>
 8013bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c00:	4299      	cmp	r1, r3
 8013c02:	d002      	beq.n	8013c0a <__swsetup_r+0x66>
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7fe fd9d 	bl	8012744 <_free_r>
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8013c0e:	89a3      	ldrh	r3, [r4, #12]
 8013c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c14:	81a3      	strh	r3, [r4, #12]
 8013c16:	2300      	movs	r3, #0
 8013c18:	6063      	str	r3, [r4, #4]
 8013c1a:	6923      	ldr	r3, [r4, #16]
 8013c1c:	6023      	str	r3, [r4, #0]
 8013c1e:	89a3      	ldrh	r3, [r4, #12]
 8013c20:	f043 0308 	orr.w	r3, r3, #8
 8013c24:	81a3      	strh	r3, [r4, #12]
 8013c26:	6923      	ldr	r3, [r4, #16]
 8013c28:	b94b      	cbnz	r3, 8013c3e <__swsetup_r+0x9a>
 8013c2a:	89a3      	ldrh	r3, [r4, #12]
 8013c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c34:	d003      	beq.n	8013c3e <__swsetup_r+0x9a>
 8013c36:	4621      	mov	r1, r4
 8013c38:	4630      	mov	r0, r6
 8013c3a:	f000 f84d 	bl	8013cd8 <__smakebuf_r>
 8013c3e:	89a0      	ldrh	r0, [r4, #12]
 8013c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c44:	f010 0301 	ands.w	r3, r0, #1
 8013c48:	d00a      	beq.n	8013c60 <__swsetup_r+0xbc>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	60a3      	str	r3, [r4, #8]
 8013c4e:	6963      	ldr	r3, [r4, #20]
 8013c50:	425b      	negs	r3, r3
 8013c52:	61a3      	str	r3, [r4, #24]
 8013c54:	6923      	ldr	r3, [r4, #16]
 8013c56:	b943      	cbnz	r3, 8013c6a <__swsetup_r+0xc6>
 8013c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c5c:	d1ba      	bne.n	8013bd4 <__swsetup_r+0x30>
 8013c5e:	bd70      	pop	{r4, r5, r6, pc}
 8013c60:	0781      	lsls	r1, r0, #30
 8013c62:	bf58      	it	pl
 8013c64:	6963      	ldrpl	r3, [r4, #20]
 8013c66:	60a3      	str	r3, [r4, #8]
 8013c68:	e7f4      	b.n	8013c54 <__swsetup_r+0xb0>
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	e7f7      	b.n	8013c5e <__swsetup_r+0xba>
 8013c6e:	bf00      	nop
 8013c70:	20000274 	.word	0x20000274
 8013c74:	080161c4 	.word	0x080161c4
 8013c78:	080161e4 	.word	0x080161e4
 8013c7c:	080161a4 	.word	0x080161a4

08013c80 <abort>:
 8013c80:	b508      	push	{r3, lr}
 8013c82:	2006      	movs	r0, #6
 8013c84:	f000 f898 	bl	8013db8 <raise>
 8013c88:	2001      	movs	r0, #1
 8013c8a:	f7f3 ff13 	bl	8007ab4 <_exit>

08013c8e <__swhatbuf_r>:
 8013c8e:	b570      	push	{r4, r5, r6, lr}
 8013c90:	460e      	mov	r6, r1
 8013c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c96:	2900      	cmp	r1, #0
 8013c98:	b096      	sub	sp, #88	; 0x58
 8013c9a:	4614      	mov	r4, r2
 8013c9c:	461d      	mov	r5, r3
 8013c9e:	da07      	bge.n	8013cb0 <__swhatbuf_r+0x22>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	602b      	str	r3, [r5, #0]
 8013ca4:	89b3      	ldrh	r3, [r6, #12]
 8013ca6:	061a      	lsls	r2, r3, #24
 8013ca8:	d410      	bmi.n	8013ccc <__swhatbuf_r+0x3e>
 8013caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cae:	e00e      	b.n	8013cce <__swhatbuf_r+0x40>
 8013cb0:	466a      	mov	r2, sp
 8013cb2:	f000 f89d 	bl	8013df0 <_fstat_r>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	dbf2      	blt.n	8013ca0 <__swhatbuf_r+0x12>
 8013cba:	9a01      	ldr	r2, [sp, #4]
 8013cbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cc4:	425a      	negs	r2, r3
 8013cc6:	415a      	adcs	r2, r3
 8013cc8:	602a      	str	r2, [r5, #0]
 8013cca:	e7ee      	b.n	8013caa <__swhatbuf_r+0x1c>
 8013ccc:	2340      	movs	r3, #64	; 0x40
 8013cce:	2000      	movs	r0, #0
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	b016      	add	sp, #88	; 0x58
 8013cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013cd8 <__smakebuf_r>:
 8013cd8:	898b      	ldrh	r3, [r1, #12]
 8013cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013cdc:	079d      	lsls	r5, r3, #30
 8013cde:	4606      	mov	r6, r0
 8013ce0:	460c      	mov	r4, r1
 8013ce2:	d507      	bpl.n	8013cf4 <__smakebuf_r+0x1c>
 8013ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ce8:	6023      	str	r3, [r4, #0]
 8013cea:	6123      	str	r3, [r4, #16]
 8013cec:	2301      	movs	r3, #1
 8013cee:	6163      	str	r3, [r4, #20]
 8013cf0:	b002      	add	sp, #8
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	ab01      	add	r3, sp, #4
 8013cf6:	466a      	mov	r2, sp
 8013cf8:	f7ff ffc9 	bl	8013c8e <__swhatbuf_r>
 8013cfc:	9900      	ldr	r1, [sp, #0]
 8013cfe:	4605      	mov	r5, r0
 8013d00:	4630      	mov	r0, r6
 8013d02:	f7fe fd6f 	bl	80127e4 <_malloc_r>
 8013d06:	b948      	cbnz	r0, 8013d1c <__smakebuf_r+0x44>
 8013d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d0c:	059a      	lsls	r2, r3, #22
 8013d0e:	d4ef      	bmi.n	8013cf0 <__smakebuf_r+0x18>
 8013d10:	f023 0303 	bic.w	r3, r3, #3
 8013d14:	f043 0302 	orr.w	r3, r3, #2
 8013d18:	81a3      	strh	r3, [r4, #12]
 8013d1a:	e7e3      	b.n	8013ce4 <__smakebuf_r+0xc>
 8013d1c:	4b0d      	ldr	r3, [pc, #52]	; (8013d54 <__smakebuf_r+0x7c>)
 8013d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d20:	89a3      	ldrh	r3, [r4, #12]
 8013d22:	6020      	str	r0, [r4, #0]
 8013d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d28:	81a3      	strh	r3, [r4, #12]
 8013d2a:	9b00      	ldr	r3, [sp, #0]
 8013d2c:	6163      	str	r3, [r4, #20]
 8013d2e:	9b01      	ldr	r3, [sp, #4]
 8013d30:	6120      	str	r0, [r4, #16]
 8013d32:	b15b      	cbz	r3, 8013d4c <__smakebuf_r+0x74>
 8013d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d38:	4630      	mov	r0, r6
 8013d3a:	f000 f86b 	bl	8013e14 <_isatty_r>
 8013d3e:	b128      	cbz	r0, 8013d4c <__smakebuf_r+0x74>
 8013d40:	89a3      	ldrh	r3, [r4, #12]
 8013d42:	f023 0303 	bic.w	r3, r3, #3
 8013d46:	f043 0301 	orr.w	r3, r3, #1
 8013d4a:	81a3      	strh	r3, [r4, #12]
 8013d4c:	89a0      	ldrh	r0, [r4, #12]
 8013d4e:	4305      	orrs	r5, r0
 8013d50:	81a5      	strh	r5, [r4, #12]
 8013d52:	e7cd      	b.n	8013cf0 <__smakebuf_r+0x18>
 8013d54:	080135e9 	.word	0x080135e9

08013d58 <_malloc_usable_size_r>:
 8013d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d5c:	1f18      	subs	r0, r3, #4
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	bfbc      	itt	lt
 8013d62:	580b      	ldrlt	r3, [r1, r0]
 8013d64:	18c0      	addlt	r0, r0, r3
 8013d66:	4770      	bx	lr

08013d68 <_raise_r>:
 8013d68:	291f      	cmp	r1, #31
 8013d6a:	b538      	push	{r3, r4, r5, lr}
 8013d6c:	4604      	mov	r4, r0
 8013d6e:	460d      	mov	r5, r1
 8013d70:	d904      	bls.n	8013d7c <_raise_r+0x14>
 8013d72:	2316      	movs	r3, #22
 8013d74:	6003      	str	r3, [r0, #0]
 8013d76:	f04f 30ff 	mov.w	r0, #4294967295
 8013d7a:	bd38      	pop	{r3, r4, r5, pc}
 8013d7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013d7e:	b112      	cbz	r2, 8013d86 <_raise_r+0x1e>
 8013d80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d84:	b94b      	cbnz	r3, 8013d9a <_raise_r+0x32>
 8013d86:	4620      	mov	r0, r4
 8013d88:	f000 f830 	bl	8013dec <_getpid_r>
 8013d8c:	462a      	mov	r2, r5
 8013d8e:	4601      	mov	r1, r0
 8013d90:	4620      	mov	r0, r4
 8013d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d96:	f000 b817 	b.w	8013dc8 <_kill_r>
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d00a      	beq.n	8013db4 <_raise_r+0x4c>
 8013d9e:	1c59      	adds	r1, r3, #1
 8013da0:	d103      	bne.n	8013daa <_raise_r+0x42>
 8013da2:	2316      	movs	r3, #22
 8013da4:	6003      	str	r3, [r0, #0]
 8013da6:	2001      	movs	r0, #1
 8013da8:	e7e7      	b.n	8013d7a <_raise_r+0x12>
 8013daa:	2400      	movs	r4, #0
 8013dac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013db0:	4628      	mov	r0, r5
 8013db2:	4798      	blx	r3
 8013db4:	2000      	movs	r0, #0
 8013db6:	e7e0      	b.n	8013d7a <_raise_r+0x12>

08013db8 <raise>:
 8013db8:	4b02      	ldr	r3, [pc, #8]	; (8013dc4 <raise+0xc>)
 8013dba:	4601      	mov	r1, r0
 8013dbc:	6818      	ldr	r0, [r3, #0]
 8013dbe:	f7ff bfd3 	b.w	8013d68 <_raise_r>
 8013dc2:	bf00      	nop
 8013dc4:	20000274 	.word	0x20000274

08013dc8 <_kill_r>:
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4d07      	ldr	r5, [pc, #28]	; (8013de8 <_kill_r+0x20>)
 8013dcc:	2300      	movs	r3, #0
 8013dce:	4604      	mov	r4, r0
 8013dd0:	4608      	mov	r0, r1
 8013dd2:	4611      	mov	r1, r2
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	f7f3 fe5d 	bl	8007a94 <_kill>
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	d102      	bne.n	8013de4 <_kill_r+0x1c>
 8013dde:	682b      	ldr	r3, [r5, #0]
 8013de0:	b103      	cbz	r3, 8013de4 <_kill_r+0x1c>
 8013de2:	6023      	str	r3, [r4, #0]
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	bf00      	nop
 8013de8:	20002eb8 	.word	0x20002eb8

08013dec <_getpid_r>:
 8013dec:	f7f3 be4a 	b.w	8007a84 <_getpid>

08013df0 <_fstat_r>:
 8013df0:	b538      	push	{r3, r4, r5, lr}
 8013df2:	4d07      	ldr	r5, [pc, #28]	; (8013e10 <_fstat_r+0x20>)
 8013df4:	2300      	movs	r3, #0
 8013df6:	4604      	mov	r4, r0
 8013df8:	4608      	mov	r0, r1
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	602b      	str	r3, [r5, #0]
 8013dfe:	f7f3 fea8 	bl	8007b52 <_fstat>
 8013e02:	1c43      	adds	r3, r0, #1
 8013e04:	d102      	bne.n	8013e0c <_fstat_r+0x1c>
 8013e06:	682b      	ldr	r3, [r5, #0]
 8013e08:	b103      	cbz	r3, 8013e0c <_fstat_r+0x1c>
 8013e0a:	6023      	str	r3, [r4, #0]
 8013e0c:	bd38      	pop	{r3, r4, r5, pc}
 8013e0e:	bf00      	nop
 8013e10:	20002eb8 	.word	0x20002eb8

08013e14 <_isatty_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d06      	ldr	r5, [pc, #24]	; (8013e30 <_isatty_r+0x1c>)
 8013e18:	2300      	movs	r3, #0
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	4608      	mov	r0, r1
 8013e1e:	602b      	str	r3, [r5, #0]
 8013e20:	f7f3 fea7 	bl	8007b72 <_isatty>
 8013e24:	1c43      	adds	r3, r0, #1
 8013e26:	d102      	bne.n	8013e2e <_isatty_r+0x1a>
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	b103      	cbz	r3, 8013e2e <_isatty_r+0x1a>
 8013e2c:	6023      	str	r3, [r4, #0]
 8013e2e:	bd38      	pop	{r3, r4, r5, pc}
 8013e30:	20002eb8 	.word	0x20002eb8

08013e34 <round>:
 8013e34:	ec51 0b10 	vmov	r0, r1, d0
 8013e38:	b570      	push	{r4, r5, r6, lr}
 8013e3a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8013e3e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8013e42:	2c13      	cmp	r4, #19
 8013e44:	ee10 2a10 	vmov	r2, s0
 8013e48:	460b      	mov	r3, r1
 8013e4a:	dc19      	bgt.n	8013e80 <round+0x4c>
 8013e4c:	2c00      	cmp	r4, #0
 8013e4e:	da09      	bge.n	8013e64 <round+0x30>
 8013e50:	3401      	adds	r4, #1
 8013e52:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8013e56:	d103      	bne.n	8013e60 <round+0x2c>
 8013e58:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013e5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013e60:	2100      	movs	r1, #0
 8013e62:	e028      	b.n	8013eb6 <round+0x82>
 8013e64:	4d15      	ldr	r5, [pc, #84]	; (8013ebc <round+0x88>)
 8013e66:	4125      	asrs	r5, r4
 8013e68:	ea01 0605 	and.w	r6, r1, r5
 8013e6c:	4332      	orrs	r2, r6
 8013e6e:	d00e      	beq.n	8013e8e <round+0x5a>
 8013e70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013e74:	fa42 f404 	asr.w	r4, r2, r4
 8013e78:	4423      	add	r3, r4
 8013e7a:	ea23 0305 	bic.w	r3, r3, r5
 8013e7e:	e7ef      	b.n	8013e60 <round+0x2c>
 8013e80:	2c33      	cmp	r4, #51	; 0x33
 8013e82:	dd07      	ble.n	8013e94 <round+0x60>
 8013e84:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013e88:	d101      	bne.n	8013e8e <round+0x5a>
 8013e8a:	f7ec fa0f 	bl	80002ac <__adddf3>
 8013e8e:	ec41 0b10 	vmov	d0, r0, r1
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8013e98:	f04f 35ff 	mov.w	r5, #4294967295
 8013e9c:	40f5      	lsrs	r5, r6
 8013e9e:	4228      	tst	r0, r5
 8013ea0:	d0f5      	beq.n	8013e8e <round+0x5a>
 8013ea2:	2101      	movs	r1, #1
 8013ea4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8013ea8:	fa01 f404 	lsl.w	r4, r1, r4
 8013eac:	1912      	adds	r2, r2, r4
 8013eae:	bf28      	it	cs
 8013eb0:	185b      	addcs	r3, r3, r1
 8013eb2:	ea22 0105 	bic.w	r1, r2, r5
 8013eb6:	4608      	mov	r0, r1
 8013eb8:	4619      	mov	r1, r3
 8013eba:	e7e8      	b.n	8013e8e <round+0x5a>
 8013ebc:	000fffff 	.word	0x000fffff

08013ec0 <atan2>:
 8013ec0:	f000 b826 	b.w	8013f10 <__ieee754_atan2>

08013ec4 <sqrtf>:
 8013ec4:	b508      	push	{r3, lr}
 8013ec6:	ed2d 8b02 	vpush	{d8}
 8013eca:	eeb0 8a40 	vmov.f32	s16, s0
 8013ece:	f000 f8e9 	bl	80140a4 <__ieee754_sqrtf>
 8013ed2:	4b0d      	ldr	r3, [pc, #52]	; (8013f08 <sqrtf+0x44>)
 8013ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	d011      	beq.n	8013f00 <sqrtf+0x3c>
 8013edc:	eeb4 8a48 	vcmp.f32	s16, s16
 8013ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee4:	d60c      	bvs.n	8013f00 <sqrtf+0x3c>
 8013ee6:	eddf 8a09 	vldr	s17, [pc, #36]	; 8013f0c <sqrtf+0x48>
 8013eea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef2:	d505      	bpl.n	8013f00 <sqrtf+0x3c>
 8013ef4:	f7fa ff0a 	bl	800ed0c <__errno>
 8013ef8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013efc:	2321      	movs	r3, #33	; 0x21
 8013efe:	6003      	str	r3, [r0, #0]
 8013f00:	ecbd 8b02 	vpop	{d8}
 8013f04:	bd08      	pop	{r3, pc}
 8013f06:	bf00      	nop
 8013f08:	20000448 	.word	0x20000448
 8013f0c:	00000000 	.word	0x00000000

08013f10 <__ieee754_atan2>:
 8013f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f14:	ec57 6b11 	vmov	r6, r7, d1
 8013f18:	4273      	negs	r3, r6
 8013f1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80140a0 <__ieee754_atan2+0x190>
 8013f1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8013f22:	4333      	orrs	r3, r6
 8013f24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013f28:	4573      	cmp	r3, lr
 8013f2a:	ec51 0b10 	vmov	r0, r1, d0
 8013f2e:	ee11 8a10 	vmov	r8, s2
 8013f32:	d80a      	bhi.n	8013f4a <__ieee754_atan2+0x3a>
 8013f34:	4244      	negs	r4, r0
 8013f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f3a:	4304      	orrs	r4, r0
 8013f3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013f40:	4574      	cmp	r4, lr
 8013f42:	ee10 9a10 	vmov	r9, s0
 8013f46:	468c      	mov	ip, r1
 8013f48:	d907      	bls.n	8013f5a <__ieee754_atan2+0x4a>
 8013f4a:	4632      	mov	r2, r6
 8013f4c:	463b      	mov	r3, r7
 8013f4e:	f7ec f9ad 	bl	80002ac <__adddf3>
 8013f52:	ec41 0b10 	vmov	d0, r0, r1
 8013f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013f5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f62:	4334      	orrs	r4, r6
 8013f64:	d103      	bne.n	8013f6e <__ieee754_atan2+0x5e>
 8013f66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f6a:	f000 b8a1 	b.w	80140b0 <atan>
 8013f6e:	17bc      	asrs	r4, r7, #30
 8013f70:	f004 0402 	and.w	r4, r4, #2
 8013f74:	ea53 0909 	orrs.w	r9, r3, r9
 8013f78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013f7c:	d107      	bne.n	8013f8e <__ieee754_atan2+0x7e>
 8013f7e:	2c02      	cmp	r4, #2
 8013f80:	d060      	beq.n	8014044 <__ieee754_atan2+0x134>
 8013f82:	2c03      	cmp	r4, #3
 8013f84:	d1e5      	bne.n	8013f52 <__ieee754_atan2+0x42>
 8013f86:	a142      	add	r1, pc, #264	; (adr r1, 8014090 <__ieee754_atan2+0x180>)
 8013f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f8c:	e7e1      	b.n	8013f52 <__ieee754_atan2+0x42>
 8013f8e:	ea52 0808 	orrs.w	r8, r2, r8
 8013f92:	d106      	bne.n	8013fa2 <__ieee754_atan2+0x92>
 8013f94:	f1bc 0f00 	cmp.w	ip, #0
 8013f98:	da5f      	bge.n	801405a <__ieee754_atan2+0x14a>
 8013f9a:	a13f      	add	r1, pc, #252	; (adr r1, 8014098 <__ieee754_atan2+0x188>)
 8013f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fa0:	e7d7      	b.n	8013f52 <__ieee754_atan2+0x42>
 8013fa2:	4572      	cmp	r2, lr
 8013fa4:	d10f      	bne.n	8013fc6 <__ieee754_atan2+0xb6>
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	f104 34ff 	add.w	r4, r4, #4294967295
 8013fac:	d107      	bne.n	8013fbe <__ieee754_atan2+0xae>
 8013fae:	2c02      	cmp	r4, #2
 8013fb0:	d84c      	bhi.n	801404c <__ieee754_atan2+0x13c>
 8013fb2:	4b35      	ldr	r3, [pc, #212]	; (8014088 <__ieee754_atan2+0x178>)
 8013fb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013fb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013fbc:	e7c9      	b.n	8013f52 <__ieee754_atan2+0x42>
 8013fbe:	2c02      	cmp	r4, #2
 8013fc0:	d848      	bhi.n	8014054 <__ieee754_atan2+0x144>
 8013fc2:	4b32      	ldr	r3, [pc, #200]	; (801408c <__ieee754_atan2+0x17c>)
 8013fc4:	e7f6      	b.n	8013fb4 <__ieee754_atan2+0xa4>
 8013fc6:	4573      	cmp	r3, lr
 8013fc8:	d0e4      	beq.n	8013f94 <__ieee754_atan2+0x84>
 8013fca:	1a9b      	subs	r3, r3, r2
 8013fcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013fd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013fd4:	da1e      	bge.n	8014014 <__ieee754_atan2+0x104>
 8013fd6:	2f00      	cmp	r7, #0
 8013fd8:	da01      	bge.n	8013fde <__ieee754_atan2+0xce>
 8013fda:	323c      	adds	r2, #60	; 0x3c
 8013fdc:	db1e      	blt.n	801401c <__ieee754_atan2+0x10c>
 8013fde:	4632      	mov	r2, r6
 8013fe0:	463b      	mov	r3, r7
 8013fe2:	f7ec fc43 	bl	800086c <__aeabi_ddiv>
 8013fe6:	ec41 0b10 	vmov	d0, r0, r1
 8013fea:	f000 fa01 	bl	80143f0 <fabs>
 8013fee:	f000 f85f 	bl	80140b0 <atan>
 8013ff2:	ec51 0b10 	vmov	r0, r1, d0
 8013ff6:	2c01      	cmp	r4, #1
 8013ff8:	d013      	beq.n	8014022 <__ieee754_atan2+0x112>
 8013ffa:	2c02      	cmp	r4, #2
 8013ffc:	d015      	beq.n	801402a <__ieee754_atan2+0x11a>
 8013ffe:	2c00      	cmp	r4, #0
 8014000:	d0a7      	beq.n	8013f52 <__ieee754_atan2+0x42>
 8014002:	a319      	add	r3, pc, #100	; (adr r3, 8014068 <__ieee754_atan2+0x158>)
 8014004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014008:	f7ec f94e 	bl	80002a8 <__aeabi_dsub>
 801400c:	a318      	add	r3, pc, #96	; (adr r3, 8014070 <__ieee754_atan2+0x160>)
 801400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014012:	e014      	b.n	801403e <__ieee754_atan2+0x12e>
 8014014:	a118      	add	r1, pc, #96	; (adr r1, 8014078 <__ieee754_atan2+0x168>)
 8014016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801401a:	e7ec      	b.n	8013ff6 <__ieee754_atan2+0xe6>
 801401c:	2000      	movs	r0, #0
 801401e:	2100      	movs	r1, #0
 8014020:	e7e9      	b.n	8013ff6 <__ieee754_atan2+0xe6>
 8014022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014026:	4619      	mov	r1, r3
 8014028:	e793      	b.n	8013f52 <__ieee754_atan2+0x42>
 801402a:	a30f      	add	r3, pc, #60	; (adr r3, 8014068 <__ieee754_atan2+0x158>)
 801402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014030:	f7ec f93a 	bl	80002a8 <__aeabi_dsub>
 8014034:	4602      	mov	r2, r0
 8014036:	460b      	mov	r3, r1
 8014038:	a10d      	add	r1, pc, #52	; (adr r1, 8014070 <__ieee754_atan2+0x160>)
 801403a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801403e:	f7ec f933 	bl	80002a8 <__aeabi_dsub>
 8014042:	e786      	b.n	8013f52 <__ieee754_atan2+0x42>
 8014044:	a10a      	add	r1, pc, #40	; (adr r1, 8014070 <__ieee754_atan2+0x160>)
 8014046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801404a:	e782      	b.n	8013f52 <__ieee754_atan2+0x42>
 801404c:	a10c      	add	r1, pc, #48	; (adr r1, 8014080 <__ieee754_atan2+0x170>)
 801404e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014052:	e77e      	b.n	8013f52 <__ieee754_atan2+0x42>
 8014054:	2000      	movs	r0, #0
 8014056:	2100      	movs	r1, #0
 8014058:	e77b      	b.n	8013f52 <__ieee754_atan2+0x42>
 801405a:	a107      	add	r1, pc, #28	; (adr r1, 8014078 <__ieee754_atan2+0x168>)
 801405c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014060:	e777      	b.n	8013f52 <__ieee754_atan2+0x42>
 8014062:	bf00      	nop
 8014064:	f3af 8000 	nop.w
 8014068:	33145c07 	.word	0x33145c07
 801406c:	3ca1a626 	.word	0x3ca1a626
 8014070:	54442d18 	.word	0x54442d18
 8014074:	400921fb 	.word	0x400921fb
 8014078:	54442d18 	.word	0x54442d18
 801407c:	3ff921fb 	.word	0x3ff921fb
 8014080:	54442d18 	.word	0x54442d18
 8014084:	3fe921fb 	.word	0x3fe921fb
 8014088:	08016208 	.word	0x08016208
 801408c:	08016220 	.word	0x08016220
 8014090:	54442d18 	.word	0x54442d18
 8014094:	c00921fb 	.word	0xc00921fb
 8014098:	54442d18 	.word	0x54442d18
 801409c:	bff921fb 	.word	0xbff921fb
 80140a0:	7ff00000 	.word	0x7ff00000

080140a4 <__ieee754_sqrtf>:
 80140a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80140a8:	4770      	bx	lr
 80140aa:	0000      	movs	r0, r0
 80140ac:	0000      	movs	r0, r0
	...

080140b0 <atan>:
 80140b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b4:	ec55 4b10 	vmov	r4, r5, d0
 80140b8:	4bc3      	ldr	r3, [pc, #780]	; (80143c8 <atan+0x318>)
 80140ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80140be:	429e      	cmp	r6, r3
 80140c0:	46ab      	mov	fp, r5
 80140c2:	dd18      	ble.n	80140f6 <atan+0x46>
 80140c4:	4bc1      	ldr	r3, [pc, #772]	; (80143cc <atan+0x31c>)
 80140c6:	429e      	cmp	r6, r3
 80140c8:	dc01      	bgt.n	80140ce <atan+0x1e>
 80140ca:	d109      	bne.n	80140e0 <atan+0x30>
 80140cc:	b144      	cbz	r4, 80140e0 <atan+0x30>
 80140ce:	4622      	mov	r2, r4
 80140d0:	462b      	mov	r3, r5
 80140d2:	4620      	mov	r0, r4
 80140d4:	4629      	mov	r1, r5
 80140d6:	f7ec f8e9 	bl	80002ac <__adddf3>
 80140da:	4604      	mov	r4, r0
 80140dc:	460d      	mov	r5, r1
 80140de:	e006      	b.n	80140ee <atan+0x3e>
 80140e0:	f1bb 0f00 	cmp.w	fp, #0
 80140e4:	f300 8131 	bgt.w	801434a <atan+0x29a>
 80140e8:	a59b      	add	r5, pc, #620	; (adr r5, 8014358 <atan+0x2a8>)
 80140ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80140ee:	ec45 4b10 	vmov	d0, r4, r5
 80140f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f6:	4bb6      	ldr	r3, [pc, #728]	; (80143d0 <atan+0x320>)
 80140f8:	429e      	cmp	r6, r3
 80140fa:	dc14      	bgt.n	8014126 <atan+0x76>
 80140fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014100:	429e      	cmp	r6, r3
 8014102:	dc0d      	bgt.n	8014120 <atan+0x70>
 8014104:	a396      	add	r3, pc, #600	; (adr r3, 8014360 <atan+0x2b0>)
 8014106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801410a:	ee10 0a10 	vmov	r0, s0
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec f8cc 	bl	80002ac <__adddf3>
 8014114:	4baf      	ldr	r3, [pc, #700]	; (80143d4 <atan+0x324>)
 8014116:	2200      	movs	r2, #0
 8014118:	f7ec fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 801411c:	2800      	cmp	r0, #0
 801411e:	d1e6      	bne.n	80140ee <atan+0x3e>
 8014120:	f04f 3aff 	mov.w	sl, #4294967295
 8014124:	e02b      	b.n	801417e <atan+0xce>
 8014126:	f000 f963 	bl	80143f0 <fabs>
 801412a:	4bab      	ldr	r3, [pc, #684]	; (80143d8 <atan+0x328>)
 801412c:	429e      	cmp	r6, r3
 801412e:	ec55 4b10 	vmov	r4, r5, d0
 8014132:	f300 80bf 	bgt.w	80142b4 <atan+0x204>
 8014136:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801413a:	429e      	cmp	r6, r3
 801413c:	f300 80a0 	bgt.w	8014280 <atan+0x1d0>
 8014140:	ee10 2a10 	vmov	r2, s0
 8014144:	ee10 0a10 	vmov	r0, s0
 8014148:	462b      	mov	r3, r5
 801414a:	4629      	mov	r1, r5
 801414c:	f7ec f8ae 	bl	80002ac <__adddf3>
 8014150:	4ba0      	ldr	r3, [pc, #640]	; (80143d4 <atan+0x324>)
 8014152:	2200      	movs	r2, #0
 8014154:	f7ec f8a8 	bl	80002a8 <__aeabi_dsub>
 8014158:	2200      	movs	r2, #0
 801415a:	4606      	mov	r6, r0
 801415c:	460f      	mov	r7, r1
 801415e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014162:	4620      	mov	r0, r4
 8014164:	4629      	mov	r1, r5
 8014166:	f7ec f8a1 	bl	80002ac <__adddf3>
 801416a:	4602      	mov	r2, r0
 801416c:	460b      	mov	r3, r1
 801416e:	4630      	mov	r0, r6
 8014170:	4639      	mov	r1, r7
 8014172:	f7ec fb7b 	bl	800086c <__aeabi_ddiv>
 8014176:	f04f 0a00 	mov.w	sl, #0
 801417a:	4604      	mov	r4, r0
 801417c:	460d      	mov	r5, r1
 801417e:	4622      	mov	r2, r4
 8014180:	462b      	mov	r3, r5
 8014182:	4620      	mov	r0, r4
 8014184:	4629      	mov	r1, r5
 8014186:	f7ec fa47 	bl	8000618 <__aeabi_dmul>
 801418a:	4602      	mov	r2, r0
 801418c:	460b      	mov	r3, r1
 801418e:	4680      	mov	r8, r0
 8014190:	4689      	mov	r9, r1
 8014192:	f7ec fa41 	bl	8000618 <__aeabi_dmul>
 8014196:	a374      	add	r3, pc, #464	; (adr r3, 8014368 <atan+0x2b8>)
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	4606      	mov	r6, r0
 801419e:	460f      	mov	r7, r1
 80141a0:	f7ec fa3a 	bl	8000618 <__aeabi_dmul>
 80141a4:	a372      	add	r3, pc, #456	; (adr r3, 8014370 <atan+0x2c0>)
 80141a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141aa:	f7ec f87f 	bl	80002ac <__adddf3>
 80141ae:	4632      	mov	r2, r6
 80141b0:	463b      	mov	r3, r7
 80141b2:	f7ec fa31 	bl	8000618 <__aeabi_dmul>
 80141b6:	a370      	add	r3, pc, #448	; (adr r3, 8014378 <atan+0x2c8>)
 80141b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141bc:	f7ec f876 	bl	80002ac <__adddf3>
 80141c0:	4632      	mov	r2, r6
 80141c2:	463b      	mov	r3, r7
 80141c4:	f7ec fa28 	bl	8000618 <__aeabi_dmul>
 80141c8:	a36d      	add	r3, pc, #436	; (adr r3, 8014380 <atan+0x2d0>)
 80141ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ce:	f7ec f86d 	bl	80002ac <__adddf3>
 80141d2:	4632      	mov	r2, r6
 80141d4:	463b      	mov	r3, r7
 80141d6:	f7ec fa1f 	bl	8000618 <__aeabi_dmul>
 80141da:	a36b      	add	r3, pc, #428	; (adr r3, 8014388 <atan+0x2d8>)
 80141dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e0:	f7ec f864 	bl	80002ac <__adddf3>
 80141e4:	4632      	mov	r2, r6
 80141e6:	463b      	mov	r3, r7
 80141e8:	f7ec fa16 	bl	8000618 <__aeabi_dmul>
 80141ec:	a368      	add	r3, pc, #416	; (adr r3, 8014390 <atan+0x2e0>)
 80141ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f2:	f7ec f85b 	bl	80002ac <__adddf3>
 80141f6:	4642      	mov	r2, r8
 80141f8:	464b      	mov	r3, r9
 80141fa:	f7ec fa0d 	bl	8000618 <__aeabi_dmul>
 80141fe:	a366      	add	r3, pc, #408	; (adr r3, 8014398 <atan+0x2e8>)
 8014200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014204:	4680      	mov	r8, r0
 8014206:	4689      	mov	r9, r1
 8014208:	4630      	mov	r0, r6
 801420a:	4639      	mov	r1, r7
 801420c:	f7ec fa04 	bl	8000618 <__aeabi_dmul>
 8014210:	a363      	add	r3, pc, #396	; (adr r3, 80143a0 <atan+0x2f0>)
 8014212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014216:	f7ec f847 	bl	80002a8 <__aeabi_dsub>
 801421a:	4632      	mov	r2, r6
 801421c:	463b      	mov	r3, r7
 801421e:	f7ec f9fb 	bl	8000618 <__aeabi_dmul>
 8014222:	a361      	add	r3, pc, #388	; (adr r3, 80143a8 <atan+0x2f8>)
 8014224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014228:	f7ec f83e 	bl	80002a8 <__aeabi_dsub>
 801422c:	4632      	mov	r2, r6
 801422e:	463b      	mov	r3, r7
 8014230:	f7ec f9f2 	bl	8000618 <__aeabi_dmul>
 8014234:	a35e      	add	r3, pc, #376	; (adr r3, 80143b0 <atan+0x300>)
 8014236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423a:	f7ec f835 	bl	80002a8 <__aeabi_dsub>
 801423e:	4632      	mov	r2, r6
 8014240:	463b      	mov	r3, r7
 8014242:	f7ec f9e9 	bl	8000618 <__aeabi_dmul>
 8014246:	a35c      	add	r3, pc, #368	; (adr r3, 80143b8 <atan+0x308>)
 8014248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424c:	f7ec f82c 	bl	80002a8 <__aeabi_dsub>
 8014250:	4632      	mov	r2, r6
 8014252:	463b      	mov	r3, r7
 8014254:	f7ec f9e0 	bl	8000618 <__aeabi_dmul>
 8014258:	4602      	mov	r2, r0
 801425a:	460b      	mov	r3, r1
 801425c:	4640      	mov	r0, r8
 801425e:	4649      	mov	r1, r9
 8014260:	f7ec f824 	bl	80002ac <__adddf3>
 8014264:	4622      	mov	r2, r4
 8014266:	462b      	mov	r3, r5
 8014268:	f7ec f9d6 	bl	8000618 <__aeabi_dmul>
 801426c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014270:	4602      	mov	r2, r0
 8014272:	460b      	mov	r3, r1
 8014274:	d14b      	bne.n	801430e <atan+0x25e>
 8014276:	4620      	mov	r0, r4
 8014278:	4629      	mov	r1, r5
 801427a:	f7ec f815 	bl	80002a8 <__aeabi_dsub>
 801427e:	e72c      	b.n	80140da <atan+0x2a>
 8014280:	ee10 0a10 	vmov	r0, s0
 8014284:	4b53      	ldr	r3, [pc, #332]	; (80143d4 <atan+0x324>)
 8014286:	2200      	movs	r2, #0
 8014288:	4629      	mov	r1, r5
 801428a:	f7ec f80d 	bl	80002a8 <__aeabi_dsub>
 801428e:	4b51      	ldr	r3, [pc, #324]	; (80143d4 <atan+0x324>)
 8014290:	4606      	mov	r6, r0
 8014292:	460f      	mov	r7, r1
 8014294:	2200      	movs	r2, #0
 8014296:	4620      	mov	r0, r4
 8014298:	4629      	mov	r1, r5
 801429a:	f7ec f807 	bl	80002ac <__adddf3>
 801429e:	4602      	mov	r2, r0
 80142a0:	460b      	mov	r3, r1
 80142a2:	4630      	mov	r0, r6
 80142a4:	4639      	mov	r1, r7
 80142a6:	f7ec fae1 	bl	800086c <__aeabi_ddiv>
 80142aa:	f04f 0a01 	mov.w	sl, #1
 80142ae:	4604      	mov	r4, r0
 80142b0:	460d      	mov	r5, r1
 80142b2:	e764      	b.n	801417e <atan+0xce>
 80142b4:	4b49      	ldr	r3, [pc, #292]	; (80143dc <atan+0x32c>)
 80142b6:	429e      	cmp	r6, r3
 80142b8:	da1d      	bge.n	80142f6 <atan+0x246>
 80142ba:	ee10 0a10 	vmov	r0, s0
 80142be:	4b48      	ldr	r3, [pc, #288]	; (80143e0 <atan+0x330>)
 80142c0:	2200      	movs	r2, #0
 80142c2:	4629      	mov	r1, r5
 80142c4:	f7eb fff0 	bl	80002a8 <__aeabi_dsub>
 80142c8:	4b45      	ldr	r3, [pc, #276]	; (80143e0 <atan+0x330>)
 80142ca:	4606      	mov	r6, r0
 80142cc:	460f      	mov	r7, r1
 80142ce:	2200      	movs	r2, #0
 80142d0:	4620      	mov	r0, r4
 80142d2:	4629      	mov	r1, r5
 80142d4:	f7ec f9a0 	bl	8000618 <__aeabi_dmul>
 80142d8:	4b3e      	ldr	r3, [pc, #248]	; (80143d4 <atan+0x324>)
 80142da:	2200      	movs	r2, #0
 80142dc:	f7eb ffe6 	bl	80002ac <__adddf3>
 80142e0:	4602      	mov	r2, r0
 80142e2:	460b      	mov	r3, r1
 80142e4:	4630      	mov	r0, r6
 80142e6:	4639      	mov	r1, r7
 80142e8:	f7ec fac0 	bl	800086c <__aeabi_ddiv>
 80142ec:	f04f 0a02 	mov.w	sl, #2
 80142f0:	4604      	mov	r4, r0
 80142f2:	460d      	mov	r5, r1
 80142f4:	e743      	b.n	801417e <atan+0xce>
 80142f6:	462b      	mov	r3, r5
 80142f8:	ee10 2a10 	vmov	r2, s0
 80142fc:	4939      	ldr	r1, [pc, #228]	; (80143e4 <atan+0x334>)
 80142fe:	2000      	movs	r0, #0
 8014300:	f7ec fab4 	bl	800086c <__aeabi_ddiv>
 8014304:	f04f 0a03 	mov.w	sl, #3
 8014308:	4604      	mov	r4, r0
 801430a:	460d      	mov	r5, r1
 801430c:	e737      	b.n	801417e <atan+0xce>
 801430e:	4b36      	ldr	r3, [pc, #216]	; (80143e8 <atan+0x338>)
 8014310:	4e36      	ldr	r6, [pc, #216]	; (80143ec <atan+0x33c>)
 8014312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014316:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801431a:	e9da 2300 	ldrd	r2, r3, [sl]
 801431e:	f7eb ffc3 	bl	80002a8 <__aeabi_dsub>
 8014322:	4622      	mov	r2, r4
 8014324:	462b      	mov	r3, r5
 8014326:	f7eb ffbf 	bl	80002a8 <__aeabi_dsub>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014332:	f7eb ffb9 	bl	80002a8 <__aeabi_dsub>
 8014336:	f1bb 0f00 	cmp.w	fp, #0
 801433a:	4604      	mov	r4, r0
 801433c:	460d      	mov	r5, r1
 801433e:	f6bf aed6 	bge.w	80140ee <atan+0x3e>
 8014342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014346:	461d      	mov	r5, r3
 8014348:	e6d1      	b.n	80140ee <atan+0x3e>
 801434a:	a51d      	add	r5, pc, #116	; (adr r5, 80143c0 <atan+0x310>)
 801434c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014350:	e6cd      	b.n	80140ee <atan+0x3e>
 8014352:	bf00      	nop
 8014354:	f3af 8000 	nop.w
 8014358:	54442d18 	.word	0x54442d18
 801435c:	bff921fb 	.word	0xbff921fb
 8014360:	8800759c 	.word	0x8800759c
 8014364:	7e37e43c 	.word	0x7e37e43c
 8014368:	e322da11 	.word	0xe322da11
 801436c:	3f90ad3a 	.word	0x3f90ad3a
 8014370:	24760deb 	.word	0x24760deb
 8014374:	3fa97b4b 	.word	0x3fa97b4b
 8014378:	a0d03d51 	.word	0xa0d03d51
 801437c:	3fb10d66 	.word	0x3fb10d66
 8014380:	c54c206e 	.word	0xc54c206e
 8014384:	3fb745cd 	.word	0x3fb745cd
 8014388:	920083ff 	.word	0x920083ff
 801438c:	3fc24924 	.word	0x3fc24924
 8014390:	5555550d 	.word	0x5555550d
 8014394:	3fd55555 	.word	0x3fd55555
 8014398:	2c6a6c2f 	.word	0x2c6a6c2f
 801439c:	bfa2b444 	.word	0xbfa2b444
 80143a0:	52defd9a 	.word	0x52defd9a
 80143a4:	3fadde2d 	.word	0x3fadde2d
 80143a8:	af749a6d 	.word	0xaf749a6d
 80143ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80143b0:	fe231671 	.word	0xfe231671
 80143b4:	3fbc71c6 	.word	0x3fbc71c6
 80143b8:	9998ebc4 	.word	0x9998ebc4
 80143bc:	3fc99999 	.word	0x3fc99999
 80143c0:	54442d18 	.word	0x54442d18
 80143c4:	3ff921fb 	.word	0x3ff921fb
 80143c8:	440fffff 	.word	0x440fffff
 80143cc:	7ff00000 	.word	0x7ff00000
 80143d0:	3fdbffff 	.word	0x3fdbffff
 80143d4:	3ff00000 	.word	0x3ff00000
 80143d8:	3ff2ffff 	.word	0x3ff2ffff
 80143dc:	40038000 	.word	0x40038000
 80143e0:	3ff80000 	.word	0x3ff80000
 80143e4:	bff00000 	.word	0xbff00000
 80143e8:	08016258 	.word	0x08016258
 80143ec:	08016238 	.word	0x08016238

080143f0 <fabs>:
 80143f0:	ec51 0b10 	vmov	r0, r1, d0
 80143f4:	ee10 2a10 	vmov	r2, s0
 80143f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143fc:	ec43 2b10 	vmov	d0, r2, r3
 8014400:	4770      	bx	lr
	...

08014404 <_init>:
 8014404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014406:	bf00      	nop
 8014408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801440a:	bc08      	pop	{r3}
 801440c:	469e      	mov	lr, r3
 801440e:	4770      	bx	lr

08014410 <_fini>:
 8014410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014412:	bf00      	nop
 8014414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014416:	bc08      	pop	{r3}
 8014418:	469e      	mov	lr, r3
 801441a:	4770      	bx	lr
