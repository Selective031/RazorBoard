
BWF_Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000346c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003618  08003618  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003618  08003618  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003618  08003618  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000080  080036a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080036a0  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c055  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d25  00000000  00000000  0002c0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018646  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0d4  00000000  00000000  00047cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbb3  00000000  00000000  00054daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e495d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a0  00000000  00000000  000e49b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003560 	.word	0x08003560

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003560 	.word	0x08003560

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <run_sig>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void run_sig(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e015      	b.n	8000194 <run_sig+0x38>

		  if (SIG1[x] == 1) signal_up();
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a0e      	ldr	r2, [pc, #56]	; (80001a4 <run_sig+0x48>)
 800016c:	56d3      	ldrsb	r3, [r2, r3]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d102      	bne.n	8000178 <run_sig+0x1c>
 8000172:	f000 f819 	bl	80001a8 <signal_up>
 8000176:	e007      	b.n	8000188 <run_sig+0x2c>
		  else if(SIG1[x] == -1) signal_down();
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <run_sig+0x48>)
 800017c:	56d3      	ldrsb	r3, [r2, r3]
 800017e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000182:	d101      	bne.n	8000188 <run_sig+0x2c>
 8000184:	f000 f822 	bl	80001cc <signal_down>

		  delay_us(DELAY);
 8000188:	2064      	movs	r0, #100	; 0x64
 800018a:	f000 f843 	bl	8000214 <delay_us>
	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	3301      	adds	r3, #1
 8000192:	71fb      	strb	r3, [r7, #7]
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b09      	cmp	r3, #9
 8000198:	d9e6      	bls.n	8000168 <run_sig+0xc>

	  }
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000004 	.word	0x20000004

080001a8 <signal_up>:


void signal_up(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <signal_up+0x20>)
 80001b4:	f001 fb50 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001be:	4802      	ldr	r0, [pc, #8]	; (80001c8 <signal_up+0x20>)
 80001c0:	f001 fb4a 	bl	8001858 <HAL_GPIO_WritePin>

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010c00 	.word	0x40010c00

080001cc <signal_down>:
void signal_down(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <signal_down+0x20>)
 80001d8:	f001 fb3e 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <signal_down+0x20>)
 80001e4:	f001 fb38 	bl	8001858 <HAL_GPIO_WritePin>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <signal_off>:

void signal_off(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <signal_off+0x20>)
 80001fc:	f001 fb2c 	bl	8001858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000206:	4802      	ldr	r0, [pc, #8]	; (8000210 <signal_off+0x20>)
 8000208:	f001 fb26 	bl	8001858 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00

08000214 <delay_us>:

void delay_us (uint16_t us)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <delay_us+0x2c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2200      	movs	r2, #0
 8000224:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000226:	bf00      	nop
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <delay_us+0x2c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	429a      	cmp	r2, r3
 8000232:	d3f9      	bcc.n	8000228 <delay_us+0x14>
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	20000128 	.word	0x20000128

08000244 <toogle_led>:

void toogle_led(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - LED_timer >= 200) {
 8000248:	f000 fc60 	bl	8000b0c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <toogle_led+0x50>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	2bc7      	cmp	r3, #199	; 0xc7
 8000256:	d91b      	bls.n	8000290 <toogle_led+0x4c>
		if (LED_status == 0) {
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <toogle_led+0x54>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <toogle_led+0x30>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000266:	480d      	ldr	r0, [pc, #52]	; (800029c <toogle_led+0x58>)
 8000268:	f001 faf6 	bl	8001858 <HAL_GPIO_WritePin>
			LED_status = 1;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <toogle_led+0x54>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	e008      	b.n	8000286 <toogle_led+0x42>

			}
		else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <toogle_led+0x58>)
 800027c:	f001 faec 	bl	8001858 <HAL_GPIO_WritePin>
			LED_status = 0;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <toogle_led+0x54>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
			}
		LED_timer = HAL_GetTick();
 8000286:	f000 fc41 	bl	8000b0c <HAL_GetTick>
 800028a:	4603      	mov	r3, r0
 800028c:	4a01      	ldr	r2, [pc, #4]	; (8000294 <toogle_led+0x50>)
 800028e:	6013      	str	r3, [r2, #0]
	}

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000124 	.word	0x20000124
 8000298:	2000009c 	.word	0x2000009c
 800029c:	40010800 	.word	0x40010800

080002a0 <run_led>:

void run_led(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

	if (LED_status == 0) {
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <run_led+0x24>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d108      	bne.n	80002be <run_led+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <run_led+0x28>)
 80002b4:	f001 fad0 	bl	8001858 <HAL_GPIO_WritePin>
		LED_status = 1;
 80002b8:	4b02      	ldr	r3, [pc, #8]	; (80002c4 <run_led+0x24>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]

		}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000009c 	.word	0x2000009c
 80002c8:	40010800 	.word	0x40010800

080002cc <CalibrateSens>:

void CalibrateSens(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	int sumVolt = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]

	for (uint16_t x = 0; x < 100; x++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	807b      	strh	r3, [r7, #2]
 80002da:	e014      	b.n	8000306 <CalibrateSens+0x3a>
		HAL_ADC_Start(&hadc1);
 80002dc:	4812      	ldr	r0, [pc, #72]	; (8000328 <CalibrateSens+0x5c>)
 80002de:	f000 fd1b 	bl	8000d18 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002e2:	f04f 31ff 	mov.w	r1, #4294967295
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <CalibrateSens+0x5c>)
 80002e8:	f000 fdc4 	bl	8000e74 <HAL_ADC_PollForConversion>
	   	sumVolt += HAL_ADC_GetValue(&hadc1);
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <CalibrateSens+0x5c>)
 80002ee:	f000 febb 	bl	8001068 <HAL_ADC_GetValue>
 80002f2:	4602      	mov	r2, r0
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4413      	add	r3, r2
 80002f8:	607b      	str	r3, [r7, #4]
	   	HAL_Delay(10);
 80002fa:	200a      	movs	r0, #10
 80002fc:	f000 fc10 	bl	8000b20 <HAL_Delay>
	for (uint16_t x = 0; x < 100; x++) {
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	3301      	adds	r3, #1
 8000304:	807b      	strh	r3, [r7, #2]
 8000306:	887b      	ldrh	r3, [r7, #2]
 8000308:	2b63      	cmp	r3, #99	; 0x63
 800030a:	d9e7      	bls.n	80002dc <CalibrateSens+0x10>
	}

	CalibratedValue = sumVolt / 100;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <CalibrateSens+0x60>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1152      	asrs	r2, r2, #5
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <CalibrateSens+0x64>)
 800031c:	6013      	str	r3, [r2, #0]
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200000b0 	.word	0x200000b0
 800032c:	51eb851f 	.word	0x51eb851f
 8000330:	200000e0 	.word	0x200000e0

08000334 <CheckDocked>:

void CheckDocked(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b094      	sub	sp, #80	; 0x50
 8000338:	af02      	add	r7, sp, #8
	int sumVolt = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	647b      	str	r3, [r7, #68]	; 0x44

	char msg[64];
	for (uint16_t x = 0; x < 10; x++) {
 800033e:	2300      	movs	r3, #0
 8000340:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000344:	e013      	b.n	800036e <CheckDocked+0x3a>
		HAL_ADC_Start(&hadc1);
 8000346:	4822      	ldr	r0, [pc, #136]	; (80003d0 <CheckDocked+0x9c>)
 8000348:	f000 fce6 	bl	8000d18 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800034c:	f04f 31ff 	mov.w	r1, #4294967295
 8000350:	481f      	ldr	r0, [pc, #124]	; (80003d0 <CheckDocked+0x9c>)
 8000352:	f000 fd8f 	bl	8000e74 <HAL_ADC_PollForConversion>
	   	sumVolt += HAL_ADC_GetValue(&hadc1);
 8000356:	481e      	ldr	r0, [pc, #120]	; (80003d0 <CheckDocked+0x9c>)
 8000358:	f000 fe86 	bl	8001068 <HAL_ADC_GetValue>
 800035c:	4602      	mov	r2, r0
 800035e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000360:	4413      	add	r3, r2
 8000362:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint16_t x = 0; x < 10; x++) {
 8000364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000368:	3301      	adds	r3, #1
 800036a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800036e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000372:	2b09      	cmp	r3, #9
 8000374:	d9e7      	bls.n	8000346 <CheckDocked+0x12>
	}

	CurrentValue = sumVolt / 10;
 8000376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000378:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <CheckDocked+0xa0>)
 800037a:	fb82 1203 	smull	r1, r2, r2, r3
 800037e:	1092      	asrs	r2, r2, #2
 8000380:	17db      	asrs	r3, r3, #31
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <CheckDocked+0xa4>)
 8000386:	6013      	str	r3, [r2, #0]

	sprintf(msg, "Calibrated Value: %d Current Value: %d Diff: %d\r\n", CurrentValue, abs(CalibratedValue - CurrentValue), CalibratedValue);
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <CheckDocked+0xa4>)
 800038a:	6819      	ldr	r1, [r3, #0]
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <CheckDocked+0xa8>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <CheckDocked+0xa4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800039a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <CheckDocked+0xa8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4638      	mov	r0, r7
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	4613      	mov	r3, r2
 80003a8:	460a      	mov	r2, r1
 80003aa:	490d      	ldr	r1, [pc, #52]	; (80003e0 <CheckDocked+0xac>)
 80003ac:	f002 fc9e 	bl	8002cec <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80003b0:	463b      	mov	r3, r7
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff feca 	bl	800014c <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4639      	mov	r1, r7
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	4808      	ldr	r0, [pc, #32]	; (80003e4 <CheckDocked+0xb0>)
 80003c4:	f002 faf5 	bl	80029b2 <HAL_UART_Transmit>

}
 80003c8:	bf00      	nop
 80003ca:	3748      	adds	r7, #72	; 0x48
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000b0 	.word	0x200000b0
 80003d4:	66666667 	.word	0x66666667
 80003d8:	200000ac 	.word	0x200000ac
 80003dc:	200000e0 	.word	0x200000e0
 80003e0:	08003578 	.word	0x08003578
 80003e4:	200000e4 	.word	0x200000e4

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fb36 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f84e 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f95c 	bl	80006b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003f8:	f000 f8a6 	bl	8000548 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003fc:	f000 f8e2 	bl	80005c4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f92c 	bl	800065c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000404:	481c      	ldr	r0, [pc, #112]	; (8000478 <main+0x90>)
 8000406:	f002 f823 	bl	8002450 <HAL_TIM_Base_Start>
  LED_timer = HAL_GetTick();
 800040a:	f000 fb7f 	bl	8000b0c <HAL_GetTick>
 800040e:	4603      	mov	r3, r0
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <main+0x94>)
 8000412:	6013      	str	r3, [r2, #0]

  HAL_Delay(500);
 8000414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000418:	f000 fb82 	bl	8000b20 <HAL_Delay>

  CalibrateSens();
 800041c:	f7ff ff56 	bl	80002cc <CalibrateSens>

  LoopTimer = HAL_GetTick();
 8000420:	f000 fb74 	bl	8000b0c <HAL_GetTick>
 8000424:	4603      	mov	r3, r0
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <main+0x98>)
 8000428:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GetTick() - LoopTimer >= (LOOPCHECKTIME * 1000)) {
 800042a:	f000 fb6f 	bl	8000b0c <HAL_GetTick>
 800042e:	4602      	mov	r2, r0
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <main+0x98>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	f242 720f 	movw	r2, #9999	; 0x270f
 800043a:	4293      	cmp	r3, r2
 800043c:	d906      	bls.n	800044c <main+0x64>
		  CheckDocked();
 800043e:	f7ff ff79 	bl	8000334 <CheckDocked>
		  LoopTimer =  HAL_GetTick();
 8000442:	f000 fb63 	bl	8000b0c <HAL_GetTick>
 8000446:	4603      	mov	r3, r0
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <main+0x98>)
 800044a:	6013      	str	r3, [r2, #0]
	  }

	  if ( abs(CalibratedValue - CurrentValue) < offset) {
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <main+0x9c>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <main+0xa0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	bfb8      	it	lt
 800045a:	425b      	neglt	r3, r3
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <main+0xa4>)
 800045e:	7812      	ldrb	r2, [r2, #0]
 8000460:	4293      	cmp	r3, r2
 8000462:	da04      	bge.n	800046e <main+0x86>
		  toogle_led();
 8000464:	f7ff feee 	bl	8000244 <toogle_led>
		  run_sig();
 8000468:	f7ff fe78 	bl	800015c <run_sig>
 800046c:	e7dd      	b.n	800042a <main+0x42>
	  }
	  else {
		  run_led();
 800046e:	f7ff ff17 	bl	80002a0 <run_led>
		  signal_off();
 8000472:	f7ff febd 	bl	80001f0 <signal_off>
	  if (HAL_GetTick() - LoopTimer >= (LOOPCHECKTIME * 1000)) {
 8000476:	e7d8      	b.n	800042a <main+0x42>
 8000478:	20000128 	.word	0x20000128
 800047c:	20000124 	.word	0x20000124
 8000480:	20000170 	.word	0x20000170
 8000484:	200000e0 	.word	0x200000e0
 8000488:	200000ac 	.word	0x200000ac
 800048c:	20000000 	.word	0x20000000

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b094      	sub	sp, #80	; 0x50
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fc1c 	bl	8002cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c0:	2301      	movs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f9ce 	bl	8001888 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f2:	f000 f94d 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	230f      	movs	r3, #15
 80004f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2102      	movs	r1, #2
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fc38 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800051e:	f000 f937 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000522:	2302      	movs	r3, #2
 8000524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fdc4 	bl	80020bc <HAL_RCCEx_PeriphCLKConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800053a:	f000 f929 	bl	8000790 <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3750      	adds	r7, #80	; 0x50
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_ADC1_Init+0x74>)
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <MX_ADC1_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_ADC1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_ADC1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_ADC1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_ADC1_Init+0x74>)
 8000572:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000576:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_ADC1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_ADC1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <MX_ADC1_Init+0x74>)
 8000586:	f000 faef 	bl	8000b68 <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000590:	f000 f8fe 	bl	8000790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000594:	2308      	movs	r3, #8
 8000596:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_ADC1_Init+0x74>)
 80005a6:	f000 fd6b 	bl	8001080 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005b0:	f000 f8ee 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000b0 	.word	0x200000b0
 80005c0:	40012400 	.word	0x40012400

080005c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_TIM2_Init+0x94>)
 80005e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_TIM2_Init+0x94>)
 80005ea:	2247      	movs	r2, #71	; 0x47
 80005ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_TIM2_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_TIM2_Init+0x94>)
 80005f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80005fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_TIM2_Init+0x94>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_TIM2_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <MX_TIM2_Init+0x94>)
 800060a:	f001 fed1 	bl	80023b0 <HAL_TIM_Base_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000614:	f000 f8bc 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	4619      	mov	r1, r3
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_TIM2_Init+0x94>)
 8000626:	f001 ff5d 	bl	80024e4 <HAL_TIM_ConfigClockSource>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 f8ae 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_TIM2_Init+0x94>)
 8000642:	f002 f90b 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800064c:	f000 f8a0 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000128 	.word	0x20000128

0800065c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_USART1_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART1_UART_Init+0x4c>)
 8000694:	f002 f940 	bl	8002918 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f877 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000e4 	.word	0x200000e4
 80006ac:	40013800 	.word	0x40013800

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800070c:	2200      	movs	r2, #0
 800070e:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <MX_GPIO_Init+0xd8>)
 8000714:	f001 f8a0 	bl	8001858 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <MX_GPIO_Init+0xdc>)
 8000720:	f001 f89a 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000724:	2304      	movs	r3, #4
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_GPIO_Init+0xd8>)
 800073c:	f000 ff08 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000740:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xd8>)
 800075a:	f000 fef9 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xdc>)
 8000778:	f000 feea 	bl	8001550 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40010800 	.word	0x40010800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x60>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_MspInit+0x60>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000

08000800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_ADC_MspInit+0x6c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d121      	bne.n	8000864 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <HAL_ADC_MspInit+0x70>)
 8000826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_ADC_MspInit+0x70>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <HAL_ADC_MspInit+0x70>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_ADC_MspInit+0x70>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000854:	2303      	movs	r3, #3
 8000856:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000860:	f000 fe76 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40012400 	.word	0x40012400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010c00 	.word	0x40010c00

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000888:	d10b      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_TIM_Base_MspInit+0x34>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_TIM_Base_MspInit+0x34>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_TIM_Base_MspInit+0x34>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d131      	bne.n	8000934 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <HAL_UART_MspInit+0x94>)
 8000916:	f000 fe1b 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_MspInit+0x94>)
 8000930:	f000 fe0e 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40013800 	.word	0x40013800
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f8ab 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f002 f95e 	bl	8002c88 <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20005000 	.word	0x20005000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	200000a0 	.word	0x200000a0
 8000a00:	20000188 	.word	0x20000188

08000a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a36:	f7ff ffe5 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 f92b 	bl	8002c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fcd3 	bl	80003e8 <main>
  bx lr
 8000a42:	4770      	bx	lr
  ldr r3, =_sidata
 8000a44:	08003620 	.word	0x08003620
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a4c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000a50:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000a54:	20000188 	.word	0x20000188

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 fd3b 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe90 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fd45 	bl	8001536 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 fd1b 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	20000018 	.word	0x20000018
 8000ae4:	20000014 	.word	0x20000014

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000018 	.word	0x20000018
 8000b08:	20000174 	.word	0x20000174

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000174 	.word	0x20000174

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff0 	bl	8000b0c <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffe0 	bl	8000b0c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000018 	.word	0x20000018

08000b68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e0be      	b.n	8000d08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fe2a 	bl	8000800 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fbb1 	bl	8001314 <ADC_ConversionStop_Disable>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8099 	bne.w	8000cf6 <HAL_ADC_Init+0x18e>
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8095 	bne.w	8000cf6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bd4:	f023 0302 	bic.w	r3, r3, #2
 8000bd8:	f043 0202 	orr.w	r2, r3, #2
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7b1b      	ldrb	r3, [r3, #12]
 8000bee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c00:	d003      	beq.n	8000c0a <HAL_ADC_Init+0xa2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d102      	bne.n	8000c10 <HAL_ADC_Init+0xa8>
 8000c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0e:	e000      	b.n	8000c12 <HAL_ADC_Init+0xaa>
 8000c10:	2300      	movs	r3, #0
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7d1b      	ldrb	r3, [r3, #20]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d119      	bne.n	8000c54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7b1b      	ldrb	r3, [r3, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d109      	bne.n	8000c3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	035a      	lsls	r2, r3, #13
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	e00b      	b.n	8000c54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	f043 0220 	orr.w	r2, r3, #32
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4c:	f043 0201 	orr.w	r2, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <HAL_ADC_Init+0x1a8>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c84:	d003      	beq.n	8000c8e <HAL_ADC_Init+0x126>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d104      	bne.n	8000c98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	051b      	lsls	r3, r3, #20
 8000c96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_ADC_Init+0x1ac>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d10b      	bne.n	8000cd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	f043 0201 	orr.w	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd2:	e018      	b.n	8000d06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f023 0312 	bic.w	r3, r3, #18
 8000cdc:	f043 0210 	orr.w	r2, r3, #16
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	f043 0201 	orr.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf4:	e007      	b.n	8000d06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfa:	f043 0210 	orr.w	r2, r3, #16
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	ffe1f7fd 	.word	0xffe1f7fd
 8000d14:	ff1f0efe 	.word	0xff1f0efe

08000d18 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Start+0x1a>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e098      	b.n	8000e64 <HAL_ADC_Start+0x14c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 fa98 	bl	8001270 <ADC_Enable>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 8087 	bne.w	8000e5a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d105      	bne.n	8000d76 <HAL_ADC_Start+0x5e>
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d115      	bne.n	8000da2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d026      	beq.n	8000dde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000da0:	e01d      	b.n	8000dde <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d004      	beq.n	8000dc2 <HAL_ADC_Start+0xaa>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10d      	bne.n	8000dde <HAL_ADC_Start+0xc6>
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	f023 0206 	bic.w	r2, r3, #6
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	e002      	b.n	8000dfe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f06f 0202 	mvn.w	r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e1e:	d113      	bne.n	8000e48 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_ADC_Start+0x154>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d105      	bne.n	8000e36 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_ADC_Start+0x158>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d108      	bne.n	8000e48 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	e00c      	b.n	8000e62 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	e003      	b.n	8000e62 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40012800 	.word	0x40012800
 8000e70:	40012400 	.word	0x40012400

08000e74 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e8a:	f7ff fe3f 	bl	8000b0c <HAL_GetTick>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f043 0220 	orr.w	r2, r3, #32
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0c8      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d12a      	bne.n	8000f1a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d123      	bne.n	8000f1a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ed2:	e01a      	b.n	8000f0a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eda:	d016      	beq.n	8000f0a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d007      	beq.n	8000ef2 <HAL_ADC_PollForConversion+0x7e>
 8000ee2:	f7ff fe13 	bl	8000b0c <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d20b      	bcs.n	8000f0a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	f043 0204 	orr.w	r2, r3, #4
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e09e      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0dd      	beq.n	8000ed4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f18:	e06c      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_ADC_PollForConversion+0x1dc>)
 8000f1c:	681c      	ldr	r4, [r3, #0]
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f001 f982 	bl	8002228 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f24:	4603      	mov	r3, r0
 8000f26:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_ADC_PollForConversion+0x1e0>)
 8000f32:	400b      	ands	r3, r1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d118      	bne.n	8000f6a <HAL_ADC_PollForConversion+0xf6>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68d9      	ldr	r1, [r3, #12]
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_ADC_PollForConversion+0x1e4>)
 8000f40:	400b      	ands	r3, r1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d111      	bne.n	8000f6a <HAL_ADC_PollForConversion+0xf6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6919      	ldr	r1, [r3, #16]
 8000f4c:	4b43      	ldr	r3, [pc, #268]	; (800105c <HAL_ADC_PollForConversion+0x1e8>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d108      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68d9      	ldr	r1, [r3, #12]
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <HAL_ADC_PollForConversion+0x1ec>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_PollForConversion+0xf2>
 8000f62:	2314      	movs	r3, #20
 8000f64:	e020      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000f66:	2329      	movs	r3, #41	; 0x29
 8000f68:	e01e      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6919      	ldr	r1, [r3, #16]
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_ADC_PollForConversion+0x1e8>)
 8000f72:	400b      	ands	r3, r1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x112>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68d9      	ldr	r1, [r3, #12]
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_ADC_PollForConversion+0x1ec>)
 8000f80:	400b      	ands	r3, r1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00d      	beq.n	8000fa2 <HAL_ADC_PollForConversion+0x12e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6919      	ldr	r1, [r3, #16]
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <HAL_ADC_PollForConversion+0x1f0>)
 8000f8e:	400b      	ands	r3, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d108      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0x132>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68d9      	ldr	r1, [r3, #12]
 8000f9a:	4b32      	ldr	r3, [pc, #200]	; (8001064 <HAL_ADC_PollForConversion+0x1f0>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_PollForConversion+0x132>
 8000fa2:	2354      	movs	r3, #84	; 0x54
 8000fa4:	e000      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x134>
 8000fa6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fae:	e01d      	b.n	8000fec <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb6:	d016      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_PollForConversion+0x15a>
 8000fbe:	f7ff fda5 	bl	8000b0c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d20b      	bcs.n	8000fe6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f043 0204 	orr.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e030      	b.n	8001048 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8dd      	bhi.n	8000fb0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0212 	mvn.w	r2, #18
 8000ffc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001014:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001018:	d115      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	20000010 	.word	0x20000010
 8001054:	24924924 	.word	0x24924924
 8001058:	00924924 	.word	0x00924924
 800105c:	12492492 	.word	0x12492492
 8001060:	00492492 	.word	0x00492492
 8001064:	00249249 	.word	0x00249249

08001068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x20>
 800109c:	2302      	movs	r3, #2
 800109e:	e0dc      	b.n	800125a <HAL_ADC_ConfigChannel+0x1da>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d81c      	bhi.n	80010ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b05      	subs	r3, #5
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4019      	ands	r1, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	3b05      	subs	r3, #5
 80010dc:	fa00 f203 	lsl.w	r2, r0, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
 80010e8:	e03c      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d81c      	bhi.n	800112c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b23      	subs	r3, #35	; 0x23
 8001104:	221f      	movs	r2, #31
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	4019      	ands	r1, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b23      	subs	r3, #35	; 0x23
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
 800112a:	e01b      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b41      	subs	r3, #65	; 0x41
 800113e:	221f      	movs	r2, #31
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3b41      	subs	r3, #65	; 0x41
 8001158:	fa00 f203 	lsl.w	r2, r0, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d91c      	bls.n	80011a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3b1e      	subs	r3, #30
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3b1e      	subs	r3, #30
 8001198:	fa00 f203 	lsl.w	r2, r0, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	e019      	b.n	80011da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6919      	ldr	r1, [r3, #16]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	2207      	movs	r2, #7
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	4019      	ands	r1, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d003      	beq.n	80011ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d132      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_ADC_ConfigChannel+0x1e4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d125      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d126      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001210:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d11a      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_ConfigChannel+0x1e8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_ADC_ConfigChannel+0x1ec>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9a      	lsrs	r2, r3, #18
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001230:	e002      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3b01      	subs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x1b2>
 800123e:	e007      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40012400 	.word	0x40012400
 8001268:	20000010 	.word	0x20000010
 800126c:	431bde83 	.word	0x431bde83

08001270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b01      	cmp	r3, #1
 800128c:	d039      	beq.n	8001302 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <ADC_Enable+0x9c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <ADC_Enable+0xa0>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012ac:	e002      	b.n	80012b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fc27 	bl	8000b0c <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c0:	e018      	b.n	80012f4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012c2:	f7ff fc23 	bl	8000b0c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d911      	bls.n	80012f4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e007      	b.n	8001304 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d1df      	bne.n	80012c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000010 	.word	0x20000010
 8001310:	431bde83 	.word	0x431bde83

08001314 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d127      	bne.n	800137e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800133e:	f7ff fbe5 	bl	8000b0c <HAL_GetTick>
 8001342:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001344:	e014      	b.n	8001370 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001346:	f7ff fbe1 	bl	8000b0c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d90d      	bls.n	8001370 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f043 0210 	orr.w	r2, r3, #16
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	f043 0201 	orr.w	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e007      	b.n	8001380 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b01      	cmp	r3, #1
 800137c:	d0e3      	beq.n	8001346 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff49 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb0 	bl	80014a4 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e169      	b.n	8001838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8158 	bne.w	8001832 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a9a      	ldr	r2, [pc, #616]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d05e      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 800158c:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d875      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 8001592:	4a98      	ldr	r2, [pc, #608]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d058      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 8001598:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d86f      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 800159e:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d052      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015a4:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d869      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015aa:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04c      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015b0:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d863      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015b6:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d046      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015bc:	4a90      	ldr	r2, [pc, #576]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d85d      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d82a      	bhi.n	800161c <HAL_GPIO_Init+0xcc>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d859      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HAL_GPIO_Init+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001637 	.word	0x08001637
 80015dc:	08001679 	.word	0x08001679
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	0800167f 	.word	0x0800167f
 80015e8:	0800167f 	.word	0x0800167f
 80015ec:	0800167f 	.word	0x0800167f
 80015f0:	0800167f 	.word	0x0800167f
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	0800167f 	.word	0x0800167f
 8001600:	0800167f 	.word	0x0800167f
 8001604:	0800167f 	.word	0x0800167f
 8001608:	0800167f 	.word	0x0800167f
 800160c:	0800167f 	.word	0x0800167f
 8001610:	0800167f 	.word	0x0800167f
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001641 	.word	0x08001641
 800161c:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_GPIO_Init+0x2b4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001622:	e02c      	b.n	800167e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e029      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e024      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3308      	adds	r3, #8
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e01f      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	330c      	adds	r3, #12
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e01a      	b.n	8001680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e013      	b.n	8001680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e009      	b.n	8001680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x130>
          break;
 800167e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d801      	bhi.n	800168a <HAL_GPIO_Init+0x13a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_GPIO_Init+0x13e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d802      	bhi.n	800169c <HAL_GPIO_Init+0x14c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x152>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3b08      	subs	r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	210f      	movs	r1, #15
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80b1 	beq.w	8001832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2bc>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a40      	ldr	r2, [pc, #256]	; (8001810 <HAL_GPIO_Init+0x2c0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1ec>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3f      	ldr	r2, [pc, #252]	; (8001814 <HAL_GPIO_Init+0x2c4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1e4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_GPIO_Init+0x2cc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1e0>
 800172c:	2303      	movs	r3, #3
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001730:	2304      	movs	r3, #4
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800173c:	2300      	movs	r3, #0
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	492f      	ldr	r1, [pc, #188]	; (800180c <HAL_GPIO_Init+0x2bc>)
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	492c      	ldr	r1, [pc, #176]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4928      	ldr	r1, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4922      	ldr	r1, [pc, #136]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4918      	ldr	r1, [pc, #96]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4914      	ldr	r1, [pc, #80]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
 80017ec:	e021      	b.n	8001832 <HAL_GPIO_Init+0x2e2>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400
 8001820:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_GPIO_Init+0x304>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	43db      	mvns	r3, r3
 800182c:	4909      	ldr	r1, [pc, #36]	; (8001854 <HAL_GPIO_Init+0x304>)
 800182e:	4013      	ands	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f ae8e 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e26c      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d00c      	beq.n	80018ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b4:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
 80018c0:	4b8c      	ldr	r3, [pc, #560]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d10b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x12c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d168      	bne.n	80019b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e246      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x76>
 80018f0:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7a      	ldr	r2, [pc, #488]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a77      	ldr	r2, [pc, #476]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0xbc>
 800192a:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a71      	ldr	r2, [pc, #452]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001944:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a67      	ldr	r2, [pc, #412]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f8d2 	bl	8000b0c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f8ce 	bl	8000b0c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1fa      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xe4>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff f8be 	bl	8000b0c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f8ba 	bl	8000b0c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1e6      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x10c>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1ba      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4939      	ldr	r1, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f873 	bl	8000b0c <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff f86f 	bl	8000b0c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e19b      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f852 	bl	8000b0c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f84e 	bl	8000b0c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e17a      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03a      	beq.n	8001b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d019      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f832 	bl	8000b0c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f82e 	bl	8000b0c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e15a      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f000 fad8 	bl	8002080 <RCC_Delay>
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f818 	bl	8000b0c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ade:	e00f      	b.n	8001b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f814 	bl	8000b0c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d908      	bls.n	8001b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e140      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	42420000 	.word	0x42420000
 8001afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b9e      	ldr	r3, [pc, #632]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e9      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a6 	beq.w	8001c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a93      	ldr	r2, [pc, #588]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b8e      	ldr	r3, [pc, #568]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b8b      	ldr	r3, [pc, #556]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a8a      	ldr	r2, [pc, #552]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7fe ffd5 	bl	8000b0c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7fe ffd1 	bl	8000b0c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0fd      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b81      	ldr	r3, [pc, #516]	; (8001d80 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x312>
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	e02d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	e01c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x356>
 8001bc4:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a66      	ldr	r2, [pc, #408]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a63      	ldr	r2, [pc, #396]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe ff85 	bl	8000b0c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe ff81 	bl	8000b0c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0ab      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCC_OscConfig+0x37e>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ff6f 	bl	8000b0c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7fe ff6b 	bl	8000b0c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e095      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8081 	beq.w	8001d72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d061      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d146      	bne.n	8001d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe ff3f 	bl	8000b0c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7fe ff3b 	bl	8000b0c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e067      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d108      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	492d      	ldr	r1, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a19      	ldr	r1, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff0f 	bl	8000b0c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe ff0b 	bl	8000b0c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e037      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46a>
 8001d10:	e02f      	b.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_OscConfig+0x4fc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fef8 	bl	8000b0c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe fef4 	bl	8000b0c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e020      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x498>
 8001d3e:	e018      	b.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
 8001d84:	42420060 	.word	0x42420060

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4965      	ldr	r1, [pc, #404]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a58      	ldr	r2, [pc, #352]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fe48 	bl	8000b0c <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fe44 	bl	8000b0c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4922      	ldr	r1, [pc, #136]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1cc>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fda6 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	080035cc 	.word	0x080035cc
 8001f54:	20000010 	.word	0x20000010
 8001f58:	20000014 	.word	0x20000014

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b490      	push	{r4, r7}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f64:	1d3c      	adds	r4, r7, #4
 8001f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f6c:	f240 2301 	movw	r3, #513	; 0x201
 8001f70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x40>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x46>
 8001f9a:	e02d      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	623b      	str	r3, [r7, #32]
      break;
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0c9b      	lsrs	r3, r3, #18
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fae:	4413      	add	r3, r2
 8001fb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c5b      	lsrs	r3, r3, #17
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fce:	4413      	add	r3, r2
 8001fd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fda:	fb02 f203 	mul.w	r2, r2, r3
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e004      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	623b      	str	r3, [r7, #32]
      break;
 8001ff6:	e002      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc90      	pop	{r4, r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	080035ac 	.word	0x080035ac
 8002010:	40021000 	.word	0x40021000
 8002014:	007a1200 	.word	0x007a1200
 8002018:	003d0900 	.word	0x003d0900

0800201c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b02      	ldr	r3, [pc, #8]	; (800202c <HAL_RCC_GetHCLKFreq+0x10>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000010 	.word	0x20000010

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff2 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	080035dc 	.word	0x080035dc

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffde 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	080035dc 	.word	0x080035dc

08002080 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <RCC_Delay+0x34>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <RCC_Delay+0x38>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a5b      	lsrs	r3, r3, #9
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800209c:	bf00      	nop
  }
  while (Delay --);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	60fa      	str	r2, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f9      	bne.n	800209c <RCC_Delay+0x1c>
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000010 	.word	0x20000010
 80020b8:	10624dd3 	.word	0x10624dd3

080020bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d07d      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020dc:	4b4f      	ldr	r3, [pc, #316]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	61d3      	str	r3, [r2, #28]
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d118      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002110:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7fe fcf6 	bl	8000b0c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	e008      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002124:	f7fe fcf2 	bl	8000b0c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e06d      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02e      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d027      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002160:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d014      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fcc1 	bl	8000b0c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fcbd 	bl	8000b0c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e036      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4917      	ldr	r1, [pc, #92]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	490b      	ldr	r1, [pc, #44]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	42420440 	.word	0x42420440

08002228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b08d      	sub	sp, #52	; 0x34
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002230:	4b5a      	ldr	r3, [pc, #360]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002232:	f107 040c 	add.w	r4, r7, #12
 8002236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800223c:	f240 2301 	movw	r3, #513	; 0x201
 8002240:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b10      	cmp	r3, #16
 8002260:	f200 8091 	bhi.w	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d04c      	beq.n	8002304 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d07c      	beq.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002270:	e089      	b.n	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002272:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8082 	beq.w	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	0c9b      	lsrs	r3, r3, #18
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002292:	4413      	add	r3, r2
 8002294:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002298:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0c5b      	lsrs	r3, r3, #17
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022b2:	4413      	add	r3, r2
 80022b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00d      	beq.n	80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022c4:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d4:	e004      	b.n	80022e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d102      	bne.n	80022f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022f2:	e04a      	b.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002302:	e042      	b.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002314:	d108      	bne.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
 8002326:	e01f      	b.n	8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002332:	d109      	bne.n	8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002340:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
 8002346:	e00f      	b.n	8002368 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002352:	d11c      	bne.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002360:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002366:	e012      	b.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002368:	e011      	b.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800236a:	f7ff fe75 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0b9b      	lsrs	r3, r3, #14
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002384:	e004      	b.n	8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002386:	bf00      	nop
 8002388:	e002      	b.n	8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800238e:	bf00      	nop
    }
  }
  return (frequency);
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002392:	4618      	mov	r0, r3
 8002394:	3734      	adds	r7, #52	; 0x34
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	080035bc 	.word	0x080035bc
 80023a0:	40021000 	.word	0x40021000
 80023a4:	007a1200 	.word	0x007a1200
 80023a8:	003d0900 	.word	0x003d0900
 80023ac:	aaaaaaab 	.word	0xaaaaaaab

080023b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e041      	b.n	8002446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fa4e 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 f93c 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d001      	beq.n	8002468 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_TIM_Base_Start+0x88>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00e      	beq.n	8002498 <HAL_TIM_Base_Start+0x48>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d009      	beq.n	8002498 <HAL_TIM_Base_Start+0x48>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_TIM_Base_Start+0x8c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_TIM_Base_Start+0x48>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_TIM_Base_Start+0x90>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d111      	bne.n	80024bc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d010      	beq.n	80024cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ba:	e007      	b.n	80024cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40000800 	.word	0x40000800

080024e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIM_ConfigClockSource+0x18>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0b3      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x180>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800251a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d03e      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	f200 8087 	bhi.w	800264c <HAL_TIM_ConfigClockSource+0x168>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	f000 8085 	beq.w	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d87f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d01a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xa2>
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d87b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d050      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x116>
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d877      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b50      	cmp	r3, #80	; 0x50
 800255e:	d03c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xf6>
 8002560:	2b50      	cmp	r3, #80	; 0x50
 8002562:	d873      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d058      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x136>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d86f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d064      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x156>
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	d86b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d060      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x156>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d867      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x168>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05c      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x156>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d05a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002584:	e062      	b.n	800264c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f000 f942 	bl	800281e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e04e      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f000 f92b 	bl	800281e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e03b      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f8a2 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2150      	movs	r1, #80	; 0x50
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8f9 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025f8:	e02b      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f8c0 	bl	800278c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2160      	movs	r1, #96	; 0x60
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f8e9 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 8002618:	e01b      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f882 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f8d9 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 8002638:	e00b      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 f8d0 	bl	80027ea <TIM_ITRx_SetConfig>
        break;
 800264a:	e002      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a29      	ldr	r2, [pc, #164]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268a:	d007      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <TIM_Base_SetConfig+0xbc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <TIM_Base_SetConfig+0xc0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d108      	bne.n	80026ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <TIM_Base_SetConfig+0xbc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <TIM_Base_SetConfig+0xc0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800

08002730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 030a 	bic.w	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f023 0210 	bic.w	r2, r3, #16
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	031b      	lsls	r3, r3, #12
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	f043 0307 	orr.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002838:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	431a      	orrs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e046      	b.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d009      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10c      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e03f      	b.n	80029aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd ffb6 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f905 	bl	8002b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d17c      	bne.n	8002acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit+0x2c>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e075      	b.n	8002ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Transmit+0x3e>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e06e      	b.n	8002ace <HAL_UART_Transmit+0x11c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2221      	movs	r2, #33	; 0x21
 8002a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a06:	f7fe f881 	bl	8000b0c <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d108      	bne.n	8002a34 <HAL_UART_Transmit+0x82>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e003      	b.n	8002a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a44:	e02a      	b.n	8002a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f840 	bl	8002ad6 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e036      	b.n	8002ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e007      	b.n	8002a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1cf      	bne.n	8002a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f810 	bl	8002ad6 <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e006      	b.n	8002ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3720      	adds	r7, #32
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae6:	e02c      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d028      	beq.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002af6:	f7fe f809 	bl	8000b0c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d21d      	bcs.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d0c3      	beq.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ba6:	f023 030c 	bic.w	r3, r3, #12
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <UART_SetConfig+0x114>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff fa40 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	e002      	b.n	8002be2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff fa28 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <UART_SetConfig+0x118>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	0119      	lsls	r1, r3, #4
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <UART_SetConfig+0x118>)
 8002c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	fb00 f303 	mul.w	r3, r0, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <UART_SetConfig+0x118>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	4419      	add	r1, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <UART_SetConfig+0x118>)
 8002c52:	fba3 0302 	umull	r0, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	3332      	adds	r3, #50	; 0x32
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <UART_SetConfig+0x118>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	440a      	add	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40013800 	.word	0x40013800
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <__errno>:
 8002c88:	4b01      	ldr	r3, [pc, #4]	; (8002c90 <__errno+0x8>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000001c 	.word	0x2000001c

08002c94 <__libc_init_array>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	2600      	movs	r6, #0
 8002c98:	4d0c      	ldr	r5, [pc, #48]	; (8002ccc <__libc_init_array+0x38>)
 8002c9a:	4c0d      	ldr	r4, [pc, #52]	; (8002cd0 <__libc_init_array+0x3c>)
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	42a6      	cmp	r6, r4
 8002ca2:	d109      	bne.n	8002cb8 <__libc_init_array+0x24>
 8002ca4:	f000 fc5c 	bl	8003560 <_init>
 8002ca8:	2600      	movs	r6, #0
 8002caa:	4d0a      	ldr	r5, [pc, #40]	; (8002cd4 <__libc_init_array+0x40>)
 8002cac:	4c0a      	ldr	r4, [pc, #40]	; (8002cd8 <__libc_init_array+0x44>)
 8002cae:	1b64      	subs	r4, r4, r5
 8002cb0:	10a4      	asrs	r4, r4, #2
 8002cb2:	42a6      	cmp	r6, r4
 8002cb4:	d105      	bne.n	8002cc2 <__libc_init_array+0x2e>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbc:	4798      	blx	r3
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	e7ee      	b.n	8002ca0 <__libc_init_array+0xc>
 8002cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc6:	4798      	blx	r3
 8002cc8:	3601      	adds	r6, #1
 8002cca:	e7f2      	b.n	8002cb2 <__libc_init_array+0x1e>
 8002ccc:	08003618 	.word	0x08003618
 8002cd0:	08003618 	.word	0x08003618
 8002cd4:	08003618 	.word	0x08003618
 8002cd8:	0800361c 	.word	0x0800361c

08002cdc <memset>:
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4402      	add	r2, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <memset+0xa>
 8002ce4:	4770      	bx	lr
 8002ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cea:	e7f9      	b.n	8002ce0 <memset+0x4>

08002cec <siprintf>:
 8002cec:	b40e      	push	{r1, r2, r3}
 8002cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cf2:	b500      	push	{lr}
 8002cf4:	b09c      	sub	sp, #112	; 0x70
 8002cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8002cf8:	9002      	str	r0, [sp, #8]
 8002cfa:	9006      	str	r0, [sp, #24]
 8002cfc:	9107      	str	r1, [sp, #28]
 8002cfe:	9104      	str	r1, [sp, #16]
 8002d00:	4808      	ldr	r0, [pc, #32]	; (8002d24 <siprintf+0x38>)
 8002d02:	4909      	ldr	r1, [pc, #36]	; (8002d28 <siprintf+0x3c>)
 8002d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d08:	9105      	str	r1, [sp, #20]
 8002d0a:	6800      	ldr	r0, [r0, #0]
 8002d0c:	a902      	add	r1, sp, #8
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	f000 f868 	bl	8002de4 <_svfiprintf_r>
 8002d14:	2200      	movs	r2, #0
 8002d16:	9b02      	ldr	r3, [sp, #8]
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	b01c      	add	sp, #112	; 0x70
 8002d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d20:	b003      	add	sp, #12
 8002d22:	4770      	bx	lr
 8002d24:	2000001c 	.word	0x2000001c
 8002d28:	ffff0208 	.word	0xffff0208

08002d2c <__ssputs_r>:
 8002d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	688e      	ldr	r6, [r1, #8]
 8002d32:	4682      	mov	sl, r0
 8002d34:	429e      	cmp	r6, r3
 8002d36:	460c      	mov	r4, r1
 8002d38:	4690      	mov	r8, r2
 8002d3a:	461f      	mov	r7, r3
 8002d3c:	d838      	bhi.n	8002db0 <__ssputs_r+0x84>
 8002d3e:	898a      	ldrh	r2, [r1, #12]
 8002d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d44:	d032      	beq.n	8002dac <__ssputs_r+0x80>
 8002d46:	6825      	ldr	r5, [r4, #0]
 8002d48:	6909      	ldr	r1, [r1, #16]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	eba5 0901 	sub.w	r9, r5, r1
 8002d50:	6965      	ldr	r5, [r4, #20]
 8002d52:	444b      	add	r3, r9
 8002d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d5c:	106d      	asrs	r5, r5, #1
 8002d5e:	429d      	cmp	r5, r3
 8002d60:	bf38      	it	cc
 8002d62:	461d      	movcc	r5, r3
 8002d64:	0553      	lsls	r3, r2, #21
 8002d66:	d531      	bpl.n	8002dcc <__ssputs_r+0xa0>
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f000 fb53 	bl	8003414 <_malloc_r>
 8002d6e:	4606      	mov	r6, r0
 8002d70:	b950      	cbnz	r0, 8002d88 <__ssputs_r+0x5c>
 8002d72:	230c      	movs	r3, #12
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f8ca 3000 	str.w	r3, [sl]
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d88:	464a      	mov	r2, r9
 8002d8a:	6921      	ldr	r1, [r4, #16]
 8002d8c:	f000 face 	bl	800332c <memcpy>
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	81a3      	strh	r3, [r4, #12]
 8002d9c:	6126      	str	r6, [r4, #16]
 8002d9e:	444e      	add	r6, r9
 8002da0:	6026      	str	r6, [r4, #0]
 8002da2:	463e      	mov	r6, r7
 8002da4:	6165      	str	r5, [r4, #20]
 8002da6:	eba5 0509 	sub.w	r5, r5, r9
 8002daa:	60a5      	str	r5, [r4, #8]
 8002dac:	42be      	cmp	r6, r7
 8002dae:	d900      	bls.n	8002db2 <__ssputs_r+0x86>
 8002db0:	463e      	mov	r6, r7
 8002db2:	4632      	mov	r2, r6
 8002db4:	4641      	mov	r1, r8
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f000 fac6 	bl	8003348 <memmove>
 8002dbc:	68a3      	ldr	r3, [r4, #8]
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	1b9b      	subs	r3, r3, r6
 8002dc2:	4432      	add	r2, r6
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	60a3      	str	r3, [r4, #8]
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	e7db      	b.n	8002d84 <__ssputs_r+0x58>
 8002dcc:	462a      	mov	r2, r5
 8002dce:	f000 fb7b 	bl	80034c8 <_realloc_r>
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d1e1      	bne.n	8002d9c <__ssputs_r+0x70>
 8002dd8:	4650      	mov	r0, sl
 8002dda:	6921      	ldr	r1, [r4, #16]
 8002ddc:	f000 face 	bl	800337c <_free_r>
 8002de0:	e7c7      	b.n	8002d72 <__ssputs_r+0x46>
	...

08002de4 <_svfiprintf_r>:
 8002de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de8:	4698      	mov	r8, r3
 8002dea:	898b      	ldrh	r3, [r1, #12]
 8002dec:	4607      	mov	r7, r0
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	460d      	mov	r5, r1
 8002df2:	4614      	mov	r4, r2
 8002df4:	b09d      	sub	sp, #116	; 0x74
 8002df6:	d50e      	bpl.n	8002e16 <_svfiprintf_r+0x32>
 8002df8:	690b      	ldr	r3, [r1, #16]
 8002dfa:	b963      	cbnz	r3, 8002e16 <_svfiprintf_r+0x32>
 8002dfc:	2140      	movs	r1, #64	; 0x40
 8002dfe:	f000 fb09 	bl	8003414 <_malloc_r>
 8002e02:	6028      	str	r0, [r5, #0]
 8002e04:	6128      	str	r0, [r5, #16]
 8002e06:	b920      	cbnz	r0, 8002e12 <_svfiprintf_r+0x2e>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	e0d1      	b.n	8002fb6 <_svfiprintf_r+0x1d2>
 8002e12:	2340      	movs	r3, #64	; 0x40
 8002e14:	616b      	str	r3, [r5, #20]
 8002e16:	2300      	movs	r3, #0
 8002e18:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e20:	2330      	movs	r3, #48	; 0x30
 8002e22:	f04f 0901 	mov.w	r9, #1
 8002e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fd0 <_svfiprintf_r+0x1ec>
 8002e2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e32:	4623      	mov	r3, r4
 8002e34:	469a      	mov	sl, r3
 8002e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e3a:	b10a      	cbz	r2, 8002e40 <_svfiprintf_r+0x5c>
 8002e3c:	2a25      	cmp	r2, #37	; 0x25
 8002e3e:	d1f9      	bne.n	8002e34 <_svfiprintf_r+0x50>
 8002e40:	ebba 0b04 	subs.w	fp, sl, r4
 8002e44:	d00b      	beq.n	8002e5e <_svfiprintf_r+0x7a>
 8002e46:	465b      	mov	r3, fp
 8002e48:	4622      	mov	r2, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	f7ff ff6d 	bl	8002d2c <__ssputs_r>
 8002e52:	3001      	adds	r0, #1
 8002e54:	f000 80aa 	beq.w	8002fac <_svfiprintf_r+0x1c8>
 8002e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e5a:	445a      	add	r2, fp
 8002e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8002e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a2 	beq.w	8002fac <_svfiprintf_r+0x1c8>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e72:	f10a 0a01 	add.w	sl, sl, #1
 8002e76:	9304      	str	r3, [sp, #16]
 8002e78:	9307      	str	r3, [sp, #28]
 8002e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e80:	4654      	mov	r4, sl
 8002e82:	2205      	movs	r2, #5
 8002e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e88:	4851      	ldr	r0, [pc, #324]	; (8002fd0 <_svfiprintf_r+0x1ec>)
 8002e8a:	f000 fa41 	bl	8003310 <memchr>
 8002e8e:	9a04      	ldr	r2, [sp, #16]
 8002e90:	b9d8      	cbnz	r0, 8002eca <_svfiprintf_r+0xe6>
 8002e92:	06d0      	lsls	r0, r2, #27
 8002e94:	bf44      	itt	mi
 8002e96:	2320      	movmi	r3, #32
 8002e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e9c:	0711      	lsls	r1, r2, #28
 8002e9e:	bf44      	itt	mi
 8002ea0:	232b      	movmi	r3, #43	; 0x2b
 8002ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8002eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8002eac:	d015      	beq.n	8002eda <_svfiprintf_r+0xf6>
 8002eae:	4654      	mov	r4, sl
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f04f 0c0a 	mov.w	ip, #10
 8002eb6:	9a07      	ldr	r2, [sp, #28]
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ebe:	3b30      	subs	r3, #48	; 0x30
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d94e      	bls.n	8002f62 <_svfiprintf_r+0x17e>
 8002ec4:	b1b0      	cbz	r0, 8002ef4 <_svfiprintf_r+0x110>
 8002ec6:	9207      	str	r2, [sp, #28]
 8002ec8:	e014      	b.n	8002ef4 <_svfiprintf_r+0x110>
 8002eca:	eba0 0308 	sub.w	r3, r0, r8
 8002ece:	fa09 f303 	lsl.w	r3, r9, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	46a2      	mov	sl, r4
 8002ed6:	9304      	str	r3, [sp, #16]
 8002ed8:	e7d2      	b.n	8002e80 <_svfiprintf_r+0x9c>
 8002eda:	9b03      	ldr	r3, [sp, #12]
 8002edc:	1d19      	adds	r1, r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	9103      	str	r1, [sp, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bfbb      	ittet	lt
 8002ee6:	425b      	neglt	r3, r3
 8002ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8002eec:	9307      	strge	r3, [sp, #28]
 8002eee:	9307      	strlt	r3, [sp, #28]
 8002ef0:	bfb8      	it	lt
 8002ef2:	9204      	strlt	r2, [sp, #16]
 8002ef4:	7823      	ldrb	r3, [r4, #0]
 8002ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ef8:	d10c      	bne.n	8002f14 <_svfiprintf_r+0x130>
 8002efa:	7863      	ldrb	r3, [r4, #1]
 8002efc:	2b2a      	cmp	r3, #42	; 0x2a
 8002efe:	d135      	bne.n	8002f6c <_svfiprintf_r+0x188>
 8002f00:	9b03      	ldr	r3, [sp, #12]
 8002f02:	3402      	adds	r4, #2
 8002f04:	1d1a      	adds	r2, r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	9203      	str	r2, [sp, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f12:	9305      	str	r3, [sp, #20]
 8002f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fe0 <_svfiprintf_r+0x1fc>
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4650      	mov	r0, sl
 8002f1c:	7821      	ldrb	r1, [r4, #0]
 8002f1e:	f000 f9f7 	bl	8003310 <memchr>
 8002f22:	b140      	cbz	r0, 8002f36 <_svfiprintf_r+0x152>
 8002f24:	2340      	movs	r3, #64	; 0x40
 8002f26:	eba0 000a 	sub.w	r0, r0, sl
 8002f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f2e:	9b04      	ldr	r3, [sp, #16]
 8002f30:	3401      	adds	r4, #1
 8002f32:	4303      	orrs	r3, r0
 8002f34:	9304      	str	r3, [sp, #16]
 8002f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	4825      	ldr	r0, [pc, #148]	; (8002fd4 <_svfiprintf_r+0x1f0>)
 8002f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f42:	f000 f9e5 	bl	8003310 <memchr>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d038      	beq.n	8002fbc <_svfiprintf_r+0x1d8>
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <_svfiprintf_r+0x1f4>)
 8002f4c:	bb1b      	cbnz	r3, 8002f96 <_svfiprintf_r+0x1b2>
 8002f4e:	9b03      	ldr	r3, [sp, #12]
 8002f50:	3307      	adds	r3, #7
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	3308      	adds	r3, #8
 8002f58:	9303      	str	r3, [sp, #12]
 8002f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f5c:	4433      	add	r3, r6
 8002f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f60:	e767      	b.n	8002e32 <_svfiprintf_r+0x4e>
 8002f62:	460c      	mov	r4, r1
 8002f64:	2001      	movs	r0, #1
 8002f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f6a:	e7a5      	b.n	8002eb8 <_svfiprintf_r+0xd4>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f04f 0c0a 	mov.w	ip, #10
 8002f72:	4619      	mov	r1, r3
 8002f74:	3401      	adds	r4, #1
 8002f76:	9305      	str	r3, [sp, #20]
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f7e:	3a30      	subs	r2, #48	; 0x30
 8002f80:	2a09      	cmp	r2, #9
 8002f82:	d903      	bls.n	8002f8c <_svfiprintf_r+0x1a8>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0c5      	beq.n	8002f14 <_svfiprintf_r+0x130>
 8002f88:	9105      	str	r1, [sp, #20]
 8002f8a:	e7c3      	b.n	8002f14 <_svfiprintf_r+0x130>
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	2301      	movs	r3, #1
 8002f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f94:	e7f0      	b.n	8002f78 <_svfiprintf_r+0x194>
 8002f96:	ab03      	add	r3, sp, #12
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	462a      	mov	r2, r5
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <_svfiprintf_r+0x1f8>)
 8002fa0:	a904      	add	r1, sp, #16
 8002fa2:	f3af 8000 	nop.w
 8002fa6:	1c42      	adds	r2, r0, #1
 8002fa8:	4606      	mov	r6, r0
 8002faa:	d1d6      	bne.n	8002f5a <_svfiprintf_r+0x176>
 8002fac:	89ab      	ldrh	r3, [r5, #12]
 8002fae:	065b      	lsls	r3, r3, #25
 8002fb0:	f53f af2c 	bmi.w	8002e0c <_svfiprintf_r+0x28>
 8002fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fb6:	b01d      	add	sp, #116	; 0x74
 8002fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbc:	ab03      	add	r3, sp, #12
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <_svfiprintf_r+0x1f8>)
 8002fc6:	a904      	add	r1, sp, #16
 8002fc8:	f000 f87c 	bl	80030c4 <_printf_i>
 8002fcc:	e7eb      	b.n	8002fa6 <_svfiprintf_r+0x1c2>
 8002fce:	bf00      	nop
 8002fd0:	080035e4 	.word	0x080035e4
 8002fd4:	080035ee 	.word	0x080035ee
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	08002d2d 	.word	0x08002d2d
 8002fe0:	080035ea 	.word	0x080035ea

08002fe4 <_printf_common>:
 8002fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	4616      	mov	r6, r2
 8002fea:	4699      	mov	r9, r3
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	690b      	ldr	r3, [r1, #16]
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bfb8      	it	lt
 8002ff6:	4613      	movlt	r3, r2
 8002ff8:	6033      	str	r3, [r6, #0]
 8002ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ffe:	460c      	mov	r4, r1
 8003000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003004:	b10a      	cbz	r2, 800300a <_printf_common+0x26>
 8003006:	3301      	adds	r3, #1
 8003008:	6033      	str	r3, [r6, #0]
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	0699      	lsls	r1, r3, #26
 800300e:	bf42      	ittt	mi
 8003010:	6833      	ldrmi	r3, [r6, #0]
 8003012:	3302      	addmi	r3, #2
 8003014:	6033      	strmi	r3, [r6, #0]
 8003016:	6825      	ldr	r5, [r4, #0]
 8003018:	f015 0506 	ands.w	r5, r5, #6
 800301c:	d106      	bne.n	800302c <_printf_common+0x48>
 800301e:	f104 0a19 	add.w	sl, r4, #25
 8003022:	68e3      	ldr	r3, [r4, #12]
 8003024:	6832      	ldr	r2, [r6, #0]
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	42ab      	cmp	r3, r5
 800302a:	dc28      	bgt.n	800307e <_printf_common+0x9a>
 800302c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003030:	1e13      	subs	r3, r2, #0
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	bf18      	it	ne
 8003036:	2301      	movne	r3, #1
 8003038:	0692      	lsls	r2, r2, #26
 800303a:	d42d      	bmi.n	8003098 <_printf_common+0xb4>
 800303c:	4649      	mov	r1, r9
 800303e:	4638      	mov	r0, r7
 8003040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d020      	beq.n	800308c <_printf_common+0xa8>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	68e5      	ldr	r5, [r4, #12]
 800304e:	f003 0306 	and.w	r3, r3, #6
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf18      	it	ne
 8003056:	2500      	movne	r5, #0
 8003058:	6832      	ldr	r2, [r6, #0]
 800305a:	f04f 0600 	mov.w	r6, #0
 800305e:	68a3      	ldr	r3, [r4, #8]
 8003060:	bf08      	it	eq
 8003062:	1aad      	subeq	r5, r5, r2
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	bf08      	it	eq
 8003068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800306c:	4293      	cmp	r3, r2
 800306e:	bfc4      	itt	gt
 8003070:	1a9b      	subgt	r3, r3, r2
 8003072:	18ed      	addgt	r5, r5, r3
 8003074:	341a      	adds	r4, #26
 8003076:	42b5      	cmp	r5, r6
 8003078:	d11a      	bne.n	80030b0 <_printf_common+0xcc>
 800307a:	2000      	movs	r0, #0
 800307c:	e008      	b.n	8003090 <_printf_common+0xac>
 800307e:	2301      	movs	r3, #1
 8003080:	4652      	mov	r2, sl
 8003082:	4649      	mov	r1, r9
 8003084:	4638      	mov	r0, r7
 8003086:	47c0      	blx	r8
 8003088:	3001      	adds	r0, #1
 800308a:	d103      	bne.n	8003094 <_printf_common+0xb0>
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	3501      	adds	r5, #1
 8003096:	e7c4      	b.n	8003022 <_printf_common+0x3e>
 8003098:	2030      	movs	r0, #48	; 0x30
 800309a:	18e1      	adds	r1, r4, r3
 800309c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030a6:	4422      	add	r2, r4
 80030a8:	3302      	adds	r3, #2
 80030aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ae:	e7c5      	b.n	800303c <_printf_common+0x58>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4622      	mov	r2, r4
 80030b4:	4649      	mov	r1, r9
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c0      	blx	r8
 80030ba:	3001      	adds	r0, #1
 80030bc:	d0e6      	beq.n	800308c <_printf_common+0xa8>
 80030be:	3601      	adds	r6, #1
 80030c0:	e7d9      	b.n	8003076 <_printf_common+0x92>
	...

080030c4 <_printf_i>:
 80030c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030c8:	460c      	mov	r4, r1
 80030ca:	7e27      	ldrb	r7, [r4, #24]
 80030cc:	4691      	mov	r9, r2
 80030ce:	2f78      	cmp	r7, #120	; 0x78
 80030d0:	4680      	mov	r8, r0
 80030d2:	469a      	mov	sl, r3
 80030d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030da:	d807      	bhi.n	80030ec <_printf_i+0x28>
 80030dc:	2f62      	cmp	r7, #98	; 0x62
 80030de:	d80a      	bhi.n	80030f6 <_printf_i+0x32>
 80030e0:	2f00      	cmp	r7, #0
 80030e2:	f000 80d9 	beq.w	8003298 <_printf_i+0x1d4>
 80030e6:	2f58      	cmp	r7, #88	; 0x58
 80030e8:	f000 80a4 	beq.w	8003234 <_printf_i+0x170>
 80030ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030f4:	e03a      	b.n	800316c <_printf_i+0xa8>
 80030f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030fa:	2b15      	cmp	r3, #21
 80030fc:	d8f6      	bhi.n	80030ec <_printf_i+0x28>
 80030fe:	a001      	add	r0, pc, #4	; (adr r0, 8003104 <_printf_i+0x40>)
 8003100:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003104:	0800315d 	.word	0x0800315d
 8003108:	08003171 	.word	0x08003171
 800310c:	080030ed 	.word	0x080030ed
 8003110:	080030ed 	.word	0x080030ed
 8003114:	080030ed 	.word	0x080030ed
 8003118:	080030ed 	.word	0x080030ed
 800311c:	08003171 	.word	0x08003171
 8003120:	080030ed 	.word	0x080030ed
 8003124:	080030ed 	.word	0x080030ed
 8003128:	080030ed 	.word	0x080030ed
 800312c:	080030ed 	.word	0x080030ed
 8003130:	0800327f 	.word	0x0800327f
 8003134:	080031a1 	.word	0x080031a1
 8003138:	08003261 	.word	0x08003261
 800313c:	080030ed 	.word	0x080030ed
 8003140:	080030ed 	.word	0x080030ed
 8003144:	080032a1 	.word	0x080032a1
 8003148:	080030ed 	.word	0x080030ed
 800314c:	080031a1 	.word	0x080031a1
 8003150:	080030ed 	.word	0x080030ed
 8003154:	080030ed 	.word	0x080030ed
 8003158:	08003269 	.word	0x08003269
 800315c:	680b      	ldr	r3, [r1, #0]
 800315e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	600a      	str	r2, [r1, #0]
 8003168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800316c:	2301      	movs	r3, #1
 800316e:	e0a4      	b.n	80032ba <_printf_i+0x1f6>
 8003170:	6825      	ldr	r5, [r4, #0]
 8003172:	6808      	ldr	r0, [r1, #0]
 8003174:	062e      	lsls	r6, r5, #24
 8003176:	f100 0304 	add.w	r3, r0, #4
 800317a:	d50a      	bpl.n	8003192 <_printf_i+0xce>
 800317c:	6805      	ldr	r5, [r0, #0]
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	2d00      	cmp	r5, #0
 8003182:	da03      	bge.n	800318c <_printf_i+0xc8>
 8003184:	232d      	movs	r3, #45	; 0x2d
 8003186:	426d      	negs	r5, r5
 8003188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800318c:	230a      	movs	r3, #10
 800318e:	485e      	ldr	r0, [pc, #376]	; (8003308 <_printf_i+0x244>)
 8003190:	e019      	b.n	80031c6 <_printf_i+0x102>
 8003192:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003196:	6805      	ldr	r5, [r0, #0]
 8003198:	600b      	str	r3, [r1, #0]
 800319a:	bf18      	it	ne
 800319c:	b22d      	sxthne	r5, r5
 800319e:	e7ef      	b.n	8003180 <_printf_i+0xbc>
 80031a0:	680b      	ldr	r3, [r1, #0]
 80031a2:	6825      	ldr	r5, [r4, #0]
 80031a4:	1d18      	adds	r0, r3, #4
 80031a6:	6008      	str	r0, [r1, #0]
 80031a8:	0628      	lsls	r0, r5, #24
 80031aa:	d501      	bpl.n	80031b0 <_printf_i+0xec>
 80031ac:	681d      	ldr	r5, [r3, #0]
 80031ae:	e002      	b.n	80031b6 <_printf_i+0xf2>
 80031b0:	0669      	lsls	r1, r5, #25
 80031b2:	d5fb      	bpl.n	80031ac <_printf_i+0xe8>
 80031b4:	881d      	ldrh	r5, [r3, #0]
 80031b6:	2f6f      	cmp	r7, #111	; 0x6f
 80031b8:	bf0c      	ite	eq
 80031ba:	2308      	moveq	r3, #8
 80031bc:	230a      	movne	r3, #10
 80031be:	4852      	ldr	r0, [pc, #328]	; (8003308 <_printf_i+0x244>)
 80031c0:	2100      	movs	r1, #0
 80031c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031c6:	6866      	ldr	r6, [r4, #4]
 80031c8:	2e00      	cmp	r6, #0
 80031ca:	bfa8      	it	ge
 80031cc:	6821      	ldrge	r1, [r4, #0]
 80031ce:	60a6      	str	r6, [r4, #8]
 80031d0:	bfa4      	itt	ge
 80031d2:	f021 0104 	bicge.w	r1, r1, #4
 80031d6:	6021      	strge	r1, [r4, #0]
 80031d8:	b90d      	cbnz	r5, 80031de <_printf_i+0x11a>
 80031da:	2e00      	cmp	r6, #0
 80031dc:	d04d      	beq.n	800327a <_printf_i+0x1b6>
 80031de:	4616      	mov	r6, r2
 80031e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80031e4:	fb03 5711 	mls	r7, r3, r1, r5
 80031e8:	5dc7      	ldrb	r7, [r0, r7]
 80031ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031ee:	462f      	mov	r7, r5
 80031f0:	42bb      	cmp	r3, r7
 80031f2:	460d      	mov	r5, r1
 80031f4:	d9f4      	bls.n	80031e0 <_printf_i+0x11c>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d10b      	bne.n	8003212 <_printf_i+0x14e>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	07df      	lsls	r7, r3, #31
 80031fe:	d508      	bpl.n	8003212 <_printf_i+0x14e>
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	6861      	ldr	r1, [r4, #4]
 8003204:	4299      	cmp	r1, r3
 8003206:	bfde      	ittt	le
 8003208:	2330      	movle	r3, #48	; 0x30
 800320a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800320e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003212:	1b92      	subs	r2, r2, r6
 8003214:	6122      	str	r2, [r4, #16]
 8003216:	464b      	mov	r3, r9
 8003218:	4621      	mov	r1, r4
 800321a:	4640      	mov	r0, r8
 800321c:	f8cd a000 	str.w	sl, [sp]
 8003220:	aa03      	add	r2, sp, #12
 8003222:	f7ff fedf 	bl	8002fe4 <_printf_common>
 8003226:	3001      	adds	r0, #1
 8003228:	d14c      	bne.n	80032c4 <_printf_i+0x200>
 800322a:	f04f 30ff 	mov.w	r0, #4294967295
 800322e:	b004      	add	sp, #16
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	4834      	ldr	r0, [pc, #208]	; (8003308 <_printf_i+0x244>)
 8003236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800323a:	680e      	ldr	r6, [r1, #0]
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003242:	061f      	lsls	r7, r3, #24
 8003244:	600e      	str	r6, [r1, #0]
 8003246:	d514      	bpl.n	8003272 <_printf_i+0x1ae>
 8003248:	07d9      	lsls	r1, r3, #31
 800324a:	bf44      	itt	mi
 800324c:	f043 0320 	orrmi.w	r3, r3, #32
 8003250:	6023      	strmi	r3, [r4, #0]
 8003252:	b91d      	cbnz	r5, 800325c <_printf_i+0x198>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	f023 0320 	bic.w	r3, r3, #32
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	2310      	movs	r3, #16
 800325e:	e7af      	b.n	80031c0 <_printf_i+0xfc>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	2378      	movs	r3, #120	; 0x78
 800326a:	4828      	ldr	r0, [pc, #160]	; (800330c <_printf_i+0x248>)
 800326c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003270:	e7e3      	b.n	800323a <_printf_i+0x176>
 8003272:	065e      	lsls	r6, r3, #25
 8003274:	bf48      	it	mi
 8003276:	b2ad      	uxthmi	r5, r5
 8003278:	e7e6      	b.n	8003248 <_printf_i+0x184>
 800327a:	4616      	mov	r6, r2
 800327c:	e7bb      	b.n	80031f6 <_printf_i+0x132>
 800327e:	680b      	ldr	r3, [r1, #0]
 8003280:	6826      	ldr	r6, [r4, #0]
 8003282:	1d1d      	adds	r5, r3, #4
 8003284:	6960      	ldr	r0, [r4, #20]
 8003286:	600d      	str	r5, [r1, #0]
 8003288:	0635      	lsls	r5, r6, #24
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	d501      	bpl.n	8003292 <_printf_i+0x1ce>
 800328e:	6018      	str	r0, [r3, #0]
 8003290:	e002      	b.n	8003298 <_printf_i+0x1d4>
 8003292:	0671      	lsls	r1, r6, #25
 8003294:	d5fb      	bpl.n	800328e <_printf_i+0x1ca>
 8003296:	8018      	strh	r0, [r3, #0]
 8003298:	2300      	movs	r3, #0
 800329a:	4616      	mov	r6, r2
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	e7ba      	b.n	8003216 <_printf_i+0x152>
 80032a0:	680b      	ldr	r3, [r1, #0]
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	600a      	str	r2, [r1, #0]
 80032a6:	681e      	ldr	r6, [r3, #0]
 80032a8:	2100      	movs	r1, #0
 80032aa:	4630      	mov	r0, r6
 80032ac:	6862      	ldr	r2, [r4, #4]
 80032ae:	f000 f82f 	bl	8003310 <memchr>
 80032b2:	b108      	cbz	r0, 80032b8 <_printf_i+0x1f4>
 80032b4:	1b80      	subs	r0, r0, r6
 80032b6:	6060      	str	r0, [r4, #4]
 80032b8:	6863      	ldr	r3, [r4, #4]
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	2300      	movs	r3, #0
 80032be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c2:	e7a8      	b.n	8003216 <_printf_i+0x152>
 80032c4:	4632      	mov	r2, r6
 80032c6:	4649      	mov	r1, r9
 80032c8:	4640      	mov	r0, r8
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	47d0      	blx	sl
 80032ce:	3001      	adds	r0, #1
 80032d0:	d0ab      	beq.n	800322a <_printf_i+0x166>
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	079b      	lsls	r3, r3, #30
 80032d6:	d413      	bmi.n	8003300 <_printf_i+0x23c>
 80032d8:	68e0      	ldr	r0, [r4, #12]
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	4298      	cmp	r0, r3
 80032de:	bfb8      	it	lt
 80032e0:	4618      	movlt	r0, r3
 80032e2:	e7a4      	b.n	800322e <_printf_i+0x16a>
 80032e4:	2301      	movs	r3, #1
 80032e6:	4632      	mov	r2, r6
 80032e8:	4649      	mov	r1, r9
 80032ea:	4640      	mov	r0, r8
 80032ec:	47d0      	blx	sl
 80032ee:	3001      	adds	r0, #1
 80032f0:	d09b      	beq.n	800322a <_printf_i+0x166>
 80032f2:	3501      	adds	r5, #1
 80032f4:	68e3      	ldr	r3, [r4, #12]
 80032f6:	9903      	ldr	r1, [sp, #12]
 80032f8:	1a5b      	subs	r3, r3, r1
 80032fa:	42ab      	cmp	r3, r5
 80032fc:	dcf2      	bgt.n	80032e4 <_printf_i+0x220>
 80032fe:	e7eb      	b.n	80032d8 <_printf_i+0x214>
 8003300:	2500      	movs	r5, #0
 8003302:	f104 0619 	add.w	r6, r4, #25
 8003306:	e7f5      	b.n	80032f4 <_printf_i+0x230>
 8003308:	080035f5 	.word	0x080035f5
 800330c:	08003606 	.word	0x08003606

08003310 <memchr>:
 8003310:	4603      	mov	r3, r0
 8003312:	b510      	push	{r4, lr}
 8003314:	b2c9      	uxtb	r1, r1
 8003316:	4402      	add	r2, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	d101      	bne.n	8003322 <memchr+0x12>
 800331e:	2000      	movs	r0, #0
 8003320:	e003      	b.n	800332a <memchr+0x1a>
 8003322:	7804      	ldrb	r4, [r0, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	428c      	cmp	r4, r1
 8003328:	d1f6      	bne.n	8003318 <memchr+0x8>
 800332a:	bd10      	pop	{r4, pc}

0800332c <memcpy>:
 800332c:	440a      	add	r2, r1
 800332e:	4291      	cmp	r1, r2
 8003330:	f100 33ff 	add.w	r3, r0, #4294967295
 8003334:	d100      	bne.n	8003338 <memcpy+0xc>
 8003336:	4770      	bx	lr
 8003338:	b510      	push	{r4, lr}
 800333a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333e:	4291      	cmp	r1, r2
 8003340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003344:	d1f9      	bne.n	800333a <memcpy+0xe>
 8003346:	bd10      	pop	{r4, pc}

08003348 <memmove>:
 8003348:	4288      	cmp	r0, r1
 800334a:	b510      	push	{r4, lr}
 800334c:	eb01 0402 	add.w	r4, r1, r2
 8003350:	d902      	bls.n	8003358 <memmove+0x10>
 8003352:	4284      	cmp	r4, r0
 8003354:	4623      	mov	r3, r4
 8003356:	d807      	bhi.n	8003368 <memmove+0x20>
 8003358:	1e43      	subs	r3, r0, #1
 800335a:	42a1      	cmp	r1, r4
 800335c:	d008      	beq.n	8003370 <memmove+0x28>
 800335e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003366:	e7f8      	b.n	800335a <memmove+0x12>
 8003368:	4601      	mov	r1, r0
 800336a:	4402      	add	r2, r0
 800336c:	428a      	cmp	r2, r1
 800336e:	d100      	bne.n	8003372 <memmove+0x2a>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800337a:	e7f7      	b.n	800336c <memmove+0x24>

0800337c <_free_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4605      	mov	r5, r0
 8003380:	2900      	cmp	r1, #0
 8003382:	d043      	beq.n	800340c <_free_r+0x90>
 8003384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003388:	1f0c      	subs	r4, r1, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfb8      	it	lt
 800338e:	18e4      	addlt	r4, r4, r3
 8003390:	f000 f8d0 	bl	8003534 <__malloc_lock>
 8003394:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <_free_r+0x94>)
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	4610      	mov	r0, r2
 800339a:	b933      	cbnz	r3, 80033aa <_free_r+0x2e>
 800339c:	6063      	str	r3, [r4, #4]
 800339e:	6014      	str	r4, [r2, #0]
 80033a0:	4628      	mov	r0, r5
 80033a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033a6:	f000 b8cb 	b.w	8003540 <__malloc_unlock>
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d90a      	bls.n	80033c4 <_free_r+0x48>
 80033ae:	6821      	ldr	r1, [r4, #0]
 80033b0:	1862      	adds	r2, r4, r1
 80033b2:	4293      	cmp	r3, r2
 80033b4:	bf01      	itttt	eq
 80033b6:	681a      	ldreq	r2, [r3, #0]
 80033b8:	685b      	ldreq	r3, [r3, #4]
 80033ba:	1852      	addeq	r2, r2, r1
 80033bc:	6022      	streq	r2, [r4, #0]
 80033be:	6063      	str	r3, [r4, #4]
 80033c0:	6004      	str	r4, [r0, #0]
 80033c2:	e7ed      	b.n	80033a0 <_free_r+0x24>
 80033c4:	461a      	mov	r2, r3
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b10b      	cbz	r3, 80033ce <_free_r+0x52>
 80033ca:	42a3      	cmp	r3, r4
 80033cc:	d9fa      	bls.n	80033c4 <_free_r+0x48>
 80033ce:	6811      	ldr	r1, [r2, #0]
 80033d0:	1850      	adds	r0, r2, r1
 80033d2:	42a0      	cmp	r0, r4
 80033d4:	d10b      	bne.n	80033ee <_free_r+0x72>
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	4401      	add	r1, r0
 80033da:	1850      	adds	r0, r2, r1
 80033dc:	4283      	cmp	r3, r0
 80033de:	6011      	str	r1, [r2, #0]
 80033e0:	d1de      	bne.n	80033a0 <_free_r+0x24>
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4401      	add	r1, r0
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	6053      	str	r3, [r2, #4]
 80033ec:	e7d8      	b.n	80033a0 <_free_r+0x24>
 80033ee:	d902      	bls.n	80033f6 <_free_r+0x7a>
 80033f0:	230c      	movs	r3, #12
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	e7d4      	b.n	80033a0 <_free_r+0x24>
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	1821      	adds	r1, r4, r0
 80033fa:	428b      	cmp	r3, r1
 80033fc:	bf01      	itttt	eq
 80033fe:	6819      	ldreq	r1, [r3, #0]
 8003400:	685b      	ldreq	r3, [r3, #4]
 8003402:	1809      	addeq	r1, r1, r0
 8003404:	6021      	streq	r1, [r4, #0]
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6054      	str	r4, [r2, #4]
 800340a:	e7c9      	b.n	80033a0 <_free_r+0x24>
 800340c:	bd38      	pop	{r3, r4, r5, pc}
 800340e:	bf00      	nop
 8003410:	200000a4 	.word	0x200000a4

08003414 <_malloc_r>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	1ccd      	adds	r5, r1, #3
 8003418:	f025 0503 	bic.w	r5, r5, #3
 800341c:	3508      	adds	r5, #8
 800341e:	2d0c      	cmp	r5, #12
 8003420:	bf38      	it	cc
 8003422:	250c      	movcc	r5, #12
 8003424:	2d00      	cmp	r5, #0
 8003426:	4606      	mov	r6, r0
 8003428:	db01      	blt.n	800342e <_malloc_r+0x1a>
 800342a:	42a9      	cmp	r1, r5
 800342c:	d903      	bls.n	8003436 <_malloc_r+0x22>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	2000      	movs	r0, #0
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003436:	f000 f87d 	bl	8003534 <__malloc_lock>
 800343a:	4921      	ldr	r1, [pc, #132]	; (80034c0 <_malloc_r+0xac>)
 800343c:	680a      	ldr	r2, [r1, #0]
 800343e:	4614      	mov	r4, r2
 8003440:	b99c      	cbnz	r4, 800346a <_malloc_r+0x56>
 8003442:	4f20      	ldr	r7, [pc, #128]	; (80034c4 <_malloc_r+0xb0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b923      	cbnz	r3, 8003452 <_malloc_r+0x3e>
 8003448:	4621      	mov	r1, r4
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f862 	bl	8003514 <_sbrk_r>
 8003450:	6038      	str	r0, [r7, #0]
 8003452:	4629      	mov	r1, r5
 8003454:	4630      	mov	r0, r6
 8003456:	f000 f85d 	bl	8003514 <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d123      	bne.n	80034a6 <_malloc_r+0x92>
 800345e:	230c      	movs	r3, #12
 8003460:	4630      	mov	r0, r6
 8003462:	6033      	str	r3, [r6, #0]
 8003464:	f000 f86c 	bl	8003540 <__malloc_unlock>
 8003468:	e7e3      	b.n	8003432 <_malloc_r+0x1e>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1b5b      	subs	r3, r3, r5
 800346e:	d417      	bmi.n	80034a0 <_malloc_r+0x8c>
 8003470:	2b0b      	cmp	r3, #11
 8003472:	d903      	bls.n	800347c <_malloc_r+0x68>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	441c      	add	r4, r3
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	e004      	b.n	8003486 <_malloc_r+0x72>
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	42a2      	cmp	r2, r4
 8003480:	bf0c      	ite	eq
 8003482:	600b      	streq	r3, [r1, #0]
 8003484:	6053      	strne	r3, [r2, #4]
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f85a 	bl	8003540 <__malloc_unlock>
 800348c:	f104 000b 	add.w	r0, r4, #11
 8003490:	1d23      	adds	r3, r4, #4
 8003492:	f020 0007 	bic.w	r0, r0, #7
 8003496:	1ac2      	subs	r2, r0, r3
 8003498:	d0cc      	beq.n	8003434 <_malloc_r+0x20>
 800349a:	1a1b      	subs	r3, r3, r0
 800349c:	50a3      	str	r3, [r4, r2]
 800349e:	e7c9      	b.n	8003434 <_malloc_r+0x20>
 80034a0:	4622      	mov	r2, r4
 80034a2:	6864      	ldr	r4, [r4, #4]
 80034a4:	e7cc      	b.n	8003440 <_malloc_r+0x2c>
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d0e3      	beq.n	8003478 <_malloc_r+0x64>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 f82e 	bl	8003514 <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1dd      	bne.n	8003478 <_malloc_r+0x64>
 80034bc:	e7cf      	b.n	800345e <_malloc_r+0x4a>
 80034be:	bf00      	nop
 80034c0:	200000a4 	.word	0x200000a4
 80034c4:	200000a8 	.word	0x200000a8

080034c8 <_realloc_r>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	4607      	mov	r7, r0
 80034cc:	4614      	mov	r4, r2
 80034ce:	460e      	mov	r6, r1
 80034d0:	b921      	cbnz	r1, 80034dc <_realloc_r+0x14>
 80034d2:	4611      	mov	r1, r2
 80034d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034d8:	f7ff bf9c 	b.w	8003414 <_malloc_r>
 80034dc:	b922      	cbnz	r2, 80034e8 <_realloc_r+0x20>
 80034de:	f7ff ff4d 	bl	800337c <_free_r>
 80034e2:	4625      	mov	r5, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e8:	f000 f830 	bl	800354c <_malloc_usable_size_r>
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d20f      	bcs.n	8003510 <_realloc_r+0x48>
 80034f0:	4621      	mov	r1, r4
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ff8e 	bl	8003414 <_malloc_r>
 80034f8:	4605      	mov	r5, r0
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d0f2      	beq.n	80034e4 <_realloc_r+0x1c>
 80034fe:	4631      	mov	r1, r6
 8003500:	4622      	mov	r2, r4
 8003502:	f7ff ff13 	bl	800332c <memcpy>
 8003506:	4631      	mov	r1, r6
 8003508:	4638      	mov	r0, r7
 800350a:	f7ff ff37 	bl	800337c <_free_r>
 800350e:	e7e9      	b.n	80034e4 <_realloc_r+0x1c>
 8003510:	4635      	mov	r5, r6
 8003512:	e7e7      	b.n	80034e4 <_realloc_r+0x1c>

08003514 <_sbrk_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	2300      	movs	r3, #0
 8003518:	4d05      	ldr	r5, [pc, #20]	; (8003530 <_sbrk_r+0x1c>)
 800351a:	4604      	mov	r4, r0
 800351c:	4608      	mov	r0, r1
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	f7fd fa3a 	bl	8000998 <_sbrk>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_sbrk_r+0x1a>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	b103      	cbz	r3, 800352e <_sbrk_r+0x1a>
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	20000178 	.word	0x20000178

08003534 <__malloc_lock>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__malloc_lock+0x8>)
 8003536:	f000 b811 	b.w	800355c <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	20000180 	.word	0x20000180

08003540 <__malloc_unlock>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__malloc_unlock+0x8>)
 8003542:	f000 b80c 	b.w	800355e <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	20000180 	.word	0x20000180

0800354c <_malloc_usable_size_r>:
 800354c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003550:	1f18      	subs	r0, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	bfbc      	itt	lt
 8003556:	580b      	ldrlt	r3, [r1, r0]
 8003558:	18c0      	addlt	r0, r0, r3
 800355a:	4770      	bx	lr

0800355c <__retarget_lock_acquire_recursive>:
 800355c:	4770      	bx	lr

0800355e <__retarget_lock_release_recursive>:
 800355e:	4770      	bx	lr

08003560 <_init>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

0800356c <_fini>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr
