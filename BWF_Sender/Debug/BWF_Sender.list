
BWF_Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035f8  080035f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080035f8  080035f8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035f8  080035f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000080  08003680  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003680  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c055  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d25  00000000  00000000  0002c0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001864c  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0d4  00000000  00000000  00047cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbc7  00000000  00000000  00054db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a4  00000000  00000000  000e49cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003540 	.word	0x08003540

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003540 	.word	0x08003540

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <run_sig>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void run_sig(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e015      	b.n	8000194 <run_sig+0x38>

		  if (SIG1[x] == 1) signal_up();
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a0e      	ldr	r2, [pc, #56]	; (80001a4 <run_sig+0x48>)
 800016c:	56d3      	ldrsb	r3, [r2, r3]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d102      	bne.n	8000178 <run_sig+0x1c>
 8000172:	f000 f819 	bl	80001a8 <signal_up>
 8000176:	e007      	b.n	8000188 <run_sig+0x2c>
		  else if(SIG1[x] == -1) signal_down();
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <run_sig+0x48>)
 800017c:	56d3      	ldrsb	r3, [r2, r3]
 800017e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000182:	d101      	bne.n	8000188 <run_sig+0x2c>
 8000184:	f000 f822 	bl	80001cc <signal_down>

		  delay_us(DELAY);
 8000188:	2064      	movs	r0, #100	; 0x64
 800018a:	f000 f831 	bl	80001f0 <delay_us>
	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	3301      	adds	r3, #1
 8000192:	71fb      	strb	r3, [r7, #7]
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b09      	cmp	r3, #9
 8000198:	d9e6      	bls.n	8000168 <run_sig+0xc>

	  }
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20000004 	.word	0x20000004

080001a8 <signal_up>:


void signal_up(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <signal_up+0x20>)
 80001b4:	f001 fb40 	bl	8001838 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001be:	4802      	ldr	r0, [pc, #8]	; (80001c8 <signal_up+0x20>)
 80001c0:	f001 fb3a 	bl	8001838 <HAL_GPIO_WritePin>

}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010c00 	.word	0x40010c00

080001cc <signal_down>:
void signal_down(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <signal_down+0x20>)
 80001d8:	f001 fb2e 	bl	8001838 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <signal_down+0x20>)
 80001e4:	f001 fb28 	bl	8001838 <HAL_GPIO_WritePin>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <delay_us>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
}

void delay_us (uint16_t us)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <delay_us+0x2c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2200      	movs	r2, #0
 8000200:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000202:	bf00      	nop
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <delay_us+0x2c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	429a      	cmp	r2, r3
 800020e:	d3f9      	bcc.n	8000204 <delay_us+0x14>
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000128 	.word	0x20000128

08000220 <toogle_led>:

void toogle_led(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - LED_timer >= 200) {
 8000224:	f000 fc62 	bl	8000aec <HAL_GetTick>
 8000228:	4602      	mov	r2, r0
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <toogle_led+0x50>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	2bc7      	cmp	r3, #199	; 0xc7
 8000232:	d91b      	bls.n	800026c <toogle_led+0x4c>
		if (LED_status == 0) {
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <toogle_led+0x54>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d109      	bne.n	8000250 <toogle_led+0x30>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	480d      	ldr	r0, [pc, #52]	; (8000278 <toogle_led+0x58>)
 8000244:	f001 faf8 	bl	8001838 <HAL_GPIO_WritePin>
			LED_status = 1;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <toogle_led+0x54>)
 800024a:	2201      	movs	r2, #1
 800024c:	701a      	strb	r2, [r3, #0]
 800024e:	e008      	b.n	8000262 <toogle_led+0x42>

			}
		else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <toogle_led+0x58>)
 8000258:	f001 faee 	bl	8001838 <HAL_GPIO_WritePin>
			LED_status = 0;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <toogle_led+0x54>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
			}
		LED_timer = HAL_GetTick();
 8000262:	f000 fc43 	bl	8000aec <HAL_GetTick>
 8000266:	4603      	mov	r3, r0
 8000268:	4a01      	ldr	r2, [pc, #4]	; (8000270 <toogle_led+0x50>)
 800026a:	6013      	str	r3, [r2, #0]
	}

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000124 	.word	0x20000124
 8000274:	2000009c 	.word	0x2000009c
 8000278:	40010800 	.word	0x40010800

0800027c <run_led>:

void run_led(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

	if (LED_status == 0) {
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <run_led+0x24>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d108      	bne.n	800029a <run_led+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <run_led+0x28>)
 8000290:	f001 fad2 	bl	8001838 <HAL_GPIO_WritePin>
		LED_status = 1;
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <run_led+0x24>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]

		}
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	2000009c 	.word	0x2000009c
 80002a4:	40010800 	.word	0x40010800

080002a8 <CalibrateSens>:

void CalibrateSens(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	int sumVolt = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]

	for (uint16_t x = 0; x < 100; x++) {
 80002b2:	2300      	movs	r3, #0
 80002b4:	807b      	strh	r3, [r7, #2]
 80002b6:	e014      	b.n	80002e2 <CalibrateSens+0x3a>
		HAL_ADC_Start(&hadc1);
 80002b8:	4812      	ldr	r0, [pc, #72]	; (8000304 <CalibrateSens+0x5c>)
 80002ba:	f000 fd1d 	bl	8000cf8 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002be:	f04f 31ff 	mov.w	r1, #4294967295
 80002c2:	4810      	ldr	r0, [pc, #64]	; (8000304 <CalibrateSens+0x5c>)
 80002c4:	f000 fdc6 	bl	8000e54 <HAL_ADC_PollForConversion>
	   	sumVolt += HAL_ADC_GetValue(&hadc1);
 80002c8:	480e      	ldr	r0, [pc, #56]	; (8000304 <CalibrateSens+0x5c>)
 80002ca:	f000 febd 	bl	8001048 <HAL_ADC_GetValue>
 80002ce:	4602      	mov	r2, r0
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	607b      	str	r3, [r7, #4]
	   	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f000 fc12 	bl	8000b00 <HAL_Delay>
	for (uint16_t x = 0; x < 100; x++) {
 80002dc:	887b      	ldrh	r3, [r7, #2]
 80002de:	3301      	adds	r3, #1
 80002e0:	807b      	strh	r3, [r7, #2]
 80002e2:	887b      	ldrh	r3, [r7, #2]
 80002e4:	2b63      	cmp	r3, #99	; 0x63
 80002e6:	d9e7      	bls.n	80002b8 <CalibrateSens+0x10>
	}

	CalibratedValue = sumVolt / 100;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a07      	ldr	r2, [pc, #28]	; (8000308 <CalibrateSens+0x60>)
 80002ec:	fb82 1203 	smull	r1, r2, r2, r3
 80002f0:	1152      	asrs	r2, r2, #5
 80002f2:	17db      	asrs	r3, r3, #31
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <CalibrateSens+0x64>)
 80002f8:	6013      	str	r3, [r2, #0]
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000b0 	.word	0x200000b0
 8000308:	51eb851f 	.word	0x51eb851f
 800030c:	200000e0 	.word	0x200000e0

08000310 <CheckDocked>:

void CheckDocked(void) {
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b0a5      	sub	sp, #148	; 0x94
 8000314:	af02      	add	r7, sp, #8
	int sumVolt = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	char msg[128];
	for (uint16_t x = 0; x < AVERAGE_NUM; x++) {
 800031c:	2300      	movs	r3, #0
 800031e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8000322:	e015      	b.n	8000350 <CheckDocked+0x40>
		HAL_ADC_Start(&hadc1);
 8000324:	4823      	ldr	r0, [pc, #140]	; (80003b4 <CheckDocked+0xa4>)
 8000326:	f000 fce7 	bl	8000cf8 <HAL_ADC_Start>
	   	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800032a:	f04f 31ff 	mov.w	r1, #4294967295
 800032e:	4821      	ldr	r0, [pc, #132]	; (80003b4 <CheckDocked+0xa4>)
 8000330:	f000 fd90 	bl	8000e54 <HAL_ADC_PollForConversion>
	   	sumVolt += HAL_ADC_GetValue(&hadc1);
 8000334:	481f      	ldr	r0, [pc, #124]	; (80003b4 <CheckDocked+0xa4>)
 8000336:	f000 fe87 	bl	8001048 <HAL_ADC_GetValue>
 800033a:	4602      	mov	r2, r0
 800033c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000340:	4413      	add	r3, r2
 8000342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (uint16_t x = 0; x < AVERAGE_NUM; x++) {
 8000346:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800034a:	3301      	adds	r3, #1
 800034c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8000350:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000354:	2b18      	cmp	r3, #24
 8000356:	d9e5      	bls.n	8000324 <CheckDocked+0x14>
	}

	CurrentValue = sumVolt / AVERAGE_NUM;
 8000358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800035c:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <CheckDocked+0xa8>)
 800035e:	fb82 1203 	smull	r1, r2, r2, r3
 8000362:	10d2      	asrs	r2, r2, #3
 8000364:	17db      	asrs	r3, r3, #31
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	4a14      	ldr	r2, [pc, #80]	; (80003bc <CheckDocked+0xac>)
 800036a:	6013      	str	r3, [r2, #0]

	sprintf(msg, "Calibrated Value: %d Current Value: %d Diff: %d\r\n", CalibratedValue, CurrentValue, abs(CalibratedValue - CurrentValue));
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <CheckDocked+0xb0>)
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <CheckDocked+0xac>)
 8000372:	681c      	ldr	r4, [r3, #0]
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <CheckDocked+0xb0>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <CheckDocked+0xac>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	2b00      	cmp	r3, #0
 8000380:	bfb8      	it	lt
 8000382:	425b      	neglt	r3, r3
 8000384:	4638      	mov	r0, r7
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	4623      	mov	r3, r4
 800038a:	460a      	mov	r2, r1
 800038c:	490d      	ldr	r1, [pc, #52]	; (80003c4 <CheckDocked+0xb4>)
 800038e:	f002 fc9d 	bl	8002ccc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000392:	463b      	mov	r3, r7
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff fed9 	bl	800014c <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	4639      	mov	r1, r7
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	4808      	ldr	r0, [pc, #32]	; (80003c8 <CheckDocked+0xb8>)
 80003a6:	f002 faf4 	bl	8002992 <HAL_UART_Transmit>

}
 80003aa:	bf00      	nop
 80003ac:	378c      	adds	r7, #140	; 0x8c
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd90      	pop	{r4, r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000b0 	.word	0x200000b0
 80003b8:	51eb851f 	.word	0x51eb851f
 80003bc:	200000ac 	.word	0x200000ac
 80003c0:	200000e0 	.word	0x200000e0
 80003c4:	08003558 	.word	0x08003558
 80003c8:	200000e4 	.word	0x200000e4

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fb34 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f84c 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f000 f95a 	bl	8000690 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003dc:	f000 f8a4 	bl	8000528 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003e0:	f000 f8e0 	bl	80005a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80003e4:	f000 f92a 	bl	800063c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80003e8:	481b      	ldr	r0, [pc, #108]	; (8000458 <main+0x8c>)
 80003ea:	f002 f821 	bl	8002430 <HAL_TIM_Base_Start>
  LED_timer = HAL_GetTick();
 80003ee:	f000 fb7d 	bl	8000aec <HAL_GetTick>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a19      	ldr	r2, [pc, #100]	; (800045c <main+0x90>)
 80003f6:	6013      	str	r3, [r2, #0]

  HAL_Delay(2000);
 80003f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003fc:	f000 fb80 	bl	8000b00 <HAL_Delay>

  CalibrateSens();
 8000400:	f7ff ff52 	bl	80002a8 <CalibrateSens>

  LoopTimer = HAL_GetTick();
 8000404:	f000 fb72 	bl	8000aec <HAL_GetTick>
 8000408:	4603      	mov	r3, r0
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <main+0x94>)
 800040c:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GetTick() - LoopTimer >= (LOOPCHECKTIME * 1000)) {
 800040e:	f000 fb6d 	bl	8000aec <HAL_GetTick>
 8000412:	4602      	mov	r2, r0
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <main+0x94>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	f242 720f 	movw	r2, #9999	; 0x270f
 800041e:	4293      	cmp	r3, r2
 8000420:	d906      	bls.n	8000430 <main+0x64>
		  CheckDocked();
 8000422:	f7ff ff75 	bl	8000310 <CheckDocked>
		  LoopTimer =  HAL_GetTick();
 8000426:	f000 fb61 	bl	8000aec <HAL_GetTick>
 800042a:	4603      	mov	r3, r0
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <main+0x94>)
 800042e:	6013      	str	r3, [r2, #0]
	  }

	  if ( abs(CalibratedValue - CurrentValue) < offset) {
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <main+0x98>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <main+0x9c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	2b00      	cmp	r3, #0
 800043c:	bfb8      	it	lt
 800043e:	425b      	neglt	r3, r3
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <main+0xa0>)
 8000442:	7812      	ldrb	r2, [r2, #0]
 8000444:	4293      	cmp	r3, r2
 8000446:	da02      	bge.n	800044e <main+0x82>
		  toogle_led();
 8000448:	f7ff feea 	bl	8000220 <toogle_led>
 800044c:	e001      	b.n	8000452 <main+0x86>
	  }
	  else {
		  run_led();
 800044e:	f7ff ff15 	bl	800027c <run_led>
	  }

	  run_sig();
 8000452:	f7ff fe83 	bl	800015c <run_sig>
	  if (HAL_GetTick() - LoopTimer >= (LOOPCHECKTIME * 1000)) {
 8000456:	e7da      	b.n	800040e <main+0x42>
 8000458:	20000128 	.word	0x20000128
 800045c:	20000124 	.word	0x20000124
 8000460:	20000170 	.word	0x20000170
 8000464:	200000e0 	.word	0x200000e0
 8000468:	200000ac 	.word	0x200000ac
 800046c:	20000000 	.word	0x20000000

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b094      	sub	sp, #80	; 0x50
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047a:	2228      	movs	r2, #40	; 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fc1c 	bl	8002cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a0:	2301      	movs	r3, #1
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ae:	2301      	movs	r3, #1
 80004b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 f9ce 	bl	8001868 <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004d2:	f000 f94d 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2102      	movs	r1, #2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 fc38 	bl	8001d68 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004fe:	f000 f937 	bl	8000770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000502:	2302      	movs	r3, #2
 8000504:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fdc4 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800051a:	f000 f929 	bl	8000770 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3750      	adds	r7, #80	; 0x50
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_ADC1_Init+0x74>)
 800053a:	4a19      	ldr	r2, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x78>)
 800053c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_ADC1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_ADC1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_ADC1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_ADC1_Init+0x74>)
 8000552:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_ADC1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_ADC1_Init+0x74>)
 8000560:	2201      	movs	r2, #1
 8000562:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <MX_ADC1_Init+0x74>)
 8000566:	f000 faef 	bl	8000b48 <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000570:	f000 f8fe 	bl	8000770 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000574:	2308      	movs	r3, #8
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_ADC1_Init+0x74>)
 8000586:	f000 fd6b 	bl	8001060 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000590:	f000 f8ee 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000b0 	.word	0x200000b0
 80005a0:	40012400 	.word	0x40012400

080005a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_TIM2_Init+0x94>)
 80005c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_TIM2_Init+0x94>)
 80005ca:	2247      	movs	r2, #71	; 0x47
 80005cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_TIM2_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_TIM2_Init+0x94>)
 80005d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80005da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_TIM2_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_TIM2_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <MX_TIM2_Init+0x94>)
 80005ea:	f001 fed1 	bl	8002390 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005f4:	f000 f8bc 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <MX_TIM2_Init+0x94>)
 8000606:	f001 ff5d 	bl	80024c4 <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 f8ae 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_TIM2_Init+0x94>)
 8000622:	f002 f90b 	bl	800283c <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800062c:	f000 f8a0 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000128 	.word	0x20000128

0800063c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART1_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART1_UART_Init+0x4c>)
 8000674:	f002 f940 	bl	80028f8 <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f877 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000e4 	.word	0x200000e4
 800068c:	40013800 	.word	0x40013800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0320 	and.w	r3, r3, #32
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0xd4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80006ec:	2200      	movs	r2, #0
 80006ee:	f24f 0104 	movw	r1, #61444	; 0xf004
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <MX_GPIO_Init+0xd8>)
 80006f4:	f001 f8a0 	bl	8001838 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <MX_GPIO_Init+0xdc>)
 8000700:	f001 f89a 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000704:	2304      	movs	r3, #4
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <MX_GPIO_Init+0xd8>)
 800071c:	f000 ff08 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000720:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0xd8>)
 800073a:	f000 fef9 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800073e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_GPIO_Init+0xdc>)
 8000758:	f000 feea 	bl	8001530 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40010c00 	.word	0x40010c00
 800076c:	40010800 	.word	0x40010800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <HAL_MspInit+0x5c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x5c>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_MspInit+0x60>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_MspInit+0x60>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_ADC_MspInit+0x6c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d121      	bne.n	8000844 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <HAL_ADC_MspInit+0x70>)
 8000806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_ADC_MspInit+0x70>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_ADC_MspInit+0x70>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_ADC_MspInit+0x70>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_ADC_MspInit+0x70>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000834:	2303      	movs	r3, #3
 8000836:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_ADC_MspInit+0x74>)
 8000840:	f000 fe76 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40012400 	.word	0x40012400
 8000850:	40021000 	.word	0x40021000
 8000854:	40010c00 	.word	0x40010c00

08000858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000868:	d10b      	bne.n	8000882 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_TIM_Base_MspInit+0x34>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_TIM_Base_MspInit+0x34>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_TIM_Base_MspInit+0x34>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <HAL_UART_MspInit+0x8c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d131      	bne.n	8000914 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_MspInit+0x90>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008f6:	f000 fe1b 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_UART_MspInit+0x94>)
 8000910:	f000 fe0e 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013800 	.word	0x40013800
 8000920:	40021000 	.word	0x40021000
 8000924:	40010800 	.word	0x40010800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096e:	f000 f8ab 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f002 f95e 	bl	8002c68 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20005000 	.word	0x20005000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	200000a0 	.word	0x200000a0
 80009e0:	20000188 	.word	0x20000188

080009e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009f2:	e003      	b.n	80009fc <LoopCopyDataInit>

080009f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009fa:	3104      	adds	r1, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a04:	d3f6      	bcc.n	80009f4 <CopyDataInit>
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a08:	e002      	b.n	8000a10 <LoopFillZerobss>

08000a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a0c:	f842 3b04 	str.w	r3, [r2], #4

08000a10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a14:	d3f9      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a16:	f7ff ffe5 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 f92b 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fcd5 	bl	80003cc <main>
  bx lr
 8000a22:	4770      	bx	lr
  ldr r3, =_sidata
 8000a24:	08003600 	.word	0x08003600
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a2c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000a30:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000a34:	20000188 	.word	0x20000188

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 fd3b 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe90 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 fd45 	bl	8001516 <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 fd1b 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	20000018 	.word	0x20000018
 8000ac4:	20000014 	.word	0x20000014

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x1c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000018 	.word	0x20000018
 8000ae8:	20000174 	.word	0x20000174

08000aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <HAL_GetTick+0x10>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000174 	.word	0x20000174

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff fff0 	bl	8000aec <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffe0 	bl	8000aec <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000018 	.word	0x20000018

08000b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0be      	b.n	8000ce8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fe2a 	bl	80007e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 fbb1 	bl	80012f4 <ADC_ConversionStop_Disable>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8099 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8095 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bb4:	f023 0302 	bic.w	r3, r3, #2
 8000bb8:	f043 0202 	orr.w	r2, r3, #2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
 8000bce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <HAL_ADC_Init+0xa8>
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	e000      	b.n	8000bf2 <HAL_ADC_Init+0xaa>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7d1b      	ldrb	r3, [r3, #20]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d119      	bne.n	8000c34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e00b      	b.n	8000c34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f043 0220 	orr.w	r2, r3, #32
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_Init+0x1a8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_Init+0x126>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	051b      	lsls	r3, r3, #20
 8000c76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_ADC_Init+0x1ac>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb2:	e018      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f023 0312 	bic.w	r3, r3, #18
 8000cbc:	f043 0210 	orr.w	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd4:	e007      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	f043 0210 	orr.w	r2, r3, #16
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf4:	ff1f0efe 	.word	0xff1f0efe

08000cf8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Start+0x1a>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e098      	b.n	8000e44 <HAL_ADC_Start+0x14c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fa98 	bl	8001250 <ADC_Enable>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8087 	bne.w	8000e3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d105      	bne.n	8000d56 <HAL_ADC_Start+0x5e>
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d026      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d80:	e01d      	b.n	8000dbe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d004      	beq.n	8000da2 <HAL_ADC_Start+0xaa>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_ADC_Start+0xc6>
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f023 0206 	bic.w	r2, r3, #6
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd6:	e002      	b.n	8000dde <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f06f 0202 	mvn.w	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dfe:	d113      	bne.n	8000e28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d105      	bne.n	8000e16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e00c      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e003      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012800 	.word	0x40012800
 8000e50:	40012400 	.word	0x40012400

08000e54 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e6a:	f7ff fe3f 	bl	8000aec <HAL_GetTick>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	f043 0220 	orr.w	r2, r3, #32
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c8      	b.n	8001028 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12a      	bne.n	8000efa <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d123      	bne.n	8000efa <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eb2:	e01a      	b.n	8000eea <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eba:	d016      	beq.n	8000eea <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <HAL_ADC_PollForConversion+0x7e>
 8000ec2:	f7ff fe13 	bl	8000aec <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d20b      	bcs.n	8000eea <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f043 0204 	orr.w	r2, r3, #4
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e09e      	b.n	8001028 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0dd      	beq.n	8000eb4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ef8:	e06c      	b.n	8000fd4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <HAL_ADC_PollForConversion+0x1dc>)
 8000efc:	681c      	ldr	r4, [r3, #0]
 8000efe:	2002      	movs	r0, #2
 8000f00:	f001 f982 	bl	8002208 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6919      	ldr	r1, [r3, #16]
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <HAL_ADC_PollForConversion+0x1e0>)
 8000f12:	400b      	ands	r3, r1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d118      	bne.n	8000f4a <HAL_ADC_PollForConversion+0xf6>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d9      	ldr	r1, [r3, #12]
 8000f1e:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HAL_ADC_PollForConversion+0x1e4>)
 8000f20:	400b      	ands	r3, r1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d111      	bne.n	8000f4a <HAL_ADC_PollForConversion+0xf6>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6919      	ldr	r1, [r3, #16]
 8000f2c:	4b43      	ldr	r3, [pc, #268]	; (800103c <HAL_ADC_PollForConversion+0x1e8>)
 8000f2e:	400b      	ands	r3, r1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d108      	bne.n	8000f46 <HAL_ADC_PollForConversion+0xf2>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68d9      	ldr	r1, [r3, #12]
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <HAL_ADC_PollForConversion+0x1ec>)
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_PollForConversion+0xf2>
 8000f42:	2314      	movs	r3, #20
 8000f44:	e020      	b.n	8000f88 <HAL_ADC_PollForConversion+0x134>
 8000f46:	2329      	movs	r3, #41	; 0x29
 8000f48:	e01e      	b.n	8000f88 <HAL_ADC_PollForConversion+0x134>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6919      	ldr	r1, [r3, #16]
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <HAL_ADC_PollForConversion+0x1e8>)
 8000f52:	400b      	ands	r3, r1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <HAL_ADC_PollForConversion+0x112>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68d9      	ldr	r1, [r3, #12]
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <HAL_ADC_PollForConversion+0x1ec>)
 8000f60:	400b      	ands	r3, r1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00d      	beq.n	8000f82 <HAL_ADC_PollForConversion+0x12e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6919      	ldr	r1, [r3, #16]
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HAL_ADC_PollForConversion+0x1f0>)
 8000f6e:	400b      	ands	r3, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x132>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68d9      	ldr	r1, [r3, #12]
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_ADC_PollForConversion+0x1f0>)
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_PollForConversion+0x132>
 8000f82:	2354      	movs	r3, #84	; 0x54
 8000f84:	e000      	b.n	8000f88 <HAL_ADC_PollForConversion+0x134>
 8000f86:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f8e:	e01d      	b.n	8000fcc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f96:	d016      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_ADC_PollForConversion+0x15a>
 8000f9e:	f7ff fda5 	bl	8000aec <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d20b      	bcs.n	8000fc6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f043 0204 	orr.w	r2, r3, #4
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e030      	b.n	8001028 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8dd      	bhi.n	8000f90 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f06f 0212 	mvn.w	r2, #18
 8000fdc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ff4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ff8:	d115      	bne.n	8001026 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d111      	bne.n	8001026 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}
 8001030:	20000010 	.word	0x20000010
 8001034:	24924924 	.word	0x24924924
 8001038:	00924924 	.word	0x00924924
 800103c:	12492492 	.word	0x12492492
 8001040:	00492492 	.word	0x00492492
 8001044:	00249249 	.word	0x00249249

08001048 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x20>
 800107c:	2302      	movs	r3, #2
 800107e:	e0dc      	b.n	800123a <HAL_ADC_ConfigChannel+0x1da>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d81c      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b05      	subs	r3, #5
 80010a2:	221f      	movs	r2, #31
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4019      	ands	r1, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b05      	subs	r3, #5
 80010bc:	fa00 f203 	lsl.w	r2, r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
 80010c8:	e03c      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d81c      	bhi.n	800110c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b23      	subs	r3, #35	; 0x23
 80010e4:	221f      	movs	r2, #31
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b23      	subs	r3, #35	; 0x23
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	e01b      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b41      	subs	r3, #65	; 0x41
 800111e:	221f      	movs	r2, #31
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b41      	subs	r3, #65	; 0x41
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d91c      	bls.n	8001186 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68d9      	ldr	r1, [r3, #12]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b1e      	subs	r3, #30
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	3b1e      	subs	r3, #30
 8001178:	fa00 f203 	lsl.w	r2, r0, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	e019      	b.n	80011ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6919      	ldr	r1, [r3, #16]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6898      	ldr	r0, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d003      	beq.n	80011ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c6:	2b11      	cmp	r3, #17
 80011c8:	d132      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_ADC_ConfigChannel+0x1e4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d125      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d126      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011f0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d11a      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_ADC_ConfigChannel+0x1e8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_ADC_ConfigChannel+0x1ec>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9a      	lsrs	r2, r3, #18
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x1b2>
 800121e:	e007      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f043 0220 	orr.w	r2, r3, #32
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40012400 	.word	0x40012400
 8001248:	20000010 	.word	0x20000010
 800124c:	431bde83 	.word	0x431bde83

08001250 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d039      	beq.n	80012e2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <ADC_Enable+0x9c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <ADC_Enable+0xa0>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9b      	lsrs	r3, r3, #18
 800128a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800128c:	e002      	b.n	8001294 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800129a:	f7ff fc27 	bl	8000aec <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012a0:	e018      	b.n	80012d4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012a2:	f7ff fc23 	bl	8000aec <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d911      	bls.n	80012d4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e007      	b.n	80012e4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d1df      	bne.n	80012a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000010 	.word	0x20000010
 80012f0:	431bde83 	.word	0x431bde83

080012f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d127      	bne.n	800135e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800131e:	f7ff fbe5 	bl	8000aec <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001324:	e014      	b.n	8001350 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001326:	f7ff fbe1 	bl	8000aec <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d90d      	bls.n	8001350 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e007      	b.n	8001360 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	d0e3      	beq.n	8001326 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff49 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff5e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffb0 	bl	8001484 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	; 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e169      	b.n	8001818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001544:	2201      	movs	r2, #1
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8158 	bne.w	8001812 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a9a      	ldr	r2, [pc, #616]	; (80017d0 <HAL_GPIO_Init+0x2a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800156c:	4a98      	ldr	r2, [pc, #608]	; (80017d0 <HAL_GPIO_Init+0x2a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d875      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001572:	4a98      	ldr	r2, [pc, #608]	; (80017d4 <HAL_GPIO_Init+0x2a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d058      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001578:	4a96      	ldr	r2, [pc, #600]	; (80017d4 <HAL_GPIO_Init+0x2a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d86f      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800157e:	4a96      	ldr	r2, [pc, #600]	; (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d052      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001584:	4a94      	ldr	r2, [pc, #592]	; (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d869      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800158a:	4a94      	ldr	r2, [pc, #592]	; (80017dc <HAL_GPIO_Init+0x2ac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04c      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001590:	4a92      	ldr	r2, [pc, #584]	; (80017dc <HAL_GPIO_Init+0x2ac>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d863      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001596:	4a92      	ldr	r2, [pc, #584]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d046      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800159c:	4a90      	ldr	r2, [pc, #576]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d85d      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d82a      	bhi.n	80015fc <HAL_GPIO_Init+0xcc>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d859      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_GPIO_Init+0x80>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	08001605 	.word	0x08001605
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001659 	.word	0x08001659
 80015c0:	0800165f 	.word	0x0800165f
 80015c4:	0800165f 	.word	0x0800165f
 80015c8:	0800165f 	.word	0x0800165f
 80015cc:	0800165f 	.word	0x0800165f
 80015d0:	0800165f 	.word	0x0800165f
 80015d4:	0800165f 	.word	0x0800165f
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	0800165f 	.word	0x0800165f
 80015e0:	0800165f 	.word	0x0800165f
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	0800165f 	.word	0x0800165f
 80015ec:	0800165f 	.word	0x0800165f
 80015f0:	0800165f 	.word	0x0800165f
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001621 	.word	0x08001621
 80015fc:	4a79      	ldr	r2, [pc, #484]	; (80017e4 <HAL_GPIO_Init+0x2b4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e029      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e024      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01f      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e01a      	b.n	8001660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e013      	b.n	8001660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e009      	b.n	8001660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e003      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x130>
          break;
 800165e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d801      	bhi.n	800166a <HAL_GPIO_Init+0x13a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e001      	b.n	800166e <HAL_GPIO_Init+0x13e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d802      	bhi.n	800167c <HAL_GPIO_Init+0x14c>
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x152>
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3b08      	subs	r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	210f      	movs	r1, #15
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80b1 	beq.w	8001812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a40      	ldr	r2, [pc, #256]	; (80017f0 <HAL_GPIO_Init+0x2c0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1ec>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1e8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1e0>
 800170c:	2303      	movs	r3, #3
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001710:	2304      	movs	r3, #4
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 800171c:	2300      	movs	r3, #0
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800172e:	492f      	ldr	r1, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	492c      	ldr	r1, [pc, #176]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4928      	ldr	r1, [pc, #160]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4922      	ldr	r1, [pc, #136]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	491e      	ldr	r1, [pc, #120]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4914      	ldr	r1, [pc, #80]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
 80017cc:	e021      	b.n	8001812 <HAL_GPIO_Init+0x2e2>
 80017ce:	bf00      	nop
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10310000 	.word	0x10310000
 80017d8:	10220000 	.word	0x10220000
 80017dc:	10210000 	.word	0x10210000
 80017e0:	10120000 	.word	0x10120000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400
 8001800:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_GPIO_Init+0x304>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	43db      	mvns	r3, r3
 800180c:	4909      	ldr	r1, [pc, #36]	; (8001834 <HAL_GPIO_Init+0x304>)
 800180e:	4013      	ands	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3301      	adds	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae8e 	bne.w	8001544 <HAL_GPIO_Init+0x14>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	372c      	adds	r7, #44	; 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	611a      	str	r2, [r3, #16]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e26c      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001888:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b04      	cmp	r3, #4
 8001892:	d00c      	beq.n	80018ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001894:	4b8f      	ldr	r3, [pc, #572]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
 80018a0:	4b8c      	ldr	r3, [pc, #560]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b89      	ldr	r3, [pc, #548]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d06c      	beq.n	8001994 <HAL_RCC_OscConfig+0x12c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d168      	bne.n	8001994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e246      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x76>
 80018d0:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02e      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0xbc>
 800190a:	4b72      	ldr	r3, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a71      	ldr	r2, [pc, #452]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6e      	ldr	r2, [pc, #440]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001924:	4b6b      	ldr	r3, [pc, #428]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6a      	ldr	r2, [pc, #424]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a67      	ldr	r2, [pc, #412]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f8d2 	bl	8000aec <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f8ce 	bl	8000aec <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1fa      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xe4>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f8be 	bl	8000aec <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff f8ba 	bl	8000aec <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1e6      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x10c>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ae:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1ba      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4939      	ldr	r1, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f873 	bl	8000aec <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f86f 	bl	8000aec <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e19b      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4927      	ldr	r1, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f852 	bl	8000aec <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f84e 	bl	8000aec <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e17a      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03a      	beq.n	8001aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_RCC_OscConfig+0x274>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7ff f832 	bl	8000aec <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f82e 	bl	8000aec <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e15a      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fad8 	bl	8002060 <RCC_Delay>
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f818 	bl	8000aec <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abe:	e00f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f814 	bl	8000aec <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d908      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e140      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	42420000 	.word	0x42420000
 8001adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	4b9e      	ldr	r3, [pc, #632]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e9      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a6 	beq.w	8001c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b97      	ldr	r3, [pc, #604]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b94      	ldr	r3, [pc, #592]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a93      	ldr	r2, [pc, #588]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	4b8e      	ldr	r3, [pc, #568]	; (8001d60 <HAL_RCC_OscConfig+0x4f8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b32:	4b8b      	ldr	r3, [pc, #556]	; (8001d60 <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a8a      	ldr	r2, [pc, #552]	; (8001d60 <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7fe ffd5 	bl	8000aec <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe ffd1 	bl	8000aec <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e0fd      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x312>
 8001b6c:	4b7b      	ldr	r3, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a7a      	ldr	r2, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x356>
 8001ba4:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a6c      	ldr	r2, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a69      	ldr	r2, [pc, #420]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a66      	ldr	r2, [pc, #408]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	4b64      	ldr	r3, [pc, #400]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a63      	ldr	r2, [pc, #396]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7fe ff85 	bl	8000aec <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7fe ff81 	bl	8000aec <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0ab      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x37e>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ff6f 	bl	8000aec <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe ff6b 	bl	8000aec <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e095      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8081 	beq.w	8001d52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d061      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d146      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b3f      	ldr	r3, [pc, #252]	; (8001d64 <HAL_RCC_OscConfig+0x4fc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe ff3f 	bl	8000aec <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe ff3b 	bl	8000aec <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e067      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d108      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	492d      	ldr	r1, [pc, #180]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a19      	ldr	r1, [r3, #32]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x4fc>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe ff0f 	bl	8000aec <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe ff0b 	bl	8000aec <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e037      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46a>
 8001cf0:	e02f      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_RCC_OscConfig+0x4fc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fef8 	bl	8000aec <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe fef4 	bl	8000aec <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e020      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x498>
 8001d1e:	e018      	b.n	8001d52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e013      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42420060 	.word	0x42420060

08001d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0d0      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d910      	bls.n	8001dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0207 	bic.w	r2, r3, #7
 8001d92:	4965      	ldr	r1, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	494d      	ldr	r1, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d040      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e073      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06b      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4936      	ldr	r1, [pc, #216]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7fe fe48 	bl	8000aec <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7fe fe44 	bl	8000aec <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e053      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d210      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4922      	ldr	r1, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490e      	ldr	r1, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	490a      	ldr	r1, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001f08:	5ccb      	ldrb	r3, [r1, r3]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1cc>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1d0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fda6 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	080035ac 	.word	0x080035ac
 8001f34:	20000010 	.word	0x20000010
 8001f38:	20000014 	.word	0x20000014

08001f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b490      	push	{r4, r7}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f44:	1d3c      	adds	r4, r7, #4
 8001f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f4c:	f240 2301 	movw	r3, #513	; 0x201
 8001f50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x40>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x46>
 8001f7a:	e02d      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7e:	623b      	str	r3, [r7, #32]
      break;
 8001f80:	e02d      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f8e:	4413      	add	r3, r2
 8001f90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c5b      	lsrs	r3, r3, #17
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fae:	4413      	add	r3, r2
 8001fb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fba:	fb02 f203 	mul.w	r2, r2, r3
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e004      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	623b      	str	r3, [r7, #32]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fda:	623b      	str	r3, [r7, #32]
      break;
 8001fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fde:	6a3b      	ldr	r3, [r7, #32]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc90      	pop	{r4, r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	0800358c 	.word	0x0800358c
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_RCC_GetHCLKFreq+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000010 	.word	0x20000010

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002014:	f7ff fff2 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	080035bc 	.word	0x080035bc

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800203c:	f7ff ffde 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0adb      	lsrs	r3, r3, #11
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	080035bc 	.word	0x080035bc

08002060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <RCC_Delay+0x34>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <RCC_Delay+0x38>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a5b      	lsrs	r3, r3, #9
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800207c:	bf00      	nop
  }
  while (Delay --);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	60fa      	str	r2, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <RCC_Delay+0x1c>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000010 	.word	0x20000010
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d07d      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	61d3      	str	r3, [r2, #28]
 80020d4:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a42      	ldr	r2, [pc, #264]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fcf6 	bl	8000aec <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fcf2 	bl	8000aec <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e06d      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02e      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d027      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002156:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d014      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe fcc1 	bl	8000aec <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe fcbd 	bl	8000aec <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e036      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4917      	ldr	r1, [pc, #92]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	42420440 	.word	0x42420440

08002208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	; 0x34
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002210:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002212:	f107 040c 	add.w	r4, r7, #12
 8002216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800221c:	f240 2301 	movw	r3, #513	; 0x201
 8002220:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b10      	cmp	r3, #16
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b10      	cmp	r3, #16
 8002240:	f200 8091 	bhi.w	8002366 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d04c      	beq.n	80022e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d07c      	beq.n	800234a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002250:	e089      	b.n	8002366 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002252:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8082 	beq.w	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002272:	4413      	add	r3, r2
 8002274:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002278:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d018      	beq.n	80022b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002284:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c5b      	lsrs	r3, r3, #17
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002292:	4413      	add	r3, r2
 8002294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022a4:	4a37      	ldr	r2, [pc, #220]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	e004      	b.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022cc:	d102      	bne.n	80022d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022d2:	e04a      	b.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4a2c      	ldr	r2, [pc, #176]	; (800238c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022e2:	e042      	b.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f4:	d108      	bne.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 8002306:	e01f      	b.n	8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002312:	d109      	bne.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002320:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
 8002326:	e00f      	b.n	8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002332:	d11c      	bne.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d016      	beq.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002340:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002346:	e012      	b.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002348:	e011      	b.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800234a:	f7ff fe75 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0b9b      	lsrs	r3, r3, #14
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002364:	e004      	b.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002366:	bf00      	nop
 8002368:	e002      	b.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800236a:	bf00      	nop
 800236c:	e000      	b.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800236e:	bf00      	nop
    }
  }
  return (frequency);
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002372:	4618      	mov	r0, r3
 8002374:	3734      	adds	r7, #52	; 0x34
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	bf00      	nop
 800237c:	0800359c 	.word	0x0800359c
 8002380:	40021000 	.word	0x40021000
 8002384:	007a1200 	.word	0x007a1200
 8002388:	003d0900 	.word	0x003d0900
 800238c:	aaaaaaab 	.word	0xaaaaaaab

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e041      	b.n	8002426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa4e 	bl	8000858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 f93c 	bl	800264c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d001      	beq.n	8002448 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_TIM_Base_Start+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d009      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_TIM_Base_Start+0x8c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_TIM_Base_Start+0x48>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_TIM_Base_Start+0x90>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d111      	bne.n	800249c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d010      	beq.n	80024ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	e007      	b.n	80024ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800

080024c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_ConfigClockSource+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0b3      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x180>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002502:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002514:	d03e      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0xd0>
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	f200 8087 	bhi.w	800262c <HAL_TIM_ConfigClockSource+0x168>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	f000 8085 	beq.w	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d87f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d01a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xa2>
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d87b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b60      	cmp	r3, #96	; 0x60
 8002536:	d050      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x116>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d877      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d03c      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xf6>
 8002540:	2b50      	cmp	r3, #80	; 0x50
 8002542:	d873      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d058      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x136>
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d86f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b30      	cmp	r3, #48	; 0x30
 800254e:	d064      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002550:	2b30      	cmp	r3, #48	; 0x30
 8002552:	d86b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b20      	cmp	r3, #32
 8002556:	d060      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002558:	2b20      	cmp	r3, #32
 800255a:	d867      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002560:	2b10      	cmp	r3, #16
 8002562:	d05a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002564:	e062      	b.n	800262c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f000 f942 	bl	80027fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002588:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	609a      	str	r2, [r3, #8]
      break;
 8002592:	e04e      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 f92b 	bl	80027fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b6:	609a      	str	r2, [r3, #8]
      break;
 80025b8:	e03b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 f8a2 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2150      	movs	r1, #80	; 0x50
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f8f9 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025d8:	e02b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f8c0 	bl	800276c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2160      	movs	r1, #96	; 0x60
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8e9 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 80025f8:	e01b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f882 	bl	8002710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f8d9 	bl	80027ca <TIM_ITRx_SetConfig>
      break;
 8002618:	e00b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f000 f8d0 	bl	80027ca <TIM_ITRx_SetConfig>
        break;
 800262a:	e002      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a26      	ldr	r2, [pc, #152]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x30>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a25      	ldr	r2, [pc, #148]	; (800270c <TIM_Base_SetConfig+0xc0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00b      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <TIM_Base_SetConfig+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x62>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <TIM_Base_SetConfig+0xc0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <TIM_Base_SetConfig+0xb8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40000800 	.word	0x40000800

08002710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 030a 	bic.w	r3, r3, #10
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	621a      	str	r2, [r3, #32]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f023 0210 	bic.w	r2, r3, #16
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002796:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f043 0307 	orr.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002818:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	609a      	str	r2, [r3, #8]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002850:	2302      	movs	r3, #2
 8002852:	e046      	b.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d009      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10c      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e03f      	b.n	800298a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd ffb6 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f905 	bl	8002b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d17c      	bne.n	8002aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit+0x2c>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e075      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x3e>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e06e      	b.n	8002aae <HAL_UART_Transmit+0x11c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029e6:	f7fe f881 	bl	8000aec <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	d108      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e003      	b.n	8002a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a24:	e02a      	b.n	8002a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f840 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e036      	b.n	8002aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e007      	b.n	8002a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1cf      	bne.n	8002a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f810 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac6:	e02c      	b.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d028      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ad6:	f7fe f809 	bl	8000aec <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d21d      	bcs.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002af4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e00f      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d0c3      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b86:	f023 030c 	bic.w	r3, r3, #12
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <UART_SetConfig+0x114>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d103      	bne.n	8002bbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bb4:	f7ff fa40 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	e002      	b.n	8002bc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f7ff fa28 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002bc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <UART_SetConfig+0x118>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	0119      	lsls	r1, r3, #4
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <UART_SetConfig+0x118>)
 8002bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2064      	movs	r0, #100	; 0x64
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	3332      	adds	r3, #50	; 0x32
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <UART_SetConfig+0x118>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c18:	4419      	add	r1, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009a      	lsls	r2, r3, #2
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <UART_SetConfig+0x118>)
 8002c32:	fba3 0302 	umull	r0, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2064      	movs	r0, #100	; 0x64
 8002c3a:	fb00 f303 	mul.w	r3, r0, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	3332      	adds	r3, #50	; 0x32
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <UART_SetConfig+0x118>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	440a      	add	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40013800 	.word	0x40013800
 8002c64:	51eb851f 	.word	0x51eb851f

08002c68 <__errno>:
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <__errno+0x8>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	2000001c 	.word	0x2000001c

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	2600      	movs	r6, #0
 8002c78:	4d0c      	ldr	r5, [pc, #48]	; (8002cac <__libc_init_array+0x38>)
 8002c7a:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	f000 fc5c 	bl	8003540 <_init>
 8002c88:	2600      	movs	r6, #0
 8002c8a:	4d0a      	ldr	r5, [pc, #40]	; (8002cb4 <__libc_init_array+0x40>)
 8002c8c:	4c0a      	ldr	r4, [pc, #40]	; (8002cb8 <__libc_init_array+0x44>)
 8002c8e:	1b64      	subs	r4, r4, r5
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	080035f8 	.word	0x080035f8
 8002cb0:	080035f8 	.word	0x080035f8
 8002cb4:	080035f8 	.word	0x080035f8
 8002cb8:	080035fc 	.word	0x080035fc

08002cbc <memset>:
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4402      	add	r2, r0
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d100      	bne.n	8002cc6 <memset+0xa>
 8002cc4:	4770      	bx	lr
 8002cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cca:	e7f9      	b.n	8002cc0 <memset+0x4>

08002ccc <siprintf>:
 8002ccc:	b40e      	push	{r1, r2, r3}
 8002cce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cd2:	b500      	push	{lr}
 8002cd4:	b09c      	sub	sp, #112	; 0x70
 8002cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8002cd8:	9002      	str	r0, [sp, #8]
 8002cda:	9006      	str	r0, [sp, #24]
 8002cdc:	9107      	str	r1, [sp, #28]
 8002cde:	9104      	str	r1, [sp, #16]
 8002ce0:	4808      	ldr	r0, [pc, #32]	; (8002d04 <siprintf+0x38>)
 8002ce2:	4909      	ldr	r1, [pc, #36]	; (8002d08 <siprintf+0x3c>)
 8002ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ce8:	9105      	str	r1, [sp, #20]
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	a902      	add	r1, sp, #8
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	f000 f868 	bl	8002dc4 <_svfiprintf_r>
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	9b02      	ldr	r3, [sp, #8]
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	b01c      	add	sp, #112	; 0x70
 8002cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d00:	b003      	add	sp, #12
 8002d02:	4770      	bx	lr
 8002d04:	2000001c 	.word	0x2000001c
 8002d08:	ffff0208 	.word	0xffff0208

08002d0c <__ssputs_r>:
 8002d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d10:	688e      	ldr	r6, [r1, #8]
 8002d12:	4682      	mov	sl, r0
 8002d14:	429e      	cmp	r6, r3
 8002d16:	460c      	mov	r4, r1
 8002d18:	4690      	mov	r8, r2
 8002d1a:	461f      	mov	r7, r3
 8002d1c:	d838      	bhi.n	8002d90 <__ssputs_r+0x84>
 8002d1e:	898a      	ldrh	r2, [r1, #12]
 8002d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d24:	d032      	beq.n	8002d8c <__ssputs_r+0x80>
 8002d26:	6825      	ldr	r5, [r4, #0]
 8002d28:	6909      	ldr	r1, [r1, #16]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	eba5 0901 	sub.w	r9, r5, r1
 8002d30:	6965      	ldr	r5, [r4, #20]
 8002d32:	444b      	add	r3, r9
 8002d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d3c:	106d      	asrs	r5, r5, #1
 8002d3e:	429d      	cmp	r5, r3
 8002d40:	bf38      	it	cc
 8002d42:	461d      	movcc	r5, r3
 8002d44:	0553      	lsls	r3, r2, #21
 8002d46:	d531      	bpl.n	8002dac <__ssputs_r+0xa0>
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f000 fb53 	bl	80033f4 <_malloc_r>
 8002d4e:	4606      	mov	r6, r0
 8002d50:	b950      	cbnz	r0, 8002d68 <__ssputs_r+0x5c>
 8002d52:	230c      	movs	r3, #12
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f8ca 3000 	str.w	r3, [sl]
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	464a      	mov	r2, r9
 8002d6a:	6921      	ldr	r1, [r4, #16]
 8002d6c:	f000 face 	bl	800330c <memcpy>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7a:	81a3      	strh	r3, [r4, #12]
 8002d7c:	6126      	str	r6, [r4, #16]
 8002d7e:	444e      	add	r6, r9
 8002d80:	6026      	str	r6, [r4, #0]
 8002d82:	463e      	mov	r6, r7
 8002d84:	6165      	str	r5, [r4, #20]
 8002d86:	eba5 0509 	sub.w	r5, r5, r9
 8002d8a:	60a5      	str	r5, [r4, #8]
 8002d8c:	42be      	cmp	r6, r7
 8002d8e:	d900      	bls.n	8002d92 <__ssputs_r+0x86>
 8002d90:	463e      	mov	r6, r7
 8002d92:	4632      	mov	r2, r6
 8002d94:	4641      	mov	r1, r8
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	f000 fac6 	bl	8003328 <memmove>
 8002d9c:	68a3      	ldr	r3, [r4, #8]
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	1b9b      	subs	r3, r3, r6
 8002da2:	4432      	add	r2, r6
 8002da4:	2000      	movs	r0, #0
 8002da6:	60a3      	str	r3, [r4, #8]
 8002da8:	6022      	str	r2, [r4, #0]
 8002daa:	e7db      	b.n	8002d64 <__ssputs_r+0x58>
 8002dac:	462a      	mov	r2, r5
 8002dae:	f000 fb7b 	bl	80034a8 <_realloc_r>
 8002db2:	4606      	mov	r6, r0
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d1e1      	bne.n	8002d7c <__ssputs_r+0x70>
 8002db8:	4650      	mov	r0, sl
 8002dba:	6921      	ldr	r1, [r4, #16]
 8002dbc:	f000 face 	bl	800335c <_free_r>
 8002dc0:	e7c7      	b.n	8002d52 <__ssputs_r+0x46>
	...

08002dc4 <_svfiprintf_r>:
 8002dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc8:	4698      	mov	r8, r3
 8002dca:	898b      	ldrh	r3, [r1, #12]
 8002dcc:	4607      	mov	r7, r0
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	460d      	mov	r5, r1
 8002dd2:	4614      	mov	r4, r2
 8002dd4:	b09d      	sub	sp, #116	; 0x74
 8002dd6:	d50e      	bpl.n	8002df6 <_svfiprintf_r+0x32>
 8002dd8:	690b      	ldr	r3, [r1, #16]
 8002dda:	b963      	cbnz	r3, 8002df6 <_svfiprintf_r+0x32>
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	f000 fb09 	bl	80033f4 <_malloc_r>
 8002de2:	6028      	str	r0, [r5, #0]
 8002de4:	6128      	str	r0, [r5, #16]
 8002de6:	b920      	cbnz	r0, 8002df2 <_svfiprintf_r+0x2e>
 8002de8:	230c      	movs	r3, #12
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	e0d1      	b.n	8002f96 <_svfiprintf_r+0x1d2>
 8002df2:	2340      	movs	r3, #64	; 0x40
 8002df4:	616b      	str	r3, [r5, #20]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e00:	2330      	movs	r3, #48	; 0x30
 8002e02:	f04f 0901 	mov.w	r9, #1
 8002e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fb0 <_svfiprintf_r+0x1ec>
 8002e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e12:	4623      	mov	r3, r4
 8002e14:	469a      	mov	sl, r3
 8002e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e1a:	b10a      	cbz	r2, 8002e20 <_svfiprintf_r+0x5c>
 8002e1c:	2a25      	cmp	r2, #37	; 0x25
 8002e1e:	d1f9      	bne.n	8002e14 <_svfiprintf_r+0x50>
 8002e20:	ebba 0b04 	subs.w	fp, sl, r4
 8002e24:	d00b      	beq.n	8002e3e <_svfiprintf_r+0x7a>
 8002e26:	465b      	mov	r3, fp
 8002e28:	4622      	mov	r2, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	f7ff ff6d 	bl	8002d0c <__ssputs_r>
 8002e32:	3001      	adds	r0, #1
 8002e34:	f000 80aa 	beq.w	8002f8c <_svfiprintf_r+0x1c8>
 8002e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e3a:	445a      	add	r2, fp
 8002e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8002e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80a2 	beq.w	8002f8c <_svfiprintf_r+0x1c8>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e52:	f10a 0a01 	add.w	sl, sl, #1
 8002e56:	9304      	str	r3, [sp, #16]
 8002e58:	9307      	str	r3, [sp, #28]
 8002e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e60:	4654      	mov	r4, sl
 8002e62:	2205      	movs	r2, #5
 8002e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e68:	4851      	ldr	r0, [pc, #324]	; (8002fb0 <_svfiprintf_r+0x1ec>)
 8002e6a:	f000 fa41 	bl	80032f0 <memchr>
 8002e6e:	9a04      	ldr	r2, [sp, #16]
 8002e70:	b9d8      	cbnz	r0, 8002eaa <_svfiprintf_r+0xe6>
 8002e72:	06d0      	lsls	r0, r2, #27
 8002e74:	bf44      	itt	mi
 8002e76:	2320      	movmi	r3, #32
 8002e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e7c:	0711      	lsls	r1, r2, #28
 8002e7e:	bf44      	itt	mi
 8002e80:	232b      	movmi	r3, #43	; 0x2b
 8002e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e86:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e8c:	d015      	beq.n	8002eba <_svfiprintf_r+0xf6>
 8002e8e:	4654      	mov	r4, sl
 8002e90:	2000      	movs	r0, #0
 8002e92:	f04f 0c0a 	mov.w	ip, #10
 8002e96:	9a07      	ldr	r2, [sp, #28]
 8002e98:	4621      	mov	r1, r4
 8002e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e9e:	3b30      	subs	r3, #48	; 0x30
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	d94e      	bls.n	8002f42 <_svfiprintf_r+0x17e>
 8002ea4:	b1b0      	cbz	r0, 8002ed4 <_svfiprintf_r+0x110>
 8002ea6:	9207      	str	r2, [sp, #28]
 8002ea8:	e014      	b.n	8002ed4 <_svfiprintf_r+0x110>
 8002eaa:	eba0 0308 	sub.w	r3, r0, r8
 8002eae:	fa09 f303 	lsl.w	r3, r9, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	46a2      	mov	sl, r4
 8002eb6:	9304      	str	r3, [sp, #16]
 8002eb8:	e7d2      	b.n	8002e60 <_svfiprintf_r+0x9c>
 8002eba:	9b03      	ldr	r3, [sp, #12]
 8002ebc:	1d19      	adds	r1, r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	9103      	str	r1, [sp, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfbb      	ittet	lt
 8002ec6:	425b      	neglt	r3, r3
 8002ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8002ecc:	9307      	strge	r3, [sp, #28]
 8002ece:	9307      	strlt	r3, [sp, #28]
 8002ed0:	bfb8      	it	lt
 8002ed2:	9204      	strlt	r2, [sp, #16]
 8002ed4:	7823      	ldrb	r3, [r4, #0]
 8002ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ed8:	d10c      	bne.n	8002ef4 <_svfiprintf_r+0x130>
 8002eda:	7863      	ldrb	r3, [r4, #1]
 8002edc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ede:	d135      	bne.n	8002f4c <_svfiprintf_r+0x188>
 8002ee0:	9b03      	ldr	r3, [sp, #12]
 8002ee2:	3402      	adds	r4, #2
 8002ee4:	1d1a      	adds	r2, r3, #4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	9203      	str	r2, [sp, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bfb8      	it	lt
 8002eee:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ef2:	9305      	str	r3, [sp, #20]
 8002ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fc0 <_svfiprintf_r+0x1fc>
 8002ef8:	2203      	movs	r2, #3
 8002efa:	4650      	mov	r0, sl
 8002efc:	7821      	ldrb	r1, [r4, #0]
 8002efe:	f000 f9f7 	bl	80032f0 <memchr>
 8002f02:	b140      	cbz	r0, 8002f16 <_svfiprintf_r+0x152>
 8002f04:	2340      	movs	r3, #64	; 0x40
 8002f06:	eba0 000a 	sub.w	r0, r0, sl
 8002f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f0e:	9b04      	ldr	r3, [sp, #16]
 8002f10:	3401      	adds	r4, #1
 8002f12:	4303      	orrs	r3, r0
 8002f14:	9304      	str	r3, [sp, #16]
 8002f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f1a:	2206      	movs	r2, #6
 8002f1c:	4825      	ldr	r0, [pc, #148]	; (8002fb4 <_svfiprintf_r+0x1f0>)
 8002f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f22:	f000 f9e5 	bl	80032f0 <memchr>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d038      	beq.n	8002f9c <_svfiprintf_r+0x1d8>
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <_svfiprintf_r+0x1f4>)
 8002f2c:	bb1b      	cbnz	r3, 8002f76 <_svfiprintf_r+0x1b2>
 8002f2e:	9b03      	ldr	r3, [sp, #12]
 8002f30:	3307      	adds	r3, #7
 8002f32:	f023 0307 	bic.w	r3, r3, #7
 8002f36:	3308      	adds	r3, #8
 8002f38:	9303      	str	r3, [sp, #12]
 8002f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f3c:	4433      	add	r3, r6
 8002f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f40:	e767      	b.n	8002e12 <_svfiprintf_r+0x4e>
 8002f42:	460c      	mov	r4, r1
 8002f44:	2001      	movs	r0, #1
 8002f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f4a:	e7a5      	b.n	8002e98 <_svfiprintf_r+0xd4>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f04f 0c0a 	mov.w	ip, #10
 8002f52:	4619      	mov	r1, r3
 8002f54:	3401      	adds	r4, #1
 8002f56:	9305      	str	r3, [sp, #20]
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f5e:	3a30      	subs	r2, #48	; 0x30
 8002f60:	2a09      	cmp	r2, #9
 8002f62:	d903      	bls.n	8002f6c <_svfiprintf_r+0x1a8>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0c5      	beq.n	8002ef4 <_svfiprintf_r+0x130>
 8002f68:	9105      	str	r1, [sp, #20]
 8002f6a:	e7c3      	b.n	8002ef4 <_svfiprintf_r+0x130>
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	2301      	movs	r3, #1
 8002f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f74:	e7f0      	b.n	8002f58 <_svfiprintf_r+0x194>
 8002f76:	ab03      	add	r3, sp, #12
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <_svfiprintf_r+0x1f8>)
 8002f80:	a904      	add	r1, sp, #16
 8002f82:	f3af 8000 	nop.w
 8002f86:	1c42      	adds	r2, r0, #1
 8002f88:	4606      	mov	r6, r0
 8002f8a:	d1d6      	bne.n	8002f3a <_svfiprintf_r+0x176>
 8002f8c:	89ab      	ldrh	r3, [r5, #12]
 8002f8e:	065b      	lsls	r3, r3, #25
 8002f90:	f53f af2c 	bmi.w	8002dec <_svfiprintf_r+0x28>
 8002f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f96:	b01d      	add	sp, #116	; 0x74
 8002f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f9c:	ab03      	add	r3, sp, #12
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	462a      	mov	r2, r5
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <_svfiprintf_r+0x1f8>)
 8002fa6:	a904      	add	r1, sp, #16
 8002fa8:	f000 f87c 	bl	80030a4 <_printf_i>
 8002fac:	e7eb      	b.n	8002f86 <_svfiprintf_r+0x1c2>
 8002fae:	bf00      	nop
 8002fb0:	080035c4 	.word	0x080035c4
 8002fb4:	080035ce 	.word	0x080035ce
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	08002d0d 	.word	0x08002d0d
 8002fc0:	080035ca 	.word	0x080035ca

08002fc4 <_printf_common>:
 8002fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc8:	4616      	mov	r6, r2
 8002fca:	4699      	mov	r9, r3
 8002fcc:	688a      	ldr	r2, [r1, #8]
 8002fce:	690b      	ldr	r3, [r1, #16]
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bfb8      	it	lt
 8002fd6:	4613      	movlt	r3, r2
 8002fd8:	6033      	str	r3, [r6, #0]
 8002fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fde:	460c      	mov	r4, r1
 8002fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fe4:	b10a      	cbz	r2, 8002fea <_printf_common+0x26>
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	6033      	str	r3, [r6, #0]
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	0699      	lsls	r1, r3, #26
 8002fee:	bf42      	ittt	mi
 8002ff0:	6833      	ldrmi	r3, [r6, #0]
 8002ff2:	3302      	addmi	r3, #2
 8002ff4:	6033      	strmi	r3, [r6, #0]
 8002ff6:	6825      	ldr	r5, [r4, #0]
 8002ff8:	f015 0506 	ands.w	r5, r5, #6
 8002ffc:	d106      	bne.n	800300c <_printf_common+0x48>
 8002ffe:	f104 0a19 	add.w	sl, r4, #25
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	6832      	ldr	r2, [r6, #0]
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	42ab      	cmp	r3, r5
 800300a:	dc28      	bgt.n	800305e <_printf_common+0x9a>
 800300c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003010:	1e13      	subs	r3, r2, #0
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	bf18      	it	ne
 8003016:	2301      	movne	r3, #1
 8003018:	0692      	lsls	r2, r2, #26
 800301a:	d42d      	bmi.n	8003078 <_printf_common+0xb4>
 800301c:	4649      	mov	r1, r9
 800301e:	4638      	mov	r0, r7
 8003020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003024:	47c0      	blx	r8
 8003026:	3001      	adds	r0, #1
 8003028:	d020      	beq.n	800306c <_printf_common+0xa8>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	68e5      	ldr	r5, [r4, #12]
 800302e:	f003 0306 	and.w	r3, r3, #6
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf18      	it	ne
 8003036:	2500      	movne	r5, #0
 8003038:	6832      	ldr	r2, [r6, #0]
 800303a:	f04f 0600 	mov.w	r6, #0
 800303e:	68a3      	ldr	r3, [r4, #8]
 8003040:	bf08      	it	eq
 8003042:	1aad      	subeq	r5, r5, r2
 8003044:	6922      	ldr	r2, [r4, #16]
 8003046:	bf08      	it	eq
 8003048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800304c:	4293      	cmp	r3, r2
 800304e:	bfc4      	itt	gt
 8003050:	1a9b      	subgt	r3, r3, r2
 8003052:	18ed      	addgt	r5, r5, r3
 8003054:	341a      	adds	r4, #26
 8003056:	42b5      	cmp	r5, r6
 8003058:	d11a      	bne.n	8003090 <_printf_common+0xcc>
 800305a:	2000      	movs	r0, #0
 800305c:	e008      	b.n	8003070 <_printf_common+0xac>
 800305e:	2301      	movs	r3, #1
 8003060:	4652      	mov	r2, sl
 8003062:	4649      	mov	r1, r9
 8003064:	4638      	mov	r0, r7
 8003066:	47c0      	blx	r8
 8003068:	3001      	adds	r0, #1
 800306a:	d103      	bne.n	8003074 <_printf_common+0xb0>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003074:	3501      	adds	r5, #1
 8003076:	e7c4      	b.n	8003002 <_printf_common+0x3e>
 8003078:	2030      	movs	r0, #48	; 0x30
 800307a:	18e1      	adds	r1, r4, r3
 800307c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003086:	4422      	add	r2, r4
 8003088:	3302      	adds	r3, #2
 800308a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800308e:	e7c5      	b.n	800301c <_printf_common+0x58>
 8003090:	2301      	movs	r3, #1
 8003092:	4622      	mov	r2, r4
 8003094:	4649      	mov	r1, r9
 8003096:	4638      	mov	r0, r7
 8003098:	47c0      	blx	r8
 800309a:	3001      	adds	r0, #1
 800309c:	d0e6      	beq.n	800306c <_printf_common+0xa8>
 800309e:	3601      	adds	r6, #1
 80030a0:	e7d9      	b.n	8003056 <_printf_common+0x92>
	...

080030a4 <_printf_i>:
 80030a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	460c      	mov	r4, r1
 80030aa:	7e27      	ldrb	r7, [r4, #24]
 80030ac:	4691      	mov	r9, r2
 80030ae:	2f78      	cmp	r7, #120	; 0x78
 80030b0:	4680      	mov	r8, r0
 80030b2:	469a      	mov	sl, r3
 80030b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ba:	d807      	bhi.n	80030cc <_printf_i+0x28>
 80030bc:	2f62      	cmp	r7, #98	; 0x62
 80030be:	d80a      	bhi.n	80030d6 <_printf_i+0x32>
 80030c0:	2f00      	cmp	r7, #0
 80030c2:	f000 80d9 	beq.w	8003278 <_printf_i+0x1d4>
 80030c6:	2f58      	cmp	r7, #88	; 0x58
 80030c8:	f000 80a4 	beq.w	8003214 <_printf_i+0x170>
 80030cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030d4:	e03a      	b.n	800314c <_printf_i+0xa8>
 80030d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030da:	2b15      	cmp	r3, #21
 80030dc:	d8f6      	bhi.n	80030cc <_printf_i+0x28>
 80030de:	a001      	add	r0, pc, #4	; (adr r0, 80030e4 <_printf_i+0x40>)
 80030e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030e4:	0800313d 	.word	0x0800313d
 80030e8:	08003151 	.word	0x08003151
 80030ec:	080030cd 	.word	0x080030cd
 80030f0:	080030cd 	.word	0x080030cd
 80030f4:	080030cd 	.word	0x080030cd
 80030f8:	080030cd 	.word	0x080030cd
 80030fc:	08003151 	.word	0x08003151
 8003100:	080030cd 	.word	0x080030cd
 8003104:	080030cd 	.word	0x080030cd
 8003108:	080030cd 	.word	0x080030cd
 800310c:	080030cd 	.word	0x080030cd
 8003110:	0800325f 	.word	0x0800325f
 8003114:	08003181 	.word	0x08003181
 8003118:	08003241 	.word	0x08003241
 800311c:	080030cd 	.word	0x080030cd
 8003120:	080030cd 	.word	0x080030cd
 8003124:	08003281 	.word	0x08003281
 8003128:	080030cd 	.word	0x080030cd
 800312c:	08003181 	.word	0x08003181
 8003130:	080030cd 	.word	0x080030cd
 8003134:	080030cd 	.word	0x080030cd
 8003138:	08003249 	.word	0x08003249
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003142:	1d1a      	adds	r2, r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	600a      	str	r2, [r1, #0]
 8003148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800314c:	2301      	movs	r3, #1
 800314e:	e0a4      	b.n	800329a <_printf_i+0x1f6>
 8003150:	6825      	ldr	r5, [r4, #0]
 8003152:	6808      	ldr	r0, [r1, #0]
 8003154:	062e      	lsls	r6, r5, #24
 8003156:	f100 0304 	add.w	r3, r0, #4
 800315a:	d50a      	bpl.n	8003172 <_printf_i+0xce>
 800315c:	6805      	ldr	r5, [r0, #0]
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	2d00      	cmp	r5, #0
 8003162:	da03      	bge.n	800316c <_printf_i+0xc8>
 8003164:	232d      	movs	r3, #45	; 0x2d
 8003166:	426d      	negs	r5, r5
 8003168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316c:	230a      	movs	r3, #10
 800316e:	485e      	ldr	r0, [pc, #376]	; (80032e8 <_printf_i+0x244>)
 8003170:	e019      	b.n	80031a6 <_printf_i+0x102>
 8003172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003176:	6805      	ldr	r5, [r0, #0]
 8003178:	600b      	str	r3, [r1, #0]
 800317a:	bf18      	it	ne
 800317c:	b22d      	sxthne	r5, r5
 800317e:	e7ef      	b.n	8003160 <_printf_i+0xbc>
 8003180:	680b      	ldr	r3, [r1, #0]
 8003182:	6825      	ldr	r5, [r4, #0]
 8003184:	1d18      	adds	r0, r3, #4
 8003186:	6008      	str	r0, [r1, #0]
 8003188:	0628      	lsls	r0, r5, #24
 800318a:	d501      	bpl.n	8003190 <_printf_i+0xec>
 800318c:	681d      	ldr	r5, [r3, #0]
 800318e:	e002      	b.n	8003196 <_printf_i+0xf2>
 8003190:	0669      	lsls	r1, r5, #25
 8003192:	d5fb      	bpl.n	800318c <_printf_i+0xe8>
 8003194:	881d      	ldrh	r5, [r3, #0]
 8003196:	2f6f      	cmp	r7, #111	; 0x6f
 8003198:	bf0c      	ite	eq
 800319a:	2308      	moveq	r3, #8
 800319c:	230a      	movne	r3, #10
 800319e:	4852      	ldr	r0, [pc, #328]	; (80032e8 <_printf_i+0x244>)
 80031a0:	2100      	movs	r1, #0
 80031a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031a6:	6866      	ldr	r6, [r4, #4]
 80031a8:	2e00      	cmp	r6, #0
 80031aa:	bfa8      	it	ge
 80031ac:	6821      	ldrge	r1, [r4, #0]
 80031ae:	60a6      	str	r6, [r4, #8]
 80031b0:	bfa4      	itt	ge
 80031b2:	f021 0104 	bicge.w	r1, r1, #4
 80031b6:	6021      	strge	r1, [r4, #0]
 80031b8:	b90d      	cbnz	r5, 80031be <_printf_i+0x11a>
 80031ba:	2e00      	cmp	r6, #0
 80031bc:	d04d      	beq.n	800325a <_printf_i+0x1b6>
 80031be:	4616      	mov	r6, r2
 80031c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80031c4:	fb03 5711 	mls	r7, r3, r1, r5
 80031c8:	5dc7      	ldrb	r7, [r0, r7]
 80031ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031ce:	462f      	mov	r7, r5
 80031d0:	42bb      	cmp	r3, r7
 80031d2:	460d      	mov	r5, r1
 80031d4:	d9f4      	bls.n	80031c0 <_printf_i+0x11c>
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d10b      	bne.n	80031f2 <_printf_i+0x14e>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	07df      	lsls	r7, r3, #31
 80031de:	d508      	bpl.n	80031f2 <_printf_i+0x14e>
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	6861      	ldr	r1, [r4, #4]
 80031e4:	4299      	cmp	r1, r3
 80031e6:	bfde      	ittt	le
 80031e8:	2330      	movle	r3, #48	; 0x30
 80031ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031f2:	1b92      	subs	r2, r2, r6
 80031f4:	6122      	str	r2, [r4, #16]
 80031f6:	464b      	mov	r3, r9
 80031f8:	4621      	mov	r1, r4
 80031fa:	4640      	mov	r0, r8
 80031fc:	f8cd a000 	str.w	sl, [sp]
 8003200:	aa03      	add	r2, sp, #12
 8003202:	f7ff fedf 	bl	8002fc4 <_printf_common>
 8003206:	3001      	adds	r0, #1
 8003208:	d14c      	bne.n	80032a4 <_printf_i+0x200>
 800320a:	f04f 30ff 	mov.w	r0, #4294967295
 800320e:	b004      	add	sp, #16
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	4834      	ldr	r0, [pc, #208]	; (80032e8 <_printf_i+0x244>)
 8003216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800321a:	680e      	ldr	r6, [r1, #0]
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003222:	061f      	lsls	r7, r3, #24
 8003224:	600e      	str	r6, [r1, #0]
 8003226:	d514      	bpl.n	8003252 <_printf_i+0x1ae>
 8003228:	07d9      	lsls	r1, r3, #31
 800322a:	bf44      	itt	mi
 800322c:	f043 0320 	orrmi.w	r3, r3, #32
 8003230:	6023      	strmi	r3, [r4, #0]
 8003232:	b91d      	cbnz	r5, 800323c <_printf_i+0x198>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	f023 0320 	bic.w	r3, r3, #32
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	2310      	movs	r3, #16
 800323e:	e7af      	b.n	80031a0 <_printf_i+0xfc>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	2378      	movs	r3, #120	; 0x78
 800324a:	4828      	ldr	r0, [pc, #160]	; (80032ec <_printf_i+0x248>)
 800324c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003250:	e7e3      	b.n	800321a <_printf_i+0x176>
 8003252:	065e      	lsls	r6, r3, #25
 8003254:	bf48      	it	mi
 8003256:	b2ad      	uxthmi	r5, r5
 8003258:	e7e6      	b.n	8003228 <_printf_i+0x184>
 800325a:	4616      	mov	r6, r2
 800325c:	e7bb      	b.n	80031d6 <_printf_i+0x132>
 800325e:	680b      	ldr	r3, [r1, #0]
 8003260:	6826      	ldr	r6, [r4, #0]
 8003262:	1d1d      	adds	r5, r3, #4
 8003264:	6960      	ldr	r0, [r4, #20]
 8003266:	600d      	str	r5, [r1, #0]
 8003268:	0635      	lsls	r5, r6, #24
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	d501      	bpl.n	8003272 <_printf_i+0x1ce>
 800326e:	6018      	str	r0, [r3, #0]
 8003270:	e002      	b.n	8003278 <_printf_i+0x1d4>
 8003272:	0671      	lsls	r1, r6, #25
 8003274:	d5fb      	bpl.n	800326e <_printf_i+0x1ca>
 8003276:	8018      	strh	r0, [r3, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	4616      	mov	r6, r2
 800327c:	6123      	str	r3, [r4, #16]
 800327e:	e7ba      	b.n	80031f6 <_printf_i+0x152>
 8003280:	680b      	ldr	r3, [r1, #0]
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	600a      	str	r2, [r1, #0]
 8003286:	681e      	ldr	r6, [r3, #0]
 8003288:	2100      	movs	r1, #0
 800328a:	4630      	mov	r0, r6
 800328c:	6862      	ldr	r2, [r4, #4]
 800328e:	f000 f82f 	bl	80032f0 <memchr>
 8003292:	b108      	cbz	r0, 8003298 <_printf_i+0x1f4>
 8003294:	1b80      	subs	r0, r0, r6
 8003296:	6060      	str	r0, [r4, #4]
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	2300      	movs	r3, #0
 800329e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a2:	e7a8      	b.n	80031f6 <_printf_i+0x152>
 80032a4:	4632      	mov	r2, r6
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	47d0      	blx	sl
 80032ae:	3001      	adds	r0, #1
 80032b0:	d0ab      	beq.n	800320a <_printf_i+0x166>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	079b      	lsls	r3, r3, #30
 80032b6:	d413      	bmi.n	80032e0 <_printf_i+0x23c>
 80032b8:	68e0      	ldr	r0, [r4, #12]
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	4298      	cmp	r0, r3
 80032be:	bfb8      	it	lt
 80032c0:	4618      	movlt	r0, r3
 80032c2:	e7a4      	b.n	800320e <_printf_i+0x16a>
 80032c4:	2301      	movs	r3, #1
 80032c6:	4632      	mov	r2, r6
 80032c8:	4649      	mov	r1, r9
 80032ca:	4640      	mov	r0, r8
 80032cc:	47d0      	blx	sl
 80032ce:	3001      	adds	r0, #1
 80032d0:	d09b      	beq.n	800320a <_printf_i+0x166>
 80032d2:	3501      	adds	r5, #1
 80032d4:	68e3      	ldr	r3, [r4, #12]
 80032d6:	9903      	ldr	r1, [sp, #12]
 80032d8:	1a5b      	subs	r3, r3, r1
 80032da:	42ab      	cmp	r3, r5
 80032dc:	dcf2      	bgt.n	80032c4 <_printf_i+0x220>
 80032de:	e7eb      	b.n	80032b8 <_printf_i+0x214>
 80032e0:	2500      	movs	r5, #0
 80032e2:	f104 0619 	add.w	r6, r4, #25
 80032e6:	e7f5      	b.n	80032d4 <_printf_i+0x230>
 80032e8:	080035d5 	.word	0x080035d5
 80032ec:	080035e6 	.word	0x080035e6

080032f0 <memchr>:
 80032f0:	4603      	mov	r3, r0
 80032f2:	b510      	push	{r4, lr}
 80032f4:	b2c9      	uxtb	r1, r1
 80032f6:	4402      	add	r2, r0
 80032f8:	4293      	cmp	r3, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	d101      	bne.n	8003302 <memchr+0x12>
 80032fe:	2000      	movs	r0, #0
 8003300:	e003      	b.n	800330a <memchr+0x1a>
 8003302:	7804      	ldrb	r4, [r0, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	428c      	cmp	r4, r1
 8003308:	d1f6      	bne.n	80032f8 <memchr+0x8>
 800330a:	bd10      	pop	{r4, pc}

0800330c <memcpy>:
 800330c:	440a      	add	r2, r1
 800330e:	4291      	cmp	r1, r2
 8003310:	f100 33ff 	add.w	r3, r0, #4294967295
 8003314:	d100      	bne.n	8003318 <memcpy+0xc>
 8003316:	4770      	bx	lr
 8003318:	b510      	push	{r4, lr}
 800331a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800331e:	4291      	cmp	r1, r2
 8003320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003324:	d1f9      	bne.n	800331a <memcpy+0xe>
 8003326:	bd10      	pop	{r4, pc}

08003328 <memmove>:
 8003328:	4288      	cmp	r0, r1
 800332a:	b510      	push	{r4, lr}
 800332c:	eb01 0402 	add.w	r4, r1, r2
 8003330:	d902      	bls.n	8003338 <memmove+0x10>
 8003332:	4284      	cmp	r4, r0
 8003334:	4623      	mov	r3, r4
 8003336:	d807      	bhi.n	8003348 <memmove+0x20>
 8003338:	1e43      	subs	r3, r0, #1
 800333a:	42a1      	cmp	r1, r4
 800333c:	d008      	beq.n	8003350 <memmove+0x28>
 800333e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003346:	e7f8      	b.n	800333a <memmove+0x12>
 8003348:	4601      	mov	r1, r0
 800334a:	4402      	add	r2, r0
 800334c:	428a      	cmp	r2, r1
 800334e:	d100      	bne.n	8003352 <memmove+0x2a>
 8003350:	bd10      	pop	{r4, pc}
 8003352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800335a:	e7f7      	b.n	800334c <memmove+0x24>

0800335c <_free_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4605      	mov	r5, r0
 8003360:	2900      	cmp	r1, #0
 8003362:	d043      	beq.n	80033ec <_free_r+0x90>
 8003364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003368:	1f0c      	subs	r4, r1, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	bfb8      	it	lt
 800336e:	18e4      	addlt	r4, r4, r3
 8003370:	f000 f8d0 	bl	8003514 <__malloc_lock>
 8003374:	4a1e      	ldr	r2, [pc, #120]	; (80033f0 <_free_r+0x94>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	4610      	mov	r0, r2
 800337a:	b933      	cbnz	r3, 800338a <_free_r+0x2e>
 800337c:	6063      	str	r3, [r4, #4]
 800337e:	6014      	str	r4, [r2, #0]
 8003380:	4628      	mov	r0, r5
 8003382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003386:	f000 b8cb 	b.w	8003520 <__malloc_unlock>
 800338a:	42a3      	cmp	r3, r4
 800338c:	d90a      	bls.n	80033a4 <_free_r+0x48>
 800338e:	6821      	ldr	r1, [r4, #0]
 8003390:	1862      	adds	r2, r4, r1
 8003392:	4293      	cmp	r3, r2
 8003394:	bf01      	itttt	eq
 8003396:	681a      	ldreq	r2, [r3, #0]
 8003398:	685b      	ldreq	r3, [r3, #4]
 800339a:	1852      	addeq	r2, r2, r1
 800339c:	6022      	streq	r2, [r4, #0]
 800339e:	6063      	str	r3, [r4, #4]
 80033a0:	6004      	str	r4, [r0, #0]
 80033a2:	e7ed      	b.n	8003380 <_free_r+0x24>
 80033a4:	461a      	mov	r2, r3
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	b10b      	cbz	r3, 80033ae <_free_r+0x52>
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d9fa      	bls.n	80033a4 <_free_r+0x48>
 80033ae:	6811      	ldr	r1, [r2, #0]
 80033b0:	1850      	adds	r0, r2, r1
 80033b2:	42a0      	cmp	r0, r4
 80033b4:	d10b      	bne.n	80033ce <_free_r+0x72>
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	4401      	add	r1, r0
 80033ba:	1850      	adds	r0, r2, r1
 80033bc:	4283      	cmp	r3, r0
 80033be:	6011      	str	r1, [r2, #0]
 80033c0:	d1de      	bne.n	8003380 <_free_r+0x24>
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4401      	add	r1, r0
 80033c8:	6011      	str	r1, [r2, #0]
 80033ca:	6053      	str	r3, [r2, #4]
 80033cc:	e7d8      	b.n	8003380 <_free_r+0x24>
 80033ce:	d902      	bls.n	80033d6 <_free_r+0x7a>
 80033d0:	230c      	movs	r3, #12
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	e7d4      	b.n	8003380 <_free_r+0x24>
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	1821      	adds	r1, r4, r0
 80033da:	428b      	cmp	r3, r1
 80033dc:	bf01      	itttt	eq
 80033de:	6819      	ldreq	r1, [r3, #0]
 80033e0:	685b      	ldreq	r3, [r3, #4]
 80033e2:	1809      	addeq	r1, r1, r0
 80033e4:	6021      	streq	r1, [r4, #0]
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	6054      	str	r4, [r2, #4]
 80033ea:	e7c9      	b.n	8003380 <_free_r+0x24>
 80033ec:	bd38      	pop	{r3, r4, r5, pc}
 80033ee:	bf00      	nop
 80033f0:	200000a4 	.word	0x200000a4

080033f4 <_malloc_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	1ccd      	adds	r5, r1, #3
 80033f8:	f025 0503 	bic.w	r5, r5, #3
 80033fc:	3508      	adds	r5, #8
 80033fe:	2d0c      	cmp	r5, #12
 8003400:	bf38      	it	cc
 8003402:	250c      	movcc	r5, #12
 8003404:	2d00      	cmp	r5, #0
 8003406:	4606      	mov	r6, r0
 8003408:	db01      	blt.n	800340e <_malloc_r+0x1a>
 800340a:	42a9      	cmp	r1, r5
 800340c:	d903      	bls.n	8003416 <_malloc_r+0x22>
 800340e:	230c      	movs	r3, #12
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	2000      	movs	r0, #0
 8003414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003416:	f000 f87d 	bl	8003514 <__malloc_lock>
 800341a:	4921      	ldr	r1, [pc, #132]	; (80034a0 <_malloc_r+0xac>)
 800341c:	680a      	ldr	r2, [r1, #0]
 800341e:	4614      	mov	r4, r2
 8003420:	b99c      	cbnz	r4, 800344a <_malloc_r+0x56>
 8003422:	4f20      	ldr	r7, [pc, #128]	; (80034a4 <_malloc_r+0xb0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b923      	cbnz	r3, 8003432 <_malloc_r+0x3e>
 8003428:	4621      	mov	r1, r4
 800342a:	4630      	mov	r0, r6
 800342c:	f000 f862 	bl	80034f4 <_sbrk_r>
 8003430:	6038      	str	r0, [r7, #0]
 8003432:	4629      	mov	r1, r5
 8003434:	4630      	mov	r0, r6
 8003436:	f000 f85d 	bl	80034f4 <_sbrk_r>
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d123      	bne.n	8003486 <_malloc_r+0x92>
 800343e:	230c      	movs	r3, #12
 8003440:	4630      	mov	r0, r6
 8003442:	6033      	str	r3, [r6, #0]
 8003444:	f000 f86c 	bl	8003520 <__malloc_unlock>
 8003448:	e7e3      	b.n	8003412 <_malloc_r+0x1e>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	1b5b      	subs	r3, r3, r5
 800344e:	d417      	bmi.n	8003480 <_malloc_r+0x8c>
 8003450:	2b0b      	cmp	r3, #11
 8003452:	d903      	bls.n	800345c <_malloc_r+0x68>
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	441c      	add	r4, r3
 8003458:	6025      	str	r5, [r4, #0]
 800345a:	e004      	b.n	8003466 <_malloc_r+0x72>
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	42a2      	cmp	r2, r4
 8003460:	bf0c      	ite	eq
 8003462:	600b      	streq	r3, [r1, #0]
 8003464:	6053      	strne	r3, [r2, #4]
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f85a 	bl	8003520 <__malloc_unlock>
 800346c:	f104 000b 	add.w	r0, r4, #11
 8003470:	1d23      	adds	r3, r4, #4
 8003472:	f020 0007 	bic.w	r0, r0, #7
 8003476:	1ac2      	subs	r2, r0, r3
 8003478:	d0cc      	beq.n	8003414 <_malloc_r+0x20>
 800347a:	1a1b      	subs	r3, r3, r0
 800347c:	50a3      	str	r3, [r4, r2]
 800347e:	e7c9      	b.n	8003414 <_malloc_r+0x20>
 8003480:	4622      	mov	r2, r4
 8003482:	6864      	ldr	r4, [r4, #4]
 8003484:	e7cc      	b.n	8003420 <_malloc_r+0x2c>
 8003486:	1cc4      	adds	r4, r0, #3
 8003488:	f024 0403 	bic.w	r4, r4, #3
 800348c:	42a0      	cmp	r0, r4
 800348e:	d0e3      	beq.n	8003458 <_malloc_r+0x64>
 8003490:	1a21      	subs	r1, r4, r0
 8003492:	4630      	mov	r0, r6
 8003494:	f000 f82e 	bl	80034f4 <_sbrk_r>
 8003498:	3001      	adds	r0, #1
 800349a:	d1dd      	bne.n	8003458 <_malloc_r+0x64>
 800349c:	e7cf      	b.n	800343e <_malloc_r+0x4a>
 800349e:	bf00      	nop
 80034a0:	200000a4 	.word	0x200000a4
 80034a4:	200000a8 	.word	0x200000a8

080034a8 <_realloc_r>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	4607      	mov	r7, r0
 80034ac:	4614      	mov	r4, r2
 80034ae:	460e      	mov	r6, r1
 80034b0:	b921      	cbnz	r1, 80034bc <_realloc_r+0x14>
 80034b2:	4611      	mov	r1, r2
 80034b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034b8:	f7ff bf9c 	b.w	80033f4 <_malloc_r>
 80034bc:	b922      	cbnz	r2, 80034c8 <_realloc_r+0x20>
 80034be:	f7ff ff4d 	bl	800335c <_free_r>
 80034c2:	4625      	mov	r5, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c8:	f000 f830 	bl	800352c <_malloc_usable_size_r>
 80034cc:	42a0      	cmp	r0, r4
 80034ce:	d20f      	bcs.n	80034f0 <_realloc_r+0x48>
 80034d0:	4621      	mov	r1, r4
 80034d2:	4638      	mov	r0, r7
 80034d4:	f7ff ff8e 	bl	80033f4 <_malloc_r>
 80034d8:	4605      	mov	r5, r0
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0f2      	beq.n	80034c4 <_realloc_r+0x1c>
 80034de:	4631      	mov	r1, r6
 80034e0:	4622      	mov	r2, r4
 80034e2:	f7ff ff13 	bl	800330c <memcpy>
 80034e6:	4631      	mov	r1, r6
 80034e8:	4638      	mov	r0, r7
 80034ea:	f7ff ff37 	bl	800335c <_free_r>
 80034ee:	e7e9      	b.n	80034c4 <_realloc_r+0x1c>
 80034f0:	4635      	mov	r5, r6
 80034f2:	e7e7      	b.n	80034c4 <_realloc_r+0x1c>

080034f4 <_sbrk_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	2300      	movs	r3, #0
 80034f8:	4d05      	ldr	r5, [pc, #20]	; (8003510 <_sbrk_r+0x1c>)
 80034fa:	4604      	mov	r4, r0
 80034fc:	4608      	mov	r0, r1
 80034fe:	602b      	str	r3, [r5, #0]
 8003500:	f7fd fa3a 	bl	8000978 <_sbrk>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_sbrk_r+0x1a>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b103      	cbz	r3, 800350e <_sbrk_r+0x1a>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	20000178 	.word	0x20000178

08003514 <__malloc_lock>:
 8003514:	4801      	ldr	r0, [pc, #4]	; (800351c <__malloc_lock+0x8>)
 8003516:	f000 b811 	b.w	800353c <__retarget_lock_acquire_recursive>
 800351a:	bf00      	nop
 800351c:	20000180 	.word	0x20000180

08003520 <__malloc_unlock>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__malloc_unlock+0x8>)
 8003522:	f000 b80c 	b.w	800353e <__retarget_lock_release_recursive>
 8003526:	bf00      	nop
 8003528:	20000180 	.word	0x20000180

0800352c <_malloc_usable_size_r>:
 800352c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003530:	1f18      	subs	r0, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	bfbc      	itt	lt
 8003536:	580b      	ldrlt	r3, [r1, r0]
 8003538:	18c0      	addlt	r0, r0, r3
 800353a:	4770      	bx	lr

0800353c <__retarget_lock_acquire_recursive>:
 800353c:	4770      	bx	lr

0800353e <__retarget_lock_release_recursive>:
 800353e:	4770      	bx	lr

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
