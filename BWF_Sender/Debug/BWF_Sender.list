
BWF_Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002208  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800233c  0800233c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800233c  0800233c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800233c  0800233c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000018  0800235c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800235c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac3d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adc  00000000  00000000  0002ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001746f  00000000  00000000  0002df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88d  00000000  00000000  000453c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008acc0  00000000  00000000  00051c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000dc968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080022fc 	.word	0x080022fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080022fc 	.word	0x080022fc

0800014c <run_sig>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void run_sig(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e015      	b.n	8000184 <run_sig+0x38>

		  if (SIG1[x] == 1) signal_up();
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a0e      	ldr	r2, [pc, #56]	; (8000194 <run_sig+0x48>)
 800015c:	56d3      	ldrsb	r3, [r2, r3]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d102      	bne.n	8000168 <run_sig+0x1c>
 8000162:	f000 f819 	bl	8000198 <signal_up>
 8000166:	e007      	b.n	8000178 <run_sig+0x2c>
		  else if(SIG1[x] == -1) signal_down();
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <run_sig+0x48>)
 800016c:	56d3      	ldrsb	r3, [r2, r3]
 800016e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000172:	d101      	bne.n	8000178 <run_sig+0x2c>
 8000174:	f000 f822 	bl	80001bc <signal_down>

		  delay_us(DELAY);
 8000178:	2064      	movs	r0, #100	; 0x64
 800017a:	f000 f831 	bl	80001e0 <delay_us>
	  for (uint8_t x = 0; x < SIG1_LENGTH; x++) {
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	3301      	adds	r3, #1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	2b09      	cmp	r3, #9
 8000188:	d9e6      	bls.n	8000158 <run_sig+0xc>

	  }
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000000 	.word	0x20000000

08000198 <signal_up>:


void signal_up(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a2:	4805      	ldr	r0, [pc, #20]	; (80001b8 <signal_up+0x20>)
 80001a4:	f001 f806 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4802      	ldr	r0, [pc, #8]	; (80001b8 <signal_up+0x20>)
 80001b0:	f001 f800 	bl	80011b4 <HAL_GPIO_WritePin>

}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40010c00 	.word	0x40010c00

080001bc <signal_down>:
void signal_down(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001c6:	4805      	ldr	r0, [pc, #20]	; (80001dc <signal_down+0x20>)
 80001c8:	f000 fff4 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	4802      	ldr	r0, [pc, #8]	; (80001dc <signal_down+0x20>)
 80001d4:	f000 ffee 	bl	80011b4 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <delay_us>:

void delay_us (uint16_t us)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <delay_us+0x2c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2200      	movs	r2, #0
 80001f0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80001f2:	bf00      	nop
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <delay_us+0x2c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d3f9      	bcc.n	80001f4 <delay_us+0x14>
}
 8000200:	bf00      	nop
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000ac 	.word	0x200000ac

08000210 <run_led>:

void run_led(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - LED_timer >= 200) {
 8000214:	f000 fb52 	bl	80008bc <HAL_GetTick>
 8000218:	4602      	mov	r2, r0
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <run_led+0x50>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	2bc7      	cmp	r3, #199	; 0xc7
 8000222:	d91b      	bls.n	800025c <run_led+0x4c>
		if (LED_status == 0) {
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <run_led+0x54>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d109      	bne.n	8000240 <run_led+0x30>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000232:	480d      	ldr	r0, [pc, #52]	; (8000268 <run_led+0x58>)
 8000234:	f000 ffbe 	bl	80011b4 <HAL_GPIO_WritePin>
			LED_status = 1;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <run_led+0x54>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
 800023e:	e008      	b.n	8000252 <run_led+0x42>

			}
		else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <run_led+0x58>)
 8000248:	f000 ffb4 	bl	80011b4 <HAL_GPIO_WritePin>
			LED_status = 0;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <run_led+0x54>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
			}
		LED_timer = HAL_GetTick();
 8000252:	f000 fb33 	bl	80008bc <HAL_GetTick>
 8000256:	4603      	mov	r3, r0
 8000258:	4a01      	ldr	r2, [pc, #4]	; (8000260 <run_led+0x50>)
 800025a:	6013      	str	r3, [r2, #0]
	}

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	200000a8 	.word	0x200000a8
 8000264:	20000034 	.word	0x20000034
 8000268:	40010800 	.word	0x40010800

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 facc 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f81a 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f928 	bl	80004cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800027c:	f000 f872 	bl	8000364 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000280:	f000 f8ae 	bl	80003e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000284:	f000 f8f8 	bl	8000478 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <main+0x38>)
 800028a:	f001 fccb 	bl	8001c24 <HAL_TIM_Base_Start>
  LED_timer = HAL_GetTick();
 800028e:	f000 fb15 	bl	80008bc <HAL_GetTick>
 8000292:	4603      	mov	r3, r0
 8000294:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <main+0x3c>)
 8000296:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  run_led();
 8000298:	f7ff ffba 	bl	8000210 <run_led>
	  run_sig();
 800029c:	f7ff ff56 	bl	800014c <run_sig>
	  run_led();
 80002a0:	e7fa      	b.n	8000298 <main+0x2c>
 80002a2:	bf00      	nop
 80002a4:	200000ac 	.word	0x200000ac
 80002a8:	200000a8 	.word	0x200000a8

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b094      	sub	sp, #80	; 0x50
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 f816 	bl	80022ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff6e 	bl	80011e4 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800030e:	f000 f94d 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f9d8 	bl	80016e4 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800033a:	f000 f937 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800033e:	2302      	movs	r3, #2
 8000340:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000346:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fb64 	bl	8001a18 <HAL_RCCEx_PeriphCLKConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000356:	f000 f929 	bl	80005ac <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3750      	adds	r7, #80	; 0x50
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <MX_ADC1_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_ADC1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_ADC1_Init+0x74>)
 800038e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000392:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_ADC1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_ADC1_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_ADC1_Init+0x74>)
 80003a2:	f000 fa95 	bl	80008d0 <HAL_ADC_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 f8fe 	bl	80005ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003b0:	2308      	movs	r3, #8
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_ADC1_Init+0x74>)
 80003c2:	f000 fb5d 	bl	8000a80 <HAL_ADC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003cc:	f000 f8ee 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000038 	.word	0x20000038
 80003dc:	40012400 	.word	0x40012400

080003e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	463b      	mov	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_TIM2_Init+0x94>)
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_TIM2_Init+0x94>)
 8000406:	2247      	movs	r2, #71	; 0x47
 8000408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_TIM2_Init+0x94>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_TIM2_Init+0x94>)
 8000412:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_TIM2_Init+0x94>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_TIM2_Init+0x94>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000424:	4813      	ldr	r0, [pc, #76]	; (8000474 <MX_TIM2_Init+0x94>)
 8000426:	f001 fbad 	bl	8001b84 <HAL_TIM_Base_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000430:	f000 f8bc 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000438:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4619      	mov	r1, r3
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_TIM2_Init+0x94>)
 8000442:	f001 fc39 	bl	8001cb8 <HAL_TIM_ConfigClockSource>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800044c:	f000 f8ae 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_TIM2_Init+0x94>)
 800045e:	f001 fde7 	bl	8002030 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000468:	f000 f8a0 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000ac 	.word	0x200000ac

08000478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART1_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART1_UART_Init+0x4c>)
 80004b0:	f001 fe1c 	bl	80020ec <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f877 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000068 	.word	0x20000068
 80004c8:	40013800 	.word	0x40013800

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a2e      	ldr	r2, [pc, #184]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004e6:	f043 0320 	orr.w	r3, r3, #32
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0320 	and.w	r3, r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0308 	and.w	r3, r3, #8
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_GPIO_Init+0xd4>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000528:	2200      	movs	r2, #0
 800052a:	f24f 0104 	movw	r1, #61444	; 0xf004
 800052e:	481d      	ldr	r0, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xd8>)
 8000530:	f000 fe40 	bl	80011b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	481b      	ldr	r0, [pc, #108]	; (80005a8 <MX_GPIO_Init+0xdc>)
 800053c:	f000 fe3a 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000540:	2304      	movs	r3, #4
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000548:	2302      	movs	r3, #2
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4813      	ldr	r0, [pc, #76]	; (80005a4 <MX_GPIO_Init+0xd8>)
 8000558:	f000 fca8 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800055c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2302      	movs	r3, #2
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	480b      	ldr	r0, [pc, #44]	; (80005a4 <MX_GPIO_Init+0xd8>)
 8000576:	f000 fc99 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800057a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_GPIO_Init+0xdc>)
 8000594:	f000 fc8a 	bl	8000eac <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	40010800 	.word	0x40010800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_ADC_MspInit+0x6c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d121      	bne.n	8000680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_ADC_MspInit+0x70>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_ADC_MspInit+0x70>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_ADC_MspInit+0x74>)
 800067c:	f000 fc16 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40012400 	.word	0x40012400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010c00 	.word	0x40010c00

08000694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a4:	d10b      	bne.n	80006be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_TIM_Base_MspInit+0x34>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_TIM_Base_MspInit+0x34>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_TIM_Base_MspInit+0x34>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d131      	bne.n	8000750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_UART_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <HAL_UART_MspInit+0x90>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_UART_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_UART_MspInit+0x90>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_UART_MspInit+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <HAL_UART_MspInit+0x94>)
 8000732:	f000 fbbb 	bl	8000eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_UART_MspInit+0x94>)
 800074c:	f000 fbae 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013800 	.word	0x40013800
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f875 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
	...

080007c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007c2:	e003      	b.n	80007cc <LoopCopyDataInit>

080007c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ca:	3104      	adds	r1, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007cc:	480a      	ldr	r0, [pc, #40]	; (80007f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007d4:	d3f6      	bcc.n	80007c4 <CopyDataInit>
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007d8:	e002      	b.n	80007e0 <LoopFillZerobss>

080007da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007dc:	f842 3b04 	str.w	r3, [r2], #4

080007e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007e4:	d3f9      	bcc.n	80007da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007e6:	f7ff ffe4 	bl	80007b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f001 fd5b 	bl	80022a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fd3d 	bl	800026c <main>
  bx lr
 80007f2:	4770      	bx	lr
  ldr r3, =_sidata
 80007f4:	08002344 	.word	0x08002344
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007fc:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000800:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000804:	200000f8 	.word	0x200000f8

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 fb11 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff fec6 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fb1b 	bl	8000e92 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 faf1 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000000c 	.word	0x2000000c
 8000890:	20000014 	.word	0x20000014
 8000894:	20000010 	.word	0x20000010

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_IncTick+0x1c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x20>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <HAL_IncTick+0x20>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000014 	.word	0x20000014
 80008b8:	200000f4 	.word	0x200000f4

080008bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <HAL_GetTick+0x10>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	200000f4 	.word	0x200000f4

080008d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0be      	b.n	8000a70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fe84 	bl	800061c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f9ab 	bl	8000c70 <ADC_ConversionStop_Disable>
 800091a:	4603      	mov	r3, r0
 800091c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8099 	bne.w	8000a5e <HAL_ADC_Init+0x18e>
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f040 8095 	bne.w	8000a5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800093c:	f023 0302 	bic.w	r3, r3, #2
 8000940:	f043 0202 	orr.w	r2, r3, #2
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000950:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7b1b      	ldrb	r3, [r3, #12]
 8000956:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000958:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	4313      	orrs	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000968:	d003      	beq.n	8000972 <HAL_ADC_Init+0xa2>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <HAL_ADC_Init+0xa8>
 8000972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000976:	e000      	b.n	800097a <HAL_ADC_Init+0xaa>
 8000978:	2300      	movs	r3, #0
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7d1b      	ldrb	r3, [r3, #20]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d119      	bne.n	80009bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7b1b      	ldrb	r3, [r3, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d109      	bne.n	80009a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	3b01      	subs	r3, #1
 8000996:	035a      	lsls	r2, r3, #13
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	e00b      	b.n	80009bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a8:	f043 0220 	orr.w	r2, r3, #32
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b4:	f043 0201 	orr.w	r2, r3, #1
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <HAL_ADC_Init+0x1a8>)
 80009d8:	4013      	ands	r3, r2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	430b      	orrs	r3, r1
 80009e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009ec:	d003      	beq.n	80009f6 <HAL_ADC_Init+0x126>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	051b      	lsls	r3, r3, #20
 80009fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	430a      	orrs	r2, r1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_ADC_Init+0x1ac>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10b      	bne.n	8000a3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2e:	f023 0303 	bic.w	r3, r3, #3
 8000a32:	f043 0201 	orr.w	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a3a:	e018      	b.n	8000a6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	f023 0312 	bic.w	r3, r3, #18
 8000a44:	f043 0210 	orr.w	r2, r3, #16
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a5c:	e007      	b.n	8000a6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a62:	f043 0210 	orr.w	r2, r3, #16
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	ffe1f7fd 	.word	0xffe1f7fd
 8000a7c:	ff1f0efe 	.word	0xff1f0efe

08000a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d101      	bne.n	8000aa0 <HAL_ADC_ConfigChannel+0x20>
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e0dc      	b.n	8000c5a <HAL_ADC_ConfigChannel+0x1da>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b06      	cmp	r3, #6
 8000aae:	d81c      	bhi.n	8000aea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	3b05      	subs	r3, #5
 8000ac2:	221f      	movs	r2, #31
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4019      	ands	r1, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	3b05      	subs	r3, #5
 8000adc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae8:	e03c      	b.n	8000b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b0c      	cmp	r3, #12
 8000af0:	d81c      	bhi.n	8000b2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	3b23      	subs	r3, #35	; 0x23
 8000b04:	221f      	movs	r2, #31
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4019      	ands	r1, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	3b23      	subs	r3, #35	; 0x23
 8000b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
 8000b2a:	e01b      	b.n	8000b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3b41      	subs	r3, #65	; 0x41
 8000b3e:	221f      	movs	r2, #31
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4019      	ands	r1, r3
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	3b41      	subs	r3, #65	; 0x41
 8000b58:	fa00 f203 	lsl.w	r2, r0, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d91c      	bls.n	8000ba6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68d9      	ldr	r1, [r3, #12]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b1e      	subs	r3, #30
 8000b7e:	2207      	movs	r2, #7
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4019      	ands	r1, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6898      	ldr	r0, [r3, #8]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	3b1e      	subs	r3, #30
 8000b98:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	e019      	b.n	8000bda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6919      	ldr	r1, [r3, #16]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4019      	ands	r1, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	6898      	ldr	r0, [r3, #8]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	fa00 f203 	lsl.w	r2, r0, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000be6:	2b11      	cmp	r3, #17
 8000be8:	d132      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_ADC_ConfigChannel+0x1e4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d125      	bne.n	8000c40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d126      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c10:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b10      	cmp	r3, #16
 8000c18:	d11a      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_ADC_ConfigChannel+0x1ec>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	0c9a      	lsrs	r2, r3, #18
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c30:	e002      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f9      	bne.n	8000c32 <HAL_ADC_ConfigChannel+0x1b2>
 8000c3e:	e007      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f043 0220 	orr.w	r2, r3, #32
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40012400 	.word	0x40012400
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	431bde83 	.word	0x431bde83

08000c70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d127      	bne.n	8000cda <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c9a:	f7ff fe0f 	bl	80008bc <HAL_GetTick>
 8000c9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ca0:	e014      	b.n	8000ccc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ca2:	f7ff fe0b 	bl	80008bc <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d90d      	bls.n	8000ccc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f043 0210 	orr.w	r2, r3, #16
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	f043 0201 	orr.w	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e007      	b.n	8000cdc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d0e3      	beq.n	8000ca2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff90 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff49 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff90 	bl	8000d9c <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5f 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb0 	bl	8000e00 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e169      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8158 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a9a      	ldr	r2, [pc, #616]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d05e      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a98      	ldr	r2, [pc, #608]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d875      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000eee:	4a98      	ldr	r2, [pc, #608]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d058      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a96      	ldr	r2, [pc, #600]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d86f      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000efa:	4a96      	ldr	r2, [pc, #600]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d052      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f00:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d869      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f06:	4a94      	ldr	r2, [pc, #592]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d04c      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f0c:	4a92      	ldr	r2, [pc, #584]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d863      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f12:	4a92      	ldr	r2, [pc, #584]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d046      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f18:	4a90      	ldr	r2, [pc, #576]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d85d      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d82a      	bhi.n	8000f78 <HAL_GPIO_Init+0xcc>
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d859      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <HAL_GPIO_Init+0x80>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000fa7 	.word	0x08000fa7
 8000f30:	08000f81 	.word	0x08000f81
 8000f34:	08000f93 	.word	0x08000f93
 8000f38:	08000fd5 	.word	0x08000fd5
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	08000fdb 	.word	0x08000fdb
 8000f44:	08000fdb 	.word	0x08000fdb
 8000f48:	08000fdb 	.word	0x08000fdb
 8000f4c:	08000fdb 	.word	0x08000fdb
 8000f50:	08000fdb 	.word	0x08000fdb
 8000f54:	08000fdb 	.word	0x08000fdb
 8000f58:	08000fdb 	.word	0x08000fdb
 8000f5c:	08000fdb 	.word	0x08000fdb
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fdb 	.word	0x08000fdb
 8000f68:	08000fdb 	.word	0x08000fdb
 8000f6c:	08000fdb 	.word	0x08000fdb
 8000f70:	08000f89 	.word	0x08000f89
 8000f74:	08000f9d 	.word	0x08000f9d
 8000f78:	4a79      	ldr	r2, [pc, #484]	; (8001160 <HAL_GPIO_Init+0x2b4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7e:	e02c      	b.n	8000fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e029      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	623b      	str	r3, [r7, #32]
          break;
 8000f90:	e024      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	3308      	adds	r3, #8
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e01f      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	330c      	adds	r3, #12
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e01a      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e013      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e009      	b.n	8000fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          break;
 8000fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d801      	bhi.n	8000fe6 <HAL_GPIO_Init+0x13a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	e001      	b.n	8000fea <HAL_GPIO_Init+0x13e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d802      	bhi.n	8000ff8 <HAL_GPIO_Init+0x14c>
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x152>
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3b08      	subs	r3, #8
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	210f      	movs	r1, #15
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	6a39      	ldr	r1, [r7, #32]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80b1 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_GPIO_Init+0x2c0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_GPIO_Init+0x1ec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_GPIO_Init+0x2c4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x1e8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3e      	ldr	r2, [pc, #248]	; (8001174 <HAL_GPIO_Init+0x2c8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x1e4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <HAL_GPIO_Init+0x2cc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x1e0>
 8001088:	2303      	movs	r3, #3
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 800108c:	2304      	movs	r3, #4
 800108e:	e004      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001090:	2302      	movs	r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001098:	2300      	movs	r3, #0
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	f002 0203 	and.w	r2, r2, #3
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	4093      	lsls	r3, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010aa:	492f      	ldr	r1, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	492c      	ldr	r1, [pc, #176]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4922      	ldr	r1, [pc, #136]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	491e      	ldr	r1, [pc, #120]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	4918      	ldr	r1, [pc, #96]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4914      	ldr	r1, [pc, #80]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800112c:	4013      	ands	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	60cb      	str	r3, [r1, #12]
 8001148:	e021      	b.n	800118e <HAL_GPIO_Init+0x2e2>
 800114a:	bf00      	nop
 800114c:	10320000 	.word	0x10320000
 8001150:	10310000 	.word	0x10310000
 8001154:	10220000 	.word	0x10220000
 8001158:	10210000 	.word	0x10210000
 800115c:	10120000 	.word	0x10120000
 8001160:	10110000 	.word	0x10110000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	43db      	mvns	r3, r3
 8001188:	4909      	ldr	r1, [pc, #36]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800118a:	4013      	ands	r3, r2
 800118c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	3301      	adds	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f ae8e 	bne.w	8000ec0 <HAL_GPIO_Init+0x14>
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	372c      	adds	r7, #44	; 0x2c
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	611a      	str	r2, [r3, #16]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e26c      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8087 	beq.w	8001312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b04      	cmp	r3, #4
 800120e:	d00c      	beq.n	800122a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001210:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d112      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d10b      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06c      	beq.n	8001310 <HAL_RCC_OscConfig+0x12c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d168      	bne.n	8001310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e246      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x76>
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7f      	ldr	r2, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7a      	ldr	r2, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a77      	ldr	r2, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0xbc>
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a71      	ldr	r2, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a6a      	ldr	r2, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fafc 	bl	80008bc <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff faf8 	bl	80008bc <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1fa      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe4>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fae8 	bl	80008bc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fae4 	bl	80008bc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1e6      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x10c>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1ba      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa9d 	bl	80008bc <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fa99 	bl	80008bc <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e19b      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fa7c 	bl	80008bc <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fa78 	bl	80008bc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e17a      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03a      	beq.n	8001468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d019      	beq.n	800142e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fa5c 	bl	80008bc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fa58 	bl	80008bc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e15a      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 fad8 	bl	80019dc <RCC_Delay>
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fa42 	bl	80008bc <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e00f      	b.n	800145c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fa3e 	bl	80008bc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d908      	bls.n	800145c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e140      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000
 8001458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	4b9e      	ldr	r3, [pc, #632]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e9      	bne.n	800143c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a6 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b97      	ldr	r3, [pc, #604]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b94      	ldr	r3, [pc, #592]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b91      	ldr	r3, [pc, #580]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a8a      	ldr	r2, [pc, #552]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9ff 	bl	80008bc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff f9fb 	bl	80008bc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0fd      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b81      	ldr	r3, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014e8:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x334>
 80014fe:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a75      	ldr	r2, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b73      	ldr	r3, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x356>
 8001520:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a6c      	ldr	r2, [pc, #432]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f9af 	bl	80008bc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff f9ab 	bl	80008bc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0ab      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x37e>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff f999 	bl	80008bc <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff f995 	bl	80008bc <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e095      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8081 	beq.w	80016ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d061      	beq.n	800169c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d146      	bne.n	800166e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff f969 	bl	80008bc <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff f965 	bl	80008bc <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e067      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	492d      	ldr	r1, [pc, #180]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a19      	ldr	r1, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	430b      	orrs	r3, r1
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff f939 	bl	80008bc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f935 	bl	80008bc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e037      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
 800166c:	e02f      	b.n	80016ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f922 	bl	80008bc <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff f91e 	bl	80008bc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e020      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x498>
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e013      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42420060 	.word	0x42420060

080016e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0d0      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d910      	bls.n	8001728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	4965      	ldr	r1, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800174a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d040      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d115      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e073      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06b      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4936      	ldr	r1, [pc, #216]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff f872 	bl	80008bc <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff f86e 	bl	80008bc <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e053      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d210      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4922      	ldr	r1, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	490a      	ldr	r1, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1cc>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ffd0 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08002324 	.word	0x08002324
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000010 	.word	0x20000010

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018c0:	1d3c      	adds	r4, r7, #4
 80018c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018c8:	f240 2301 	movw	r3, #513	; 0x201
 80018cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x46>
 80018f6:	e02d      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fa:	623b      	str	r3, [r7, #32]
      break;
 80018fc:	e02d      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800190a:	4413      	add	r3, r2
 800190c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001910:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_GetSysClockFreq+0xb4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0c5b      	lsrs	r3, r3, #17
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800192a:	4413      	add	r3, r2
 800192c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001936:	fb02 f203 	mul.w	r2, r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e004      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	623b      	str	r3, [r7, #32]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001956:	623b      	str	r3, [r7, #32]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	6a3b      	ldr	r3, [r7, #32]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bc90      	pop	{r4, r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	08002314 	.word	0x08002314
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	003d0900 	.word	0x003d0900

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	2000000c 	.word	0x2000000c

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08002334 	.word	0x08002334

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffde 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0adb      	lsrs	r3, r3, #11
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08002334 	.word	0x08002334

080019dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <RCC_Delay+0x34>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <RCC_Delay+0x38>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f8:	bf00      	nop
  }
  while (Delay --);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	60fa      	str	r2, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f9      	bne.n	80019f8 <RCC_Delay+0x1c>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	10624dd3 	.word	0x10624dd3

08001a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d07d      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a4b      	ldr	r2, [pc, #300]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	61d3      	str	r3, [r2, #28]
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d118      	bne.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a78:	f7fe ff20 	bl	80008bc <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7e:	e008      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a80:	f7fe ff1c 	bl	80008bc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e06d      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d02e      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d027      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ac4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ad2:	4a29      	ldr	r2, [pc, #164]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d014      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe feeb 	bl	80008bc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe fee7 	bl	80008bc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e036      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4917      	ldr	r1, [pc, #92]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	490b      	ldr	r1, [pc, #44]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420440 	.word	0x42420440

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fd72 	bl	8000694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f93c 	bl	8001e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_Base_Start+0x88>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIM_Base_Start+0x48>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_Base_Start+0x48>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_Base_Start+0x8c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_Base_Start+0x48>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_Base_Start+0x90>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d010      	beq.n	8001ca0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8e:	e007      	b.n	8001ca0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_TIM_ConfigClockSource+0x18>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0b3      	b.n	8001e38 <HAL_TIM_ConfigClockSource+0x180>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d08:	d03e      	beq.n	8001d88 <HAL_TIM_ConfigClockSource+0xd0>
 8001d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0e:	f200 8087 	bhi.w	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d16:	f000 8085 	beq.w	8001e24 <HAL_TIM_ConfigClockSource+0x16c>
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d87f      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d20:	2b70      	cmp	r3, #112	; 0x70
 8001d22:	d01a      	beq.n	8001d5a <HAL_TIM_ConfigClockSource+0xa2>
 8001d24:	2b70      	cmp	r3, #112	; 0x70
 8001d26:	d87b      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d28:	2b60      	cmp	r3, #96	; 0x60
 8001d2a:	d050      	beq.n	8001dce <HAL_TIM_ConfigClockSource+0x116>
 8001d2c:	2b60      	cmp	r3, #96	; 0x60
 8001d2e:	d877      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d30:	2b50      	cmp	r3, #80	; 0x50
 8001d32:	d03c      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0xf6>
 8001d34:	2b50      	cmp	r3, #80	; 0x50
 8001d36:	d873      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d058      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x136>
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	d86f      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d40:	2b30      	cmp	r3, #48	; 0x30
 8001d42:	d064      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x156>
 8001d44:	2b30      	cmp	r3, #48	; 0x30
 8001d46:	d86b      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d060      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x156>
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d867      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d05c      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x156>
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d05a      	beq.n	8001e0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d58:	e062      	b.n	8001e20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f000 f942 	bl	8001ff2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	609a      	str	r2, [r3, #8]
      break;
 8001d86:	e04e      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f000 f92b 	bl	8001ff2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001daa:	609a      	str	r2, [r3, #8]
      break;
 8001dac:	e03b      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f000 f8a2 	bl	8001f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2150      	movs	r1, #80	; 0x50
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f8f9 	bl	8001fbe <TIM_ITRx_SetConfig>
      break;
 8001dcc:	e02b      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f000 f8c0 	bl	8001f60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2160      	movs	r1, #96	; 0x60
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f8e9 	bl	8001fbe <TIM_ITRx_SetConfig>
      break;
 8001dec:	e01b      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f000 f882 	bl	8001f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f8d9 	bl	8001fbe <TIM_ITRx_SetConfig>
      break;
 8001e0c:	e00b      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 f8d0 	bl	8001fbe <TIM_ITRx_SetConfig>
        break;
 8001e1e:	e002      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00b      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d007      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <TIM_Base_SetConfig+0xbc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <TIM_Base_SetConfig+0xc0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <TIM_Base_SetConfig+0xbc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <TIM_Base_SetConfig+0xc0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800

08001f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f023 0201 	bic.w	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 030a 	bic.w	r3, r3, #10
 8001f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	621a      	str	r2, [r3, #32]
}
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f023 0210 	bic.w	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	031b      	lsls	r3, r3, #12
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	621a      	str	r2, [r3, #32]
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f043 0307 	orr.w	r3, r3, #7
 8001fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800200c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	431a      	orrs	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4313      	orrs	r3, r2
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	609a      	str	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002044:	2302      	movs	r3, #2
 8002046:	e046      	b.n	80020d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00e      	beq.n	80020aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d009      	beq.n	80020aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10c      	bne.n	80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800

080020ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e03f      	b.n	800217e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fada 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f829 	bl	8002188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021c2:	f023 030c 	bic.w	r3, r3, #12
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <UART_SetConfig+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d103      	bne.n	80021f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021f0:	f7ff fbe0 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	e002      	b.n	80021fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021f8:	f7ff fbc8 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 80021fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009a      	lsls	r2, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <UART_SetConfig+0x118>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	0119      	lsls	r1, r3, #4
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009a      	lsls	r2, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fbb2 f2f3 	udiv	r2, r2, r3
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <UART_SetConfig+0x118>)
 8002236:	fba3 0302 	umull	r0, r3, r3, r2
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2064      	movs	r0, #100	; 0x64
 800223e:	fb00 f303 	mul.w	r3, r0, r3
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	3332      	adds	r3, #50	; 0x32
 8002248:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <UART_SetConfig+0x118>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002254:	4419      	add	r1, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009a      	lsls	r2, r3, #2
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <UART_SetConfig+0x118>)
 800226e:	fba3 0302 	umull	r0, r3, r3, r2
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2064      	movs	r0, #100	; 0x64
 8002276:	fb00 f303 	mul.w	r3, r0, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	3332      	adds	r3, #50	; 0x32
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <UART_SetConfig+0x118>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	f003 020f 	and.w	r2, r3, #15
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	440a      	add	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013800 	.word	0x40013800
 80022a0:	51eb851f 	.word	0x51eb851f

080022a4 <__libc_init_array>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	2600      	movs	r6, #0
 80022a8:	4d0c      	ldr	r5, [pc, #48]	; (80022dc <__libc_init_array+0x38>)
 80022aa:	4c0d      	ldr	r4, [pc, #52]	; (80022e0 <__libc_init_array+0x3c>)
 80022ac:	1b64      	subs	r4, r4, r5
 80022ae:	10a4      	asrs	r4, r4, #2
 80022b0:	42a6      	cmp	r6, r4
 80022b2:	d109      	bne.n	80022c8 <__libc_init_array+0x24>
 80022b4:	f000 f822 	bl	80022fc <_init>
 80022b8:	2600      	movs	r6, #0
 80022ba:	4d0a      	ldr	r5, [pc, #40]	; (80022e4 <__libc_init_array+0x40>)
 80022bc:	4c0a      	ldr	r4, [pc, #40]	; (80022e8 <__libc_init_array+0x44>)
 80022be:	1b64      	subs	r4, r4, r5
 80022c0:	10a4      	asrs	r4, r4, #2
 80022c2:	42a6      	cmp	r6, r4
 80022c4:	d105      	bne.n	80022d2 <__libc_init_array+0x2e>
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022cc:	4798      	blx	r3
 80022ce:	3601      	adds	r6, #1
 80022d0:	e7ee      	b.n	80022b0 <__libc_init_array+0xc>
 80022d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d6:	4798      	blx	r3
 80022d8:	3601      	adds	r6, #1
 80022da:	e7f2      	b.n	80022c2 <__libc_init_array+0x1e>
 80022dc:	0800233c 	.word	0x0800233c
 80022e0:	0800233c 	.word	0x0800233c
 80022e4:	0800233c 	.word	0x0800233c
 80022e8:	08002340 	.word	0x08002340

080022ec <memset>:
 80022ec:	4603      	mov	r3, r0
 80022ee:	4402      	add	r2, r0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	f803 1b01 	strb.w	r1, [r3], #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	bf00      	nop
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
